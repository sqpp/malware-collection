<?php
require_once ('init.php');
//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(-1);
$user = JFactory::getUser();
$id = isset($_POST['id']) ? $_POST['id'] : 0;
$oid = isset($_POST['oid']) ? $_POST['oid'] : 0;
$pid = isset($_POST['pid']) ? $_POST['pid'] : 0;
$ids = isset($_POST['ids']) ? $_POST['ids'] : 0;
$elements = isset($_POST['elements']) ? $_POST['elements'] : "";
$orderid = isset($_POST['orderid']) ? $_POST['orderid'] : 0;
$userid = isset($_POST['userid']) ? $_POST['userid'] : 0;
$orderids = isset($_POST['orderids']) ? $_POST['orderids'] : 0;
$userid = isset($_POST['userid']) ? $_POST['userid'] : 0;
$task = isset($_POST['task']) ? $_POST['task'] : "";
$value = isset($_POST['value']) ? $_POST['value'] : 0;
$type = isset($_POST['type']) ? $_POST['type'] : "";
$emails = isset($_POST['emails']) ? $_POST['emails'] : "";
$email = isset($_POST['email']) ? $_POST['email'] : "";
$attachments = isset($_POST['attachments']) ? $_POST['attachments'] : "";
$oggetto = isset($_POST['oggetto']) ? $_POST['oggetto'] : "";
$messaggio = isset($_POST['messaggio']) ? $_POST['messaggio'] : "";
$data = isset($_POST['data']) ? $_POST['data'] : "";
$cmpn = isset($_POST['cmpn']) ? $_POST['cmpn'] : 0;
$cmpn_raw = isset($_POST['cmpn_raw']) ? $_POST['cmpn_raw'] : 0;
$str = isset($_POST['str']) ? $_POST['str'] : "";
$pb = isset($_POST['pb']) ? $_POST['pb'] : "";
$es = isset($_POST['es']) ? $_POST['es'] : "";
$esl = isset($_POST['esl']) ? $_POST['esl'] : "";
$esc = isset($_POST['esc']) ? $_POST['esc'] : "";
$molt = isset($_POST['molt']) ? $_POST['molt'] : "";
$zona = isset($_POST['zona']) ? $_POST['zona'] : "";
$zone = isset($_POST['zone']) ? $_POST['zone'] : "";
$id_zona = isset($_POST['id_zona']) ? $_POST['id_zona'] : "";
$origin_id = isset($_POST['origin_id']) ? $_POST['origin_id'] : "";
$drop_id = isset($_POST['drop_id']) ? $_POST['drop_id'] : "";
$items = isset($_POST['items']) ? $_POST['items'] : "";
$data = isset($_POST['data']) ? $_POST['data'] : "";
$field = isset($_POST['field']) ? $_POST['field'] : "";
$table = isset($_POST['table']) ? $_POST['table'] : "";
$inizio = isset($_POST['inizio']) ? $_POST['inizio'] : "";
$fine = isset($_POST['fine']) ? $_POST['fine'] : "";
$fido = isset($_POST['fido']) ? $_POST['fido'] : 0;
$keyword = isset($_POST['keyword']) ? $_POST['keyword'] : "";
$importo = isset($_POST['importo']) ? $_POST['importo'] : 0;
$tipologia = isset($_POST['tipologia']) ? $_POST['tipologia'] : "";
$note = isset($_POST['note']) ? $_POST['note'] : "";
$data_insoluto = isset($_POST['data_insoluto']) ? $_POST['data_insoluto'] : date("d-m-Y",time());
$data_creazione = isset($_POST['data_creazione']) ? $_POST['data_creazione'] : date("d-m-Y",time());
$tipo = isset($_POST['tipo']) ? $_POST['tipo'] : 0;
$scheda = isset($_POST['scheda']) ? $_POST['scheda'] : 0;
$numero = isset($_POST['numero']) ? $_POST['numero'] : 0;
switch($task) {
	case "assistance_status":
		assistance_status($id,$value);
		break;
	case "assistenza_sms":
		$response = assistenza_sms($id);
		$item = array('response' => $response);
		$result = json_encode($item);
		echo $result;
		break;
	case "note_agente":
		$html = note_agente($id);
		$html = array('html' => $html);
		$result = json_encode($html);
		echo $result;
		break;
	case "save_note_agente":
			$html = save_note_agente($id,$note);
		break;		
	case "details_order":
		$item = details_order($id);
		$item = array('item' => $item);
		$result = json_encode($item);
		echo $result;
		break;
	case "suggest_orders":
		$html = suggest_orders($keyword);
		$html = array('html' => $html);
		$result = json_encode($html);
		echo $result;
		break;
	case "suggest_products":
		$html = suggest_products($keyword);
		$html = array('html' => $html);
		$result = json_encode($html);
		echo $result;
		break;
	case "autocomplete":
		$items = autocomplete($value);
		$result = array('response' => $items);
		$result = json_encode($result);
		echo $result;
		break;
	case "analyze_listini":
		$html = analyze_listini($str);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "dettaglio_vendita":
		$html = dettaglio_vendita($id, $inizio, $fine);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "dettaglio_prestazione":
		$html = dettaglio_prestazione($id, $inizio, $fine, $userid);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "sort_table":
		sort_table($data,$field,$table);
		break;
	case "reorder_orders":
		reorder_orders($items);
		echo "";
		break;
	case "save_fatturazione_spedizione":
		$ids = save_fatturazione_spedizione($elements);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;	
		break;
	case "save_free_split":
		save_free_split($orderid,$origin_id,$drop_id);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "save_move_order":
		save_move_order($orderid,$id_zona);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "alert_order":
		$html = alert_order($orderid);
		$result = array('alert' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "alert_order_invert":
		alert_order_invert($ids);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "alert_order_plus":
		alert_order_plus($ids);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "alert_order_minus":
		alert_order_minus($ids);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "move_order":
		$html = move_order($orderid);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "free_split":
		$html = free_split($orderid);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "do_splits":
		$orderids = explode(",",$orderids);
		foreach($orderids as $orderid) {
			make_split($orderid);
		}
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "do_split":
		make_split($orderid);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "load_speditions":
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "read_messages":
		$html = read_messages($orderid);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "overlay_mail":
		$html = overlay_mail($userid,$orderid);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "overlay_mail_general":
		$html = overlay_mail_general($zone);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "overlay_mail_susa":
		$html = overlay_mail_susa();
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;	
	case "save_product_field":
		if($user->id == $userid) {
			$result = save_product_field($id,$userid,$value);	
		} else {
			$result = "Utente non riconosciuto";
		}
		echo $result;
		break;
	case "change_status_ecommerce" :
		$clear = change_status_ecommerce($ids);
		$result = array('clear' => $clear);
		$result = json_encode($result);
		echo $result;
		break;
	case "set_zona" :
		$html = set_zona($id, $tipo, $value, $scheda);
		//$result = array('html'=>$html);
		//$result = json_encode($result);
		//echo $result;
		break;
	case "edit_supplier_row" :
		edit_supplier_row($oid, $id, $pb, $es, $esl, $esc, $molt);
		$html = calc_cmpn_by_id($id);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_product" :
		$html = show_product($id);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "put_address":	
		$html = put_address(0, $id);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "search_pid" :
		$html = search_pid($str);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "set_cmpn" :
		$html = set_cmpn($id, $cmpn, $cmpn_raw);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "who_impegnati" :
		$obj = who_impegnati($id);
		$result = array('error' => $obj -> error, 'message' => $obj -> message, 'html' => $obj -> html);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_image" :
		$obj = show_image($id);
		$result = array('error' => $obj -> error, 'message' => $obj -> message, 'html' => $obj -> html);
		$result = json_encode($result);
		echo $result;
		break;
	case "save_history" :
		$obj = save_history($data, $user);
		$result = array('error' => $obj -> error, 'message' => $obj -> message);
		$result = json_encode($result);
		echo $result;
		break;
	case "add_history" :
		$html = add_history($id);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_history" :
		$html = show_history($id);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "move_emails" :
		$html = move_emails($type, $id);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "send_emails" :
		$html = send_emails($emails, $oggetto, $messaggio, $attachments);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "send_single_email" :
		$html = send_single_email($email, $userid, $orderid, $oggetto, $messaggio, $type);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "send_multiple_email" :
		$html = send_multiple_email($emails, $ids, $oggetto, $messaggio, $type);
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "save_ecommerce_spedizione":
		$ids = save_ecommerce_spedizione($elements);	
		$result = array('ids' => $ids);
		$result = json_encode($result);
		echo $result;	
		break;
	case "delete_ritiro":
		$esito = delete_ritiro($id);
		$result = array('esito' => $esito);
		$result = json_encode($result);
		echo $result;	
		break;	
	case "edit_corriere":
		edit_corriere($id,$orderid);	
		break;	
	case "make_split" :
		make_split($orderid);
		$html = "";
		$waypoints = get_waypoints($zone);
		foreach ($waypoints as $k => $waypoint) {
			if ($waypoint['userid'] == $userid) {
				$obj = check_order($waypoint, $zone);
				$not = "";
				if ($k == 0) {
					$not .= " unsortable";
				}

				if ($obj -> has_product) {
					$not .= " has-orders";
				}

				//if ($waypoint['userid'] == 0 || $obj -> has_product) {
				$html .= "<li data-userid='" . $waypoint['userid'] . "' data-order='" . $o . "' data-lat='" . $waypoint['lat'] . "' data-lng='" . $waypoint['lng'] . "' class='divAzienda ui-state-default" . $not . "'>";
				$html .= create_address($waypoint, $zone, $obj -> has_product);
				$html .= implode("", $obj -> list_product);
				$y = 5;
				foreach ($obj->split as $key => $value) {
					if ($value) {
						$html .= "<div class='has-split' style='top:" . $y . "px'>";
						$html .= "<div class='inside-split'>";
						$html .= "<i  data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-copy makeSplit' aria-hidden='true'></i>";
						$html .= "<div data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeSplit'>Split " . $key . "</div>";
						$html .= "</div>";
						$html .= "</div>";
						$y += 62;
					}
				}
				if ($obj -> has_referred) {
					foreach ($obj->merge as $key => $value) {
						if ($value) {
							$html .= "<div class='has-referred' style='top:" . $y . "px'>";
							$html .= "<div class='inside-referred'>";
							$html .= "<i data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-paste makeMerge' aria-hidden='true'></i>";
							$html .= "<div data-type='" . $zone . "'  data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeMerge'>Merge " . $key . "</div>";
							$html .= "</div>";
							$html .= "</div>";
							$y += 62;
						}
					}
				}
				$html .= "</li>";
				//}
				$o++;
			}
		}
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "make_merge" :
		make_merge($orderid);
		$html = "";
		$waypoints = get_waypoints($zone);
		foreach ($waypoints as $k => $waypoint) {
			if ($waypoint['userid'] == $userid) {
				$obj = check_order($waypoint, $zone);
				$not = "";
				if ($k == 0) {
					$not .= " unsortable";
				}

				if ($obj -> has_product) {
					$not .= " has-orders";
				}

				//if ($waypoint['userid'] == 0 || $obj -> has_product) {
				$html .= "<li data-userid='" . $waypoint['userid'] . "' data-order='" . $o . "' data-lat='" . $waypoint['lat'] . "' data-lng='" . $waypoint['lng'] . "' class='divAzienda ui-state-default" . $not . "'>";
				$html .= create_address($waypoint, $zone, $obj -> has_product);
				$html .= implode("", $obj -> list_product);
				$y = 5;
				foreach ($obj->split as $key => $value) {
					if ($value) {
						$html .= "<div class='has-split' style='top:" . $y . "px'>";
						$html .= "<div class='inside-split'>";
						$html .= "<i  data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-copy makeSplit' aria-hidden='true'></i>";
						$html .= "<div data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeSplit'>Split " . $key . "</div>";
						$html .= "</div>";
						$html .= "</div>";
						$y += 62;
					}
				}
				if ($obj -> has_referred) {
					foreach ($obj->merge as $key => $value) {
						if ($value) {
							$html .= "<div class='has-referred' style='top:" . $y . "px'>";
							$html .= "<div class='inside-referred'>";
							$html .= "<i data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-paste makeMerge' aria-hidden='true'></i>";
							$html .= "<div data-type='" . $zone . "'  data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeMerge'>Merge " . $key . "</div>";
							$html .= "</div>";
							$html .= "</div>";
							$y += 62;
						}
					}
				}
				$html .= "</li>";
				//}
				$o++;
			}
		}
		$result = array('html' => $html);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_assigned_product" :
		$status = show_assigned_product($id, $orderid);
		$result = array('stock' => $status-> stock, 'rimanenze' => $status -> rimanenze, 'disponibile' => $status -> disponibile, 'assegnato' => $status -> assegnato);
		$result = json_encode($result);
		echo $result;
		break;
	case "check_split" :	
		$ids = explode(",",$ids);
		foreach($ids as $orderid) {
			if(make_split($orderid,1)) {
				$result = array('split'=>true);
				$result = json_encode($result);
				echo $result;
				exit();
			}
		}
		$result = array('split'=>false);
		$result = json_encode($result);
		echo $result;
		break;
	case "upd_colli":
		upd_colli($orderid,$value);
		break;
	case "upd_stock_product" :
		upd_stock($id, $value);
		$html = load_speditions($zona);
		$result = array('html' => utf8_encode($html));
		$result = json_encode($result);
		echo $result;
		break;
	case "upd_stock_new" :
		upd_stock($id, $value);
		$status = show_assigned_product($id, $orderid);
		$split = make_split($orderid,1);
		$result = array('split'=>$split,'stock' => $status-> stock, 'rimanenze' => $status -> rimanenze, 'disponibile' => $status -> disponibile, 'assegnato' => $status -> assegnato);
		$result = json_encode($result);
		echo $result;
		break;
	case "upd_stop" :
		upd_stop($id, $value);
		break;
	case "upd_inventario" :
		upd_inventario($id, $value);
		break;
	case "upd_stock" :
		upd_stock($id, $value);
		if ($orderid && $userid) {
			$waypoints = get_waypoints();
			$html = "";
			$o = 1;
			foreach ($waypoints as $k => $waypoint) {
				if ($waypoint['userid'] == $userid) {
					$obj = check_order($waypoint, $zone);
					$not = "";
					if ($k == 0) {
						$not .= " unsortable";
					}

					if ($obj -> has_product) {
						$not .= " has-orders";
					}

					//if ($waypoint['userid'] == 0 || $obj -> has_product) {
					$html .= "<li data-userid='" . $waypoint['userid'] . "' data-order='" . $o . "' data-lat='" . $waypoint['lat'] . "' data-lng='" . $waypoint['lng'] . "' class='divAzienda ui-state-default" . $not . "'>";
					$html .= create_address($waypoint, $zone, $obj -> has_product);
					$html .= implode("", $obj -> list_product);
					$y = 5;
					foreach ($obj->split as $key => $value) {
						if ($value) {
							$html .= "<div class='has-split' style='top:" . $y . "px'>";
							$html .= "<div class='inside-split'>";
							$html .= "<i  data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-copy makeSplit' aria-hidden='true'></i>";
							$html .= "<div data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeSplit'>Split " . $key . "</div>";
							$html .= "</div>";
							$html .= "</div>";
							$y += 62;
						}
					}
					if ($obj -> has_referred) {
						foreach ($obj->merge as $key => $value) {
							if ($value) {
								$html .= "<div class='has-referred' style='top:" . $y . "px'>";
								$html .= "<div class='inside-referred'>";
								$html .= "<i data-type='" . $zone . "' data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='fa fa-paste makeMerge' aria-hidden='true'></i>";
								$html .= "<div data-type='" . $zone . "'  data-userid='" . $waypoint['userid'] . "' data-orderid='" . $key . "' class='makeMerge'>Merge " . $key . "</div>";
								$html .= "</div>";
								$html .= "</div>";
								$y += 62;
							}
						}
					}
					$html .= "</li>";
					//}
					$o++;
				}
			}
			$status = show_assigned_product($id, $orderid);
			$result = array('html' => $html, 'rimanenze' => $status -> rimanenze, 'disponibile' => $status -> disponibile, 'assegnato' => $status -> assegnato);
			$result = json_encode($result);
			echo $result;
		}
		break;
	case "del_label" :
		$error = del_label($id);
		$result = array('error' => $error);
		$result = json_encode($result);
		echo $result;
		break;
	case "upd_esposizione" :
		upd_esposizione($id, $value);
		break;
	case "upd_sostituzione" :
		upd_sostituzione($id, $value);
		break;
	case "upd_prenotati" :
		upd_prenotati($id, $value);
		break;
	case "check_globali" :
		$color = check_globali($id);
		$result = array('color' => $color);
		$result = json_encode($result);
		echo $result;
		break;
	case "check_inventario" :
		$color = check_inventario($id);
		$result = array('color' => $color);
		$result = json_encode($result);
		echo $result;
		break;
	case "save_fido":
		$response = save_fido($userid,$fido);
		$insoluto = get_insoluto($userid);
		$fido = get_fido($userid);
		$result = array("insoluto"=>$insoluto,"fido"=>$fido,"html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_virtuali":
		$response = show_virtuali($id);
		$result = array("html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "rem_virtuali":
		$virtuali = rem_virtuali($id,$pid,$value);
		$response = show_virtuali($pid);
		$result = array("html"=> $response, "virtuali" => $virtuali);
		$result = json_encode($result);
		echo $result;
		break;
	case "add_virtuali":
		$virtuali = add_virtuali($pid,$value);
		$response = show_virtuali($pid);
		$result = array("html"=> $response, "virtuali" => $virtuali);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_prezzi":
		$response = show_prezzi($id);
		$result = array("html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_quantita":
		$response = show_quantita($id);
		$result = array("html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "show_insoluti":
		$response = show_insoluti($userid);
		$result = array("html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "save_insoluto":
		$response = save_insoluto($id,$userid,$importo,$tipologia,$note,$data_insoluto,$data_creazione);
		$insoluto = get_insoluto($userid);
		$fido = get_fido($userid);
		$result = array("insoluto"=>$insoluto,"fido"=>$fido,"html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "delete_insoluto":
		$response = delete_insoluto($id,$userid);
		$insoluto = get_insoluto($userid);
		$fido = get_fido($userid);
		$result = array("insoluto"=>$insoluto,"fido"=>$fido,"html"=> $response);
		$result = json_encode($result);
		echo $result;
		break;
	case "change_categoria_ingrosso":
		$product = array();
		$product["categoria_ingrosso"] = $value;
		RProducts::update_item($id,$product);
	break;
	case "modify_costs":
		$costi = new Costi;
		$costi -> edit_item($id,$field,$value);
		$result = array("data_modifica"=>$costi -> data_modifica);
		$result = json_encode($result);
		echo $result;
	break;
	case "delete_costs":
		$costi = new Costi;
		$costi -> delete_item($id);
	break;
	case "update_product":
		$prodotti = new RProducts;
		$prodotti -> update_item($id,array($field=>$value));
	break;
}
