<?php
if (!defined('DEBUG_MODE')){
  define('DEBUG_MODE', false);
}
//requirements
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require_once (dirname(__FILE__) . '/PHPMailer/src/Exception.php');
require_once (dirname(__FILE__) . '/PHPMailer/src/PHPMailer.php');
require_once (dirname(__FILE__) . '/PHPMailer/src/SMTP.php');
require_once (dirname(__FILE__) . '/forms/form.php');

//require database
require_once (dirname(__FILE__) . '/c__++llass+---lass/Db.php');
$db_queries = new DBQueries();
$db_inserts = new DBInserts();
$db_updates = new DBUpdates();
$db_deletes = new DBDeletes();
$user_data = new UserData();

if(DEBUG_MODE){
  clearstatcache();
  function handle_fatal_error() {
    $error = error_get_last();
    if (is_array($error)) {
        $errorCode = $error['type'] ?? 0;
        $errorMsg = $error['message'] ?? '';
        $file = $error['file'] ?? '';
        $line = $error['line'] ?? null;

        if ($errorCode > 0) {
            handle_error($errorCode, $errorMsg, $file, $line);
        }
    }
}
function handle_error($code, $msg, $file, $line) {

    if($action){
        //header('HTTP/1.1 500 Internal Server Error');
        //http_response_code(500);
        //header("Location: https://www.vistaassetplus.com/500");
    }
     echo $code . ': '. $msg . 'in ' . $file . 'on line ' . $line;
}
set_error_handler("handle_error");
register_shutdown_function('handle_fatal_error');
}


//Custom Query
function customQuery($sql, $params, $type){
    return $GLOBALS['db_queries']->CustomQuery($sql, $params, $type);
}

//Custom Update
function customUpdate($sql, $params){
   return $GLOBALS['db_updates']->CustomUpdate($sql, $params); 
}

//Custom Insert
function customInsert($sql, $params){
  return $GLOBALS['db_inserts']->CustomInsert($sql, $params); 
}

//Paginate Query
function paginateQuery($sql, $params){
    return $GLOBALS['db_queries']->PaginateQuery($sql, $params);
}
//Custom delete
function customDelete($sql, $param){
    return $GLOBALS['db_deletes']->CustomDelete($sql, $param);
}

function apiFormToken($user_id, $title_tmp){
  $uid = trim($user_id);
  $title = trim($title_tmp);
  $timeout = 1800; //secs - 30 mins 

  $apiNonce =  NonceUtil::generate(NONCE_SECRET, $uid, $title, $timeout);
  $apiNonceTmp = explode(',', $apiNonce);
  $apiNonce1 = $apiNonceTmp[0];
  $apiNonce2 = $apiNonceTmp[1];
  $apiNonce3 = $apiNonceTmp[2];
  $apiNonce4 = $apiNonceTmp[3];
  $theApiNonce = $apiNonce1.'--'.$apiNonce2.'--'.$apiNonce3.'--'.$apiNonce4;

  return $theApiNonce;
}

function pageToken($user_id, $title_tmp){
    $uid = trim($user_id);
    $title = trim($title_tmp);    
    $timeout = 600; //secs - 10 mins

    $pageNonce = NonceUtil::generate(NONCE_SECRET, $uid, $title, $timeout);

    $pageNonceTmp = explode(',', $pageNonce);
    $pageNonce1 = $pageNonceTmp[0];
    $pageNonce2 = $pageNonceTmp[1];
    $pageNonce3 = $pageNonceTmp[2];
    $pageNonce4 = $pageNonceTmp[3];
    $thePageNonce = $pageNonce1.'--'.$pageNonce2.'--'.$pageNonce3.'--'.$pageNonce4;
    return $thePageNonce;

}

function abbreviate($n, $precision = 1) {
	if ($n < 900) {
		// 0 - 900
		$n_format = number_format($n, $precision);
		$suffix = '';
	} else if ($n < 900000) {
		// 0.9k-850k
		$n_format = number_format($n / 1000, $precision);
		$suffix = 'K';
	} else if ($n < 900000000) {
		// 0.9m-850m
		$n_format = number_format($n / 1000000, $precision);
		$suffix = 'M';
	} else if ($n < 900000000000) {
		// 0.9b-850b
		$n_format = number_format($n / 1000000000, $precision);
		$suffix = 'B';
	} else {
		// 0.9t+
		$n_format = number_format($n / 1000000000000, $precision);
		$suffix = 'T';
	}
  // Remove unecessary zeroes after decimal. "1.0" -> "1"; "1.00" -> "1"
  // Intentionally does not affect partials, eg "1.50" -> "1.50"
	if ( $precision > 0 ) {
		$dotzero = '.' . str_repeat( '0', $precision );
		$n_format = str_replace( $dotzero, '', $n_format );
	}
	$retval =  $n_format . $suffix;
     return $retval;
}

  function check_filename_chars($filename){
    /*
    * check for file name characters
    */
    return (bool) ((preg_match("`^[-0-9A-Z_\.]+$`i",$filename)) ? true : false);
  }
  function check_filename_length ($filename){
    /*
    * @ check for file name length
    */
    return (bool) ((mb_strlen($filename,"UTF-8") > 225) ? true : false);
}

function isValidUrl($url){
  // first do some quick sanity checks:
  if(!$url || !is_string($url)){
      return false;
  }
  // quick check url is roughly a valid http request: ( http://blah/... ) 
  if( preg_match('/^((?:http:\/\/)|(?:https:\/\/))(www.)?((?:[a-zA-Z0-9]+\.[a-z]{3})|(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1(?::\d+)?))([\/a-zA-Z0-9\.]*)$/i', $url) ){
      return true;
  }
  return false;
}

function reconstruct_url($url){    
  /**
  * @url    : the Url to reconstruct
  * @source : stackoverflow https://stackoverflow.com/questions/6969645/how-to-remove-the-querystring-and-get-only-the-url
  **/

  $url_parts = parse_url($url);
  $constructed_url = $url_parts['scheme'] . '://' . $url_parts['host'] . (isset($url_parts['path'])?$url_parts['path']:'');

  $retval = array(
    "url" => $constructed_url,
    "host"=> $url_parts['host'],
    "path" => $url_parts['path']
  );

  return $retval;
}

function get_domain($host){
  //https://stackoverflow.com/questions/1201194/php-getting-domain-name-from-subdomain
  
  $myhost = strtolower(trim($host));
  $count = substr_count($myhost, '.');
  if($count === 2){
    if(strlen(explode('.', $myhost)[1]) > 3) $myhost = explode('.', $myhost, 2)[1];
  } else if($count > 2){
    $myhost = get_domain(explode('.', $myhost, 2)[1]);
  }
  return $myhost;
}

function pingUrl($url){
  /**
  * @url    : The url to ping
  * @source : https://stackoverflow.com/questions/981954/how-can-one-check-to-see-if-a-remote-file-exists-using-php/982045#982045
  **/
  $url = trim($url);
  if(!$url || !is_string($url)){
      return false;
  }
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_NOBODY, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); 
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10); //timeout after 10secs
  curl_exec($ch);
$retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  if ($retcode == 200) { 
    return true;
  }
  
  return false;
  // $retcode >= 400 -> not found, $retcode = 200, found.
  
}

function doError($status = 406, $error){
  //Easily print out errors to the user
    $retval = array(
        "status" => $status,
        "message" => $error
        );
    http_response_code($status);
    return (print_r(json_encode($retval)).exit());          
}

function rateFlow($uid, $did){
  /**
  * rateFlow: calculates the Number of ratings accured within a week by a Domain
  * @uid : User id
  * @did : Domain ID
  **/

  $uid = str_replace(" ", "", $uid);
  $did = str_Replace(" ", "", $did);
  $time_span = strtotime("+7 days", time());

  $preFlow = $GLOBALS['db_queries']->CustomQuery("SELECT * FROM rate_flow WHERE user_id = :uid AND domain_id = :did", ['uid' => $uid, 'did' => $did], 'single');

  $id = $preFlow['id'];
  $likes = $preFlow['likes'] + 1;

  if($preFlow){
    if(time() > $preFlow['date_modified']){
      //Reset the likes count
      $updFlow = $GLOBALS['db_updates']->CustomUpdate("UPDATE rate_flow SET likes = :likes, date_modified = :date WHERE id = :id", ['likes' =>1, 'id' => $id, 'date' => $time_span]);
    }else{
      //update likes count
      $updFlow = $GLOBALS['db_updates']->CustomUpdate("UPDATE rate_flow SET likes = :likes WHERE id = :id", ['likes' =>$likes, 'id' => $id]);
    }
   
    
  return true;

  }else{

    $newFlowSql = "INSERT INTO rate_flow (user_id, domain_id, likes, date_modified) VALUES (:uid, :did, :likes, :date)";
    $newFlowParams= [
      "uid" => $uid,
      "did" => $did,
      "likes" => 1,
      "date" => $time_span
    ];
    $newFlow = $GLOBALS['db_inserts']->CustomInsert($newFlowSql, $newFlowParams);
    return true;
  }
return false;
}


function checkGmasUserData($email_tmp, $type){
  /*
  * @checkGmasUseImage : verifies the image and name used by a gmas user and duplicates it in all reviews that the user makes
  * @email : The email address of the user
  */

  //we trust that email is already validated :)
  $email = trim(filter_var($email_tmp, FILTER_SANITIZE_EMAIL));
  $image = null;

  if($type == 'single'){
    //retrieve first feedback
    $firstFeedback = $GLOBALS['db_queries']->CustomQuery("SELECT * FROM feedback WHERE guest_email = :email AND guest_image IS NOT NULL ORDER BY id ASC", ['email' => $email], 'single');
    $image = $firstFeedback['guest_image'];
    $name = $firstFeedback['guest_name'];
  }else{
    //retrieve first feedback
    $firstFeedback = $GLOBALS['db_queries']->CustomQuery("SELECT * FROM products_feedback WHERE guest_email = :email AND guest_image IS NOT NULL ORDER BY id ASC", ['email' => $email], 'single');

    $image = $firstFeedback['guest_image'];
    $name = $firstFeedback['guest_name'];
  }
  
  //Use his first image or allow him to upload any
  return array ( 
    "name" => ($name) ? $name : false,
    "image" => ($image) ? $image : false,
    "location" => false
  );
}

//check most star given by user
function checkGmasFeedbackUserMostStars($id_tmp, $email_tmp, $type_tmp){
  /*
                ==========LOGIC==========
  * retrieve stars rated by user from database by counting its duplicates
  * create an array and push the duplicates inside it ( $toCount )
  * find the max value of that array ( $to count ) and store in a variable
  * make the array containing duplicates unique ( $unique = array_unique($to count ))
  * Now find duplicates again like here ( https://newbedev.com/javascript-find-duplicate-values-in-array-php-code-example ) and store in a variable ( $duplicates )
  * Now search for the max value in the duplicates array to retrieve the index
  * Once the index is found, use it to retrieve the stars from ( $starCount ) containing our database logic
  */
  
  $email = trim($email_tmp);
  $id = intval(trim($id_tmp));
  $type = trim($type_tmp);

  if($type == 'single'){
    $feedback = customQuery("SELECT * FROM feedback WHERE id = :id",['id' => $id], 'single');
    $email = $feedback['guest_email']; //email
    
    $starCount = customQuery("SELECT stars, COUNT(stars) FROM feedback WHERE guest_email = :email GROUP BY stars HAVING COUNT(stars) > 1", ['email' => $email],'all');

    if(empty($feedback) || empty($starCount)) {
      return (false);
      exit();
    }
  

  }else{
    $feedback = customQuery("SELECT * FROM products_feedback WHERE id = :id",['id' => $id], 'single');
    $email = $feedback['guest_email']; //email

    $starCount = customQuery("SELECT stars, COUNT(stars) FROM products_feedback WHERE guest_email = :email GROUP BY stars HAVING COUNT(stars) > 1", ['email' => $email],'all');

    if(empty($feedback) || empty($starCount)) {
      return (false);
      exit();
    }
  }
    //store values to search through
    $toCount = array();
    foreach($starCount as $i => $count){
        //push values to array
        array_push($toCount, $count['COUNT(stars)']);
    }
    //retrieve the max value found
    $maxStarCount =  max($toCount);
    //make unique the number of values in the array $toCount
    $unique = array_unique($toCount);
    //find the last duplicate with their index attached to it
    $duplicates = array_diff_assoc($toCount, $unique);
    //Search through the duplicates array to find the index of the max star count
    $key = array_search($maxStarCount, $duplicates, true);
    //Use that index to query the stars and its proper count
    $mostStarGiven = $starCount[$key]['stars'];
    $mostStarGivenCount = $starCount[$key]['COUNT(stars)'];

    $retval = array(
      "most_stars" => $mostStarGiven,
      "most_stars_count" => $mostStarGivenCount
    );

    return $retval;
}
function GenGmasUserToken($uid, $did, $form_id){
    
    //File to store in
    $filename = dirname(__FILE__) . "/to++__--uuken/user_tokens.txt";

    //query file last modified and check if its greater than 10 mins

    //prevent caching
    clearstatcache();

    //check if file last modified is pass 10 mins or 10 mins
    if((time() - filemtime($filename)) >= 600){
        //rewrite file
        file_put_contents($filename, '');
    }

  $token = apiFormToken($uid, $form_id);
  $tokenID = md5($did.$form_id.time());
      
  if(empty($token)|| empty($tokenID)) return false;
    //store token to last for 10 minutes 
    $time = strtotime("+1 hour", time()+600);
    setcookie("_gmasTokenID", $tokenID, $time, '/');

    $fh = fopen($filename, 'r');
    $data = array();
    array_push($data, [$tokenID."=>".$token]);

    foreach($data as $i=> $dt){
      $mydata[] = $dt[$i].PHP_EOL; 
      $ut = implode("\n", $mydata);
      if(!file_put_contents($filename, $ut, FILE_APPEND)) return false;
  }
  fclose($fh);

  return($tokenID);

}

function retGmasUserToken($tokenID){
  
  if(empty($tokenID)) return false;

  $filename = dirname(__FILE__) . "/to++__--uuken/user_tokens.txt";
  $fh = fopen($filename, 'r');
  $theData = fread($fh, filesize($filename));
    $assoc_array = array();
    $my_array = explode(PHP_EOL, $theData); //Use PHP_EOL to explode instead of \n

    $token_found;
    $todelete;
    foreach($my_array as $line)
    {
        $tmp = explode("=>", $line);
        if($tokenID == $tmp[0]){
          $todelete = $tmp[0].'=>'.$tmp[1];
          $token_found = $tmp[1];
          break;
        }
                
    }
    fclose($fh);
    return array(
      "token"=> $token_found,
      "delete_id"=> $todelete
    );

}
function delGmasUserToken($deleteID){
  $filename = dirname(__FILE__) . "/to++__--uuken/user_tokens.txt";
  $fh = fopen($filename, 'r');
    $lines = fread($fh, filesize($filename));
    $lines = explode(PHP_EOL, $lines);
    foreach($lines as $i=> $line){
      //$tmp = explode("=>", $line); 
      
      //check if line matches delete id
        if($line == $deleteID)  unset($lines[$i]);
  }
  $tokens = $lines;
  //use array_filter to remove the null value coming from unset
  $ut = implode(PHP_EOL, array_filter($tokens));
  file_put_contents($filename, $ut.PHP_EOL); //use php_eol to preserve new lines incase of new tokens
  fclose($fh);

}

function checkLogin(){
  $user = $GLOBALS['user_data'];
  if(isset($_SESSION['Ru_ProId']) && !empty($_SESSION['Ru_ProId'])){
    if(!empty($user->QueryUser($_SESSION['Ru_ProId']))){
      return true;
    }else{
      return false;
    }
  }
  return false;
}

function checkLicense(){
  if($GLOBALS['level'] === 5){
    return false;
  }
  return true;
}

//send mail
function sendMail($email, $name, $subject, $body, $sender = 'accounts@givemeastar.com', $senderName='GMAS Accounts'){
  if(!$name){
      $name = $email;
  }
  
  $mail = new PHPMailer(TRUE);

/* Open the try/catch block. */
try {
 /* Set the mail sender. */
  $mail->setFrom($sender, $senderName);

  /* Add a recipient. */
  $mail->addAddress($email, $name);

  /* Set the subject. */
  $mail->Subject = $subject;

  /* Set the mail message body. */
  $mail->Body = $body;

  //Make html available
  $mail->IsHTML(true);  

  /* SMTP parameters. */
  /* Tells PHPMailer to use SMTP. */
  $mail->isSMTP();

  /* SMTP server address. */
  $mail->Host = 'givemeastar.com';

  /* Use SMTP authentication. */
  $mail->SMTPAuth = TRUE;

  /* Set the encryption system. */
  $mail->SMTPSecure = 'ssl';

  /* SMTP authentication username. */
  $mail->Username = $sender;

  /* SMTP authentication password. */
  $mail->Password = '%#ji%.khHdmC';

  /* Set the SMTP port. */
  $mail->Port = 465;

  /* Finally send the mail. */
  $sendMail = $mail->send();

  if (!$sendMail){
      /* PHPMailer error. */
      echo $mail->ErrorInfo;
  }else{
      return true;
  }
  }catch (Exception $e){
      /* PHPMailer exception. */
      echo $e->errorMessage();
  }catch (\Exception $e){
      /* PHP exception (note the backslash to select the global namespace Exception class). */
      echo $e->getMessage();
  }
}

?>