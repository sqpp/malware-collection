<?php
/**
 * 2007-2014 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * No redistribute in other sites, or copy.
 *
 * @author    RSI <demo@demo.com>
 * @copyright 2007-2016 RSI
 * @license   http://localhost
 */

ignore_user_abort(true);
define('_PS_ADMIN_DIR_', getcwd());
include(_PS_ADMIN_DIR_.'/../config/config.inc.php');
include(_PS_ADMIN_DIR_.'/functions.php');
@ini_set('auto_detect_line_endings', '1');
@ini_set('max_execution_time', 0);
/*
Para los que no consigÃ¡is que os importe las imÃ¡genes, probad a aÃ±adir estas lÃ­neas en AdminImportController.php, dentro de la funciÃ³n â€œpublic function productImport()â€?, justo antes de if (isset($product->image) && is_array($product->image) && count($product->image))

AÃ±adid esto antes:
if (!is_array($product->image) ){ $product->image = explode($this->multiple_value_separator, $product->image);}
*/

$cronid = Tools::getValue('cronid');

if (_PS_VERSION_ < '1.5.0.0') {
    include_once './tabs/AdminImport.php';
    $import = new AdminImport();
} else {
    //include_once '../controllers/admin/AdminImportController.php';
    $import = new AdminImportController();
}

$cront = Db::getInstance()
           ->ExecuteS('SELECT * FROM `'._DB_PREFIX_.'cronimport` WHERE id = '.$cronid.' LIMIT 1');
$shopID = $cront[0]['shopid']; // ID or unqiue name of the target shop
$now = time();
if (ini_get('allow_url_fopen')) {
    echo '';
} else {
    echo 'URL FOPEN DISABLED. Contact your host to enable<br/>';
    //exit;
}
if (ini_get('open_basedir')) {
    echo '';
} else {
    echo 'OPEN BASEDIR DISABLED. Contact your host to enable<br/>';
    //exit;
}
/*********split***********/
if ($cront[0]['url'] != null) {
    $file_name = basename($cront[0]['url']);
    $options = array(
        CURLOPT_FILE    => dirname(__FILE__).'/csv/'.$file_name,
        CURLOPT_TIMEOUT =>  28800, // set this to 8 hours so we dont timeout on big files
        CURLOPT_URL     => $cront[0]['url'],
    );
    $ch = curl_init();
    curl_setopt_array($ch, $options);
    curl_exec($ch);
    curl_close($ch);
    file_put_contents(dirname(__FILE__).'/csv/'.$file_name, fopen($cront[0]['url'], 'r'));
    /*replace tabs*/
    $file_contents = Tools::file_get_contents(dirname(__FILE__).'/csv/'.$file_name);
    $file_contents = str_replace("	", ";", $file_contents);
    file_put_contents(dirname(__FILE__).'/csv/'.$file_name, $file_contents);
    /*end replace*/
    $file_parts = pathinfo(dirname(__FILE__).'/csv/'.$file_name);
    rename(dirname(__FILE__).'/csv/'.$file_name, dirname(__FILE__).'/csv/'.$file_parts['filename'].'.'.Tools::strtolower($file_parts['extension']));
    switch ($file_parts['extension']) {
        case "xml":
            $filexml = dirname(__FILE__).'/csv/'.$file_name;
            if (file_exists($filexml)) {
                $xml = simplexml_load_file($filexml);
                $f = fopen(dirname(__FILE__).'/csv/'.$file_parts['filename'].'.csv', 'w');
                $header = false;
                foreach ($xml as $k => $details) {
                    if (!$header) {
                        fputcsv($f, array_keys(get_object_vars($details)));
                        $header=true;
                    }
                    @fputcsv($f, get_object_vars($details));
                }
                fclose($f);
            }
            break;
        case "txt":
            $filexml = dirname(__FILE__).'/csv/'.$file_name;
            if (file_exists($filexml)) {
                file_put_contents(dirname(__FILE__).'/csv/'.$file_parts['filename'].'.csv', fopen($filexml, 'r'));
            }
            break;
    }
}
if ($cront[0]['splitf'] > 0) {
    $size = $cront[0]['splitf']; // about 100kb
    $to_read = '../modules/cronimport/csv/'.$cront[0]['crtfile'];

// Do not edit
    $done = false;
    $part = 0;
    if (($handle = fopen(
        $to_read,
        "r"
    )) !== false
    ) {
        $header = fgets($handle);
        while ($done == false) {
            $locA = ftell($handle); // gets the current location. START
            fseek(
                $handle,
                $size,
                SEEK_CUR
            ); // jump the length of $size from current position
            $tmp = fgets($handle); // read to the end of line. We want full lines
            $locB = ftell($handle); // gets the current location. END
            $span = ($locB - $locA);
            fseek(
                $handle,
                $locA,
                SEEK_SET
            ); // jump to the START of this chunk
            $chunk = fread(
                $handle,
                $span
            ); // read the chunk between START and END
            file_put_contents(
                $to_read.'_'.$part.'.csv',
                $header.$chunk
            );
            $part++;
            if (feof($handle)) {
                //if (Tools::strlen($chunk) < $size) {
                $done = true;
            }
        }
        fclose($handle);
        $sSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`totf` = '.pSQL($part).'
		WHERE `id` = '.pSQL($cronid).';';
        Db::getInstance()
          ->Execute($sSQL);
    }
} else {
    $sSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`totf` = 0
		WHERE `id` = '.pSQL($cronid).';';
    Db::getInstance()
      ->Execute($sSQL);
}

$cront[0]['totf'] = $part;
echo "Total CSV to process:".$cront[0]['totf']."<br/>";
/**/
if ($cront[0]['totf'] == $cront[0]['totfcur']) {
    $a = 0;
} else {
    $a = (($cront[0]['totfcur'] == 0 ) ? $cront[0]['totfcur'] : $cront[0]['totfcur']-1);
}

do {
    if ($a == 0 && $cront[0]['truncate'] == 1) {
        $truncate = '1';
    } elseif ($a > 0 && $cront[0]['truncate'] == 1) {
        $truncate = '0';
    } else {
        $truncate = $cront[0]['truncate'];
    }
    if ($cront[0]['totf'] == 0) {
        $csvname = $cront[0]['crtfile'];
    } else {
        $csvname = $cront[0]['crtfile'].'_'.$a.'.csv';
    }
    $file = '../modules/cronimport/csv/'.$csvname;
    /*replace tabs*/
    $file_contents = Tools::file_get_contents($file);
    $file_contents = str_replace("	", ";", $file_contents);
    file_put_contents($file, $file_contents);
    /*end replace*/
    copy(
        '../modules/cronimport/csv/'.$csvname,
        _PS_ADMIN_DIR_.'/import/'.$csvname
    );
    //echo(_PS_ADMIN_DIR_.'/import/'.$csvname);
    if ($cront[0]['lastexec'] != null) {
        if (date(
            "d/m/Y h:i:s",
            filemtime($file)
        ) <= $cront[0]['lastexec'] && Configuration::get('CRONI_DATE') == 1
        ) {
            echo "CSV have the same date/time that last execution...".PHP_EOL;
            return false;
        }
    }
    $formatimport = explode(
        ",",
        $cront[0]['import']
    );
    $_POST = array(
        'tab' => 'AdminImport',
        "skip" => $cront[0]['skip'],
        'convert' => Configuration::get('CRONI_ISO'),
        "regenerate" => 0,
        "entity" => $cront[0]['contentc'], //1 is for products import
        "iso_lang" => ''.$cront[0]['lang'].'',
        "truncate" => $truncate,
        "forceIDs" => $cront[0]['forceid'],
        "match_ref" => $cront[0]['machref'],
        "separator" => ''.$cront[0]['field'].'',
        "multiple_value_separator" => ''.$cront[0]['value'].'',
        "import" => 1,
        "type_value" => $formatimport,
        "csv" => $csvname,
    );
    if ($truncate == 1) {
        if ($cront[0]['contentc'] == 0) {
            Db::getInstance()
              ->execute(
                  '
					DELETE FROM `'._DB_PREFIX_.'category`
					WHERE id_category NOT IN ('.(int)Configuration::get('PS_HOME_CATEGORY').
                  ', '.(int)Configuration::get('PS_ROOT_CATEGORY').')'
              );
            Db::getInstance()
              ->execute(
                  '
					DELETE FROM `'._DB_PREFIX_.'category_lang`
					WHERE id_category NOT IN ('.(int)Configuration::get('PS_HOME_CATEGORY').
                  ', '.(int)Configuration::get('PS_ROOT_CATEGORY').')'
              );
            Db::getInstance()
              ->execute(
                  '
					DELETE FROM `'._DB_PREFIX_.'category_shop`
					WHERE `id_category` NOT IN ('.(int)Configuration::get('PS_HOME_CATEGORY').
                  ', '.(int)Configuration::get('PS_ROOT_CATEGORY').')'
              );
            Db::getInstance()
              ->execute('ALTER TABLE `'._DB_PREFIX_.'category` AUTO_INCREMENT = 3');
            foreach (scandir(_PS_CAT_IMG_DIR_) as $d) {
                if (preg_match(
                    '/^[0-9]+(\-(.*))?\.jpg$/',
                    $d
                )) {
                    unlink(_PS_CAT_IMG_DIR_.$d);
                }
            }
        }
        if ($cront[0]['contentc'] == 1) {
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'feature_product`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'category_product`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_tag`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'image`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'image_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'image_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'specific_price`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'specific_price_priority`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_carrier`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'cart_product`');
            @Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'compare_product`');
            if (count(
                Db::getInstance()
                  ->executeS('SHOW TABLES LIKE \''._DB_PREFIX_.'favorite_product\' ')
            )) { //check if table exist
                Db::getInstance()
                  ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'favorite_product`');
            }
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attachment`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_country_tax`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_download`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_group_reduction_cache`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_sale`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_supplier`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'scene_products`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'warehouse_product_location`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'stock`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'stock_available`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'stock_mvt`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'customization`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'customization_field`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'supply_order_detail`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_impact`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_combination`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_image`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'pack`');
            Image::deleteAllImages(_PS_PROD_IMG_DIR_);
            if (!file_exists(_PS_PROD_IMG_DIR_)) {
                mkdir(_PS_PROD_IMG_DIR_);
            }
        }
        if ($cront[0]['contentc'] == 2) {
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_impact`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_group`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_group_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_group_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'attribute_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_shop`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_combination`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'product_attribute_image`');
            Db::getInstance()
              ->execute('DELETE FROM `'._DB_PREFIX_.'stock_available` WHERE id_product_attribute != 0');
        }
        if ($cront[0]['contentc'] == 3) {
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'customer`');
        }
        if ($cront[0]['contentc'] == 5) {
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'manufacturer`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'manufacturer_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'manufacturer_shop`');
            foreach (scandir(_PS_MANU_IMG_DIR_) as $d) {
                if (preg_match(
                    '/^[0-9]+(\-(.*))?\.jpg$/',
                    $d
                )) {
                    unlink(_PS_MANU_IMG_DIR_.$d);
                }
            }
        }
        if ($cront[0]['contentc'] == 6) {
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'supplier`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'supplier_lang`');
            Db::getInstance()
              ->execute('TRUNCATE TABLE `'._DB_PREFIX_.'supplier_shop`');
            foreach (scandir(_PS_SUPP_IMG_DIR_) as $d) {
                if (preg_match(
                    '/^[0-9]+(\-(.*))?\.jpg$/',
                    $d
                )) {
                    unlink(_PS_SUPP_IMG_DIR_.$d);
                }
            }
            break;
        }
        sleep(20);
    }
    if ($cront[0]['contentc'] == 0) {
        $import->categoryImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 1) {
        $var = $import->productImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 2) {
        $import->attributeImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 3) {
        $import->customerImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 4) {
        $import->addressImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 5) {
        $import->manufacturerImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 6) {
        $import->supplierImport();
        clearSmartyCache();
    }
    if ($cront[0]['contentc'] == 7) {
        $import->aliasImport();
    }
    echo "call AdminImport and POST datas...".$csvname.PHP_EOL.'<br/>';
    $sSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`lastexec` = \''.pSQL(date('d/m/Y h:i:s')).'\'
		WHERE `id` = '.pSQL($cront[0]['id']).';';
    Db::getInstance()
      ->Execute($sSQL);
/**/
    if ($cront[0]['splitf'] > 0) {
        $ssSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`totfcur` = '.pSQL($a+1).'
		WHERE `id` = '.pSQL($cront[0]['id']).';';
        Db::getInstance()
          ->Execute($ssSQL);
    }
/**/
    if ($cront[0]['splitf'] > 0 && $cront[0]['totf'] == $a + 1) {
        $sSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`lastexec` = \''.pSQL(date('d/m/Y h:i:s')).'\', totfcur = 0
		WHERE `id` = '.pSQL($cront[0]['id']).';';
        Db::getInstance()
          ->Execute($sSQL);
    }
    if ($cront[0]['splitf'] == 0 or $cront[0]['splitf'] == null) {
        $sSQL = 'UPDATE `'._DB_PREFIX_.'cronimport` SET
		`lastexec` = \''.pSQL(date('d/m/Y h:i:s')).'\', totfcur = 1
		WHERE `id` = '.pSQL($cront[0]['id']).';';
        Db::getInstance()
          ->Execute($sSQL);
    }
    $a++;
    //$fp = fopen(_PS_ADMIN_DIR_.'datos.txt', 'w');
    //fwrite($fp, $csvname.'----'.$a);
    //fclose($fp);
    //file_put_contents('datos.txt', $csvname.'----'.$a);
} while ($a < $cront[0]['totf']);
echo "--END--";
function clearSmartyCache()
{
    Tools::enableCache();
    Tools::clearSmartyCache();
    Tools::restoreCacheSettings();
}
