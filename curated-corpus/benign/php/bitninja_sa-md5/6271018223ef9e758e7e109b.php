<?php
require_once __DIR__ . "/../../../../include/dbcommon.php";

use Base\{ArrayUtils, DateTimeUtils, GenericException, Utils as BaseUtils, Validations};
use BBPlanner\Constants\{ReservationOrigins};
use BBPlanner\Entities\{ClosuresServices, ReservationUnitsServices, UnitsServices};

BaseUtils::executeCatchedScript(function () {
    Validations::validate($_POST, [
        "events" => Validations::arrayOf(function ($event) {
            return Validations::validate($event, [
                "type" => Validations::or(["reservation", "closure"]),
                "id" => Validations::IS_POSITIVE_INTEGER,
                "unitID" => Validations::IS_POSITIVE_INTEGER,
                "start" => Validations::IS_DATE_STRING,
                "end" => Validations::IS_DATE_STRING,
                "recalculateStayPriceFromDailyStayPrice" => Validations::or([Validations::IS_BOOLEAN_STRING, Validations::IS_BOOLEAN_STRING]),
            ], false);
        }),
    ]);


    $eventsForUnitID = array_reduce($_POST["events"], function (array $eventsForUnitID, array $event) {
        $event = (object) $event;
        $eventsForUnitID[$event->unitID][] = $event;

        return $eventsForUnitID;
    }, []);

    $conflicts = array_reduce($eventsForUnitID, function (array $conflicts, array $events) {
        array_walk($events, function (stdClass $event1) use (&$conflicts, $events) {
            array_walk($events, function (stdClass $event2) use ($event1, &$conflicts) {
                if ($event1->id !== $event2->id && $event1->start < $event2->end && $event1->end > $event2->start) {
                    $id1 = min($event1->id, $event2->id);
                    $id2 = max($event1->id, $event2->id);

                    $insert = !ArrayUtils::some($conflicts, function (array $conflict) use ($id1, $id2) {
                        return $conflict[0] === $id1 && $conflict[1] === $id2;
                    });

                    if ($insert) {
                        $conflicts[] = [$id1, $id2];
                    }
                }
            });
        });

        return $conflicts;
    }, []);

    if (Validations::isNotEmpty($conflicts)) {
        throw new GenericException("CONFLICTS-PRESENCE", 500, compact("conflicts"));
    }

    UnitsServices::setEventsIDsToExcludeFromAvaibilityControl(array_column($_POST["events"], "id"));

    $newReservationsUnitsTotals = array_reduce($eventsForUnitID, function (array $newReservationsUnitsTotals, array $events) {
        array_walk($events, function (stdClass $event) use (&$newReservationsUnitsTotals) {
            if ($event->type === "reservation") {
                $reservationUnit = ReservationUnitsServices::get($event->id);

                $values = [
                    "unitID" => $event->unitID,
                    "checkIn" => $event->start,
                    "checkOut" => $event->end,
                ];

                if ($reservationUnit->originID === ReservationOrigins::WUBOOK && !$reservationUnit->unlocked) {
                    $values["unlocked"] = true;
                }

                if (Validations::isNotEmpty($event->recalculateStayPriceFromDailyStayPrice) && BaseUtils::parseBoolString($event->recalculateStayPriceFromDailyStayPrice)) {
                    $dailyStayPrice = round($reservationUnit->stayPrice / DateTimeUtils::getDifference($reservationUnit->checkIn, $reservationUnit->checkOut), 2);
                    $values["stayPrice"] = $dailyStayPrice *  DateTimeUtils::getDifference($event->start, $event->end);
                }

                $reservationUnit->update($values);

                if (Validations::isNotEmpty($event->recalculateStayPriceFromDailyStayPrice) && BaseUtils::parseBoolString($event->recalculateStayPriceFromDailyStayPrice)) {
                    $newReservationsUnitsTotals[] = [
                        "reservationUnitID" => $event->id,
                        "stayPrice" => $values["stayPrice"],
                        "totalPrice" => $reservationUnit->getTotalPrice(),
                    ];
                }
            } else if ($event->type === "closure") {
                ClosuresServices::update($event->id, [
                    "unitID" => $event->unitID,
                    "start" => $event->start,
                    "end" => $event->end,
                ], false);
            }
        });

        return $newReservationsUnitsTotals;
    }, []);

    UnitsServices::clearEventsIDsToExcludeFromAvaibilityControl();

    return compact("newReservationsUnitsTotals");
});
