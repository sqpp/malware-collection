<?php
/******************************************************************************
 * $Id$
 * Datei:				parser.php
 * Beschreibung:		Template-Parser-Klasse
 * Autoren:				Thorsten Rinne		thorsten@rinne.info
 * Datum:				2002-08-22
 * Letzte Änderung:		2002-11-04
 * Copyright:           (c) 2001-2003 Thorsten Rinne und Bastian Pöttner
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 ******************************************************************************/

class phpmyfaqTemplate {
	var $templates 	= array();
	var $outputs 	= array();
	
	/* */
	function phpmyfaqTemplate($myTemplate) {
		while (list($templateName, $filename) = each($myTemplate)) {
			$this->templates[$templateName] = $this->readTemplate($filename);
			}
		}
	
	/* */
     function includeTemplate($name, $toname) {
	 	$this->outputs[$toname] = str_replace('{'.$name.'}', $this->outputs[$name], $this->outputs[$toname]);
		$this->outputs[$name] = '';
		}
	
	/* Ersetzt die Variablen durch die übergebenen Werte */
	function processTemplate($templateName, $myTemplate) {
		$tmp = $this->templates[$templateName];
		while (list($var, $val) = each($myTemplate)) {
			$tmp = str_replace('{'.$var.'}', $val, $tmp);
			}
		if (isset($this->outputs[$templateName])) {
			$this->outputs[$templateName] .= $tmp;
			}
		else {
			$this->outputs[$templateName] = $tmp;
			}
		}
	
	/* Das Template wird ausgegeben */
	function printTemplate() {
		while(list( , $val) = each($this->outputs)) {
			print str_replace("\n\n", "\n", $val);
			}
		}
	function printTemplateJS() {
		while(list( , $val) = each($this->outputs)) {
			$val= str_replace("\n\n", "\n", $val);
			$val= str_replace("\r", "", $val);
			$js_code = "document.write(\"".str_replace("\n","\"+\n   \"",addslashes($val))."\");";
			print $js_code;
			}
		}
	
	/* */
	function addTemplate($name, $toname) {
		$this->outputs[$toname] .= $this->outputs[$name];
		$this->outputs[$name] = '';
		}
	
	/* Die Datei mit dem Template wird zeilenweise gelesen */
	function readTemplate($filename) {
		if (file_exists($filename)) {
			$res = implode("\n", file($filename));
			return $res;
		    }
		print "<p><span style=\"color: red;\">Attention:</span> Template ".$filename." not found!</p>";
		die();
		}
	}
?>