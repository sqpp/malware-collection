<?php
/**
 * Copyright 2007 - 2012 by Gero Kohnert
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; version 2 of the License.
 *
 * Restore repository and Database
 *
 * @modulegroup ADMIN
 * @module restore
 * @package BASE
 */
$tutos['base'] = "../..";
ini_set("include_path","..");
require_once 'webelements.p3';
require_once 'permission.p3';

loadlayout();

class Restore extends layout {
    Function info() {
    }
    Function prepare() {
    }
}

$zipname  = $tutos[sessionpath] .'/backup.zip';
$dbbackup = $tutos[sessionpath] .'/dbbackup';

if ( ! isset($_GET['dbnr']) ) {
    $dbnr = 0;
} else {
    $dbnr = $_GET['dbnr'];
}
$_SESSION['dbnr'] = $dbnr;
$dbconn = DB_Open($dbnr,false);
if (!is_object($dbconn)) {
    die ('No database with id '.$dbnr.' found');
}

$current_user = new tutos_user($dbconn);
$current_user->f_name = 'TUTOS';
$current_user->m_name = '';
$current_user->l_name = '(remember service)';
$current_user->admin = 1;

$lang = array();
ReadLang($lang);

$l = new Restore($current_user);
$l->PageHeader('RESTORE');


if (!file_exists($zipname)) {
    die('<br>Restore of '. $zipname .' failed ! File is not readable or does not exist<br />');
}

// secure
if ( ! isset($_GET['size']) ) {
    die('<br>For security you need to add an "size=xxx" argument telling the exact size of the backup file<br />');
} else {
    if ($_GET['size'] != filesize($zipname)) {
        die('<br>wrong size of backup file<br />');
    }
}


echo $dbconn->moreinfo();
flush();
echo '<br />REPOSITORY: '.$tutos[repository][$dbnr] .'<br />';

$cwd = getcwd();

if (class_exists("ZipArchive")) {
    echo 'Start extracting of '. $zipname .'<br />';
    mkdir($tutos[sessionpath].'/restore');
    chdir($tutos[sessionpath].'/restore');
    $zip = new ZipArchive();

    if ($zip->open($zipname) !== TRUE) {
        exit("cannot open <$zipname>\n");
    }

    echo "<br />\n";
    $zip->extractTo($tutos[sessionpath].'/restore',basename($dbbackup));
    $zip->extractTo(dirname($tutos[repository][$dbnr]));
    #    $zip->extractTo($tutos[sessionpath].'/restore', basename($tutos[repository][$dbnr]));
    $zip->close();
    // remove db backup from repo
    @unlink($tutos[repository][$dbnr].'/dbbackup');
} else {
    mkdir($tutos[sessionpath].'/restore');
    chdir($tutos[sessionpath].'/restore');

    $cmd = 'unzip '. $zipname .' '. basename($dbbackup);
    $tfile = $tutos[sessionpath]."/xx";
    $output = array();
    $out = exec($cmd . " 2> ".$tfile ,$output,$rt);

    echo htmlentities($cmd)."<br />";
    foreach($output as $i) {
        echo htmlentities($i)."<br />";
    }
    echo "<pre>";
    passthru("cat ".$tfile."; rm ".$tfile,$xx);
    echo "</pre>";
    chdir ($cwd);
#   mkdir($tutos['base'].'/'.$tutos[repository][$dbnr]);
    chdir(dirname($tutos[repository][$dbnr]));

    $cmd = 'unzip -u '. $zipname .' "'. basename($tutos[repository][$dbnr]).'/*"';
    $tfile = $tutos[sessionpath]."/xx";
    $output = array();
    $out = exec($cmd . " 2> ".$tfile ,$output,$rt);

    echo htmlentities($cmd)."<br />";
    foreach($output as $i) {
        echo htmlentities($i)."<br />";
    }
    //     echo "X<pre>";
    //     passthru("cat ".$tfile."; rm ".$tfile,$xx);
    //     passthru("pwd;zipinfo ".$zipname);
    //     echo "</pre>X";
}

chdir ($cwd);

// now restire from backup file
$newfile = $tutos[sessionpath].'/restore/'.basename($dbbackup);
if (!file_exists($newfile)) {
    echo '<br>Restore of '. $newfile .' failed ! File is not readable or does not exist';
} else if (! $dbconn->restore_from_file($newfile)) {
    echo '<br>Restore of '. $newfile .' failed !';
}

$dbconn->close();

if (file_exists($newfile)) {
    @unlink($newfile);
}

@rmdir($tutos[sessionpath].'/restore/');

echo "</body></html>";
?>
<!--
SVN Info  $Id: restore.php 857 2012-12-07 19:18:56Z gokohnert $
$Author: gokohnert $
-->