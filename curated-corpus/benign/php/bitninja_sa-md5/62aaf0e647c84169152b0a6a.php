<?php 

	//Standard Includes
	
	require_once '../includes/globals.php';
	require_once ROOT_PATH.'/includes/classes.php';
	
	
	//Separate Branch for Updating a double clicked kit booking		

	if (!empty($_POST['equipment_group_id'])) {
		
	
	//Get all group bookings, and delete them

	$events = Event::fetch_by_group($_POST['equipment_group_id']);
	
	//Clear current Group
    Event::deleteRecords($events);
	
	//Now create new details with same Group ID from submitted array
	
	$equipment_array = explode(',', $_POST['equipment_array']);
	
    $events = array();
	
	foreach ($equipment_array as $equipment_item) :
			
	$event = new Event();
		
			
		//Check posted variables
		if (!empty($_POST['title'])) $event->title_EVENT = ucfirst($_POST['title']);
	
		if (!empty($_POST['changed_by'])) $event->addedBy($_POST['changed_by'],"Updated");
	
		if (!empty($_POST['category'])) $event->category_EVENT = $_POST['category'];
	
		if (!empty($_POST['project'])) $event->_kf_project_EVENT = $_POST['project'];
	
		if (!empty($_POST['equipment_group_id'])) $event->_kf_group_EVENT = $_POST['equipment_group_id'];
	
		if (!empty($_POST['colour'])) $event->colour_EVENT = $_POST['colour'];
	
		
		//For adding an event via the field in modal
				if (!empty($_POST['duration'])) {
				$duration = explode(' - ', $_POST['duration'], 2);
				
				$event->start_EVENT = $duration[0];	
				$event->end_EVENT = $duration[1];
	
				}

		 $equipment_id = (int)str_replace("equipment-","",$equipment_item);
		 $event->_kf_equipment_EVENT = $equipment_id;
		 
		 //See if this is a vehicle booking
		 $vehicle = Equipment::fetch_by_id($equipment_id);
		 if($vehicle->type_EQUIPMENT == "Vehicle") {
		 $event->other_EVENT = "vehc";
		 $event->title_EVENT = $vehicle->name_EQUIPMENT.': '.ucfirst($_POST['title']); }
		 
		 
		 //See if we are just updating the notes field - THIS IS OLD
		 
// 		 if($equipment_item == $_POST['resource']) $event->notes_EVENT = $_POST['notes'];   
	
		$event->update_seq_EVENT = 1;
			
		$event->_created_EVENT = db_date_format(new DateTime());
	
// 		$event->save();

		$events[] = $event;
		
	endforeach; //End per event

	
	if(Event::createRecords($events)) echo json_encode(array('status'=>'success'));
		
	exit;
		
 }	
	
	
	//Get Individual Event Object or Group Set
	
	if (empty($_POST['group_id'])) {
		
	//Else single item
	
	if (!empty($_POST['id'])) {
	
	$event = Event::fetch_by_id($_POST['id']); 
	
	} else {
		
	$event = Event::fetch_by_id($_GET['id']);	
		
	}


	if($_POST['type'] == 'update') {
			
				if (!empty($_POST['duration'])) {
						$duration = explode(' - ', $_POST['duration'], 2);
						$event->start_EVENT = $duration[0];
						$event->end_EVENT = $duration[1];
	
				}	
		
				$event->title_EVENT = $_POST['title'];
				
				if(!empty($_POST['project'])) {
				$event->_kf_project_EVENT = $_POST['project']; 
				
				//Allow a zero when updating a film
				$event->_kf_film_EVENT = $_POST['film'];
				
				}
				
				$event->category_EVENT = $_POST['category'];
				$event->notes_EVENT = $_POST['notes'];
				
				//Workaround issue if empty location is sent from disabled drop down
				if ($_POST['location'] != 'null') { if($_POST['location'] == '---') { $event->location_EVENT = ''; } else { $event->location_EVENT = $_POST['location']; }  }
				
				if (!empty($_POST['overtime'])) { $event->overtime_EVENT = 1; } else { $event->overtime_EVENT = 0; }
				
				if (!empty($_POST['prov'])) { $event->prov_EVENT = 1; } else { $event->prov_EVENT = NULL; }

				if (!empty($_POST['film'])) { $event->_kf_film_EVENT = $_POST['film']; }
				
				if(!empty($_POST['colour'])) { $event->colour_EVENT = $_POST['colour']; }
				
				if (empty($_POST['group_id'])) $event->_kf_group_EVENT = '';
				
				if (!empty($_POST['changed_by'])) $event->addedBy($_POST['changed_by'],"Updated");
				
				
				if(!empty($event->_kf_freelancer_EVENT)):
				
				 
				 //Add a new expense entry (as a single edit)
				 
				 $freelancer = Freelancer::fetch_by_id($event->_kf_freelancer_EVENT);
				 
				 $expense = new ProjectExpense();
				 
				 $group_id = rand(10000000000,99999999999);
				 
				 $expense->_added_EXPENSE = db_date_format(new DateTime());
				 $expense->_kf_event_EXPENSE =  $group_id;
				 $expense->_kf_project_EXPENSE = $event->_kf_project_EVENT;
				 $expense->ref_EXPENSE = "$freelancer->nameFirst_FREELANCE $freelancer->nameLast_FREELANCE";
			 
				 //Calculate forecast hourly rate
			
				 if(!empty($freelancer->dayrateStd_FREELANCE)):
				 
				$expense->cost_EXPENSE = $freelancer->calcForecastRate($event->category_EVENT,$event->duration());
				 
				 endif; //End IF Rate Empty
				 
				 $expense->hours_EXPENSE = $event->duration();
				 $expense->type_EXPENSE = "Freelancer";
				 $expense->category_EXPENSE = $event->category_EVENT;
				 
				 $expense->save();
				 
				 $event->_kf_group_EVENT = $group_id;	
				
				endif;
				
				
				
				
				$event->update_seq_EVENT++;	
		
		
	}
	
	
	if($_POST['type'] == 'resize') {
		
			$event->start_EVENT = $_POST['start'];

			$event->end_EVENT = $_POST['end'];
			
			$event->addedBy($_POST['changed_by'],"Duration changed");
			
			$event->update_seq_EVENT++;			
		
	}


	if($_POST['type'] == 'move') {
		
			$event->start_EVENT = $_POST['start'];
			$event->end_EVENT = $_POST['end'];
			
			//See if we have dragged onto another resource
			if(strpos($_POST['resource'], 'staff') !== false) {
			
			//Dragged onto staff resource
			$event->_kf_staff_EVENT = str_replace("staff-","",$_POST['resource']);
			$event->_kf_freelancer_EVENT = null;
				
			} else {
			
			//Dragged onto other resource
			$event->other_EVENT = $_POST['resource'];
			$event->_kf_staff_EVENT = null;
				
			}
			
			$event->addedBy($_POST['changed_by'],"Moved");
			
			$event->update_seq_EVENT++;
		
			
	}


	if($_POST['type'] == 'move_equipment') {
		
			$event->start_EVENT = $_POST['start'];
			$event->end_EVENT = $_POST['end'];
			
			//See if we have dragged onto another resource
			$event->_kf_equipment_EVENT = str_replace("equipment-","",$_POST['resource']);
			
			$event->update_seq_EVENT++;
		
			
	}
	
		//Write out the record
	
	if($event->save()) {
	
	/* 	Log::log_action("Event ".ucfirst($_POST['type']), "UPDATED BY STAFF ID: $session->user_id | EVENT-ID: $event->id RESOURCE_ID: $event->_kf_staff_EVENT CATEGORY: $event->category_EVENT TITLE: $event->title_EVENT START: $event->start_EVENT END: $event->end_EVENT"); */
	
	
	echo json_encode(array('status'=>'success'));
	
	}

	 
	 //Mulitple or Group events	
	
	 	} else {
	 
		//We updating a group event now 
	 
	 	$current_event = Event::fetch_by_id($_POST['id']);	 
	 
 		//See if we have dragged onto another resource
 		if(!empty($_POST['resource']) && strpos($_POST['resource'], 'equipment') !== false) {
		$current_event->_kf_equipment_EVENT = str_replace("equipment-","",$_POST['resource']); }
		
		//See if we have dragged onto another staff item
		if($_POST['type'] == 'move' && strpos($_POST['resource'], 'staff') !== false) {	
				
					
			$current_event->_kf_staff_EVENT = str_replace("staff-","",$_POST['resource']);
			$current_event->_kf_freelancer_EVENT = null;
			$current_event->other_EVENT = null;
		
		}
		
		
		//Individual event update
		
		if($_POST['type'] == 'update') {
		
		
		$current_event->notes_EVENT = $_POST['notes'];

		if(!empty($_POST['title'])) $current_event->title_EVENT = $_POST['title'];

		if(!empty($_POST['colour'])) $current_event->colour_EVENT = $_POST['colour'];
		
		if (!empty($_POST['changed_by'])) $current_event->addedBy($_POST['changed_by'],"Updated");
		
		}
		
		$current_event->save();
		
 
	 //There are now multiple events
	 
	/* $events = Event::fetch_by_group($_POST['group_id'],$_POST['title']); */
	
	$events = Event::fetch_by_group($_POST['group_id']);
	
	$updated_events = array();
	
	foreach ($events as $event) :
		
		
	if($_POST['type'] == 'resize') {
		
			$event->start_EVENT = $_POST['start'];
			$event->end_EVENT = $_POST['end'];
			
			$event->addedBy($_POST['changed_by'],"Duration changed");
			
			$event->update_seq_EVENT++;	
			
				
		
	}

	if($_POST['type'] == 'move_equipment') {
		
			$event->start_EVENT = $_POST['start'];
			$event->end_EVENT = $_POST['end'];
						
			$event->update_seq_EVENT++;
	
	}

	if($_POST['type'] == 'move') {
		
			$event->start_EVENT = $_POST['start'];
			$event->end_EVENT = $_POST['end'];
			
			$event->addedBy($_POST['changed_by'],"Moved");
						
			$event->update_seq_EVENT++;
	}

	if($_POST['type'] == 'update') {
			
				if (!empty($_POST['duration'])) {
						$duration = explode(' - ', $_POST['duration'], 2);
						$event->start_EVENT = $duration[0];
						$event->end_EVENT = $duration[1];
	
				}	
		
				$event->title_EVENT = $_POST['title'];
				
				if(!empty($_POST['project'])) { 
					
					$event->_kf_project_EVENT = $_POST['project']; 
					
					if(!empty($_POST['film'])) {
					$event->_kf_film_EVENT = $_POST['film']; }
					
					}
				
				$event->category_EVENT = $_POST['category'];
				
				//Workaround issue if empty location is sent from disabled drop down
				if ($_POST['location'] != 'null') { if($_POST['location'] == '---') { $event->location_EVENT = ''; } else { $event->location_EVENT = $_POST['location']; }  }
				
				if (!empty($_POST['overtime'])) { $event->overtime_EVENT = 1; } else { $event->overtime_EVENT = 0; }
				
				if (!empty($_POST['prov'])) { $event->prov_EVENT = 1; } else { $event->prov_EVENT = NULL; }
				
				$event->_kf_group_EVENT = $_POST['group_id'];
				
				if(!empty($_POST['colour'])) $event->colour_EVENT = $_POST['colour'];
				
				if(!empty($_POST['changed_by'])) $event->addedBy($_POST['changed_by'],"Updated");
				
				$event->update_seq_EVENT++;	
		
	}
		
	
		if(!empty($event->_kf_freelancer_EVENT)):
		
		//Remove existing record
		$existingExpense = ProjectExpense::fetch_by_event($event->_kf_group_EVENT);
		$existingExpense->delete();
		 
		 //Now add a new expense entry
		 
		 $freelancer = Freelancer::fetch_by_id($event->_kf_freelancer_EVENT);
		 
		 $expense = new ProjectExpense();
		 
		 $expense->_added_EXPENSE = db_date_format(new DateTime());
		 $expense->_kf_event_EXPENSE = $_POST['group_id'];
		 $expense->_kf_project_EXPENSE = $event->_kf_project_EVENT;
		 $expense->ref_EXPENSE = "$freelancer->nameFirst_FREELANCE $freelancer->nameLast_FREELANCE";
	 
		 //Calculate forecast hourly rate
	
		 if(!empty($freelancer->dayrateStd_FREELANCE)):
		 
		$expense->cost_EXPENSE = $freelancer->calcForecastRate($event->category_EVENT,$event->duration());
		 
		 endif; //End IF Rate Empty
		 
		 $expense->hours_EXPENSE = $event->duration();
		 $expense->type_EXPENSE = "Freelancer";
		 $expense->category_EXPENSE = $event->category_EVENT;
		 
		 $expense->save();
		
		endif;
	
	
	
	
	
		
	$updated_events[] = $event;
		
	endforeach; //End Foreach
	
	
	if(Event::updateRecords($updated_events)) echo json_encode(array('status'=>'success'));
	 
	 
 } //End Group ID If


		
	
	
	
	
?>