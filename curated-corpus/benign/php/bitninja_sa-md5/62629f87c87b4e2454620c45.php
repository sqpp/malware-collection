<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class MAIN_LGU extends CI_Controller {

    var $params = array();
    var $req_fields = array();
    var $client_id = array();
    var $api_key = "930def38-dc72-4625-83c2-68a7fe8af26f";
    var $url = 'https://merch.payexpress.graciatech.com/index.php/merchants/kioskservices';
    var $muser = "GTMerch";
    var $mpass = "d202d";
    
    function __construct()
    {
        parent::__construct();      
        
        $this->load->model("kiosks_model", "kiosk");
        $this->load->model("billers_model", "billers");
        $this->load->model("trans_model", "trans");
        $this->load->model("instapay_model", "instapay");
        $this->load->model("partas_model", "partas");
        $this->load->model("carriers_model", "carriers");
        
        date_default_timezone_set('Asia/Manila');
        
        $this->params = $_POST;                
        $this->req_fields = array("narvacan_get_data" => "1",
			    "reg_rpt_payments" => "13"				
                                );        
    }
    
    
    
    function index()
    {   
        //logger
         date_default_timezone_set('Asia/Manila');

        $ip = $_SERVER['REMOTE_ADDR'];
        $tdate = date("Y-m-d H:i:s");
        $date = "gracia-".date("dmYTH");
        $data = file_get_contents('php://input');
        $actual_link = $tdate." - eGracia - $ip - ". $data;
        
        $myfile = file_put_contents("../kiosks_logs/$date.txt", $actual_link.PHP_EOL, FILE_APPEND | LOCK_EX);
        
        $req_count = (array_key_exists($this->params['method'], $this->req_fields) == True ? $this->req_fields[$this->params['method']]:null);
        if($req_count != null)
        {                    
            $this->_process_method($req_count, $this->params['method']);
        }
        else 
        {
            //$status_code = $this->params;
            
            $myfileqc = file_put_contents("../kiosk_qclogs/$date.txt", $data.PHP_EOL, FILE_APPEND | LOCK_EX);
            
            //$this->_success(__FUNCTION__,"Success", "Received - " . $status_code);
            /*if (!empty($status_code)) {
                //$myfileqc = file_put_contents("../kiosk_qclogs/$date.txt", $status_code.PHP_EOL, FILE_APPEND | LOCK_EX);
                $this->_success(__FUNCTION__,"Success", "Received - " . $status_code . " - " . $this->params['status_message']);
            } else {
                $this->_failed($this->params['method'],"Invalid Method."); 
            }*/
            $this->_failed($this->params['method'],"Invalid Method."); 
        }  
    }
    

       
    function narvacan_get_data()
    {
         //get headers
        $x_api_key = $_SERVER['HTTP_X_API_KEY'];
        
        //validate api key
        if($x_api_key != "0def9338-dc72-2465-3c82-8af26f-68a7fe") {
            $this->_failed(__FUNCTION__,"Invalid API Key");  
            die();
        }


        $ref_code = trim($this->input->post('P01'));  
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://pms.narvacan.net/ipms?code=".$ref_code);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $output = curl_exec($ch);
        curl_close($ch); 
	$resp_data = json_decode($output, TRUE);	
	
	if($resp_data['error'] == "No Account Found") {            
            	$this->_failed(__FUNCTION__,$resp_data['error']);  
	}
	else {
 		$this->_success(__FUNCTION__,"Bills Payment Success", $resp_data); 
	}
            die();
 
     
    }
    function reg_rpt_payments()
    {
         //get headers
        $x_api_key = $_SERVER['HTTP_X_API_KEY'];
        
        //validate api key
        if($x_api_key != "0def9338-dc72-2465-3c82-8af26f-68a7fe") {
            $this->_failed(__FUNCTION__,"Invalid API Key");  
            die();
        }


        $source = trim($this->input->post('P01'));
        $egracia = trim($this->input->post('P02'));
        $payments = $this->input->post('P03');
        $trans_date = date("Y-m-d H:i:s");


	print_r($payments);

	$sql = "INSERT INTO lgu_narvacan (egracia, source, property_id, year, amount, trans_date) values ('".$egracia."', '".$source."', '".$payments[0]."', '".$payments[1]."', '".$payments[2]."', '".$trans_date."')";
        $qry = $this->load->database('default', TRUE);
        $query =  $qry->query($sql);



	$this->_success(__FUNCTION__,"Payment Reg. Success"); 
	die();




	
	if($resp_data['error'] == "No Account Found") {            
            	$this->_failed(__FUNCTION__,$resp_data['error']);  
	}
	else {
 		$this->_success(__FUNCTION__,"Bills payment Success", $resp_data); 
	}
            die();
 
     
    }

    


    /*------------------------------ private functions --------------------------------------*/
    
    /**** LOGGING GRACIA API *****/
    private function _log_sendmoney_transaction($P01, $P02, $P03, $P04, $P05, $P06, $P07, $P08, $P09, $P10, $P11, $P12, $P13)
    {   
        //echo "CALL LOGGING API\n";
        //$P01 = KioskCode (Account username)
        //$P02 = sourceMobileFormat
        //$P03 = accountNumber
        //$P04 = topupService
        //$P05 = amount
        //$P06 = senderName
        //$P07 = refNo
        //$P08 = tranStatus
        //$P09 = transDesc
        //$P10 = convFee
        //$P11 = firstName
        //$P12 = lastName
        //$P13 = senderName
        
        $fields_string="";
        $fields = array('method' => 'reg_wallet_trans_mobile',
                    'P01' => $P01,
                    'P02' => "1", //transTypeID
                    'P03' => $P02,
                    'P04' => "0", //target mobile Id: 0 = own, 1 = others
                    'P05' => $P03,
                    'P06' => $P04,
                    'P07' => $P05, //paymentType 0 = cash, 1 = wallet
                    'P08' => "1", //paymentType 0 = cash, 1 = wallet
                    'P09' => "0", //amountPaid
                    'P10' => "0", //total credit
                    'P11' => $P06,
                    'P12' => $P07,
                    'P13' => "0|0|0|0|0|0", //billscount
                    'P14' => $P08,
                    'P15' => $P09,
                    'P16' => $P10,
                    'P17' => $P11,
                    'P18' => "",
                    'P19' => $P12,
                    'P20' => $P13,
                    'P21' => "",
                    'P22' => "",
                );
                
        //url-ify the data for the POST
        foreach($fields as $key=>$value) { 
            $fields_string .= $key.'='.$value.'&'; 
        }
        rtrim($fields_string, '&');
        
        //print_r($fields_string);
                        
        $ch = curl_init(); 
        curl_setopt($ch, CURLOPT_URL, 'https://api.gracia.graciatech.com/index.php/services/kiosks'); 
        curl_setopt($ch, CURLOPT_POST, count($fields));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('x-api-key:930def38-dc72-4625-83c2-68a7fe8af26f'));
    
        $response = curl_exec($ch);  
        curl_close($ch); 
        
        //print_r($response);
        
        if($response == "")
        {
            $response = '{"status":"01","message":"Unable to connect to into logging API services"}';
        }
        
        //echo $response;
      
        return json_decode($response);
       
    }
    
    function _send_sms($P01, $P02)
    {
        //$param = "https://rest-portal.promotexter.com/sms/send?apiKey=c12359841d574bb85df33b05058f28ee&apiSecret=823f782c35647a0a224b2e88721ac3ff&from=GRACIA&to=".$P01."&text=".urlencode($P02);
        $param = "https://rest-portal.promotexter.com/sms/send?apiKey=f49b629f3c6a439837196ae0340c6991&apiSecret=e26f9a96e95b00e84f6d0e395c64b0bb&from=GRACIA&to=".str_replace('GT','',$P01)."&text=".urlencode($P02);
        $n = file_get_contents($param);
        
        return;
    }

    private function _generate_ack($kiosk_id)
    {
        $total_cnt = 0;
        $ack_seq = date('Ymd');
        
        //get count bills
        $this->trans->get_bills_total_day(date('Y-m-d'), $kiosk_id);
        $bills = $this->trans->get_response();
        
        if($bills['ResponseCode'] == "0000")
        {
            $total_cnt += $bills['ResponseData']['TotalTransCnt'];
        }
        
        //get count eload
        $this->trans->get_eload_total_day(date('Y-m-d'), $kiosk_id);
        $eload = $this->trans->get_response();
        
        if($eload['ResponseCode'] == "0000")
        {
            $total_cnt += $eload['ResponseData']['TotalTransCnt'];
        }
        
        //get count ewallet
        $this->trans->get_ewallet_total_day(date('Y-m-d'), $kiosk_id);
        $ewallet = $this->trans->get_response();
        
        if($ewallet['ResponseCode'] == "0000")
        {
            $total_cnt += $ewallet['ResponseData']['TotalTransCnt'];
        }
        
        if($total_cnt == 0) 
        {
            $total_cnt = 1;
        }
        
        $ack_seq .= str_pad($total_cnt, 4, '0', STR_PAD_LEFT);
        
        return $ack_seq;
        
    }
    
    
    private function _generate_session()
    {
        $session_id = md5(uniqid(time(), true));
        
        return $session_id;
    }
    
    private function _process_method($reqd_params, $method)
    {
        if (!$this->_check_params_count($reqd_params)) return false;
        $this->$method();        
    }
    
    private function _check_params_count($count) {
        $temp_array = $this->params;
        
        unset($temp_array['method']);
        
        if(count($temp_array) == $count)
        {
            if($count != 0)
            {
                if (is_array($temp_array)) {
                    for ($i = 1; $i <= $count; $i++) {                        
                        $num = str_pad($i, 2, '0', STR_PAD_LEFT);                        
                        if (!isset($this->params['P' . $num])) {
                            $this->_failed($this->params['method'], 'Invalid parameters count');
                            return FALSE;
                        }
                    }           
                    return TRUE;
                } else {                    
                    $this->_failed($this->params['method'], 'Invalid parameters count');
                    return FALSE;                    
                }
            }
            else
            {
                return TRUE;
            }
        }
        else 
        {
            $this->_failed($this->params['method'], 'Invalid parameters count');
            return FALSE;
        }
    }
    
    private function _param_count_check($function_name, $required, $params)
    {
        if(count($params) != $required)
        {
            $this->_failed($function_name, "Invalid Parameter Count");
            
            die();
        }
        else
        {
            return True;
        }
    }
    
    //post
    private function _send_post_curl($fields)
    {
        $fields_string = "";
        //url-ify the data for the POST
        foreach($fields as $key=>$value) { 
            $fields_string .= $key.'='.$value.'&'; 
        }
        rtrim($fields_string, '&');
       
        //open connection
        $ch = curl_init();

        //set the url, number of POST vars, POST data
        curl_setopt($ch,CURLOPT_URL, $this->url);
        curl_setopt($ch,CURLOPT_POST, count($fields));
        curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('x-api-key: ' . $this->api_key));
        //execute post
        $result = curl_exec($ch);
        
        //close connection
        curl_close($ch);
        
        $json = json_decode($result, true);

        return $json;
    }
    
     /**
     *
     * @param $P01 function_name
     * @param $P02 response_msg
     * @param $P03 response_data 
     */
    private function _success($P01, $P02=null, $P03=null)
    {
        $data = array();
        $data['ServiceType'] = $P01;
        $data['ResponseCode'] = "0000";
        $data['ResponseMessage'] = $P02;
        if($P03 != null)
        {
            $data['ResponseData'] = $P03;
        } 
        $this->_json_generator($data);
    }
    
    /**
     *
     * @param $R1 function_name
     * @param $R2 response_msg 
     */
    private function _failed($P01, $P02=null)
    {
        $data = array();
        $data['ServiceType'] = $P01;
        $data['ResponseCode'] = "1000";
        $data['ResponseMessage'] = $P02;  
        
        $this->_json_generator($data);
    }
    
    private function _json_generator($array_data)
    {
        $json_output = json_encode($array_data);
        header('Content-type: application/json');        
        echo $json_output;
        
        //echo "<pre>";
        //print_r($array_data);
        //echo $json_output;
        //echo "</pre>";
        
    }  
 
}
    
?>