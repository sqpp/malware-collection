<?php
	get_template_part('panel/constants');

	load_theme_textdomain( 'ci_theme', get_template_directory() . '/lang' );

	// This is the main options array. Can be accessed as a global in order to reduce function calls.
	$ci = get_option(THEME_OPTIONS);
	$ci_defaults = array();

	// The $content_width needs to be before the inclusion of the rest of the files, as it is used inside of some of them.
	if ( ! isset( $content_width ) ) $content_width = 1040;

	//
	// Let's bootstrap the theme.
	//
	get_template_part('panel/bootstrap');
	get_template_part('functions/shortcodes');

	//
	// Let WordPress manage the title.
	//
	add_theme_support( 'title-tag' );

	//
	// Use HTML5 on galleries
	//
	add_theme_support( 'html5', array( 'gallery' ) );

	//
	// Define our various image sizes.
	//
	add_theme_support( 'post-thumbnails' );
	set_post_thumbnail_size( 480, 480, true );
	add_image_size( 'ci_thumb', 780, 780, true);
	add_image_size( 'ci_slider', 1920, 550, true);

	// Let the user choose a color scheme on each post individually.
	add_ci_theme_support('post-color-scheme', array('page', 'post', 'service', 'personnel'));

	// Let the theme know that we have WP-PageNavi styled.
	add_ci_theme_support('wp_pagenavi');


	// Since it's a responsive theme, remove width and height attributes from the <img> tag.
	// Remove also when an image is sent to the editor. When the user resizes the image from the handles, width and height
	// are re-inserted, so expected behaviour is not lost.
	add_filter('post_thumbnail_html', 'ci_remove_thumbnail_dimensions');
	add_filter('image_send_to_editor', 'ci_remove_thumbnail_dimensions');
	if( !function_exists('ci_remove_thumbnail_dimensions') ):
	function ci_remove_thumbnail_dimensions($html)
	{
		$html = preg_replace('/(width|height)=\"\d*\"\s/', "", $html);
		return $html;
	}
	endif;

	// Add prettyphoto support for inline content images
	add_filter('the_content', 'ci_prettyPhotoRel', 12);
	add_filter('get_comment_text', 'ci_prettyPhotoRel');
	add_filter('wp_get_attachment_link', 'ci_prettyPhotoRel');
	if( !function_exists('ci_prettyPhotoRel') ):
		function ci_prettyPhotoRel($content)
		{
			global $post;
			$pattern = "/<a(.*?)href=('|\")([^>]*).(bmp|gif|jpeg|jpg|png)('|\")(.*?)>(.*?)<\/a>/i";

			$replacement = '<a$1href=$2$3.$4$5 data-rel="prettyPhoto['.$post->ID.']"$6>$7</a>';

			$content = preg_replace($pattern, $replacement, $content);
			return $content;
		}
	endif;

	if ( ! defined( 'CI_THEME_WHITELABEL' ) || false === (bool) CI_THEME_WHITELABEL ) {
		add_filter( 'pt-ocdi/import_files', 'ci_theme_ocdi_import_files' );
		add_action( 'pt-ocdi/after_import', 'ci_theme_ocdi_after_import_setup' );
	}

	function ci_theme_ocdi_import_files( $files ) {
		if ( ! defined( 'CI_THEME_NAME' ) ) {
			define( 'CI_THEME_NAME', 'medi' );
		}

		$demo_dir_url = untrailingslashit( apply_filters( 'ci_theme_ocdi_demo_dir_url', 'https://www.cssigniter.com/sample_content/' . CI_THEME_NAME ) );

		// When having more that one predefined imports, set a preview image, preview URL, and categories for isotope-style filtering.
		$new_files = array(
			array(
				'import_file_name'           => esc_html__( 'Demo Import', 'ci_theme' ),
				'import_file_url'            => $demo_dir_url . '/content.xml',
				'import_widget_file_url'     => $demo_dir_url . '/widgets.wie',
			),
		);

		return array_merge( $files, $new_files );
	}

	function ci_theme_ocdi_after_import_setup() {
		// Set up nav menus.
		$main_menu = get_term_by( 'name', 'Main Menu', 'nav_menu' );

		set_theme_mod( 'nav_menu_locations', array(
			'ci_main_menu' => $main_menu->term_id,
		) );

		// Set up home and blog pages.
		$front_page_id = get_page_by_title( 'Home' );
		$blog_page_id  = get_page_by_title( 'Blog' );

		update_option( 'show_on_front', 'page' );
		update_option( 'page_on_front', $front_page_id->ID );
		update_option( 'page_for_posts', $blog_page_id->ID );

		// Try to force a term recount.
		// wp_defer_term_counting( false ) doesn't work properly as there are post imported from different AJAX requests.
		$taxonomies = get_taxonomies( array(), 'names' );
		foreach ( $taxonomies as $taxonomy ) {
			$terms             = get_terms( $taxonomy, array( 'hide_empty' => false ) );
			$term_taxonomy_ids = wp_list_pluck( $terms, 'term_taxonomy_id' );

			wp_update_term_count( $term_taxonomy_ids, $taxonomy );
		}
	}

	/**
	 * Common theme features.
	 */
	require_once get_theme_file_path( '/common/common.php' );

/********** SK - Custom Code **********/
    add_action('init', 'myStartSession', 1);
    add_action('wp_logout', 'myEndSession');
    add_action('wp_login', 'myEndSession');
    function myStartSession() {
        if(!session_id()) {
            session_start();
        }
    }
    function myEndSession() {
        session_destroy();
    }
    function javascript_variables(){ ?>
        <script type="text/javascript">
            var ajax_url			= '<?php echo admin_url( "admin-ajax.php" ); ?>';
            var ajax_nonce			= '<?php echo wp_create_nonce( "secure_nonce_name" ); ?>';
        </script><?php
    }
    add_action ( 'wp_head', 'javascript_variables');

    add_action('wp_ajax_verify_mobile', 'verify_mobile');
    add_action('wp_ajax_nopriv_verify_mobile', 'verify_mobile');
    function verify_mobile(){
    	//check_ajax_referer( 'secure-nonce-name', 'security' );
        $response	= array();
        $error		= array();
        
        if(empty($_POST["v_name"])) {
            $error[] = "Name is required.";
        }
        if(empty($_POST["v_mobile_number"])) {
            $error[] = "Mobile Number is required.";
        }
        if(!preg_match('/^[0-9]{10}+$/', $_POST["v_mobile_number"])) {
            $error[] = "Enter valid mobile number.";
        }
        if(count($error)>0) {
        	$response['status']	= false;
        	$response['error']	= $error;
        } else {
        	global $wpdb;
        	$mobile		= $_POST["v_mobile_number"];
        	$otp		= rand(1111,9999);

    		$tablename	= $wpdb->prefix.'sk_users';

    		$is_exist = $wpdb->get_var($wpdb->prepare("SELECT ID FROM ".$tablename." WHERE mobile = %s LIMIT 1",$mobile));
    		

    		if ($is_exist > 0 ) {
    			$wpdb->update(
    				$tablename,
    				array(
    		            'name'			=> $_POST['v_name'], 
    		            'mobile'		=> $mobile,
    		            'otp'			=> $otp,
    				),
    				array('ID' => $is_exist),
    	            array('%s','%s','%s'),
    				array('%d')
    			);
    		} else {
    			$wpdb->insert(
    	    		$tablename,
    	    		array(
    		            'name'			=> $_POST['v_name'], 
    		            'mobile'		=> $mobile,
    		            'otp'			=> $otp,
    				),
    	            array('%s','%s','%s') 
    	        );
    		}
            // START: Workaround till SMS issues are sorted
            $is_exist = $wpdb->get_var($wpdb->prepare("SELECT ID FROM ".$tablename." WHERE mobile = %s LIMIT 1",$mobile));
            $user_arr	= $wpdb->get_results("SELECT * FROM $tablename WHERE ID='$is_exist'");
            $_SESSION['is_user']			= 1;
            $_SESSION['user']['user_id']	= $is_exist;
            $_SESSION['user']['mobile']		= $mobile;
            $_SESSION['user']['email_id']	= $user_arr[0]->email_id;

            $response['status']		= true;
            $response['message']	= 'Done.';
            // END: Workaround till SMS issues are sorted
            $name       = $_POST['v_name'];
            $site_name  = get_bloginfo("name");
    		
            $raw_message    = get_option('otp_sms');;
            $raw_message    = str_replace('[NAME]',     $name,      $raw_message);
            $raw_message    = str_replace('[OTP]',      $otp,       $raw_message);
            $raw_message    = str_replace('[SITENAME]', $site_name, $raw_message);
            
            if($raw_message!="") {
                $message    = $raw_message;
            } else {
                $message    = "Hey, Your ".$site_name." mobile number verification OTP is ".$otp;
            }
            // UNCOMMENT When the SMS Issue is sorted out
        	// $otp_status	= send_sms($mobile,$message);
        	// // $otp_status['success'] = true;
        	// if(isset($otp_status['success'])) {
        	// 	$response['status']			= true;
        	// 	$response['message']		= $otp_status['success'];
        	// 	$response['mobile_number']	= $mobile;
        	// 	$response['message']		= "One time password (OTP) has been sent to your mobile number ".$_POST["v_mobile_number"].". Please enter OTP here to verify your mobile.";
        	// } else {
        	// 	$response['status']		= false;
        	// 	$response['error'][]	= $otp_status['error'];
        	// }
        }

        echo json_encode($response);
        die();
    }
    function send_sms($mobile_number,$message) {
    	$ch = curl_init();
    	curl_setopt($ch, CURLOPT_URL, 'https://api.karix.io/message/');
    	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    	curl_setopt($ch, CURLOPT_POST, 1);
    	curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"channel\": \"sms\",\n    \"source\": \"+919898093702\",\n    \"destination\": [\"+91".$mobile_number."\"],\n    \"content\": {\n        \"text\": \"".$message."\"\n    }\n}");
    	//curl_setopt($ch, CURLOPT_USERPWD, 'bcf7ae00-ce3e-4457-b4ab-2f63656fbd53' . ':' . 'c6b62113-b719-450f-a3fb-6b6d261e3b36');
        curl_setopt($ch, CURLOPT_USERPWD, 'f7301c43-439c-4ebc-9c1c-837a9c7e7a2f' . ':' . 'f5cd86c9-a28c-4412-9e7f-6d204c3c2f81');

    	$headers = array();
    	$headers[] = 'Content-Type: application/json';
    	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    	$response	= curl_exec($ch);
    	$err		= curl_error($ch);
    	curl_close($ch);
    	if ($err) {
    	  $responseResult['error']		= $err;
    	} else {
    	  $responseResult['success']	= $response;
    	}
    	return $responseResult;
    }
    function send_email($to, $subject, $body) {
        $headers = array('Content-Type: text/html; charset=UTF-8');
 
        return wp_mail( $to, $subject, $body, $headers );
    }

    add_action('wp_ajax_verify_otp', 'verify_otp');
    add_action('wp_ajax_nopriv_verify_otp', 'verify_otp');

    function verify_otp(){
    	//check_ajax_referer( 'secure-nonce-name', 'security' );
        $response	= array();
        $error		= array();
        
        if(empty($_POST["v_otp"])) {
            $error[] = "OTP is required.";
        }
        if(count($error)>0) {
        	$response['status']	= false;
        	$response['error']	= $error;
        } else {
        	global $wpdb;
        	$otp		= $_POST["v_otp"];
        	$mobile		= $_POST["v_otp_mobile_number"];

    		$tablename	= $wpdb->prefix.'sk_users';

    		$is_exist = $wpdb->get_var($wpdb->prepare("SELECT ID FROM ".$tablename." WHERE mobile = %s AND otp = %s LIMIT 1",$mobile, $otp));
            if ($is_exist > 0 ) {
    			$user_arr	= $wpdb->get_results("SELECT * FROM $tablename WHERE ID='$is_exist'");
    			$_SESSION['is_user']			= 1;
    			$_SESSION['user']['user_id']	= $is_exist;
    			$_SESSION['user']['mobile']		= $mobile;
    			$_SESSION['user']['email_id']	= $user_arr[0]->email_id;

    			$response['status']		= true;
    			$response['message']	= 'Done.';
        	} else {
        		$response['status']		= false;
        		$response['error'][]	= 'Enter valid OTP';
        	}
        }

        echo json_encode($response);
        die();
    }

    function check_user_login($page) {
        if($page == 'login') {
            if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                $ba_page = get_page_by_path(PAGE_BOOK_APPOINTMENT);
                wp_redirect(get_permalink($ba_page->ID));
                exit(); 
            }    
        } elseif($page == 'book_appointment') {
            if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                $user_id    = $_SESSION['user']['user_id'];
                global $wpdb;
                $tablename  = $wpdb->prefix.'sk_users';
                $user_arr   = $wpdb->get_results("SELECT * FROM $tablename WHERE ID='$user_id'");
                if($user_arr[0]->email_id=="") {
                    $page = get_page_by_path(PAGE_MY_PROFILE);
                    wp_redirect(get_permalink($page->ID));
                } 
            } else {
                $page = get_page_by_path(PAGE_LOGIN);
                wp_redirect(get_permalink($page->ID));  
            }
        } elseif($page == 'my_profile') {
            if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                /*if($_SESSION['user']['email_id']!="") {
                    $ba_page = get_page_by_path(PAGE_BOOK_APPOINTMENT);
                    wp_redirect(get_permalink($ba_page->ID));
                }*/
            } else {
                $page = get_page_by_path(PAGE_LOGIN);
                wp_redirect(get_permalink($page->ID));  
            }
        } elseif($page == 'payment') {
            if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                // Nothing
            } else {
                $page = get_page_by_path(PAGE_LOGIN);
                wp_redirect(get_permalink($page->ID));  
            }
        } elseif($page == 'my_medical_history') {
            if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                // Nothing
            } else {
                $page = get_page_by_path(PAGE_LOGIN);
                wp_redirect(get_permalink($page->ID));  
            }            
        } else {
            
        } 
    }

    add_action('wp_ajax_my_profile', 'my_profile');
    add_action('wp_ajax_nopriv_my_profile', 'my_profile');
    function my_profile(){
    	//check_ajax_referer( 'secure-nonce-name', 'security' );
        $response	= array();
        $error		= array();
        
        if(empty($_POST["name"])) {
            $error[] = "Name is required.";
        }
        if(empty($_POST["email_id"])) {
            $error[] = "Email ID is required.";
        }
        if (!filter_var($_POST["email_id"], FILTER_VALIDATE_EMAIL)) {
       		$error[] = "Please eneter valid Email ID.";
        }
        if(empty($_POST["address"])) {
            $error[] = "Address is required.";
        }
        if(empty($_POST["city"])) {
            $error[] = "City is required.";
        }
        if(empty($_POST["state"])) {
            $error[] = "State is required.";
        }
        if(empty($_POST["pin"])) {
            $error[] = "PIN Code is required.";
        }
        if(count($error)>0) {
        	$response['status']	= false;
        	$response['error']	= $error;
        } else {
        	global $wpdb;
        	$tablename	= $wpdb->prefix.'sk_users';

    		$user_id	= $_SESSION['user']['user_id'];
    		if ($user_id > 0 ) {
    			$wpdb->update(
    				$tablename,
    				array(
    		            'name'		=> $_POST['name'], 
    		            //'mobile'	=> $_POST['v_name'], 
    		            'email_id'	=> $_POST['email_id'], 
    		            'address'	=> $_POST['address'], 
    		            'city'		=> $_POST['city'], 
    		            'state'		=> $_POST['state'],
    		            'pin_code'		=> $_POST['pin'],
    				),
    				array('ID' => $user_id),
    	            array('%s','%s','%s','%s','%s'),
    				array('%d')
    			);
    			
    			$response['status']		= true;
        		$response['message']	= $otp_status['success'];
        		$response['message']	= "Profile updated successfully!";
                if($_POST['old_email_id']=='') {
                    $page = get_page_by_path(PAGE_BOOK_APPOINTMENT);
                    $response['redirect_url']    = get_permalink($page->ID);
                } else {
                    $response['redirect_url']    = '';
                }
        	} else {
        		$response['status']		= false;
        		$response['error'][]	= "Something went wrong! Please refresh page and try again.";
        	}
        }
        echo json_encode($response);
        die();
    }

    function appointment_booking_form() {
        echo do_shortcode('[ea_bootstrap width="1280px" scroll_off="true" layout_cols="3"]');
    }

    add_filter('ea_form_rows', 'alter_ea_fields', 10,20);
    function alter_ea_fields($fields) {

        global $wpdb;
        $user_id    = $_SESSION['user']['user_id'];
        $tablename  = $wpdb->prefix.'sk_users';
        $user_arr   = $wpdb->get_results("SELECT * FROM $tablename WHERE ID='$user_id'");
        
        if(count($user_arr)>0) {
            foreach ($fields as $key => $field) {
                if($field->slug=='name') {
                    $fields[$key]->default_value = $user_arr[0]->name;
                }
                if($field->slug=='email') {
                    $fields[$key]->default_value = $user_arr[0]->email_id;
                }
                if($field->slug=='mobile-number') {
                    $fields[$key]->default_value = $user_arr[0]->mobile;
                }
                if($field->slug=='address') {
                    $fields[$key]->default_value = $user_arr[0]->address;
                }
                if($field->slug=='city') {
                    $fields[$key]->default_value = $user_arr[0]->city;
                }
                if($field->slug=='state') {
                    $fields[$key]->default_value = $user_arr[0]->state;
                }
                if($field->slug=='pin_code') {
                    $fields[$key]->default_value = $user_arr[0]->pin_code;
                }
                if($field->slug=='user-code') {
                    $fields[$key]->default_value = $_SESSION['user']['user_id'];
                }
            }
        }
        return $fields;
    }

    add_action('init', function() {
        $url_path = trim(parse_url(add_query_arg(array()), PHP_URL_PATH), '/');
        $url_path_arr = explode('/', $url_path);
        $url_path = end($url_path_arr);
        
        if ( $url_path === 'payment_process' ) {
            $load = locate_template('payment_process.php', true);
            if ($load) {
                exit();
            }
        } elseif($url_path === 'payment_response') {
            $load = locate_template('payment_response.php', true);
            if ($load) {
                exit();
            }
        } elseif($url_path === 'payment_success') {
            $load = locate_template('payment_success.php', true);
            if ($load) {
                exit();
            }    
        } elseif($url_path === 'payment_cancel') {
            $load = locate_template('payment_cancel.php', true);
            if ($load) {
                exit();
            }
        } elseif($url_path === 'r_payment_process') {
            $load = locate_template('r_payment_process.php', true);
            if ($load) {
                exit();
            }
        } elseif($url_path === 'r_payment_response') {
            $load = locate_template('r_payment_response.php', true);
            if ($load) {
                exit();
            }
        }
    });

    add_action('ea_new_app_from_customer', 'ea_payment_process', 10, 2);
    function ea_payment_process( $appointment_id, $appointment_data ) {
       $_SESSION['appointment_id']          = $appointment_id;
       $_SESSION['ea']['appointment_data']  = $appointment_data;
    }

    function ab_bo_canceled() {
        $appointment_id = $_SESSION['appointment_id'];
        $order_no       = $_SESSION['ea']['order_no'];

        global $wpdb;
        $order_tablename        = $wpdb->prefix.'sk_orders';
        $book_tablename         = $wpdb->prefix.'ea_appointments';
        
        $order_update_arr = array(
            'status'            => 'canceled',
        );
        $order_update_type_arr = array();
        foreach ($order_update_arr as $key => $value) {
            $order_update_type_arr[]    = '%s';
        }
        $is_order_exist = $wpdb->get_var($wpdb->prepare("SELECT id FROM ".$order_tablename." WHERE order_no = %s LIMIT 1",$order_no));
        if ($is_order_exist > 0 ) {
            $wpdb->update(
                $order_tablename, 
                $order_update_arr, 
                array('id' => $is_order_exist),
                $order_update_type_arr,
                array('%d')
            );
        }
        
        $book_update_arr = array(
            'status'            => 'canceled',
        );
        $book_update_type_arr = array();
        foreach ($book_update_arr as $key => $value) {
            $book_update_type_arr[] = '%s';
        }
        if ($appointment_id > 0 ) {
            $wpdb->update(
                $book_tablename, 
                $book_update_arr, 
                array('id' => $appointment_id),
                $book_update_type_arr,
                array('%d')
            );
        }      
    }
    add_filter('wp_nav_menu_objects' , 'my_menu_class');
    function my_menu_class($menu) {
        foreach($menu as $key => $item) {
            if($item->title==MENU_LOGOUT || $item->title==MENU_MY_PROFILE || $item->title==MENU_MY_MEDICAL_HISTORY) {
                if(isset($_SESSION['is_user']) && $_SESSION['is_user']==1) {
                    // Nothing
                } else {
                    $menu[$key]->classes[] = 'menu_item_hide';
                }  
            }
        }
        return $menu;        
    }
    
add_filter( 'wpwhpro/run/actions/custom_action/return_args', 'wpwh_update_rp_response', 10, 3 );
function wpwh_update_rp_response( $return_args, $identifier, $response_body ){

	//If the identifier doesn't match, do nothing
// 	if( $identifier !== 'ilovewebhooks' ){
// 		return $return_args;
// 	}

    $payment_entity = $response_body["content"]->payload->payment->entity;
    
    // return $return_args;
    if ($payment_entity->status=="captured") {
        $orderId = $payment_entity->order_id;
        global $wpdb;
        $get_order = $wpdb->get_row($wpdb->prepare("SELECT appointment_id, rp_order_id FROM " . $wpdb->prefix . "sk_orders WHERE rp_order_id = '%s'", $orderId));
        $appointmentId = $get_order->appointment_id;
        
        
        $table = $wpdb->prefix . 'ea_appointments';
    
        $sql_2 = "Update $table SET status='reservation' where id=".$appointmentId ." and status='pending'" ;
        $result_app_update = $wpdb->query ($wpdb->prepare($sql_2));
    }

	//This is how you can validate the incoming value. This field will return the value for the key user_email
// 	$email = WPWHPRO()->helpers->validate_request_value( $response_body['content'], 'user_email' );

	//Include your own logic here....

	//This is what the webhook returns back to the caller of this action (response)
	//By default, we return an array with success => true and msg -> Some Text
	$return_args = array (
	    'success'=> true,
	    'msg'=> 'Updated'
	    );
	return $return_args;

}
/********** SK - Custom Code **********/


