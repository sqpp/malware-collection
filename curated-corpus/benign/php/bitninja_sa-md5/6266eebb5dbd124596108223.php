<?php
require_once __DIR__ . "/../../../include/dbcommon.php";

use Base\{ArrayUtils, GenericException, Utils as BaseUtils, Validations};
use BBPlanner\Constants\{BasePaymentMethods, BillingItemType, DocumentTypes, MovementTypes, MovementVoiceFilters, TouristTaxDocumentationModes};
use BBPlanner\{DocumentsUtils, Utils};
use BBPlanner\Entities\{CustomersServices, MovementsServices, MovementVoice};

BaseUtils::executeCatchedScript(function () use ($structuresIDsWithTicketSendingTest) {
    Validations::validate($_POST, [
        "movementID" => Validations::IS_POSITIVE_INTEGER,
        "documentTypeID" => Validations::or(get_constant_class("BBPlanner\Constants\DocumentTypes")),
        "customerID" => Validations::or([Validations::IS_EMPTY, Validations::IS_POSITIVE_INTEGER]),
    ]);

    $movement = MovementsServices::get($_POST["movementID"]);

    if (!$movement->canCreateDocument()) {
        $message = "Il movimento risultà già documentato";
        throw new GenericException("MOVEMENT-ALREADY-DOCUMENTED", 500, compact("movement", "message"));
    }

    $reservation = $movement->getReservation();
    $structure = $reservation->getStructure();

    Utils::execSubscriptControl($structure, $_POST["documentTypeID"]);

    if (Validations::isNotEmpty($_POST["customerID"])) {
        $customer = CustomersServices::get($_POST["customerID"]);
        if ($structure->id !== $customer->structureID) {
            throw new GenericException("CUSTOMER-FROM-DIFFERENT-STRUCTURE", 500, compact("reservation", "customer"));
        }
    }

    if ($movement->typeID === MovementTypes::FREE_AMOUNT) {
        $rows = [DocumentsUtils::elaborateFreeAmountMovement($movement, $structure->defaultVATRateID)];
    } else {
        $voices = $movement->getSpecificVoicesMovementVoices(MovementVoiceFilters::NOT_DOCUMENTED);

        $treatmentVoicesWithMissingTreatmentPresence = ArrayUtils::some($voices, function (MovementVoice $voice) {
            if ($voice->typeID === BillingItemType::TREATMENT) {
                $reservationUnit = $voice->getReference();
                return Validations::isEmpty($reservationUnit->treatmentID);
            } else {
                return false;
            }
        });

        if ($treatmentVoicesWithMissingTreatmentPresence) {
            $message = "In una o più camere non è stato impostato il trattamento, pertanto non è possibile documentarne l'importo";
            throw new GenericException("MISSING-TREATMENT", 500, compact("message"));
        }

        $voices = ArrayUtils::filter($voices, function (MovementVoice $voice) use ($structure) {
            if ($voice->typeID === BillingItemType::TOURIST_TAX && $structure->touristTaxDocumentationModeID === TouristTaxDocumentationModes::NOT_DOCUMENT) {
                return false;
            }

            if ($voice->typeID === BillingItemType::FREE_AMOUNT_MOVEMENT_SUBTRACTION && !$voice->getReference()->freeAmountMovementIsDocumented()) {
                return false;
            }

            return true;
        });

        $rows = DocumentsUtils::elaborateMovementVoices($voices, $_POST["documentTypeID"], $structure->defaultVATRateID);
    }

    $billingInformation = Validations::isNotEmpty($customer) ? DocumentsUtils::extractBillingInformationFromCustomerForDocument($customer, $_POST["documentTypeID"]) : DocumentsUtils::extractBillingInformationFromGuestForDocument($reservation, $_POST["documentTypeID"]);
    $paymentMethodID =  $movement->getPaymentMethod()->basePaymentMethodIDForDocuments;
    $paymentMethodID = Validations::isNotEmpty($paymentMethodID) && BasePaymentMethods::isValidForDocument($paymentMethodID, $_POST["documentTypeID"]) ? $paymentMethodID : null;

    $documents = DocumentsUtils::createStructureDocuments($structure, $_POST["documentTypeID"], $rows, $paymentMethodID, array_merge($billingInformation, [
        "invoiceTypeID" => $_POST["documentTypeID"] === DocumentTypes::INVOICE ? MovementTypes::getInvoiceTypeID($movement->typeID) : null,
        "customerID" => $customer->id,
    ]));

    return [
        "documentID" => $documents[0]->id,
    ];
});
