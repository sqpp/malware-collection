<?php
//if (!defined('Inworkflowmax')) exit('Is it Access denied');
define('Inworkflowmax', 1);
//Comment this on server
include 'includes/common.inc.php';

include 'includes/dates.inc.php';
//include "sendcomms.php";


if (!isset($_SERVER['SCRIPT_NAME'])) $_SERVER['SCRIPT_NAME'] = 'authenticateOAuth.php';

function openLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder, $logPath;

	$logFileHandle_cron_reminder = fopen($logPath . 'authenticateOAuth.log', 'a');
}

function closeLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
		fclose ($logFileHandle_cron_reminder);
}

function printLog_cron_reminder($str)
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
	{
		if (substr($str, strlen($str) - 1, 1) != "\n")
			$str .= "\n";
		fwrite ($logFileHandle_cron_reminder, $str);
	}
}

function printLogL_cron_reminder($str, $level)
{
	for ($i = 1; $i <= $level; ++$i)
		$str = "\t" . $str;
	printLog_cron_reminder($str);
}

function validatescriptInvocation($cognitoFormName, $AuthCode) {

//Validation goes here
//Return success or failure

}

function is_valid_name($file)
{
  return preg_match('/^([-\.\w]+)$/', $file) > 0;
}

function createbearertoken()
{
	$clientId = 'E689C9A080304D28A06ADE330EA76778';
	$clientSecret = 'cotu8OSsZ4f2ApRL2aFQJ6keeDBwrj7bXqEtWLs1Eha23BWt';
	$redirectUri = 'https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php';

	//https://login.xero.com/identity/connect/authorize?response_type=code&client_id=YOURCLIENTID&redirect_uri=YOURREDIRECTURI&scope=openid profile email accounting.transactions&state=123
	$urlAuthorize = 'https://login.xero.com/identity/connect/authorize' . '?response_type=code&client_id=' . $clientId . '&redirect_uri=' . $redirectUri . '&scope=openid profile email workflowmax&state=123456789';
	$urlAccessToken = 'https://identity.xero.com/connect/token';
	$urlResourceOwnerDetails = 'https://api.xero.com/api.xro/2.0/Organisation';

	$data = array(
		
	);
	print_r($urlAuthorize);
	$data_string = json_encode($data);
	$ch=curl_init($urlAuthorize);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	//curl_setopt($ch, CURLOPT_HEADER, true);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	/*curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
						 "Content-Type: application/x-www-form-urlencoded",
						 "Authorization: Basic ". base64_encode("qSN6s9y1CiLDAkjmdFyKUnaj5gklJeXO:XNp1KV4BhgOGnHTM")
						)
	);*/

	$result = curl_exec($ch);
	print_r ($result);

	curl_close($ch);

	return $result;
}


function createsession($bearertoken) 
{
	$url = 'https://apitest.paymark.nz/openjs/v1/session';
	$data = array(
		"amount" => 1000,
		"currency"=>"NZD",
		"description"=>"Widgets",
		"merchantIdCode"=> "300000189",
		"redirectUrl" => "https://www.nzwebsoft.co.nz/onlineeftpos/",
		"orderId"=>"146",
		"transactionType"=>"REGULAR"
		
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);

	//curl_setopt($ch, CURLOPT_HEADER, true);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
						 "Content-Type: application/json",
						 "Authorization: Bearer " . $bearertoken . ""
						)
	);

	$result = curl_exec($ch);
	curl_close($ch);
	

	return $result;
}

// initialize cron script
openLogFile_cron_reminder();
printLog_cron_reminder('=============== STARTING SCRIPT: ' . DisplayDateTime(time()));

printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
printLog_cron_reminder('Start Time is : ' . DisplayDateTime(time()));

printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== STATE: ' . $_GET['state']);
printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== SESSION-oauth2state: ' . $_SESSION['oauth2state']);
printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== CODE: ' . $_GET['code']);

/*
	**** Step 1: Get the Bearer Token
	**** Step 2: Get the session ID by passing Bearer Token

	//It seems Token life span is upto 1 hour so we will store it and 
	//Re-use it till we get the error message and call again createBearer
	// TODO : Store the details in DB
*/
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Creating Bearer Token ');

$bearertoken = createbearertoken();
if($bearertoken == '')
{
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token EMPTY ');
}
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token JSON ' .  $bearertoken);

$arrayBearerToken = json_decode ($bearertoken ,true);

$BearerTokenkey = $arrayBearerToken[$searchBearerTokenkey];
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token Key ' .  $BearerTokenkey);

printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Creating Session with Token ');

// Check given state against previously stored one to mitigate CSRF attack
if (empty($_GET['state']) || ($_GET['state'] !== $_SESSION['oauth2state'])) 
{
	unset($_SESSION['oauth2state']);
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== INSIDE STATE BLOCK SECTION UNSETTING... : ' . $_SESSION['oauth2state']);
	//exit('Invalid state');
} 
else 
{
	$_SESSION['oauth2state'] = $_GET['state'];
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== INSIDE SESSION BLOCK SECTION: ' . $_GET['state']);
}

// If we don't have an authorization code then get one
if (!isset($_GET['code'])) 
{
	$options = [
		'scope' => ['openid email profile offline_access assets projects accounting.settings accounting.transactions accounting.contacts accounting.journals.read accounting.reports.read accounting.attachments']
	];
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== INSIDE CODE SECTION: ' . $_GET['code']);

}


printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
printLog_cron_reminder('End Time is : ' . DisplayDateTime(time()));

// finish cron script
printLog_cron_reminder ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
closeLogFile_cron_reminder();

?>