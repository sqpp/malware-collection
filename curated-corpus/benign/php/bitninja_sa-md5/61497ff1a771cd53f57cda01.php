<?php
	require '../includes.php';
	//require 'isleagueready.php';
	$db = Connect();
	// Receiving
	// 0 = Player ID
	// 1 = Match number (0 = First team league, 1 = Reserves (should never happen), 2 = Youth league, 3 = SLFA, 4 = SLC, 5 = Youth cup)
	// 2 = New Position 0 = GK, 1 = Def, 2 = Mid, 3 = Att, 4 = SubGK, 5 = SubDef, 6 = SubMid, 7 = SubAtt
	$TeamID = filter_input(INPUT_POST, 'TeamID', FILTER_SANITIZE_STRING);
	$TeamID = intval($TeamID);
	$PlayerID = filter_input(INPUT_POST, 'PlayerID', FILTER_SANITIZE_STRING);
	$WhichMatch = filter_input(INPUT_POST, 'WhichMatch', FILTER_SANITIZE_STRING);
	$NewPosition = filter_input(INPUT_POST, 'NewPosition', FILTER_SANITIZE_STRING);
	$NewPosition = intval($NewPosition); // It returns 0 to 3, but we store as 1 (Goalkeeper) to 4 (Attacker)
	// Check for errors in input or unacceptable numbers (e.g negative numbers in this case).
	// Report an error and cancel the script if any of these fail.
	if (!is_numeric($TeamID) or !is_numeric($PlayerID) or !is_numeric($NewPosition) or !is_numeric($WhichMatch)) {
		die ();
	}
	// Positions can only be 1 to 4.
	if ($NewPosition < 0 or $NewPosition > 8) {
		die ();
	}
	// Don't let the user change the reserve team. The option should never be available on the turnsheet either, but this is an extra security measure.
	if ($WhichMatch == 1) {
		die ();
	}
	//if ( IsLeagueReady ($db, $WhichLeagueID, $WhichDay) == false ) {
	//	die(); // If the synch-check didn't match, kill the program so that the order isn't carried out.
	//}
	try {
		// Load in the player, update the position then end.
		$Player = new Player;
		$Player->Load($PlayerID);
		if ($Player == null) { die(); }
		// Can't play if for some reason he's not even a member of this squad. This should never happen, could happen if for example someone kept a browser
		// open for days, sold the player in another browser and then used the old browser info. I.e It shouldn't happen unless someone is trying to be an idiot.
		if ($Player->TeamID <> $TeamID) { die(); }
		// We need to do more error checking once the player has been loaded in. For example, we can't play him if he's injured, suspended, etc.
		// Can't play in youth squad if he's over 17.
		if ($WhichMatch == 2 or $WhichMatch == 5) {
			if ($Player->AgeArray[0] > 17) {
				die();
			}
		}		
		// Can't play at all if he's out of contract.
		if ($Player->FinancialArray['ContractWeeks'] < 1 or $Player->DetailsArray['InjuredWeeks'] > 0) {
			die();
			// TO DO - He shouldn't have been available to select here anyway, but possible throw an error
			// and set the select-box back to whatever it was. But probably a huge amount of hassle for something
			// that is impossible anyway and has probably only happened because the user has done something strange.
		}

		$Player->PositionsArray[$WhichMatch] = $NewPosition;
		$PositionsJSON = json_encode($Player->PositionsArray);
		$db->beginTransaction();
		$query = $db->prepare("UPDATE players SET PositionsJSON = :PositionsJSON WHERE ID = :PlayerID");
		$query->bindValue(':PlayerID', $PlayerID, PDO::PARAM_INT);
		$query->bindValue(':PositionsJSON', $PositionsJSON, PDO::PARAM_STR);
		$query->execute();
		$db->commit();
		// Load the team in and it's players so that we can calculate the formation now.
		$team = new Team;
		$team->Load($Player->TeamID);
		$team->LoadAllPlayersInThisTeam();
		$Formation = array(0,0,0,0,0,0,0,0,0); // The formation array to return. 0 = Not playing, 1 to 4 = GK to Att, 5 to 8 = Sub GK to Sub Att.
		foreach ($team->Players as $Player) {
			if ($Player->PositionsArray[$WhichMatch] < 0 or $Player->PositionsArray[$WhichMatch] > 8) {
				// Error check, if for some reason the position is set < 0 or > 8, reset it to 0.
				$Player->PositionsArray[$WhichMatch] = 0;
			}
			// Put the player in his position in the formation now. Array (0) = Not playing, so it's fine to put all 0's in 0.
			$Formation[$Player->PositionsArray[$WhichMatch]] ++;
		}
		echo implode('!',$Formation);
		
	} catch(PDOException $ex) {
		Echo $ex->getMessage();
		$db->rollback();
	}