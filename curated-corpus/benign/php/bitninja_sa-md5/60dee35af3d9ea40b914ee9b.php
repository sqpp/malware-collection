<?php
/**
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 *  DISCLAIMER
 * Do not edit or add to this file if you wish to upgrade Prestashop to newer
 * versions in the future.
 *
 *  @author     Apollotheme
 *  @copyright  Apollothem
 *  @license    http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *  International Registered Trademark & Property of PrestaShop SA
 */

include_once(dirname(__FILE__).'/../../config/config.inc.php');
include_once(dirname(__FILE__).'/../../init.php');
include_once(dirname(__FILE__).'/includer.php');

use PrestaShop\PrestaShop\Adapter\Attribute\AdminAttributeGeneratorControllerWrapper;

$context = Context::getContext();
$id_lang = $context->language->id;
$module = new Apmarketplace();
$token = Tools::getToken(false);

if (Tools::getValue('action') == 'setCoverImage' && Tools::getValue('token') == $token) {
    $id_image = Tools::getValue('id_image');
    $id_product = Tools::getValue('id_product');
    $image = new Image((int)$id_image);
    Image::deleteCover((int)$id_product);
    $image->cover = 1;
    $res = $image->update();
    if ($res) {
        die('1');
    } else {
        die('2');
    }
}

if (Tools::getValue('action') == 'updateCombi') {
    $data = Tools::getValue('data');

    if (!empty($data)) {
        $id_product_attribute = $data[0]['value'];
        $combinations = new Combination((int)$id_product_attribute);
        unset($data[0]);

        if (!empty($data)) {
            $images = array();

            foreach ($data as $val_data) {
                if ($val_data['name'] == 'combination_quantity') {
                    $combinations->quantity = $val_data['value'];
                } else if ($val_data['name'] == 'combination_minimal_quantity') {
                    $combinations->minimal_quantity = $val_data['value'];
                } else if ($val_data['name'] == 'combination_reference') {
                    $combinations->reference = $val_data['value'];
                } else if ($val_data['name'] == 'combination_location') {
                    $combinations->location = $val_data['value'];
                } else if ($val_data['name'] == 'combination_low_stock_threshold') {
                    $combinations->low_stock_threshold = $val_data['value'];
                } else if ($val_data['name'] == 'combination_wholesale_price') {
                    $combinations->wholesale_price = $val_data['value'];
                } else if ($val_data['name'] == 'combination_price') {
                    $combinations->price = $val_data['value'];
                } else if ($val_data['name'] == 'combination_weight') {
                    $combinations->weight = $val_data['value'];
                } else if ($val_data['name'] == 'combination_isbn') {
                    $combinations->isbn = $val_data['value'];
                } else if ($val_data['name'] == 'combination_ean13') {
                    $combinations->ean13 = $val_data['value'];
                } else if ($val_data['name'] == 'combination_upc') {
                    $combinations->upc = $val_data['value'];;
                } else {
                    if ($val_data['value'] > 1) {
                        $images[] = $val_data['value'];
                    }
                }
            }

            if ($combinations->update(false)) {
                if (!empty($images)) {
                    $combinations->setImages($images);
                }

                StockAvailable::updateQuantity(
                    (int)$combinations->id_product,
                    (int)$id_product_attribute,
                    (int)$combinations->quantity
                );

                die('1');
            }

            die('2');
        }
    }

    die('2');
}

if (Tools::getValue('action') == 'editCombi') {
    $id_product = Tools::getValue('id_product');
    $id_product_attribute = Tools::getValue('id_product_attribute');
    $combinations = new Combination((int)$id_product_attribute, (int)$context->shop->id);
    $product = new Product($id_product);
    $image = $product->getImages($id_lang, null);

    $image_coms = Product::getCombinationImageById(
        $id_product_attribute,
        $id_lang
    );

    $number = 0;

    if (!empty($image)) {
        foreach ($image as $key_i => $val_i) {
            $imagePath = $context->link->getImageLink(
                $product->link_rewrite[$id_lang],
                $val_i['id_image'],
                ImageType::getFormattedName('small')
            );

            $image[$key_i]['src'] = $imagePath;

            if (!empty($image_coms)) {
                foreach ($image_coms as $image_com) {
                    if ($val_i['id_image'] == $image_com) {
                       $image[$key_i]['checked'] = 1;
                       $number ++;

                       break;
                    } else {
                        $image[$key_i]['checked'] = 0;
                    }
                }
            } else {
                $image[$key_i]['checked'] = 0;
            }
        }
    }

    $context->smarty->assign(array(
        'combinations' => $combinations,
        'attributes' => Product::getAttributesParams(
            (int)$id_product_attribute,
            (int)$combinations->id
        ),
        'images' => $image,
        'number' => $number,
    ));

    die(Tools::jsonEncode(array(
        'data' => 1,
        'html' => $module->fetch('module:apmarketplace/views/templates/hook/leo-form.tpl'),
    )));
}

if (Tools::getValue('action') == 'deleteCombi') {
    $id_product_attribute = Tools::getValue('id_product_attribute');
    $obj_combi = new Combination($id_product_attribute);

    if ($obj_combi->delete()) {
        die('1');
    }

    die('2');
}

if (Tools::getValue('action') == 'setDefaultCombi') {
    $id_product = Tools::getValue('id_product');
    $id_product_attribute = Tools::getValue('id_product_attribute');

    $obj_product = new Product($id_product, $id_lang, $context->shop->id);

    if (!$obj_product->deleteDefaultAttributes()) {
        die('2');
    }

    if ($obj_product->setDefaultAttribute((int)$id_product_attribute)) {
        die('1');
    }

    die('2');
}

if (Tools::getValue('action') == 'addCombination') {
    $id_product = Tools::getValue('id_product');
    $obj_product = new Product($id_product,$id_lang,$context->shop->id);
    $str_attr = Tools::getValue('array_atr');
    $array_atrs = explode(',', $str_attr);
    $groups_attrs = array(); 

    if (!empty($array_atrs)) {
        foreach ($array_atrs as $key_at => $array_atr) {
            $array_atrs[$key_at] = explode('-', $array_atr);
        }

        foreach ($array_atrs as $array_atr1) {
            $groups_attrs[$array_atr1[0]][] = $array_atr1[1]; 
        }

        $count = 1;
        $options = array();

        foreach ($groups_attrs as $key_a_g => $groups_attr) {
            $array_attrs_ = array();

            foreach ($groups_attr as $val_atri) {
                $array_attrs_[$val_atri] = $val_atri;
            }

            $options[$count] = $array_attrs_;
            $count ++;
        }

        $existingCombinationsIds = array_map(function ($o) {
            return $o['id_product_attribute'];
        }, $obj_product->getAttributeCombinations(1, false));

        $obj_plugin = new AdminAttributeGeneratorControllerWrapper();
        $obj_plugin->processGenerate($obj_product, $options);
        $allCombinations = $obj_product->getAttributeCombinations(1, false);

        $allCombinationsIds = array_map(function ($o) {
            return $o['id_product_attribute'];
        }, $allCombinations);

        $newCombinationIds = array_diff($allCombinationsIds, $existingCombinationsIds);
        $attributes = $obj_product->sortCombinationByAttributePosition($newCombinationIds, $id_lang);
        $module->ensureProductHasDefaultCombination($obj_product, $attributes);

        die('1');
    }

    die('0');
}

if (Tools::getValue('action') == 'add-new-review') {
    $array_result = array();
    $result = true;
    $id_guest = 0;

    $id_customer = $context->customer->id;
    if (!$id_customer) {
        $id_guest = $context->cookie->id_guest;
    }

    $id_product_review = Tools::getValue('id_product_review');
    $new_review_title = Tools::getValue('new_review_title');
    $new_review_content = Tools::getValue('new_review_content');
    $criterion = Tools::getValue('criterion');
    $errors = array();

    if (!Validate::isInt($id_product_review)) {
        $errors[] = $module->l('Product ID is incorrect', 'ajax');
    }
    if (!$new_review_title || !Validate::isGenericName($new_review_title)) {
        $errors[] = $module->l('Title is incorrect', 'ajax');
    }
    if (!$new_review_content || !Validate::isMessage($new_review_content)) {
        $errors[] = $module->l('Comment is incorrect', 'ajax');
    }
    if (!$criterion) {
        $errors[] = $module->l('You must give a rating', 'ajax');
    }

    $time_review = Configuration::get('APMARKETPLACE_CONFIG_TIME_REVIEW');

    if ($time_review > 0) {
        $new_reviews = Db::getInstance()->getRow(
            'SELECT * FROM `'._DB_PREFIX_.'apmarketplace_review`
            WHERE `id_customer` = '.(int)$id_customer.'
            ORDER BY `date_add`
            DESC'
        );

        if (!empty($new_reviews)) {
            $date_add = $new_reviews['date_add'];

            if (strtotime($date_add) + $time_review > time()) {
                $errors[] = $module->l('Please wait before posting another review '.Configuration::get('APMARKETPLACE_CONFIG_TIME_REVIEW').' seconds before posting a new review');
            }
        }
    }

    $product = new Product($id_product_review);
    if (!$product->id) {
        $errors[] = $module->l('Product not found', 'ajax');
    }
    if (!count($errors)) {
        $review = new ApmarketplaceReview();
        $review->content = strip_tags($new_review_content);
        $review->id_product = (int) $id_product_review;
        $review->id_customer = (int) $id_customer;
        $review->id_guest = $id_guest;
        $review->customer_name = pSQL($context->customer->firstname . ' ' . $context->customer->lastname);
        $review->title = $new_review_title;
        $review->grade = $criterion;
        $review->validate = 0;
        $review->save();
    } else {
        $result = false;
    }

    $array_result['result'] = $result;
    $array_result['errors'] = $errors;
    if ($result) {
        $array_result['sucess_mess'] = $module->l('Your comment has been added. Thank you!', 'ajax');
    }
    die(Tools::jsonEncode($array_result));
}

$url = $module->l('No Attach File');

if (isset($_FILES['file-0'])) {
    $files = $_FILES['file-0'];
    $target_file = basename($files["name"]);
    $imageFileType = Tools::strtolower(pathinfo($target_file, PATHINFO_EXTENSION));
    $files['name'] = 'apmarketplace_file_' . rand(100000000, 999999999) . '_' . rand(1000000000, 9999999999) . '.' . $imageFileType;

    $path = _PS_ROOT_DIR_ . '/upload/';
    $tmp_name = $files['tmp_name'];
    $name = $files['name'];
    move_uploaded_file($tmp_name, $path.$name);

    $url = $context->shop->getBaseURL(true, true) . 'upload/' . $files['name'];

    die("$url");
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'sendMail') {
    // Mail::Send(
    //     (int)(Configuration::get('PS_LANG_DEFAULT')), // defaut language id
    //     'leo_contact', // email template file to be use
    //     $subject, // email subject
    //     array(
    //         '{email}' => Configuration::get('PS_SHOP_EMAIL'), // sender email address
    //         '{message}' => $body // email content
    //     ),
    //     trim(Tools::getValue('email_ven')), // receiver email address 
    //     $toName, //receiver name
    //     Configuration::get('PS_SHOP_EMAIL'), //from email address
    //     $toName,  //from name
    //     null,
    //     null,
    //     $module->module_path.'mails/'
    // );

    Mail::Send(
        (int)(Configuration::get('PS_LANG_DEFAULT')), 
        'contact_vendor',
        'Contact Vendor',
        array(
            '{name}' => Tools::getValue('name'),
            '{phone}' => Tools::getValue('phone'),
            '{email}' => Tools::getValue('email'),
            '{url}' => Tools::getValue('url'),
            '{message}' => Tools::getValue('message')
        ),
        trim(Tools::getValue('email')),
        '',
        trim(Tools::getValue('email_ven')),
        Tools::safeOutput(Configuration::get('PS_SHOP_NAME')),
        null,
        null,
        $module->module_path.'/mails/'
    );

    die('1');
}

if (Tools::getValue('action') == 'render-modal-review') {
    $result = $module->renderModalReview(Tools::getValue('id_product'), Tools::getValue('is_logged'));
    die($result);
};

if (Tools::getIsset('action') && Tools::getValue('action') == 'refreshDashboard') {
    $id_module = null;
    if ($module = Tools::getValue('module')) {
        $module_obj = Module::getInstanceByName($module);
        if (Validate::isLoadedObject($module_obj)) {
            $id_module = $module_obj->id;
        }
    }
    if (Tools::getIsset('date_from') && Tools::getIsset('date_to')) {
        $date_from = Tools::getValue('date_from');
        $date_to = Tools::getValue('date_to');
    }
    $params = array(
        'date_from' => $date_from,
        'date_to' => $date_to,
        'dashboard_use_push' => (int)Tools::getValue('dashboard_use_push'),
        'extra' => (int)Tools::getValue('extra')
    );
    die(Tools::jsonEncode(Hook::exec(
        'dashboardData',
        $params,
        $id_module,
        true,
        true,
        (int)Tools::getValue('dashboard_use_push')
    )));
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'deleteProduct') {
    $id_product = Tools::getValue('id_product');
    $id_vendor = $context->cookie->cookie_vendor;
    $product = new ApmarketplaceProduct();
    $array_product = $product->getProductVendor($id_vendor, $id_product);
    if (empty($array_product)) {
        die('2');
    }
    $products = new Product($id_product);
    $products->delete();
    $product->deleteProduct($id_vendor, $id_product);
    die('1');
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'deleteImage') {
    $id_product = Tools::getValue('id_product');
    $id_vendor = $context->cookie->cookie_vendor;
    $product = new ApmarketplaceProduct();
    $product = $product->getProductVendor($id_vendor, $id_product);
    if (empty($product)) {
        die('2');
    }
    $image = new Image(Tools::getValue('id_image'));
    $image->delete();
    die('1');
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'deleteCartRule') {
    $id_cart_rule = Tools::getValue('id');
    $cart_rule = new CartRule($id_cart_rule);
    $id_product = $cart_rule->gift_product;
    $id_vendor = $context->cookie->cookie_vendor;
    $product = new ApmarketplaceProduct();
    $product = $product->getProductVendor($id_vendor, $id_product);
    if (empty($product)) {
        die('2');
    }
    $cart_rule->delete();
    die('1');
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'searchProduct') {
    $name = Tools::getValue('value');
    $products = ApmarketplaceVendorStats::searchProducts($name);
    die(Tools::jsonEncode($products));
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'searchCustomer') {
    $search_query = trim(Tools::getValue('q'));
    $customers = Db::getInstance()->executeS(
        'SELECT `id_customer`, `email`, CONCAT(`firstname`, \' \', `lastname`) as cname
        FROM `' . _DB_PREFIX_ . 'customer`
        WHERE `deleted` = 0 AND is_guest = 0 AND active = 1
        AND (
            `id_customer` = ' . (int) $search_query . '
            OR `email` LIKE "%' . pSQL($search_query) . '%"
            OR `firstname` LIKE "%' . pSQL($search_query) . '%"
            OR `lastname` LIKE "%' . pSQL($search_query) . '%"
        )
        ' . Shop::addSqlRestriction(Shop::SHARE_CUSTOMER) . '
        ORDER BY `firstname`, `lastname` ASC
        LIMIT 50'
    );
    
    die(Tools::jsonEncode($customers));
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'get-new-question') {
    $questions = new ApmarketplaceQuestion();
    $questions = $questions->getByValidate(0);
    die(Tools::jsonEncode(array(
        'questions' => count($questions)
    )));
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'getNewReview') {
    $notification = array();
    $reviews = ApmarketplaceReview::getByValidate(0, false);
    $notification['number_review'] = count($reviews);

    die(Tools::jsonEncode($notification));
}

if (Tools::getIsset('action') && Tools::getValue('action') == 'ajaxQuestionAnswer') {
    $id_question = Tools::getValue('id_question');
    if ($id_question == 0) {
        $question = new ApmarketplaceQuestion();
        $question->id_product = Tools::getValue('id_product');
        $question->id_customer = Tools::getValue('id_customer');
        $question->content = Tools::getValue('content');
        $question->date_ques = date("Y-m-d h:i:sa");
        $question->active_ques = 0;
        $question->add(true, false);
    } else {
        $answer = new ApmarketplaceAnswer();
        $answer->id_apmarketplace_question = $id_question;
        $answer->id_customer = Tools::getValue('id_customer');
        $answer->answer = Tools::getValue('content');
        $answer->date_ans = date("Y-m-d h:i:sa");
        $answer->active_ans = 0;
        $answer->add(true, false);
    }
    die('1');
}
