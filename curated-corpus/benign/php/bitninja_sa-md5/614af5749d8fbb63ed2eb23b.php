<?php

	// updatetrainingstaff.php
	require '../includes.php';
	//require 'isleagueready.php';

	$db = Connect();

	// Receiving
	// 0 = Team ID
	// 1 = Which trainer are we updating?
	// 2 = New trainer level required.

	$TeamID = filter_input(INPUT_POST, 'TeamID', FILTER_SANITIZE_STRING);
	$WhichTrainer = filter_input(INPUT_POST, 'WhichTrainer', FILTER_SANITIZE_STRING);
	$NewTrainerLevel = filter_input(INPUT_POST, 'NewTrainerLevel', FILTER_SANITIZE_STRING);

	$TeamID = intval($TeamID);
	//$WhichTrainer = intval($WhichTrainer);
	$NewTrainerLevel = intval($NewTrainerLevel);
	
	// This part shouldn't happen, it's being fed a value by the select box, not user input.
	// If for some reason it's receiving non-numeric values, something odd is happening.
	if (!is_numeric($TeamID) or !is_numeric($NewTrainerLevel)) {
		die ("TeamID or NewTrainerLevel aren't numeric in 'scripts/updatetrainingstaff.php'. Error, ending script.");
	}
	
	//if ( IsLeagueReady ($db, $WhichLeagueID, $WhichDay) == false ) {
	//	die(); // If the synch-check didn't match, kill the program so that the order isn't carried out.
	//}

	$AllTrainerWages = 0;
	$DebtError = 0;
	
	try {
		$Team = new Team;
		$Team->Load($TeamID);
		
		// Check if we can update the trainer (max £50k wages and not over £2M in debt.)
		$ThisTrainersOldLevel = $Team->TrainersArray->$WhichTrainer; // Save the trainer's old level in case we decide that we can't employ
		// this one due to funding issues. If that's the case, we need to send back this level to the jscode.js program so that it can then
		// reset the level in the turnsheet select box, as well as show an error. So what the user will see is, the level won't change at all
		// and he'll just see the error.
		
		// Limit the new trainer to level 2 if team bank balance is over £2M in debt.
		if ($Team->Finances->Balance < -2000000 and $NewTrainerLevel > 2) {
			$NewTrainerLevel = 2;
			$DebtError = 1;
		}
		
		$Team->TrainersArray->$WhichTrainer = $NewTrainerLevel; // Set trainer to new level, if no funding issues.
		
		$NewTrainerWages = $NewTrainerLevel * $NewTrainerLevel * 100;
		
		// Work out new total wages.

		foreach ($Team->TrainersArray as $Trainer) {
			$Wage = $Trainer;
			$Wage = $Wage * $Wage;
			$Wage = $Wage * 100;
			$AllTrainerWages += $Wage;
		}
		 
		// Reject change if new wages would be above £50,000.
		if ($AllTrainerWages > 50000) {
			// New wages are too high, so send back an error and don't save the changes (i.e DIE at this point.).
			// Update the wages again.
			// Work out new total wages.
			$Team->TrainersArray->$WhichTrainer = $ThisTrainersOldLevel;
			$AllTrainerWages = 0;
			foreach ($Team->TrainersArray as $Trainer) {
				$Wage = $Trainer;
				$Wage = $Wage * $Wage;
				$Wage = $Wage * 100;
				$AllTrainerWages += $Wage;
			}
			$NewTrainerWages = $ThisTrainersOldLevel * $ThisTrainersOldLevel * 100;
			die('Wages|' . $AllTrainerWages . '|' . $NewTrainerWages . '|' . $ThisTrainersOldLevel);
		}

		// Re-encode just the trainers part back to the JSON string.
		$Team->TrainersJSON = json_encode($Team->TrainersArray);
		
		$db->beginTransaction();
		
		// Now resave just the trainers section.
        $query = $db->prepare("UPDATE teams SET "
		. "TrainersJSON = :NewTrainers "
		. "WHERE ID = :TeamID");
		
		$query->bindParam(':NewTrainers', $Team->TrainersJSON, PDO::PARAM_STR);
		$query->bindParam(':TeamID', $TeamID, PDO::PARAM_INT);
		
		$query->execute();
		$db->Commit();
		
	}
	 
	catch (PDOException $ex) {
		Echo $ex->getMessage();
	}

	// The new trainer has now been saved. If the 'DebtError' variable is set to 1, the new trainer level was restricted to a level 2, so send
	// back the debt error value. The jquery script will then change the selected trainer to a level 2 and inform the manager of the problem.
	if ($DebtError == 1) {
		die('Debt|' . $AllTrainerWages . '|' . $NewTrainerWages);
	} else {
		// No error, just return the new wages.
		die('Fine|' . $AllTrainerWages . '|' . $NewTrainerWages);
	}

	
	