<?php
//******************************************************************************
/*
          TODO:
		  
temp file-lal letölteni a kliensen
		  
Preview mód Androidra is

Egy file mûvelet hibája esetén ne szakadjon meg az egész
	Android
	PC: ok
	
Tartalom titkosítása
	
ClientFill:
	vagy:
		Filelistát FILE-ként feltölteni
		END is legyen, mint utolsó sor
		A syncid-t a szerver ossza ki
	vagy:
		Maradhat POST feltöltés
		Header-ben lehet, hogy milyen hosszú (byte-okban, nem sorokban)
		Vagy itt is END
		
könyvtárat is törölni, ha üres
	
Create time szinkronizálása
	egy külön metadatában tárolja, ami a fileoké és közös

Server backup
Client backup
Client log mentése

State átírása SQL-re

Egy szinkronizálás hibával álljon le, amíg a másik géprõl egy folyik.

Character encoding HTTP header, pl: Content-Type: text/html; charset=UTF-8

ALAPELVEK:
Szerveren nem keletkezik file, csak a kliensrõl szinkronizálódik
A szerveren viszont base64 kódolva lesz tárolva a filenév, tehát nem probléma

*/
//******************************************************************************


set_time_limit(30*60);
date_default_timezone_set("UTC");

// we will do our own error handling
error_reporting(0);
set_error_handler("userErrorHandler");

//require_once('library/ConvertCharset.class.php');
// ez csak win alatt!
//$ConvFilename2Memory = new ConvertCharset("cp1250", "UTF-8", false);
//$ConvMemory2Filename = new ConvertCharset("UTF-8", "cp1250", false);



// config overrides
if ($_GET['deviceid'] == 'b12631b6948e56d9') {
	// ZTE Kis
	$_GET['userid'] = 'akos';
	$devicename = 'ZTEKis';
} elseif ($_GET['deviceid'] == '23bd526b981c88f') {
	// Galaxy Camera
	$_GET['userid'] = 'istvan';
	$devicename = 'GalaxyCamera';
} elseif ($_GET['deviceid'] == 'd962a616a8ba4f4') {
	// GalaxyChat telefon
	$_GET['userid'] = 'istvan';
	$devicename = 'GalaxyChat';
} else {
	$devicename = $_GET['deviceid'];
}

$serverRoot = "./users";
$userFolder  = "{$serverRoot}/{$_GET['userid']}/data";
$stateFile   = "{$serverRoot}/{$_GET['userid']}/state/{$devicename}-mid.txt";
$debugFolder = "{$serverRoot}/{$_GET['userid']}/debug";
$debugFile   = "{$debugFolder}/{$_GET['syncid']}-{$devicename}.deb";



if ($_GET['phase']=='clientfill') {

	// debug start...
	$debugHandle = fopen($debugFile, "w");
	logx("************** Debug start: {$_GET['syncid']} {$_GET['phase']} ***************\n");
	logxmp('GET',$_GET);

	
	// MID...
	$mid = LoadState();
	// clear state of prev. actions
	foreach ($mid as $midKey=>$midRow) {
		unset($mid[$midKey]['serverstate']);
		unset($mid[$midKey]['clientstate']);
		unset($mid[$midKey]['action']);
	}
	//logxmp('mid',$mid);

	
	// CLIENT...
	// TODO: fileként feltölteni, END is legyen
	//logx("\n$filelist");
	$client = array();
	if (strlen($_POST['param2'])>0) {
		$filelist = explode(chr(10), $_POST['param2']);
		if (is_array($filelist)) {
			foreach ($filelist as $fileline) {
				$filedata = explode('|',$fileline);
				$client[$filedata[0]] = array (
					'modUTC'   => $filedata[1],
					'modEpoch' => $filedata[2],
				);
			}
		}
	}
	//logxmp('client',$client);


	// SERVER...
	$server = array();
	// végignézzük a lemezt...
	$serverFiles = glob("{$userFolder}/*");
	if (is_array($serverFiles)) {
		foreach ($serverFiles as $fullFilename) {
			$extendAndFile = substr($fullFilename, strlen($userFolder));
			$server[$extendAndFile] = array(
				'modUTC'     => date('YmdHis', filemtime($fullFilename)),
			);
		}
	}
	//logxmp('server',$server);





	// check
	CheckAdded($mid, $client, 'client');
	//logxmp('mid',$mid);
	CheckAdded($mid, $server, 'server');
	//logxmp('mid',$mid);
	CheckUpdatedDeleted($mid, $client, 'client');
	//logxmp('mid',$mid);
	CheckUpdatedDeleted($mid, $server, 'server');
	//logxmp('mid',$mid);
	// determine
	Determine($mid, $server, 'server', 'client');
	//logxmp('mid',$mid);
	Determine($mid, $client, 'client', 'server');
	//logxmp('mid',$mid);

	if ($_GET['preview']=='true') {
		// csak preview...
		print "OK, Preview data follows:\r\n";
		foreach ($mid as $midKey=>$midRow) {
			if ($midRow["action"] != '') {
				print "\r\n{$midRow["action"]} {$midKey}";
			}
		}
		print "\r\n";
	} else {
		// nem preview, hanem igazi sync
		// save state
		SaveState($mid);
		// response to client
		print "OK";
	}
	
	
} elseif ($_GET['phase']=='getnext') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");

	// load state
	$mid = LoadState();
	
	// megnézzük, hogy mi a következõ parancs
	foreach ($mid as $midKey=>$midRow) {
		if ($midRow["action"]=='add_to_client') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: visszaküldjük
			print "download|{$midKey}";
			logx("download|{$midKey}");
			break;
		} elseif ($midRow["action"]=='client_getmeta') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: visszaküldjük
			print "getmeta|{$midKey}";
			logx("client: getmeta|{$midKey}");
			break;
		} elseif ($midRow["action"]=='add_to_server') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// If you are working on a web app that requires a lot of file uploading, make sure to use on your uploader script to set: header("Connection: close");
			// This will force the connection to be closed, and for a new connection to be opened to upload the file, which allows the file to be properly uploaded.
			header("Connection: close");
			// találtunk egy parancsot: visszaküldjük
			print "upload|{$midKey}";
			logx("upload|{$midKey}");
			break;
		} elseif ($midRow["action"]=='update_to_client') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: visszaküldjük
			print "download|{$midKey}";
			logx("download|{$midKey}");
			break;
		} elseif ($midRow["action"]=='update_to_server') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// If you are working on a web app that requires a lot of file uploading, make sure to use on your uploader script to set: header("Connection: close");
			// This will force the connection to be closed, and for a new connection to be opened to upload the file, which allows the file to be properly uploaded.
			header("Connection: close");
			// találtunk egy parancsot: visszaküldjük
			print "upload|{$midKey}";
			logx("upload|{$midKey}");
			break;
		} elseif ($midRow["action"]=='delete_from_client') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: visszaküldjük
			print "delete|{$midKey}";
			logx("delete|{$midKey}");
			break;
		} elseif ($midRow["action"]=='delete_from_server') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: végrehajtjuk...
			// töröljök a szerveren
			$fullFilename = $userFolder.$midKey;
			unlink($fullFilename);
			// töröljük a mid sort
			unset($mid[$midKey]);
			// save state még egyszer
			SaveState($mid);
			// visszaküldjük
			print "deletedfromserver|{$midKey}";
			logx("deletedfromserver|{$midKey}");
			break;
		} elseif ($midRow["action"]=='conflict') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state
			SaveState($mid);
			// találtunk egy parancsot: végrehajtjuk...
			// visszaküldjük
			print "conflict|{$midKey}|serverstate:{$midRow['serverstate']}|clientstate:{$midRow['clientstate']}";
			logx("conflict|{$midKey}|serverstate:{$midRow['serverstate']}|clientstate:{$midRow['clientstate']}");
			break;
		}/* elseif ($midRow["action"]=='delete_row_from_state') {
			// töröljük a parancsot: ne akadjon itt el, ha sikertelen
			unset($mid[$midKey]["action"]);
			// save state: nem kell
			// ez nem igazi parancs, csak kitöröljük a mid sort, és tovább engedjük a parancskeresõ ciklust
			// töröljük a mid sort
			unset($mid[$midKey]);
		}*/
	}

	
} elseif ($_GET['phase']=='download') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");
	logx($_GET['param1']);
	
	// params
	$extendAndFile = $_GET['param1'];
	$fullFilename = $userFolder.$extendAndFile;
	
	// info headers
	header("Content-Length: ".filesize($fullFilename));
	header("X-ixCloud-modUTC: ".date('YmdHis', filemtime($fullFilename)));
	
	// flush file to output
	readfile($fullFilename);
	
	// load state
	$mid = LoadState();
	// mark in the state
	$mid[$extendAndFile]['action'] = 'client_getmeta';
	// save state
	SaveState($mid);
	
} elseif ($_GET['phase']=='getmeta') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");
	logx($_GET['param1']);
	
	// params
	$extendAndFile = $_GET['param1'];
	$fullFilename = $userFolder.$extendAndFile;

	// load state
	$mid = LoadState();
	// mark in the state
	$mid[$extendAndFile]['server'] = 1;
	$mid[$extendAndFile]['client'] = 1;
	$mid[$extendAndFile]['servermodUTC'] = date('YmdHis', filemtime($fullFilename));
	$mid[$extendAndFile]['clientmodUTC'] = $_GET['modUTC'];
	unset($mid[$extendAndFile]['serverstate']);
	unset($mid[$extendAndFile]['clientstate']);
	unset($mid[$extendAndFile]['action']);
	// save state
	SaveState($mid);

	// retval
	print "OK";

} elseif ($_GET['phase']=='upload') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");
	logx($_GET['param1']);
	logxmp("GET", $_GET);
	logxmp("FILES", $_FILES);

	// params
	//$filename = base64_decode($_REQUEST['FullFileName']);
	$extendAndFile = $_GET['param1'];
	$fullFilename = $userFolder.$extendAndFile;
	
	/*$dir = dirname($filename);
	if (!file_exists($dir)) {
		umask(0);
		mkdir($dir, 0777, true);
	}*/

	// Megjegyzés: a VB.NET $_FILES['file'] néven küldi a filet. HTML form esetén lehet más is pl: $_FILES['userfile']
	if (move_uploaded_file($_FILES['file']['tmp_name'], $fullFilename)) {
		// set mod time
		touch($fullFilename, strtotime($_GET['modUTC']));
		// response
		print "OK";
		// load state
		$mid = LoadState();
		// mark in the state
		$mid[$extendAndFile]['server'] = 1;
		$mid[$extendAndFile]['client'] = 1;
		$mid[$extendAndFile]['servermodUTC']    = date('YmdHis', filemtime($fullFilename));
		$mid[$extendAndFile]['clientmodUTC']    = $_GET['modUTC'];
		unset($mid[$extendAndFile]['serverstate']);
		unset($mid[$extendAndFile]['clientstate']);
		unset($mid[$extendAndFile]['action']);
		// save state
		SaveState($mid);
		
	} else {
		logx("ERROR+-+-+-+-+: Upload: move_uploaded_file\n");
		print "ERROR+-+-+-+-+: Upload: move_uploaded_file\n";
		print_r($_FILES);
	}
	
} elseif ($_GET['phase']=='deleteconfirmed') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");
	logx($_GET['param1']);
	
	// params
	$extendAndFile = $_GET['param1'];

	// load state
	$mid = LoadState();
	// delete row in the state
	unset($mid[$extendAndFile]);
	// save state
	SaveState($mid);

	// retval
	print "OK";
	
} elseif ($_GET['phase']=='end') {

	// debug start...
	$debugHandle = fopen($debugFile, "a");
	logx("\n************** {$_GET['phase']} ***************\n");

	// load state
	//$mid = LoadState();
	// save state to debug
	//logxmp('mid',$mid);
	
	// send debug to client
	readfile($debugFile);
	
	// debug file törlése
	if ($_GET['preview']=='true') {
		unlink($debugFile);
	}
}
	





function CheckAdded(&$mid, &$side, $sideName) {
	logx("\nCheckAdded: $sideName:");
	foreach ($side as $sideKey=>$sideRow) {
		if (isset($mid[$sideKey][$sideName])) {
			// volt már korábban...
			$sidePriorState = $mid[$sideKey][$sideName];
		} else {
			// még nem volt...
			logx(" new: $sideKey");
			$mid[$sideKey]["{$sideName}state"] = 'A';
		}
	}
}


function CheckUpdatedDeleted(&$mid, &$side, $sideName) {
	logx("\n\nCheckUpdatedDeleted: $sideName:");
	foreach ($mid as $midKey=>$midRow) {
		if (isset($midRow[$sideName]) and isset($side[$midKey])) {
			// megvan most is...
			//logx(" exists: $midKey");
			// megváltozott ?
			$midTimestampStr   = $midRow["{$sideName}modUTC"];
			$midTimestampEpoch = strtotime($midTimestampStr);
			$sideTimestampStr   = $side[$midKey]['modUTC'];
			$sideTimestampEpoch = strtotime($sideTimestampStr);
			if (abs($midTimestampEpoch - $sideTimestampEpoch) > 5) {
				$mid[$midKey]["{$sideName}state"] = 'U';
				logx(" updated: $midKey (MidTimestap:{$midTimestampStr} {$sideName}Timestamp:{$sideTimestampStr})");
			}
		} elseif (isset($midRow[$sideName]) and (!isset($side[$midKey]))) {
			// törölve lett...
			$mid[$midKey]["{$sideName}state"] = 'D';
			logx(" deleted: $midKey");
		}
	}
}


function Determine(&$mid, &$side, $sideName, $otherSideName) {
	logx("\n\nDetermine $sideName:");
	foreach ($mid as $midKey=>$midRow) {
		if ($midRow["{$sideName}state"]=='A') {
			if ($midRow["{$otherSideName}state"]=='') {
				// hozzáadásra megjelöljük
				$mid[$midKey]['action'] = "add_to_{$otherSideName}";
			} else {
				// conflict
				$mid[$midKey]['action'] = "conflict";
			}
		} elseif ($midRow["{$sideName}state"]=='U') {
			if ($midRow["{$otherSideName}state"]=='') {
				// hozzáadásra megjelöljük
				$mid[$midKey]['action'] = "update_to_{$otherSideName}";
			} elseif ($midRow["{$otherSideName}state"]=='D') {
				// hozzáadásra megjelöljük (automata konfliktusfeloldás)
				$mid[$midKey]['action'] = "update_to_{$otherSideName}";
				logx(" updated on {$sideName} deleted from {$otherSideName}: {$midKey}");
			} else {
				// conflict
				$mid[$midKey]['action'] = "conflict";
			}
		} elseif ($midRow["{$sideName}state"]=='D') {
			if ($midRow["{$otherSideName}state"]=='') {
				// hozzáadásra megjelöljük
				$mid[$midKey]['action'] = "delete_from_{$otherSideName}";
			} elseif ($midRow["{$otherSideName}state"]=='D') {
				// érvényét vesztett sor törlése (PHP-ben lehet ciklus közben is)
				unset($mid[$midKey]);
				logx(" deleted from both side: {$midKey}");
			} elseif ($midRow["{$otherSideName}state"]=='U') {
				// nincs teendõ, pár sorral feljebb ez kezelve van a fordított irányban
				// de ez is kell ide, hogy ne jelezzen konfliktust
			} else {
				// conflict
				$mid[$midKey]['action'] = "conflict";
			}
		}
	}
}






function LoadState() {
	$mid = array();
	if (file_exists($GLOBALS['stateFile'])) {
		$mid = unserialize(file_get_contents($GLOBALS['stateFile']));
	}
	return $mid;
}

function SaveState(&$mid) {
	file_put_contents($GLOBALS['stateFile'],serialize($mid));
}


function logx($text) {
	fwrite($GLOBALS['debugHandle'], "\n$text");
}

function logxmp($caption, $arr) {
	logx("\n$caption:");
	$dat = print_r($arr, true);
	fwrite($GLOBALS['debugHandle'], $dat);
}



// user defined error handling function
function userErrorHandler($errno, $errmsg, $filename, $linenum, $vars) 
{
    // timestamp for the error entry
    $dt = date("Y-m-d H:i:s (T)");

    // define an assoc array of error string
    // in reality the only entries we should
    // consider are E_WARNING, E_NOTICE, E_USER_ERROR,
    // E_USER_WARNING and E_USER_NOTICE
    $errortype = array (
                E_ERROR              => 'Error',
                E_WARNING            => 'Warning',
                E_PARSE              => 'Parsing Error',
                E_NOTICE             => 'Notice',
                E_CORE_ERROR         => 'Core Error',
                E_CORE_WARNING       => 'Core Warning',
                E_COMPILE_ERROR      => 'Compile Error',
                E_COMPILE_WARNING    => 'Compile Warning',
                E_USER_ERROR         => 'User Error',
                E_USER_WARNING       => 'User Warning',
                E_USER_NOTICE        => 'User Notice',
                E_STRICT             => 'Runtime Notice',
                E_RECOVERABLE_ERROR  => 'Catchable Fatal Error'
                );
    // set of errors
    $user_errors = array(E_ERROR, E_WARNING, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err .= "\t<datetime>" . $dt . "</datetime>\n";
    $err .= "\t<errornum>" . $errno . "</errornum>\n";
    $err .= "\t<errortype>" . $errortype[$errno] . "</errortype>\n";
    $err .= "\t<errormsg>" . $errmsg . "</errormsg>\n";
    $err .= "\t<scriptname>" . $filename . "</scriptname>\n";
    $err .= "\t<scriptlinenum>" . $linenum . "</scriptlinenum>\n";

    if (in_array($errno, $user_errors)) {
        //$err .= "\t<vartrace>" . wddx_serialize_value($vars, "Variables") . "</vartrace>\n";
		if (!headers_sent()) {
			header("X-ixCloud-Error: General error");
			//header($_SERVER['SERVER_PROTOCOL'].' 500 Internal Server Error', true, 500);
		}
		echo "ERROR+-+-+-+-+: $err";
		logx("ERROR+-+-+-+-+: $err");
		exit;
    } else {
		//print "[[$errno]]";
	}
    

}

?>