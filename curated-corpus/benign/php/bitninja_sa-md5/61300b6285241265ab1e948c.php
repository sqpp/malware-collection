<?php
require_once 'string.php';
/*
Returns a human readable size
*/
function size_hum_read($size) {
  $i=0;
  $iec = array("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB");
  while( ($x=($size/1024)) > 1 ) {
   $size=$x;
   $i++;
  }

  return substr($size,0,strpos($size,'.')+3).$iec[$i];
}

function getFileError($error) {
	$upload_errors = array(
			UPLOAD_ERR_OK        => "No errors.",
			UPLOAD_ERR_INI_SIZE    => "Larger than upload_max_filesize.",
			UPLOAD_ERR_FORM_SIZE    => "Larger than form MAX_FILE_SIZE.",
			UPLOAD_ERR_PARTIAL    => "Partial upload.",
			UPLOAD_ERR_NO_FILE        => "No file.",
			UPLOAD_ERR_NO_TMP_DIR    => "No temporary directory.",
			UPLOAD_ERR_CANT_WRITE    => "Can't write to disk.",
			UPLOAD_ERR_EXTENSION     => "File upload stopped by extension.",
			UPLOAD_ERR_EMPTY        => "File is empty." // add this to avoid an offset
		);

		return $upload_errors[$error];
}

    $json = array();
    $url = "files";
    $destdir = "../$url/";

	if( $_FILES["file"]["size"] < 20000000 )  {
		if( $_FILES["file"]["error"] > 0 ) {
			$json['error'] = 'Server error: ' . getFileError($_FILES["file"]["error"]);
      $json['status'] = -1;
		}
		else {
			$json['fname'] = TString::urlize($_FILES["file"]["name"]);
      $json['fname'] = TString::str_lreplace('-', '.', $json['fname']);
      $json['url'] = "/$url/".$json['fname'];
			$json['type'] = $_FILES["file"]["type"];
			$json['size'] = $_FILES["file"]["size"];
			$json['hsize'] = size_hum_read($_FILES["file"]["size"]);

			if( file_exists($destdir . $json['fname']) ) {
        $json['status'] = 1;    //already exists
			}
			else {
				if( move_uploaded_file($_FILES["file"]["tmp_name"], $destdir . $json['fname']) == true )
            $json['status'] = 0;    //all OK
        else
            $json['error'] = 'move_uploaded_file error!';
			}
		}
  }
	else
  {
		unlink($_FILES["file"]["tmp_name"]);
    $json['error'] = "File is too big!";
		$json['status'] = -2;    //file is too big
  }

  echo json_encode($json);
?>
