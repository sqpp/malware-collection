<?php
$version = 2.3;
error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);
// Script to convert WD clientraw data to YoWindow xml

// VERSION HISTORY:
//
// Jim McMurry 
// jcweather.us - jmcmurry@mwt.net
// Version 1.0  06-Jan-2010
//         1.1  08-Jan-2010 Added new precip rate and icon handling to support Build 225
//         1.2  11-Jan-2010 Changed humidity and rain entries to support Build 226 - No changes needed for Build 227
//         1.3  16-Jan-2010 Added clientrawextra support and snow level plus daily rain to support build 230
//         1.4  19-Jan-2010 Added some logic to enhance snow determination
//
// Rainer Finkeldeh
// bashewa.com - rainer@bashewa.com
// Version 1.5  22-Jan-2010 Added xml tags for mist and thunder.
//                          Added xml tag  for cloud formation.
//                          Added icon switch to "showers" (icon 22) if the rainrate > 0 and not already raining.
//                          Added option to have clouds determined by you and not Yowindow using the WD icons.
//                          Added make mist when cloud height is below a specified altitude
//                          Added decription for rain intensity.
//                          NOTE: still needs some fine tuning! (and probably some in WD as well)
// Version 1.6  24-Jan-2010 Added solar logic to determine icon to use.
// Jim jumped back in while Rainer was busy
// Version 1.7   9-Mar-2010 Added $mods for tracking code
//                          Changes to how fog is handled
// Version 1.8   4-Apr-2010 Fixed rain tags and multiplier, and added solar & uv
// Version 1.9   8-Jun-2010 Changed rain logic to exclude weather description because of language differences
// Version 2.0  22-Jun-2010 Added the minimum lightning strikes variable
// Version 2.1  23-Sep-2010 Fixed problem with night thunderstorms not showing rain when actually raining
//                          Fixed problem where showing raining after it actually stopped
// Version 2.2  10-Nov-2010 Added the barometric trend - new yowindow capability
// Version 2.3  05-Dec-2010 Worked on snow
// Version 2.4  11-Jan-2011 Changed the snow tag so it works properly now

// Settings
date_default_timezone_set("Pacific/Auckland");   // Zones available at http://us2.php.net/manual/en/timezones.php
$software  = "WD";
$datafile  = "./clientraw.txt";       // location of your datafiles relative to this script
$extrafile = "./clientrawextra.txt";

$incCloudTag  = true;  // if true we decide else let Yowindow decide cloud
                       // formation from METAR or WD icon (overrides $incWDiconTag if true).

$incWDiconTag = false; // if true let Yowindow decide cloud formation from WD icon.
                       // (if this is required then $incCloudTag must be false).

$reportMistAt = 30;    // meters AGL (30m = ±90ft) ... if cloud base is below this then always  //was 30
                       // report mist/fog (meters = ft / 3.2808399)
					   
$MinStrikes = 5;      // minimum number of lightning strikes to trigger lightning					

$SolarAMOffset = 60;   // Minutes to delay using solar data after sunrise due to trees or mountains to the east
$SolarPMOffset = 60;   // Minutes to stop using solar data prior to sunset due to trees or mountains to the west

$update_inteval    = 60;   // upload interval in seconds of PWS XML
$update_maxuploads = 10;   // max uploads allowed per session

// Here you can name/translate the different types of weather/clouds based on the icon code
/* CLOUD XML TAG VALUES
---------------------------------------------------------
[ clear | fair | partlyCloudy | mostlyCloudy | overcast ]
  clear        - no clouds in the sky
  fair         - 30% or less cloud cover
  partlyCloudy - 60% or less cloud cover
  mostlyCloudy - 60-100% cloud cover with clearings
  overcast     - 100% cloud cover
------------------------------------------------------*/
$Conditions = array
   //            (------Description-----,----Clouds----)
   (  0 => array ('Sunny'               ,'clear'       )
   ,  1 => array ('Clear Night'         ,'clear'       )
   ,  2 => array ('Cloudy'              ,'overcast'        )       // changed from fair
   ,  3 => array ('Mostly Cloudy'       ,'mostlyCloudy')
   ,  4 => array ('Night Partly Cloudy' ,'partlyCloudy')          
   ,  5 => array ('Partly Cloudy'       ,'partlyCloudy')
   ,  6 => array ('Fog'                 ,'overcast'            )
   ,  7 => array ('Hazy'                ,''            )
   ,  8 => array ('Heavy Rain'          ,'overcast'    )
   ,  9 => array ('Mostly Clear'        ,'fair'        )
   , 10 => array ('Misty'               ,'overcast'    )
   , 11 => array ('Night Fog'           ,'overcast'            )
   , 12 => array ('Night Heavy Rain'    ,'overcast'    )
   , 13 => array ('Night Overcast'      ,'overcast'    )
   , 14 => array ('Night Rain'          ,'overcast'    )
   , 15 => array ('Night Showers'       ,'overcast'    )
   , 16 => array ('Night Snow'          ,'overcast'    )
   , 17 => array ('Night Thunder'       ,'overcast'    )
   , 18 => array ('Overcast'            ,'overcast'    )
   , 19 => array ('Partly Cloudy'       ,'partlyCloudy'    )     // changed back from overcast    
   , 20 => array ('Rain'                ,'overcast'    )
   , 21 => array ('Hard Rain'           ,'overcast'    )
   , 22 => array ('Showers'             ,'overcast'    )
   , 23 => array ('Sleet'               ,'overcast'    )
   , 24 => array ('Sleet Showers'       ,'overcast'    )
   , 25 => array ('Snowing'             ,'overcast'    )
   , 26 => array ('Snow Melt'           ,'clear'       )
   , 27 => array ('Snow Showers'        ,'overcast'    )
   , 28 => array ('Sunny'               ,'clear'       )
   , 29 => array ('Thundershowers'      ,'overcast'    )
   , 30 => array ('Thundershowers*'     ,'overcast'    )
   , 31 => array ('Thunderstorms'       ,'overcast'    )
   , 32 => array ('Tornado Warning'     ,'overcast'    )
   , 33 => array ('Windy'               ,''            )
   , 34 => array ('Stopped Raining'     ,'mostlyCloudy')
   , 35 => array ('Windy and Raining'   ,'overcast'    )
   );
// End of user configuration

//------------------------------------------------------------------------------
// allow viewing of generated source
if ( isset($_REQUEST['sce']) && strtolower($_REQUEST['sce']) == 'view' ) {
//--self downloader --
   $filenameReal = __FILE__;
   $download_size = filesize($filenameReal);
   header('Pragma: public');
   header('Cache-Control: private');
   header('Cache-Control: no-cache, must-revalidate');
   header("Content-type: text/plain");
   header("Accept-Ranges: bytes");
   header("Content-Length: $download_size");
   header('Connection: close');
   readfile($filenameReal);
   exit;
} 
//------------------------------------------------------------------------------
$data  = get_raw_data( $datafile, " ");
$extra = get_raw_data( $extrafile, " ");

// Here we gather the data and do Conversions
$h = (int)$data[ 29];
$m = (int)$data[ 30];
$s = (int)$data[ 31];
$M = (int)$data[ 36];
$D = (int)$data[ 35];
$Y = (int)$data[141];
$tstamp = mktime($h,$m,$s, $M,$D,$Y);

$Time = date("D, d-M-Y @ h:i:s a",$tstamp);

$sta  = split("-",$data[32]);
$PWS  = str_replace("_"," ",$sta[0]); // PWS Station name


$wSpeed  = KtsToMps($data[1]);  // Convert knots to m/s
$wDirec  = $data [  3]; // Wind direction in degrees
$Temp    = $data [  4]; // Temperature
$Baro    = $data [  6]; // Pressure
$BTrend  = $data [ 50]; // Barometric trend
$Humid   = $data [  5]; // Humidity
$DayRain = $data [  7]; // Rain today
//$RainRate= $data [ 10]*60; // Rain rate per minute * 60 = mm/h
$RainRate= $data [ 10]; // Rain rate per minute mm
$Solar   = $data [ 34]; // Solar %
$SolarWM = $data [127]; // Solar W/m2
$UV      = $data [ 79]; // UVI
$Icon    = $data [ 48]; // Current conditions icon number
$Dewp    = $data [ 72]; // Dewpoint
$Lat     = $data [160];
$Lng     =-($data[161]);// invert because in WD it's minus for EAST of GMT
$SnowLvl = $extra[697]; // Snow depth
$gotSolar= $extra[701]=="s1"; // Solar info present
$wdDesc  = ' '.strtolower($data[ 49]); // Inputted weather description
$Strikes = $data [114]; // Lightning
if ($Strikes < $MinStrikes) {
	$Strikes = 0;       
}
$wdIcon     = $Icon;
$SnowRate   = 0;
$gotThunder = false;
$gotMist    = false;
$itsRaining = false;
$mods = "Mods:";

// Here we make decisions on the data we got

// Snow section
if (strpos($wdDesc,"snow_on_ground") > 0) {  // Take care of a problem peculiar to KVOK.  Doesn't hurt to leave it here.
	$wdDesc = str_replace("snow_on_ground"," ",$wdDesc);   // remove it
	$mods .= " snow_on_ground removed";
	if ($Icon == 16 || $Icon == 25 || $Icon == 27) {   
		$Icon = 5;                                // Because WD has it wrong in this situation
		$mods .= " icon changed due to KVOK issue";		
	}	
} 

// Here we determine icon from Solar (if we have one) 
// This is disabled right now because WD should be doing a better job if set right.
// Change all $sIcon to $Icon to reactivate
if ($gotSolar) {
   if (version_compare(PHP_VERSION, '5.2.1', '>'))
	     $sun_info = date_sun_info(strtotime(date("Y/n/j",time())), $Lat, $Lng);
   else $sun_info = date_sun_info(strtotime(date("Y/n/j",time())), $Lng, $Lat);  // A bug in the earlier versions.

   if (time() > $sun_info[sunrise] + ($SolarAMOffset * 60) && time() < $sun_info[sunset] - ($SolarPMOffset * 60)) {
		if ($Solar >= 83) { $sIcon = 0; } else    // Sunny
		if ($Solar >= 80) { $sIcon = 9; } else    // Mostly Clear/Fair
		if ($Solar >= 75) { $sIcon = 5; } else    // Partly Cloudy
		if ($Solar >= 50) { $sIcon = 3; } else    // Mostly Cloudy
		if ($Solar >= 10) { $sIcon = 18;} else    // Overcast          // perhaps 20%
		if ($Solar >   0) { $sIcon = 6; }         // Fog
		$mods .= " solar indicates icon #" . $sIcon.'('.$Conditions[$sIcon][0].') at this moment';
   } 
}

if ( $Icon==8 || $Icon==12 || ( $Icon>=14 && $Icon<=15 ) || ( $Icon>=20 && $Icon<=24 ) || ($Icon>=29 && $Icon<=30) || $Icon==35) {
	$itsRaining = true;
} else {
	$itsRaining = ($RainRate > 0 && $Icon==17) || ($RainRate > 0 && $Icon==31);  // Night Thunder/Thunderstorms need to be checked for actual rain happening
}

switch ($Icon) {
   // Snow
   case 24:
   case 27: $SnowRate =  1; break;     // Assign a snow rate based on the WD snow and sleet icons
   case 23:
   case 25: $SnowRate = 10; break;   
   // Thunder   
   case 17:
   case 29:
   case 30:
   case 31: $gotThunder = true; break; // include thunder tag   
   // Mist
   case  6:
   case  7:
   case 10:
   case 11: $gotMist = true; break;    // include misty tag
}

if ($gotThunder && $Strikes==0) {
	$Strikes = 1;  // in case they don't have a lightning detector
} else {
	$gotThunder = $Strikes > 0;      
}

// Now get weather description and cloud formation
$Desc   = $Conditions[$Icon][0];  // Get the Weather Description from the $Conditions array above
$Clouds = $Conditions[$Icon][1];  // Get the Clouds  Description from the $Conditions array above
if (empty($Clouds)) {
	$incCloudTag = false;
	$incWDiconTag = true;
}

// Change rain intensity description according to the rain rate.
// WD slowly decreases the rainrate when it's actualy no longer raining.
if ($itsRaining && $RainRate>0) {// in mm/h
	switch (true) {
	   case ($RainRate <=  0.1): $Desc = 'Light Drizzle';       $Icon = 20; $mods .= ", set " . $Desc; break;
	   case ($RainRate <=  0.3): $Desc = 'Drizzle';             $Icon = 20; $mods .= ", set " . $Desc; break;
	   case ($RainRate <=  1.0): $Desc = 'Light Rain';          $Icon = 20; $mods .= ", set " . $Desc; break;
	   case ($RainRate <=  3.5): $Desc = 'Moderate Rain';       $Icon = 22; $mods .= ", set " . $Desc; break;
	   case ($RainRate <=  7.0): $Desc = 'Heavy Rain';          $Icon =  8; $mods .= ", set " . $Desc; break;
	   case ($RainRate <= 10.0): $Desc = 'Heavy Shower';        $Icon = 21; $mods .= ", set " . $Desc; break;
	   case ($RainRate <= 15.0): $Desc = 'Thunderstorm';        $Icon = 29; $mods .= ", set " . $Desc; $gotThunder = true; break; // moderate
	   case ($RainRate <=100.0): $Desc = 'Severe Thunderstorm'; $Icon = 31; $mods .= ", set " . $Desc; $gotThunder = true; break;
	   default                 : $Desc = 'Extremely Severe Thunderstorm'; $mods .= ", set " . $Desc;   $gotThunder = true; $Icon = 31; 
	}
} else {
	if ($RainRate>0) $mods .= ", rain rate set 0 ";
	$RainRate=0;	
}	

// determine cloud height (in meters) to see if we've got mist and add it to the description
$cldhgt  = max(0,($Temp-$Dewp)/0.00802);      // cloud height
$cldtemp = -0.00984 * $cldhgt + $Temp;        // cloud temperature (it could be snow/sleet if cloud temp <= ground temp)
if ($cldhgt<$reportMistAt && $Icon != 10) {   // Don't want "Misty and Misty"        
   $gotMist = true;                                                 // do we need to consider wind?
   $Desc.= ' and Mist';
   $mods .= ", used cloudheight";
}

// Handle extra tags needed in XML
if ($incCloudTag ) $cloudTag   = "\n".'      <clouds value="' . $Clouds . '"/>'; else
if ($incWDiconTag) $iconTag    = "\n".'      <icon id="' . $Icon . '" format="' . $software . '"/>';

if ($SnowRate > 0 && $SnowLvl == 0)        // If they haven't input any snow levels but WD says it's snowing
   $SnowLvl = 0.1;

if ($SnowRate > 0 || $SnowLvl > 0) {
	$snowTag  = "\n" . ' <snow>';
	$snowTag  .= "\n" . ' <rate value="' . $SnowRate . '" unit="mmph"/>';  // We always want to give it a rate so that we have control over snowing on YoWindow
	$snowTag  .= "\n" . ' <level value="' . $SnowLvl . '" unit="cm"/>';
	$snowTag  .= "\n" . ' </snow>';
}

if ($SolarWM > 0 ) $solarTag   = "\n".'        <solar radiation="' . $Solar . '" energy="' . $SolarWM . '"/>';      
if ($UV > 0 )      $uvTag      = "\n".'        <uv value="' . $UV . '"/>';
$thunderTag = "\n".'      <thunderstorm value="' . $Strikes . '"/>';           // Always want this tag or METAR thunder will prevail

if ($gotMist     ) {
   switch ($Icon) { // [ fog | haze | dust ]
      case  6: $type = ' type="fog"';  break;
      case  7: $type = ' type="haze"'; break;
      case 10: $type = ' type="fog"';  break;        
      case 11: $type = ' type="fog"';  break;
//      default: $type = '';
      default: $type = ' type="fog"';
   }
   $mistyTag = "\n".'      <mist'.$type.'/>';                
   $mods .= ", added mist" . $type;
}

// Here we output the XML data
header("HTTP/1.1 200 OK");
header("Pragma: no-cache");
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
header("Cache-Control: no-store, no-cache, must-revalidate");  // HTTP/1.1
header("Cache-Control: no-cache, cachehack=".time());
header("Cache-Control: post-check=-1, pre-check=-1", false);
header("Content-type: application/xml; charset=UTF-8");
echo '<!--PWS: '.$PWS.' on '.$Time.'
Timezone: '.date('e').'
Data generated with yowindow-xml.php v'.$version.'
Clouds: height '.round($cldhgt).'m ... temp '.round($cldtemp,1).' C
Solar: '.$Solar.'% '.($gotSolar?'(present)':'(absent)').' / Rain Rate: '.$data [ 10].' mm/h
WD Description: '.$wdDesc.'
'.$software.': Icon #'.$wdIcon.'('.$Conditions[$wdIcon][0].') changed to #'.$Icon.'('.$Conditions[$Icon][0].')
' .$mods.'
-->
<response>
  <auto_update>
    <timestamp value="'     .date("r",$tstamp).'"/>
    <interval value="'      .$update_inteval.'"/>
    <maxuploads value="'    .$update_maxuploads.'"/>
  </auto_update>
  <current_weather>
    <temperature>
      <current value="'   . $Temp   . '"/>  
    </temperature>
    <humidity value="'      . $Humid  . '"/>
    <pressure value="'      . $Baro   . '" trend="' . $BTrend . '"/>'
                            . $solarTag  
                            . $uvTag . '
    <wind>
      <speed value="'       . $wSpeed . '"/>
      <direction value="'   . $wDirec . '"/>
    </wind>
    <sky>'                  . $iconTag . '
      <description value="' . $Desc . '"/>'
                            . $cloudTag . '
      <precipitation>
        <rain>	  
          <rate value="'       . $RainRate . '"/>
          <daily_total value="'. $DayRain . '"/>	
        </rain>'			 
                            . $snowTag . '
      </precipitation>'     . $thunderTag
                            . $mistyTag . '
    </sky>	
  </current_weather>
</response>';
// End of generation code - Supporting functions follow

function KtsToMps ($kts, $prec = 0) {
   $prec = (integer)$prec;
   $mps  = (float)$kts / 1.9438444924406;
return round($mps, $prec);
}

function get_raw_data( $rawfile , $delimiter) {
   $rawdata = array();
   $fd = fopen($rawfile, "r");
   if ($fd) {
      $rawinfo = '';
      while (! feof ($fd) ) $rawinfo .= fread($fd, 8192);
      fclose($fd);
      $rawinfo = preg_replace("/\x0D/", "", $rawinfo);
      $rawinfo = preg_replace("/\x0A/", "", $rawinfo);
      $rawdata = explode ($delimiter, $rawinfo);
   } else
      $rawdata[0]= -9999;
return $rawdata;
}

?>