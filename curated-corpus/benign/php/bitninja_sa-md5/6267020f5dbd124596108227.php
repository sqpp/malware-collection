<?php
require_once __DIR__ . "/../../../include/dbcommon.php";

use Curl\Curl;
use Base\{ArrayUtils, DateTimeUtils, GenericException, Utils as BaseUtils, Validations};
use Base\QueryBuilder\{Select};
use BBPlanner\{Utils};
use BBPlanner\Constants\{AlloggiatiWebConfigurationTypes, AlloggiatiWebErrorCodes, GuestTypes};
use BBPlanner\Entities\{InternalStructuresServices, ReservationGuest, ReservationsGuestsServices, StructuresServices};

BaseUtils::executeCatchedScript(function () {
    Validations::validate($_POST, [
        "id_struttura" => Validations::or([Validations::IS_EMPTY, is_numeric]),
        "idStrutturaInterna" => Validations::or([Validations::IS_EMPTY, is_numeric]),
        "data" => Validations::IS_DATE_STRING,
    ]);

    if (Validations::isNotEmpty($_POST["idStrutturaInterna"])) {
        $internalStructure = InternalStructuresServices::get($_POST["idStrutturaInterna"]);
        $structure = $internalStructure->getStructure();

        $configurationTypeID = $internalStructure->alloggiatiWebConfigurationTypeID;
        $identifier = $internalStructure->alloggiatiWebIdentifier;
        $password = $internalStructure->alloggiatiWebPassword;
        $key = $internalStructure->alloggiatiWebCertificatePassword;
    } else {
        $structure = StructuresServices::get($_POST["id_struttura"] ?: $_SESSION["bbplannerData"]->structureID);

        $configurationTypeID = $structure->alloggiatiWebConfigurationTypeID;
        $identifier = $structure->alloggiatiWebIdentifier;
        $password = $structure->alloggiatiWebPassword;
        $key = $structure->alloggiatiWebCertificatePassword;
    }

    if (!Utils::isProduction()) {
        // TEMP: hello@abrooms.it
        // $identifier = "MI009641";
        // $password = "lZHZHKIS";
        // $key = "AKoDW9oUQMA5UsHgjOIUM/q8WHnLU0vYJT+UnR/xmqsUjLUD8+h4I1SyinK6yfXWMQ==";

        // TEMP: agriturismo.tenutasantandrea@gmail.com
        // $identifier = "LE003489";
        // $password = "ShjLHzw8";
        // $key = "AP+JnTPU+uoCbNRfn/HGFhCiYH+t5vv20VyJ8KNJ74VHVsaxoGjNyzq2j2pF9g8ELg==";
    }

    // GUESTS DATA RETRIEVEMENT

    $curl = new Curl();

    $curl->get(Utils::getBBPlannerUri() . "comunicazione_alloggiati_txt.php", [
        "id_struttura" => $structure->id,
        "id_struttura_interna" => $_POST["idStrutturaInterna"],
        "start" => $_POST["data"],
        "end" => $_POST["data"],
        "simplyEcho" => "1",
    ]);

    $data = $curl->getResponse();

    if ($curl->isError()) {
        $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

        throw new GenericException("FILE-GENERATION-ERROR", 500, [
            "structureID" => $structure->id,
            "errorCode" => $curl->getErrorCode(),
            "errorMessage" => $curl->getErrorMessage(),
            "response" => $data,
            "showAlloggiatiDownloadButton" => true,
        ]);
    }

    if (Validations::isEmpty($data->guestsData)) {
        $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

        throw new GenericException("EMPTY-GUESTS-DATA", 500, [
            "structureID" => $structure->id,
            "showAlloggiatiDownloadButton" => true,
        ]);
    }

    // SENDING GUESTS DATA

    $client = new SoapClient(ALLOGGIATI_WEB_ENDPOINT, [
        "trace" => 1,
        "stream_context" => stream_context_create([
            "http" => [
                "user_agent" => "PHPSoapClient"
            ],
        ]),
        "cache_wsdl" => WSDL_CACHE_NONE
    ]);

    $response = $client->GenerateToken([
        "Utente" => $identifier,
        "Password" => $password,
        "WsKey" => $key,
    ]);

    $baseErrorMessage = "Vi preghiamo di riprovare più tardi e, se il problema non dovesse risolversi nel giro di qualche ora, di contattarci tramite il modulo di assistenza.\n\nVi ricordiamo inoltre che, la generazione classica del file, è comunque disponibile.";

    if (!is_object($response) || !is_object($response->result)) {
        $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

        throw new GenericException("SEND-REQUEST-TO-ALLOGGIATI-WEB-SERVER-1", 500, [
            "structureID" => $structure->id,
            "alloggiatiResponse" => $response,
            "message" => "Stiamo riscontrando dei problemi nella connessione ad AlloggiatiWeb. " . $baseErrorMessage,
            "showAlloggiatiDownloadButton" => true,
        ]);
    }

    if (!$response->result->esito) {
        if (in_array($response->result->ErroreCod, [AlloggiatiWebErrorCodes::USER_NOT_FOUND, AlloggiatiWebErrorCodes::WRONG_PASSWORD, AlloggiatiWebErrorCodes::WRONG_KEY])) {
            throw new GenericException("CREDENTIALS-NOT-CORRECT", 500, [
                "structureID" => $structure->id,
                "alloggiatiResponse" => $response,
            ]);
        } else {
            $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

            throw new GenericException("UNKNOWN-ERROR-1", 500, [
                "structureID" => $structure->id,
                "alloggiatiResponse" => $response,
                "message" => $baseErrorMessage,
                "showAlloggiatiDownloadButton" => true,
            ]);
        }
    }

    $token = $response->GenerateTokenResult->token;

    if (Utils::isProduction()) {
        if ($configurationTypeID === AlloggiatiWebConfigurationTypes::UNIQUE_STRUCTURE) {
            $functionName = "Send";
            $resultObjectName = "SendResult";
        } else if ($configurationTypeID === AlloggiatiWebConfigurationTypes::APARTMENTS) {
            $functionName = "GestioneAppartamenti_FileUnico_Send";
            $resultObjectName = "GestioneAppartamenti_FileUnico_SendResult";
        }
    } else {
        if ($configurationTypeID === AlloggiatiWebConfigurationTypes::UNIQUE_STRUCTURE) {
            $functionName = "Test";
            $resultObjectName = "TestResult";
        } else if ($configurationTypeID === AlloggiatiWebConfigurationTypes::APARTMENTS) {
            $functionName = "GestioneAppartamenti_FileUnico_Test";
            $resultObjectName = "GestioneAppartamenti_FileUnico_TestResult";
        }
    }

    // BaseUtils::dumpDati(compact("functionName", "resultObjectName"));

    $response = $client->{$functionName}([
        "Utente" => $identifier,
        "token" => $token,
        "ElencoSchedine" => explode("\r\n", $data->guestsData),
    ]);

    // BaseUtils::dumpDati($response);

    if (!is_object($response) || !is_object($response->{$resultObjectName})) {
        $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

        throw new GenericException("SEND-REQUEST-TO-ALLOGGIATI-WEB-SERVER-2", 500, [
            "structureID" => $structure->id,
            "alloggiatiResponse" => $response,
            "message" => "Stiamo riscontrando dei problemi nella connessione ad AlloggiatiWeb. " . $baseErrorMessage,
            "showAlloggiatiDownloadButton" => true,
        ]);
    }

    $result = $response->{$resultObjectName};

    if (!$result->esito) {
        if ($result->ErroreCod === AlloggiatiWebErrorCodes::WRONG_CONFIGURATION) {
            if ($configurationTypeID === AlloggiatiWebConfigurationTypes::UNIQUE_STRUCTURE) {
                $message = "AlloggiatiWeb è configurato con la gestione Appartameti ma su BBPlanner è configurato con la gestione unica. Andare in configurazione, selezionare Appartamenti come Tipo Configurazione e inserire per ogni camera gli ID degli Appartamenti di AlloggiatiWeb";
            } else if ($configurationTypeID === AlloggiatiWebConfigurationTypes::APARTMENTS) {
                $message = "AlloggiatiWeb è configurato con la gestione Unica ma su BBPlanner è configurato con la gestione Appartamenti. Andare in configurazione e selezionare Struttura UNica come Tipo Configurazione";
            }

            throw new GenericException("WRONG-CONFIGURAZIONE", 500, [
                "structureID" => $structure->id,
                "alloggiatiResponse" => $response,
                "message" => $message,
            ]);
        } else {
            $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

            throw new GenericException("UNKNOWN-ERROR-2", 500, [
                "structureID" => $structure->id,
                "alloggiatiResponse" => $response,
                "message" => $baseErrorMessage,
                "showAlloggiatiDownloadButton" => true,
            ]);
        }
    }

    $exportDateTime = date("Y-m-d H:i:s");

    $reservationsGuests = ReservationsGuestsServices::getSome(function (Select $query) use ($data) {
        $query->isAnyOf("id", $data->reservationsGuestsIDS);
    });

    $elaboratedGuests = [];
    $notElaboratedGuests = [];


    $results = $response->result->Dettaglio->EsitoOperazioneServizio;

    // BaseUtils::dumpDati([
    //     "results" => $results,
    //     "isarray" => is_array($results),
    //     "isobject" => is_object($results),
    // ]);

    if (is_object($results)) {
        $results = [$results];
    }

    // BaseUtils::dumpDati($results);

    array_walk($results, function (stdClass $result, int $index) use ($data, $reservationsGuests, &$elaboratedGuests, &$notElaboratedGuests) {
        $reservationGuestID = $data->reservationsGuestsIDS[$index];

        $reservationGuest = ArrayUtils::find($reservationsGuests, function (ReservationGuest $reservationGuest) use ($reservationGuestID) {
            return $reservationGuest->id === $reservationGuestID;
        });

        if ($result->esito && Validations::isEmpty($result->ErroreCod)) {
            $elaboratedGuests[] = $reservationGuest;
        } else {
            $notElaboratedGuests[] = (object) [
                "reservationGuest" => $reservationGuest,
                "errorInfo" => $result->ErroreDettaglio ?: ($reservationGuest->guestTypeID === GuestTypes::FAMILY_LEADER ? "Familiari non validi" : "Membri Gruppo non validi"),
            ];
        }
    });

    array_walk($reservationsGuests, function (ReservationGuest $reservationGuest) use ($notElaboratedGuests, $exportDateTime) {
        if ($reservationGuest->isFather()) {
            $errorPresence = ArrayUtils::some($notElaboratedGuests, function (stdClass $notElaboratedGuest) use ($reservationGuest) {
                return $notElaboratedGuest->reservationGuest->fatherID ?: $notElaboratedGuest->reservationGuest->id === $reservationGuest->id;
            });

            if (!$errorPresence) {
                $reservationGuest->update([
                    "AlloggiatiExportDateTime" => $exportDateTime,
                ]);
            }
        }
    });

    // BaseUtils::dumpDati($notElaboratedGuests);

    if (Validations::isNotEmpty($elaboratedGuests)) {
        if (Validations::isNotEmpty($_POST["idStrutturaInterna"])) {
            $internalStructure->update([
                "lastAlloggiatiWebExportDatetime" => $exportDateTime,
            ]);
        } else {
            $structure->update([
                "lastAlloggiatiWebExportDatetime" => $exportDateTime,
            ]);
        }
    }

    return [
        "data_esportazione" => Validations::isNotEmpty($elaboratedGuests) ? DateTimeUtils::toFormat($exportDateTime, DateTimeUtils::ITA_FORMAT_WITH_TIME, DateTimeUtils::ISO_FORMAT_WITH_TIME) : null,
        "elaboratedGuests" => $elaboratedGuests,
        "notElaboratedGuests" => $notElaboratedGuests,
    ];
});
