<?php

use Base\{Validations as BaseValidation};
use BBPlanner\Constants\ProductTypes;
use BBPlanner\Constants\ReservationStatus;
use BBPlanner\Entities\InternalStructuresServices;
use BBPlanner\Entities\StructuresServices;

require_once(__DIR__ . "/../../../include/dbcommon.php");

Utils::executeCatchedScript(function () {
    Validations::validate($_POST, [
        "idStruttura" => Validations::or([Validations::EMPTY, is_numeric]),
        "idStrutturaInterna" => Validations::or([Validations::EMPTY, is_numeric]),
        "tipoSistema" => Validations::or(get_constant_class(TipiSistema)),
        "action" => Validations::or(["genera_file", "send_data"]),
        "data" => Validations::or([Validations::EMPTY, Validations::IS_DATE]),
        "end" => Validations::or([Validations::EMPTY, Validations::IS_DATE]),
        "start" => Validations::or([Validations::EMPTY, Validations::IS_DATE]),
    ]);

    if (Validations::not_empty($_POST["idStrutturaInterna"])) {
        $strutturaInterna = StrutturaInterna::get($_POST["idStrutturaInterna"]);
        $idStruttura = $strutturaInterna->idStruttura;
    } else {
        $idStruttura = Struttura::getIDBySession($_POST["idStruttura"]);
    }

    $struttura = Struttura::get($idStruttura);

    $esportazioneMultiStruttura = $struttura->isMultiStruttura && BBPlannerUtils::strutturaIsMultiStrutturaConEsportazioneSingola($struttura->id) === false;

    //CONTROLLO COERENZA
    if ($esportazioneMultiStruttura && Validations::empty($_POST["idStrutturaInterna"])) {
        throw new GenericException("ID-STRUTTURA-INTERNA-NEEDED", 403);
    } else if ($esportazioneMultiStruttura === false && Validations::not_empty($_POST["idStrutturaInterna"])) {
        throw new GenericException("ID-STRUTTURA-INTERNA-NOT-ALLOWED", 403);
    }

    //RECUPERO SISTEMA E NOMI CAMPI
    if ($_POST["tipoSistema"] === TipiSistema::SISTEMA_STATISTICO) {
        $sistema = $esportazioneMultiStruttura ? $strutturaInterna->getSistemaStatistico() : $struttura->getSistemaStatistico();

        $identificativoField = "identificativoSistemaStatistico";
        $passwordField = "passwordSistemaStatistico";
        $secondoIdentificativoField = "identificativo2SistemaStatistico";
    } else if ($_POST["tipoSistema"] === TipiSistema::SISTEMA_TASSA_SOGGIORNO) {
        $sistema = $esportazioneMultiStruttura ? $strutturaInterna->getSistemaTassaSoggiorno() : $struttura->getSistemaTassaSoggiorno();

        $identificativoField = "identificativoSistemaTassaSoggiorno";
        $passwordField = "passwordSistemaTassaSoggiorno";
    } else if ($_POST["tipoSistema"] === TipiSistema::ALLOGGIATI) {
        $sistema = (object) [
            "id" => 0,
            "nome" => "ALLOGGIATIWEB",
            "sito" => "https://alloggiatiweb.poliziadistato.it",
            "funzionamento" => $_POST["action"] === "send_data" ? FunzionamentoSistemi::WEBSERVICES : FunzionamentoSistemi::DOWNLOAD_FILE,
            // "scriptName" => $_POST["action"] === "send_data" ? "alloggiatiweb.php" : "comunicazione_alloggiati_txt.php",
            "tipoData" => TipiDataSistemi::SINGOLA,
            "dataRiferimento" => DateRiferimentoSistemi::CHECK_IN,
            "identificativoNecessario" => false,
            "passwordNecessaria" => false,
            "secondoIdentificativoNecessario" => false,
            "esportazioneConsentitaInCasoDiNessunOspite" => false,
            "esportazionePazialeConsentita" => true,
            "DatiDocumentoObbligariPerCapi" => true,
            "DatiDocumentoObbligariPerMembri" => false,
            "DatiResidenzaObbligariPerCapi" => false,
            "DatiResidenzaObbligariPerMembri" => false,
            "indicazioneOccupazioneObbligatoria" => false,
        ];

        if ($_POST["action"] === "send_data") {
            if (Validations::not_empty($_POST["idStrutturaInterna"])) {
                $internalStructure = InternalStructuresServices::get($_POST["idStrutturaInterna"]);
                $subscriptionIsActive = $internalStructure->subscriptionIsActive(ProductTypes::SENDING_ALLOGGIATI_WEB_DATA);

                $SIDPSUserID = $internalStructure->SIDPSUserID;
                $useSIDPS = strlen($internalStructure->alloggiatiWebCertificatePassword) <= 40;
            } else {
                $structure = StructuresServices::get($idStruttura);
                $subscriptionIsActive = $structure->subscriptionIsActive(ProductTypes::SENDING_ALLOGGIATI_WEB_DATA);

                $SIDPSUserID = $structure->SIDPSUserID;
                $useSIDPS = strlen($structure->alloggiatiWebCertificatePassword) <= 40;
            }

            $sistema->scriptName = $useSIDPS ? "sidps.php" : "alloggiatiweb.php";

            if (!$subscriptionIsActive && !in_array($idStruttura, ["386", "2"])) {
                throw new GenericException("SUBSCRIPTION-NOT-ACTIVE", 500, [
                    "message" => "Per poter utilizzare questa funzionalità è necessario acquistare il pacchetto aggiuntivo " . ProductTypes::getLabel(ProductTypes::SENDING_ALLOGGIATI_WEB_DATA) . ".\nAndare su Servizi Suite -> Prodotti Aggiuntivi per maggior informazioni",
                ], false);
            } else if ($useSIDPS && Validations::empty($SIDPSUserID)) {
                $_SESSION["pm"]["showAlloggiatiDownloadButton"] = true;

                throw new GenericException("SIDPS-SERVICE-SIDPS-USER-NOT-CREATED", 500, [
                    "message" => "Per attivare il servizio è necessario inserire le credenziali del portale Alloggiati Web in Configurazione",
                ], false);
            }

            // $identificativoField = "alloggiatiWebIdentifier";
            // $passwordField = "alloggiatiWebPassword";
            // $secondoIdentificativoField = "alloggiatiWebCertificatePassword";
        } else {
            $sistema->scriptName = "comunicazione_alloggiati_txt.php";
        }
    } else if ($_POST["tipoSistema"] === TipiSistema::MODELLO_C59) {
        $sistema = (object) [
            "id" => 0,
            "nome" => "MODELLO C59 GENERICO",
            "funzionamento" => FunzionamentoSistemi::DOWNLOAD_FILE,
            "scriptName" => "comunicazione_c59.php",
            "tipoData" => TipiDataSistemi::SINGOLA,
            "dataRiferimento" => DateRiferimentoSistemi::MOVIMENTAZIONE,
            "identificativoNecessario" => false,
            "passwordNecessaria" => false,
            "secondoIdentificativoNecessario" => false,
            "esportazioneConsentitaInCasoDiNessunOspite" => false,
            "esportazionePazialeConsentita" => false,
            "DatiDocumentoObbligariPerCapi" => false,
            "DatiDocumentoObbligariPerMembri" => false,
            "DatiResidenzaObbligariPerCapi" => true,
            "DatiResidenzaObbligariPerMembri" => true,
            "indicazioneOccupazioneObbligatoria" => false,
        ];
    }

    //CONTROLLO SU IDENTIFICATIVI
    if ($esportazioneMultiStruttura) {
        $identificativo = $identificativoField ? $strutturaInterna->{$identificativoField} : null;
        $password = $passwordField ? $strutturaInterna->{$passwordField} : null;
        $secondoIdentificativo = $secondoIdentificativoField ? $strutturaInterna->{$secondoIdentificativoField} : null;
    } else {
        $identificativo = $identificativoField ? $struttura->{$identificativoField} : null;
        $password = $passwordField ? $struttura->{$passwordField} : null;
        $secondoIdentificativo = $secondoIdentificativoField ? $struttura->{$secondoIdentificativoField} : null;
    }

    if (Validations::empty($identificativo) && $sistema->identificativoNecessario) {
        throw new GenericException("IDENTIFICATIVO-REQUIRED", 404, [
            "message" => "Per effettuare l'esportazione è necessario inserire l'identificativo in configurazioni Check-in!",
        ]);
    }

    if (Validations::empty($password) && $sistema->passwordNecessaria) {
        throw new GenericException("PASSWORD-REQUIRED", 404, [
            "message" => "Per effettuare l'esportazione è necessario inserire la password in configurazioni CHeck-in!",
        ]);
    }

    if (Validations::empty($secondoIdentificativo) && $sistema->secondoIdentificativoNecessario) {
        throw new GenericException("IDENTIFICATIVO-2-REQUIRED", 404, [
            "message" => "Per effettuare l'esportazione è necessario inserire l'identificativo (2) in configurazioni Check-in!",
        ]);
    }

    //CONTROLLO SE PRESENZA FILE
    if (Validations::empty($sistema->scriptName)) {
        throw new GenericException("SCRIPT-NAME-NOT-FOUND", 404);
    }

    //CONTROLLO COERENZA DATE
    if ($sistema->tipoData == TipiDataSistemi::SINGOLA && Validations::empty($_POST["data"])) {
        throw new GenericException("DATE-NOT-FOUND-SINGLE", 404);
    }

    if ($sistema->tipoData == TipiDataSistemi::RANGE && (Validations::empty($_POST["start"]) || Validations::empty($_POST["end"]))) {
        throw new GenericException("DATE-NOT-FOUND-RANGE", 404);
    }

    if ($sistema->tipoData == TipiDataSistemi::SINGOLA) {
        $start = $_POST["data"];
        $end = $_POST["data"];
    } else {
        $start = $_POST["start"];
        $end = $_POST["end"];
    }

    $query = QueryBuilder::CreateQuerySelect("ospiti_view", [
        "id",
        "id_prenotazione" => "idPrenotazione",
        "id_prenotazione_camera" => "idPrenotazioneCamera",
        "id_ospite_padre" => "idOspitePadre",
        "check_in" => "checkIn",
        "check_out" => "checkOut",
        "tipo_alloggiato" => "idTipoAlloggiato",
        "cognome",
        "nome",
        "sesso" => "idSesso",
        "nazione_nascita" => "codiceNazioneNascita",
        "comune_nascita" => "codiceComuneNascita",
        "data_nascita" => "dataNascita",
        "nazione_documento" => "codiceNazioneDocumento",
        "comune_documento" => "codiceComuneDocumento",
        "tipo_documento" => "codiceTipoDocumento",
        "numero_documento" => "numeroDocumento",
        "nazione_residenza" => "codiceNazioneResidenza",
        "comune_residenza" => "codiceComuneResidenza",
        "cittadinanza" => "codiceNazioneCittadinanza",
        "codice_esenzione" => "idEsenzione",
        "occupante" => "isOccupante",
        "data_esportazione_alloggiati" => "dataEsportazioneAlloggiati",
        "data_esportazione_ss" => "dataEsportazioneSistemaStatistico",
    ], array_filter([
        "id_struttura" => $struttura->id,
        "id_struttura_interna" => $esportazioneMultiStruttura ? $strutturaInterna->id : null,
        "id_stato_prenotazione" => ReservationStatus::CONFIRMED,
        "in_struttura" => 1,
        "check_in" => (function () use ($sistema, $start, $end) {
            if ($sistema->dataRiferimento == DateRiferimentoSistemi::CHECK_IN) {
                return QueryBuilder::between($start, $end);
            } else if ($sistema->dataRiferimento == DateRiferimentoSistemi::CHECK_OUT) {
                return QueryBuilder::notNull();
            } else if ($sistema->dataRiferimento == DateRiferimentoSistemi::PRESENZA) {
                return QueryBuilder::isLess($end);
            }
        })(),
        "check_out" => (function () use ($sistema, $start, $end) {
            if ($sistema->dataRiferimento == DateRiferimentoSistemi::CHECK_IN) {
                return QueryBuilder::notNull();
            } else if ($sistema->dataRiferimento == DateRiferimentoSistemi::CHECK_OUT) {
                return QueryBuilder::between($start, $end);
            } else if ($sistema->dataRiferimento == DateRiferimentoSistemi::PRESENZA) {
                return QueryBuilder::isGreatear($start, $_POST["tipoSistema"] != TipiSistema::SISTEMA_TASSA_SOGGIORNO);
            }
        })(),
        $sistema->dataRiferimento === DateRiferimentoSistemi::MOVIMENTAZIONE ? QueryBuilder::or([
            "check_in" => QueryBuilder::between($start, $end),
            "check_out" => QueryBuilder::between($start, $end),
        ]) : null,
    ], [Validations, not_empty]));

    $ospiti = DBUtils::FetchAllObject($query);

    list($ospitiEsportati, $ospitiOK, $ospitiNOK) = array_values((array) array_reduce($ospiti, function (stdClass $dati, stdClass $ospite) use ($ospiti, $sistema) {
        if ($_POST["tipoSistema"] === TipiSistema::ALLOGGIATI && Validations::not_empty($ospite->dataEsportazioneAlloggiati)) {
            $dati->ospitiEsportati[] = $ospite;
        } else if ($_POST["tipoSistema"] === TipiSistema::SISTEMA_STATISTICO && Validations::not_empty($ospite->dataEsportazioneSistemaStatistico)) {
            $dati->ospitiEsportati[] = $ospite;
        } else {
            $validations = [
                "idTipoAlloggiato" => Validations::or(get_constant_class(TipiAlloggiato)),
                "cognome" => Validations::NOT_EMPTY,
                "nome" => Validations::NOT_EMPTY,
                "idSesso" => Validations::or(get_constant_class(Sesso)),
                "codiceNazioneNascita" => Validations::NOT_EMPTY,
                "codiceComuneNascita" => function ($codiceComuneNascita) use ($ospite) {
                    return $ospite->codiceNazioneNascita !== NAZIONE_ITALIANA || Validations::not_empty($codiceComuneNascita);
                },
                "dataNascita" => Validations::IS_DATE,
                "codiceNazioneCittadinanza" => Validations::NOT_EMPTY,
            ];

            if (
                (($ospite->idTipoAlloggiato === TipiAlloggiato::OSPITE_SINGOLO || TipiAlloggiato::isCapo($ospite->idTipoAlloggiato)) && $sistema->DatiDocumentoObbligariPerCapi) ||
                (TipiAlloggiato::isMembro($ospite->idTipoAlloggiato) && $sistema->DatiDocumentoObbligariPerMembri)
            ) {
                $validations["codiceNazioneDocumento"] = Validations::NOT_EMPTY;
                $validations["codiceComuneDocumento"] = function ($codiceComuneDocumento) use ($ospite) {
                    return $ospite->codiceNazioneDocumento !== NAZIONE_ITALIANA || Validations::not_empty($codiceComuneDocumento);
                };
                $validations["codiceTipoDocumento"] = Validations::NOT_EMPTY;
                $validations["numeroDocumento"] = Validations::NOT_EMPTY;
            }

            if (
                (($ospite->idTipoAlloggiato === TipiAlloggiato::OSPITE_SINGOLO || TipiAlloggiato::isCapo($ospite->idTipoAlloggiato)) && $sistema->DatiResidenzaObbligariPerCapi) ||
                (TipiAlloggiato::isMembro($ospite->idTipoAlloggiato) && $sistema->DatiResidenzaObbligariPerMembri)
            ) {
                $validations["codiceNazioneResidenza"] = Validations::NOT_EMPTY;
                $validations["codiceComuneResidenza"] = function ($codiceComuneDocumento) use ($ospite) {
                    return $ospite->codiceNazioneResidenza !== NAZIONE_ITALIANA || Validations::not_empty($codiceComuneDocumento);
                };
            }

            // if($_POST["tipoSistema"] === TipiSistema::SISTEMA_TASSA_SOGGIORNO) {
            //     $validations["idEsenzione"] = Validations::NOT_EMPTY;
            // }

            if ($sistema->indicazioneOccupazioneObbligatoria) {
                $validations["isOccupante"] = Validations::or(["1", "0"]);
            }

            $validationsResult = Validations::validate((array) $ospite, $validations, false);
            $datiMancanti = $validationsResult === true ? [] : $validationsResult;

            if (TipiAlloggiato::isCapo($ospite->idTipoAlloggiato)) {
                $almenoUnOspiteFiglio = ArrayUtils::some($ospiti, function (stdClass $ospite2) use ($ospite) {
                    return $ospite2->idOspitePadre === $ospite->id;
                });

                if ($almenoUnOspiteFiglio === false) {
                    if ($ospite->idTipoAlloggiato === TipiAlloggiato::CAPO_FAMIGLIA) {
                        $datiMancanti[] = "familiari";
                    } else if ($ospite->idTipoAlloggiato === TipiAlloggiato::CAPO_FAMIGLIA) {
                        $datiMancanti[] = "membri";
                    }
                }
            }

            if (Validations::empty($datiMancanti)) {
                $dati->ospitiOK[] = $ospite;
            } else {
                $dati->ospitiNOK[] = (object) [
                    "ospite" => $ospite,
                    "datiMancanti" => $datiMancanti,
                ];
            }
        }

        return $dati;
    }, (object) [
        "ospitiEsportati" => [],
        "ospitiOK" => [],
        "ospitiNOK" => [],
    ]));

    if (Validations::not_empty($ospitiNOK)) {
        $labelCampi = [
            "idTipoAlloggiato" => "Tipo Alloggiato",
            "cognome" => "Cognome",
            "nome" => "Nome",
            "idSesso" => "Sesso",
            "codiceNazioneNascita" => "Nazione Nascita",
            "codiceComuneNascita" => "Comune Nascita",
            "dataNascita" => "Data Nascita",
            "codiceNazioneDocumento" => "Nazione Documento",
            "codiceComuneDocumento" => "Comune Documento",
            "codiceTipoDocumento" => "Tipo Documento",
            "numeroDocumento" => "Numero Documento",
            "codiceNazioneResidenza" => "Nazione Residenza",
            "codiceComuneResidenza" => "Comune Residenza",
            "codiceNazioneCittadinanza" => "Cittadinanza",
            "idEsenzione" => "Esenzione",
            "isOccupante" => "Occupante",
            "familiari" => "Inserire ed impostare come " . el("strong", "Arrivato") . " almeno un familiare",
            "membri" => "Inserire ed impostare come " . el("strong", "Arrivato") . " almeno un membro",
        ];

        $idsPrenotazioniCamere = array_column(array_column($ospitiNOK, "ospite"), "idPrenotazioneCamera");
        $prenotazioniCamere = PrenotazioneCamera::getSome(["id" => QueryBuilder::in($idsPrenotazioniCamere)]);

        $ospitiNOK = array_map(function (stdClass $datiOspite) use ($prenotazioniCamere, $labelCampi) {
            $prenotazioneCamera = ArrayUtils::find($prenotazioniCamere, function (PrenotazioneCamera $prenotazioneCamera) use ($datiOspite) {
                return $datiOspite->ospite->idPrenotazioneCamera === $prenotazioneCamera->id;
            });

            $camera = $prenotazioneCamera->getCamera();

            $datiOspite->nomeCamera = Validations::empty($camera) ? null : $camera->getLabel();

            $datiOspite->datiMancanti = array_map(function (string $field) use ($labelCampi) {
                return $labelCampi[$field];
            }, $datiOspite->datiMancanti);

            return $datiOspite;
        }, $ospitiNOK);

        usort($ospitiNOK, function (stdClass $datiOspite1, stdClass $datiOspite2) {
            if ($datiOspite1->ospite->idPrenotazione < $datiOspite2->ospite->idPrenotazione) {
                return -1;
            } else if ($datiOspite1->ospite->idPrenotazione === $datiOspite2->ospite->idPrenotazione) {
                if ($datiOspite1->ospite->idPrenotazioneCamera < $datiOspite2->ospite->idPrenotazioneCamera) {
                    return -1;
                } else if ($datiOspite1->ospite->idPrenotazioneCamera === $datiOspite2->ospite->idPrenotazioneCamera) {
                    return 0;
                } else {
                    return 1;
                }
            } else {
                return 1;
            }
        });

        $ospitiNOKHtml = el("table.table.table-bordered", [
            el("thead > tr", [
                el("th", "Cod. Prenotazione"),
                el("th", "Camera"),
                el("th", "Check-In"),
                el("th", "Check-Out"),
                el("th", "Nominativo"),
                el("th", "Dati Mancanti"),
            ]),
            el("tbody", array_map(function (stdClass $datiOspite) {
                return el("tr", [
                    el("td", Utils::toUpperHex($datiOspite->ospite->idPrenotazione)),
                    el("td", $datiOspite->nomeCamera),
                    el("td", DateTimeUtils::dateToIta($datiOspite->ospite->checkIn)),
                    el("td", DateTimeUtils::dateToIta($datiOspite->ospite->checkOut)),
                    el("td", "{$datiOspite->ospite->cognome} {$datiOspite->ospite->nome}"),
                    el("td > ul.mab-0[style='padding-left: 20px;']", array_map(function (string $fieldLabel) {
                        return el("li", $fieldLabel);
                    }, $datiOspite->datiMancanti))
                ]);
            }, $ospitiNOK)),
        ]);
    }

    return [
        "sistema" => $sistema,
        "ospitiEsportati" => $ospitiEsportati,
        "ospitiOK" => $ospitiOK,
        "ospitiNOK" => $ospitiNOK,
        "ospitiNOKHtml" => $ospitiNOKHtml,
    ];
});
