<?php
//if (!defined('Inonlineeftpos')) exit('Is it Access denied');
define('Inonlineeftpos', 1);
//Comment this on server
include 'includes/common.inc.php';

include 'includes/dates.inc.php';
//include "sendcomms.php";


if (!isset($_SERVER['SCRIPT_NAME'])) $_SERVER['SCRIPT_NAME'] = 'onlineeftpos.php';

function openLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder, $logPath;

	$logFileHandle_cron_reminder = fopen($logPath . 'onlineeftpos.log', 'a');
}

function closeLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
		fclose ($logFileHandle_cron_reminder);
}

function printLog_cron_reminder($str)
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
	{
		if (substr($str, strlen($str) - 1, 1) != "\n")
			$str .= "\n";
		fwrite ($logFileHandle_cron_reminder, $str);
	}
}

function printLogL_cron_reminder($str, $level)
{
	for ($i = 1; $i <= $level; ++$i)
		$str = "\t" . $str;
	printLog_cron_reminder($str);
}

function validatescriptInvocation($cognitoFormName, $AuthCode) {

//Validation goes here
//Return success or failure

}

function is_valid_name($file)
{
  return preg_match('/^([-\.\w]+)$/', $file) > 0;
}
function createbearertoken() 
{
	$url = 'https://apitest.paymark.nz/bearer';
	$data = array(
		"grant_type" => "client_credentials"
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	//curl_setopt($ch, CURLOPT_HEADER, true);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
						 "Content-Type: application/x-www-form-urlencoded",
						 "Authorization: Basic ". base64_encode("qSN6s9y1CiLDAkjmdFyKUnaj5gklJeXO:XNp1KV4BhgOGnHTM")
						)
	);

	$result = curl_exec($ch);
	//print_r ($result);

	curl_close($ch);
	return $result;

}

function createsession($bearertoken) 
{
	$url = 'https://apitest.paymark.nz/openjs/v1/session';
	$data = array(
		"amount" => 1000,
		"currency"=>"NZD",
		"description"=>"Widgets",
		"merchantIdCode"=> "300000189",
		"redirectUrl" => "https://www.nzwebsoft.co.nz/onlineeftpos/",
		"orderId"=>"146",
		"transactionType"=>"REGULAR"
		
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);

	//curl_setopt($ch, CURLOPT_HEADER, true);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
						 "Content-Type: application/json",
						 "Authorization: Bearer " . $bearertoken . ""
						)
	);

	$result = curl_exec($ch);
	curl_close($ch);
	

	return $result;
}

// initialize cron script
openLogFile_cron_reminder();
printLog_cron_reminder('=============== STARTING SCRIPT: ' . DisplayDateTime(time()));

printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
printLog_cron_reminder('Start Time is : ' . DisplayDateTime(time()));

$searchkey = 'id';
$searchBearerTokenkey = 'access_token';

/*
	**** Step 1: Get the Bearer Token
	**** Step 2: Get the session ID by passing Bearer Token

	//It seems Token life span is upto 1 hour so we will store it and 
	//Re-use it till we get the error message and call again createBearer
	// TODO : Store the details in DB
*/
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Creating Bearer Token ');

$bearertoken = createbearertoken();
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token JSON ' .  $bearertoken);

$arrayBearerToken = json_decode ($bearertoken ,true);

$BearerTokenkey = $arrayBearerToken[$searchBearerTokenkey];
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token Key ' .  $BearerTokenkey);

printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Creating Session with Token ');
$formdatapayload = createsession($BearerTokenkey);
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Session JSON ' .  $array);

$array = json_decode ($formdatapayload ,true);

printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Checking Validity of Bearer Token ');
if(!empty($array['error']) && $array['error'] == 'invalid access token')
{
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' RE- Creating New Bearer Token after previous Expired ');
	$bearertoken = createbearertoken();
	$arrayBearerToken = json_decode ($bearertoken ,true);
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' RE- Bearer Token JSON ' .  $arrayBearerToken);

	$BearerTokenkey = $arrayBearerToken[$searchBearerTokenkey];
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' RE- Bearer Token Key ' .  $BearerTokenkey);

	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' RE- Creating Session with Token ');
	$formdatapayload = createsession($BearerTokenkey);
}


$sessionID = $array[$searchkey];
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Session ID ' .  $sessionID);

printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Loading GUI For Payment Validation ');
echo('<div id="openjs-wrapper"></div>
 <script type="text/javascript" src="https://open.demo.paymark.co.nz/v1/loader/open.js"></script>
<script>
    const urlParams = new URLSearchParams(window.location.search)
    const sessionId = urlParams.get("' . $sessionID . '")
    if (window.openjs) {
    window.openjs.init({
        sessionId: "' . $sessionID . '",
        elementId: "openjs-wrapper",
    })
    }
</script>');
printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' END - Payment Validation ');

printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
printLog_cron_reminder('End Time is : ' . DisplayDateTime(time()));

// finish cron script
printLog_cron_reminder ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
closeLogFile_cron_reminder();

?>