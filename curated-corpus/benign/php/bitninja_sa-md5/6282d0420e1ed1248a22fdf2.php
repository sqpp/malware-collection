<?php

class UtilClass
{

function dateDifference($date_1 , $date_2 , $differenceFormat = '%a' )
{
    $datetime1 = date_create($date_1);
    $datetime2 = date_create($date_2);

    $interval = date_diff($datetime1, $datetime2);

    return $interval->format($differenceFormat);

}

// Get time interval function
public static function getTimeInterval($date) {

        // Set date as DateTime object
        $date = new DateTime ($date);

        // Set now as DateTime object
        //$now = date ('Y-m-d H:i:s', time()); // If you want to compare two dates you both provide just delete this line and add a $now to the function parameter (ie. function getTimeInterval($date, $now))
        $now = date ('Y-m-d H:i:s', time()); // If you want to compare two dates you both provide just delete this line and add a $now to the function parameter (ie. function getTimeInterval($date, $now))

        $now = new DateTime ($now);

        // Check if date is in the past or future and calculate timedifference and set tense accordingly
        if ($now >= $date) {
            $timeDifference = date_diff ($date , $now);
            $tense = " مضت";
        } else {
            $timeDifference = date_diff ($now, $date);
            $tense = " قادمة";
        }

        // Set posible periods (lowest first as to end result with the highest value that isn't 0)
        $period = array (" ثانية / ثواني", " دقيقة / دقائق", " ساعة / ساعات", " يوم / أيام", " شهر / أشهر", " سنة / سنوات");

        // Set values of the periods using the DateTime formats (matching the periods above)
        $periodValue= array ($timeDifference->format('%s'), $timeDifference->format('%i'), $timeDifference->format('%h'), $timeDifference->format('%d'), $timeDifference->format('%m'), $timeDifference->format('%y'));

        // Loop through the periods (ie. seconds to years)
        for ($i = 0; $i < count($periodValue); $i++) {
            // If current value is different from 1 add 's' to the end of current period (ie. seconds)
            if ($periodValue[$i] != 1) {
                $period[$i] .= " وثواني";
            }

            // If current value is larger than 0 set new interval overwriting the lower value that came before ensuring the result shows only the highest value that isn't 0
            if ($periodValue[$i] > 0) {
                $interval = $periodValue[$i].$period[$i].$tense; // ie.: 3 months ago
            }
        }

        // If any values were larger than 0 (ie. timedifference is not 0 years, 0 months, 0 days, 0 hours, 0 minutes, 0 seconds ago) return interval
        if (isset($interval)) {
            return $interval;
        // Else if no values were larger than 0 (ie. timedifference is 0 years, 0 months, 0 days, 0 hours, 0 minites, 0 seconds ago) return 0 seconds ago
        } else {
            return " منتهي " . $tense;
        }
    }


public static function base64_encode_image ($filename=string, $filetype=string) {
    if ($filename) {
        $imgbinary = fread(fopen($filename, "r"), filesize($filename));
        return 'data:image/' . $filetype . ';base64,' . base64_encode($imgbinary);
    }
}


public static function encodeJson($responseData) {
    $jsonResponse = json_encode($responseData, JSON_UNESCAPED_UNICODE);
    return $jsonResponse;
}



/** Decrypt data from Hex to String data **/
public static function hex2str ($hex) {
  return @pack('H*', $hex);
}

/** Encrypt data from string to hex data **/
public static function str2hex ($str) {
   $data = array_shift(unpack('H*', $str));
   return strtoupper($data);
}



/** This Function To Fix All Entiites Chars from decoded text **/
 public static function FixStringDecode($string) {
    $entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%2B', '%24', '%2C', '%2F', '%3F', '%25', '%23', '%5B', '%5D');
    $replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "+", "$", ",", "/", "?", "%", "#", "[", "]");
    return str_replace($entities, $replacements, $string);
}


/** Check Decrypt data if Hex **/
public static function CheckHexStrings($s)
{
    if (!ctype_xdigit($s)){
        //echo "is not valid Hex strings";
        $json = array('error' => "is not valid Hex strings");
        $msg = json_encode([$json]);
        echo $msg;

    }
    else
    {
       return pack('H*', $s);
    }

}



public static function printf_array($format, $arr)
{
    return call_user_func_array('printf', array_merge((array)$format, $arr));
}


public static function RealPHPPath($relative_path)
{
    $realpath=realpath($relative_path);
    $htmlpath=str_replace($_SERVER['DOCUMENT_ROOT'],'',$realpath);
    return $htmlpath;
}


public static function checkRemoteFile($url)
{
   $file = $url;
   $file_headers = get_headers($file);



    switch($file_headers[0])
    {
        case 'HTTP/1.1 404 Not Found':
        return false;
        break;

        case 'HTTP/1.1 302 Moved Temporarily':
        return false;
        break;

        default:
        return true;

        }
}


    /**
   * Returns the server hostname or 'localhost.localdomain' if unknown.
   * @access private
   * @return string
   */
  public static function ServerHostname() {
    if (isset($_SERVER['SERVER_NAME'])) {
      $result = $_SERVER['SERVER_NAME'];
    } else {
      $result = 'localhost.localdomain';
    }

    return $result;
  }


}

?>