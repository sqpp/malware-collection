<?php
//ini_set('display_errors', 1);
//---config--
$pass_protect = TRUE;//TRUE/FALSE, enables/disables pass protect
$username = 'user';
$password = '456789';
//a username and password to control access to this page

$this_page = 'http://prog.hbnet.hu/rss/index.php';
//this is the url of this page (used to make all links point to this page)

$base64_url = TRUE;
//will caused all urls to be encoded with base 64

$base64_html = FALSE;
//this will cause all html to be encoded in base64 with
///javascript used to decode it, this will
//slow load times, especially on slow comps

$remove_attribute = array();
$remove_attribute[] = 'onsubmit';//stops js embedded in forms
//an array of attributes to remove from any html tag

$log_all_connections = FALSE;
$log_file = './rss.log';
//this will Log EVERYTHING!!
//very very verbose, you will get big files very fast, for debugging ONLY

$log_urls = FALSE;
$url_log = './rss.log';
//this will log all url's accessed in an html format

$url_var_name = 'z274pe4rv9d1oii';
//this is the variable that contains the page, it should be pretty
//unique so it won't interfere with forms

$url_self_request = 'zd69s5vv14picw';//searched for in $_GET
//when set this script will return $self_server_f[$value], $valuue being the value of this var


$tags		= 	array(
				'a',
				'area',
				'base',
				'bgsound',
				'embed',
				'frame',
				'iframe',
				'img',
				'link',
				'param',
				'script',
				'input',
				'applet',
				'td',
				'tr',
				'table'
				);
$attribute	= 	array('href',//<a>
				'href',//<area>
				'href',//<base>
				'src',//<bgsound>
				'src',//<embed>
				'src',//<frame>
				'src',//<iframe>
				'src',//<img>
				'href',//<link>
				'value',//<param>
				'src',//<script>
				'src',//<input>
				'code',//<applet>
				'background',//<td>
				'background',//<tr>
				'background'//<table>
				);
//these are the tags and attributes to edit
//do NOT put the <form> tag in, it is done separately



$stop_url = array('param' => //the tag, in this case <param>, param is the key
				array(//now what values are not a url
					'high',
					'low',
					'best',
					'autolow',
					'autohigh',
					'true',
					'false',
					'video/quicktime',
					'myself'
					)
			);
//$stop_url is what values should not be consirded a url
//use this for tags like param that don't nessecarily
//have to have a url, note, all values must be lowercase

$remove_tags = array();
$remove_tags['script'] = 0;//can remove javascript that does not work correct with this script
$remove_tags['noscript'] = -1;//enables the text in the noscript
//$remove_tags['img'] = 1;//can speed up page loads
//$remove_tags is an array of tags to remove completely from the page
//(numbers mean, 1=there is no associated end tag, 0=there is an end tag, delete everything in between too
//-1=same as 0 but leave the stuff in between)

//var key replacements
//some sites (ie yahoo.com) have a period (.) in the key name for the form
//php automatically converts this to an underscore (_) and sends that
//yahoo considers it different and does not accept the form
//the $var_key_replace can be used to tell php to treat
//certain key from a site as whatever you want
$var_key_replace[] = array(
    'regex_host' => '/yahoo.com$/i',//matched against the host
    'regex_full_url' => '//', //matched against the full url (http://site/path)
    //this will be used as the regex for preg_match() [a perl
    //and will be used to determine if this set should be used
    //for this url
    'replace_keys' => array(
        //these are in the form of 'what_php_sees' => 'what_it_should_see',
        '_done' => '.done',
        '_tries' => '.tries',
        '_src' => '.src',
        '_md5' => '.md5',
        '_hash' => '.hash',
        '_js' => '.js',
        '_last' => '.last',
        '_intl' => '.intl',
        '_bypass' => '.bypass',
        '_partner' => '.partner',
        '_u' => '.u',
        '_v' => '.v',
        '_challenge' => '.challenge',
        '_yplus' => '.yplus',
        '_emailCode' => '.emailCode',
        '_ev' => '.ev',
        '_branch' => '.branch',
        '_chkP' => '.chkP',
        '_persistent' => '.persistent',
        '_save' => '.save',
        '_rand' => '.rand',
        '_crumb' => '.crumb',
        '_slogin' => '.slogin',
        '_partner' => '.partner',
        '_intl' => '.intl',
        '_fUpdate' => '.fUpdate',
        '_prelog' => '.prelog',
        '_bid' => '.bid',
        '_aucid' => '.aucid',
        '_scrumb' => '.scrumb'
    )

);

//-------Do Not Edit below this line with Knowledge of PHP-------

/*
* A Little check to make sure you have curl
*/
if (!function_exists('curl_init')){
    die('You Do not have cURL compiled into PHP'
        .'This script requires cURL<br />'
        .'<a href="http://php.net/manual/en/ref.curl.php">Click Here For More Info</a>'
    );
}

/*
* this function is only availble when running as apache module
* and the code below will only work when running as apache module
*/
if (function_exists('virtual') && $pass_protect){//virtual is an apache only function
    if (!isset($_SERVER['PHP_AUTH_USER'])){
    	header('WWW-Authenticate: Basic realm="Horten Borze"');
    	header('HTTP/1.0 401 Unauthorized');
    	echo '401 ERROR';
    	exit();
    } elseif ($_SERVER['PHP_AUTH_USER'] != $username || $_SERVER['PHP_AUTH_PW'] != $password){
    	header('WWW-Authenticate: Basic realm="Horten Borze"');
    	header('HTTP/1.0 401 Unauthorized');
    	echo '401 ERROR';
    	exit();
    }
}

//fix escaping issues on some servers
$_POST = unescape_data($_POST);
$_GET = unescape_data($_GET);
$_COOKIE = unescape_data($_COOKIE);

//get the url of the page we are retreiving
if ($_SERVER['REQUEST_METHOD'] == 'POST'){
	if (isset($_POST[$url_var_name])){
		$url_name = decode_url($_POST[$url_var_name]);
	}
	/*if () {
		$base64_html = 
	}*/
} else {
	if (isset($_GET[$url_var_name])){
		$url_name = decode_url($_GET[$url_var_name]);
	}
}

//turn on of js for urls
$header_o_sub = $base64_url?'onsubmit="encode_form(this)"':'';

//this will appear after the <body> tag on all pages
$header_html = <<<EOF
<div style="height:50px;">
<div style="position:fixed;background-color:#ffffff;width:100%;height:25px;color:#000000;">
<script type="text/javascript" src="$this_page?$url_self_request=js"></script>
<form action="$this_page" method="get" $header_o_sub>
<div style="text-align:center;">
	RSS Feed Location:
    <input type="text" name="$url_var_name" value=""  size="70"/>
    <input type="submit" value="OK" />
	<option name="extrainfo7f98t2d5g" selected></option>
</div>
</form>
</div>
</div>
EOF;
if (!isset($url_name) && empty($_GET[$url_self_request])){
	//this is the html that is shown when the page is accessed without a url var
	//ie, the first page you see
	echo <<<EOF
		<html><head><title></title></head><body>
		<!-- RSS FEED -->
		$header_html
		</body></html>
EOF;
	exit();
}

/*
* Here comes the JS
* its a result of copy, paste, and google, so anything that
* would speed it up is appreciated
*/

$self_server_f['js'] = <<<EOF
var END_OF_INPUT = -1;

var base64Chars = new Array(
    'A','B','C','D','E','F','G','H',
    'I','J','K','L','M','N','O','P',
    'Q','R','S','T','U','V','W','X',
    'Y','Z','a','b','c','d','e','f',
    'g','h','i','j','k','l','m','n',
    'o','p','q','r','s','t','u','v',
    'w','x','y','z','0','1','2','3',
    '4','5','6','7','8','9','+','/'
);

var reverseBase64Chars = new Array();
for (var i=0; i < base64Chars.length; i++){
    reverseBase64Chars[base64Chars[i]] = i;
}

var base64Str;
var base64Count;
function setBase64Str(str){
    base64Str = str;
    base64Count = 0;
}
function readBase64(){    
    if (!base64Str) return END_OF_INPUT;
    if (base64Count >= base64Str.length) return END_OF_INPUT;
    var c = base64Str.charCodeAt(base64Count) & 0xff;
    base64Count++;
    return c;
}
function encodeBase64(str){
    setBase64Str(str);
    var result = '';
    var inBuffer = new Array(3);
    var lineCount = 0;
    var done = false;
    while (!done && (inBuffer[0] = readBase64()) != END_OF_INPUT){
        inBuffer[1] = readBase64();
        inBuffer[2] = readBase64();
        result += (base64Chars[ inBuffer[0] >> 2 ]);
        if (inBuffer[1] != END_OF_INPUT){
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30) | (inBuffer[1] >> 4) ]);
            if (inBuffer[2] != END_OF_INPUT){
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c) | (inBuffer[2] >> 6) ]);
                result += (base64Chars [inBuffer[2] & 0x3F]);
            } else {
                result += (base64Chars [((inBuffer[1] << 2) & 0x3c)]);
                result += ('=');
                done = true;
            }
        } else {
            result += (base64Chars [(( inBuffer[0] << 4 ) & 0x30)]);
            result += ('=');
            result += ('=');
            done = true;
        }
        lineCount += 4;
        if (lineCount >= 76){
            result += ('\\n');
            lineCount = 0;
        }
    }
    return result;
}
function readReverseBase64(){   
    if (!base64Str) return END_OF_INPUT;
    while (true){      
        if (base64Count >= base64Str.length) return END_OF_INPUT;
        var nextCharacter = base64Str.charAt(base64Count);
        base64Count++;
        if (reverseBase64Chars[nextCharacter]){
            return reverseBase64Chars[nextCharacter];
        }
        if (nextCharacter == 'A') return 0;
    }
    return END_OF_INPUT;
}

function ntos(n){
    n=n.toString(16);
    if (n.length == 1) n="0"+n;
    n="%"+n;
    return unescape(n);
}

function decodeBase64(str){
    setBase64Str(str);
    var result = "";
    var inBuffer = new Array(4);
    var done = false;
    while (!done && (inBuffer[0] = readReverseBase64()) != END_OF_INPUT
        && (inBuffer[1] = readReverseBase64()) != END_OF_INPUT){
        inBuffer[2] = readReverseBase64();
        inBuffer[3] = readReverseBase64();
        result += ntos((((inBuffer[0] << 2) & 0xff)| inBuffer[1] >> 4));
        if (inBuffer[2] != END_OF_INPUT){
            result +=  ntos((((inBuffer[1] << 4) & 0xff)| inBuffer[2] >> 2));
            if (inBuffer[3] != END_OF_INPUT){
                result +=  ntos((((inBuffer[2] << 6)  & 0xff) | inBuffer[3]));
            } else {
                done = true;
            }
        } else {
            done = true;
        }
    }
    return result;
}

function encode_form(form){
    form.$url_var_name.value=encodeBase64(form.$url_var_name.value);
    form.submit;
    return false;
}
EOF;
//<?php //fix my text editor's highlighting

//first thing, is if a self_severed file is requested then show that
if (!empty($_GET[$url_self_request])){
    if (isset($self_server_f[$_GET[$url_self_request]])){
        echo $self_server_f[$_GET[$url_self_request]];
        die();
    }
}

ini_set('session.use_cookies', 1);//make sure sessions use cookies
session_start();//start the session
//make the cookie array is there
$cookie_file = tempnam('/tmp', 'absurd_cocoa_cookie');
$cookie_file_new = tempnam('/tmp', 'absurd_cocoa_cookie');
if (isset($_SESSION['cookies'])){
	$fp = fopen ($cookie_file, 'w');
	if (!$fp){
	   die('Unable to Open Temporary Cookie File');
    }
	fwrite($fp, $_SESSION['cookies']);
	fclose($fp);
}
//make sure it is a good url, if not try to correct it
if (preg_match('/^(http|https|ftp):\/\/(.*?)/i',$url_name)){
	$url= $url_name;
} else {
	$url = 'http://'.$url_name;
}
$url_parts = array();
$path_parts = array();
set_location($url);
url_log($url);

//incase editing the $_GET/$_POST array won't work
$retreived_vars['POST'] = $_POST;
$retreived_vars['GET'] = $_GET;

//edit the variables as necessary
foreach ($var_key_replace as $k_a){
    if (preg_match($k_a['regex_host'],$url_parts['host']) && preg_match($k_a['regex_full_url'],$url)){
        //the regex says that we need to replace the keys
        foreach ($retreived_vars as $pg => $pg_a){
            foreach ($pg_a as $pg_key => $pg_value){
                if (array_key_exists($pg_key, $k_a['replace_keys'])){
                    $retreived_vars[$pg][$pg_key] = array('key' => $k_a['replace_keys'][$pg_key], 'value' => $retreived_vars[$pg][$pg_key]);
                }
            }
        }
    
    }
}

if ($_SERVER['REQUEST_METHOD'] == 'POST'){
	//send all post data
	$extra_data = '';
	foreach ($retreived_vars['POST'] as $post_name => $post_data){
		if ($post_name != $url_var_name){
            if (is_array($post_data)){
                if (array_key_exists('key', $post_data) && array_key_exists('value', $post_data)){
                    $extra_data .= urlencode($post_data['key']) . '=' . urlencode($post_data['value']) . '&';
                } else {
                    //for forms that use arrays
                    foreach ($post_data as $p_k => $p_v){
                        $extra_data .= urlencode($post_name.'['.$p_k.']') . '=' . urlencode($p_v) . '&';
                    }
                }
            } else {
                $extra_data .= urlencode($post_name) . '=' . urlencode($post_data) . '&';
            }
		}
	}
} else {
	$extra_data = '?';
	foreach ($retreived_vars['GET'] as $get_name => $get_data){
		if ($get_name != $url_var_name){
			$extra_data .= urlencode($get_name) . '=' . urlencode($get_data) . '&';
		}
	}
	if (strstr($url,'?')){
		$url = str_replace('?',$extra_data, $url);
	} else {
		$url = $url.$extra_data;
	}
	
}
//set some variables for the callback functions
$content_type_header = '';
$location = '';
$page = '';
$data_started = FALSE;
//Start cURL to get the page
$_SESSION['cookies'] = empty($_SESSION['cookies'])?'':$_SESSION['cookies'];
debug_log('New Connection - Fields Sent', $extra_data);
debug_log('Cookies File Used', $_SESSION['cookies']);
$curl_handle = curl_init($url);

//set options
curl_setopt($curl_handle, CURLOPT_HEADER, 0);
curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($curl_handle, CURLOPT_FOLLOWLOCATION, 1);
curl_setopt($curl_handle, CURLOPT_HEADERFUNCTION, 'read_header');
curl_setopt($curl_handle, CURLOPT_WRITEFUNCTION, 'read_data');
curl_setopt($curl_handle, CURLOPT_COOKIEJAR, $cookie_file_new);
curl_setopt($curl_handle, CURLOPT_COOKIEFILE, $cookie_file);


//send the browser name
curl_setopt($curl_handle,CURLOPT_USERAGENT,$_SERVER['HTTP_USER_AGENT']);//transmit the Real Browser
//curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');//MSIE
//curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Googlebot/2.1 (+http://www.googlebot.com/bot.html)');//googlebot

//add any post data if needed
if ($_SERVER['REQUEST_METHOD'] == 'POST'){
	curl_setopt($curl_handle, CURLOPT_POST, 1);
	curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $extra_data);
}
//retrieve the page
curl_exec($curl_handle);
curl_close($curl_handle);
unset($curl_handle);//php version <= 5.0.4  have a bug where the cookies are not
//available until the unset of the handle
//now save the cookie file and delete it
$fp = fopen($cookie_file_new, 'r');
if (!$fp){
    die('Failed To Read Cookie File');
}
if (!isset($_SESSION['cookies'])){
    $_SESSION['cookies'] = '';
}
$_SESSION['cookies'] = "";
while (!feof($fp)){
    $_SESSION['cookies'] .= fread($fp, 8192);
}
fclose($fp);
unlink($cookie_file);//remove files used
unlink($cookie_file_new);


//don't go any further if $page is empty, the read_data function did everything
if ($page == '' ){
	die();
}

//update the page url if there was a location header
if ($location != ''){
	set_location($location);
}

//turn on output buffering to compress it (try and negate base64's inflation)
if (function_exists('ob_gzhandler')){
    ob_start('ob_gzhandler');
}
if (stristr($content_type_header,'text/html')!==false){

    //remove all tags in the $remove_tags array
    foreach ($remove_tags as $tag => $single_tag){
        if ($single_tag == -1){
            $page = preg_replace("/<$tag.*?>(.*?)<\/$tag>/is", '\1', $page);
        } else {
            if ($single_tag){
                $page = preg_replace("/<$tag.*?>/is", '', $page);
            } else {
                $page = preg_replace("/<$tag.*?>.*?<\/$tag>/is", '', $page);
            }
        }
    }

	//cycle through all tags then the <form> tag if it is html
	for ($i = 0;$i < sizeof($tags);$i++){
		$page = edit_tags($tags[$i],$attribute[$i],$page);
	}
	$page = edit_forms($page);
	$page = edit_meta_refresh($page);//the meta refreshes may be needed to
	//this will get all/most the css out of the html and edit it
	foreach ($remove_attribute as $remove_me){
	   $page = preg_replace("!$remove_me=\".*?\"!is", '', $page);
	}
	$page = preg_replace_callback('!(<style[^>]*?>)(.*?)(</style>)!is', 'edit_style_tag_callback', $page);
	$page = add_header($page);
	
	if ($base64_html){
	   //base64 encode it and wrap in js for the browser to decode
	   $page = js_wrap($page);
    }
	echo $page;
} else {
	//the page is css, not html
	header('Content-type: text/css');
	$page = edit_css($page);
	//send the page to browser
	echo $page;
}
if (function_exists('ob_gzhandler')){
    ob_end_flush();
}



//----------Functions-------------


/*
*---This is the function to edit
*---the html, it will search for a tag and edit it
*/
function edit_tags($tag, $attribute, $html){
	$no_http_pattern ="!(<($tag)\s+[^<>]*?(?<=\s)$attribute\s*=\s*'?\"?)([^<>]*?)('?\"?>|'?\"?\s[^<>]*?>)!is";
	$html = preg_replace_callback($no_http_pattern, 'edit_tags_callback', $html);
	return $html;
}

/*
*--This function will search css and edit the url's
*--in it that are in this form: url(http://example.com/index.html)
*/
function edit_css ($css){
	$pattern = '!(url\s*?\(\s*?\'?"?)(.*?)("?\'?\s*?\))!is';
	$css = preg_replace_callback($pattern, 'edit_css_callback',$css);
	$pattern = '!(import\s*(?:url\s*\(\s*)?\'?"?\s*)(.*?)(\'?"?\s*\)?\s*;)!is';
	$css = preg_replace_callback($pattern, 'edit_css_callback',$css);
	return $css;	
}

/*
*--This function will encode the url in an attribute
*--to point to the right location it will not add
*--the variable if its to be used for a form
*/
function edit_url($old_url, $form){
	// make some varibles global
	global $this_page, $url_parts, $path_parts, $url_var_name;
	$old_url = str_replace ('&amp;', '&',$old_url);
	if (!preg_match('/^(http(s)?:\/\/|ftp:\/\/)/i', $old_url)){
		if (preg_match('/^\/.*?/i', $old_url)){
			$old_url = $this_page."?$url_var_name="
				.encode_url($url_parts['scheme']
				.'://'.$url_parts['host'].$old_url);
		} else {
			$old_url = $this_page."?$url_var_name="
				. encode_url($url_parts['scheme']
				.'://'.$url_parts['host'].$path_parts['dirname']
				.'/'.$old_url);
		}
	} else {
		$old_url = $this_page."?$url_var_name=". encode_url($old_url);
	}
	/*
	*--should add something like a function here to change
	*--the url's and take out the /blah/../ and 
	*--change it to / (the url's are $old_url)
	*/
	if (!$form){
		return $old_url;
	} else {
		return preg_split("!\?$url_var_name=!",$old_url);
	}
}


/*
*--This is a function to edit the form tag because
*--the url can't be encoded in the action attribute
*/
function edit_forms($html){
    global $path_parts;
    //before we can do this replace  all forms without an action to have one
    //this regex will find all form tags without an action
    $regex = '/(<form\s*(?![^>]*?action\s*=\s*\'?"?.*?\'?"?[^<>]*?)[^<>]*?)(>)/';
    
    //take blah off the end (find the real path name)
    if (empty($path_parts['basename'])){
        $file = './';
    } else {
        $file = substr($path_parts['basename'], 0, strlen($path_parts['basename']) - 4);
        $file = empty($file)?'./':$file;
    }
    
    $html = preg_replace($regex, '\1 action="'.$file.'"\2', $html);
    
    //now proceed to edit all urls
	$html = preg_replace_callback("!(<form\s+[^>]*?action\s*=\s*'?\"?)([^<>]*?)('?\"?>|'?\"?\s[^<>]*?>)!is", 'edit_forms_callback',$html);
	return $html;
}

/*
*--This is the function that will read the headers
*--any location header it finds will be placed in $location
*--any content type header will be placed in $content_type_header
*/
function read_header($ch, $string){
	//headers to find
	global $content_type_header, $location;
	debug_log('Header', $string);
	$length = strlen($string);
	if (stristr($string, 'Location')!==false){
		preg_match('/(^Location:\s*)(.*?)\r\n\s*/i', $string, $match);
		$location = $match[2];
		unset ($match);
	} elseif (stristr($string, 'Content-type')!==false){
		$content_type_header = $string;
	}
	return $length;
}

/*
*--This is the function to read all the data from curl
*--if the page isn't html it will imeditaly start sending it to the browser
*--if the page is html it will store it in the $page varible
*/
function read_data ($ch, $string){
	global $content_type_header,$page,$data_started;
	debug_log('Data Received', $string);
	$length = strlen($string);
	if (preg_match('/text\/(html|css)/i',$content_type_header)){
		$page .= $string;
	} else {
		if (!$data_started){
			header($content_type_header);
			$data_started = TRUE;
		}
		echo $string;
	}
	return $length;
}

/*
*--This function will set the base url for other functions to edit
*--relative url's with
*/
function set_location ($url){
	global $url_parts, $path_parts;
	//read all parts of url  for later use
	//$url_parts['scheme']		= protocol (without ://)
	//$url_parts['host']		= site
	//$path_parts['dirname']	= path
	//$path_parts['basename']	= file (incorrect, has 'blah' append to the end)
	
	//incase they are needed later in function
	if (!empty($url_parts)){
	   $old['scheme'] = $url_parts['scheme'];
	   $old['host'] = $url_parts['host'];
	   $old['dirname'] = $path_parts['dirname'];
    }

	$url_parts = parse_url($url);
	$old_dir = FALSE;
	//incase this function receives a relative/absolute url
	if (!preg_match('/^(http(s)?:\/\/|ftp:\/\/)/i', $url)){
		if (preg_match('/^\/.*?/i', $url)){
            //absolute url
			$url_parts['scheme'] = $old['scheme'];
	        $url_parts['host'] = $old['host'];
		} else {
            //relative url
			$url_parts['scheme'] = $old['scheme'];
	        $url_parts['host'] = $old['host'];
	        $old_dir = TRUE;
		}
	}
	
	if (isset($url_parts['path'])){
		//the 'blah' is to ensure that pathinfo parses the path correct
		// (directories mess it up)
		$path_parts = pathinfo($url_parts['path'].'blah');
		if ($old_dir){
		  $path_parts['dirname'] = $old['dirname'];
		}
	} else {
		$path_parts['dirname'] = '';
	}
	if ($path_parts['dirname']=='/'){
		$path_parts['dirname'] = '';
	}
}

function edit_meta_refresh($html){
    //url/content with be in 4 or 7 (other will be empty)
    $no_http_pattern ="!<meta\s+"
        ."(("
        ."([^>]*?http-equiv\s*=\s*'?\"?refresh'?\"?\s+"
        ."content\s*=\s*'?\"?)([^<>]*?;\s*[^<>]*?)"
        .")|("
        ."([^<>]*?content\s*=\s*'?\"?)([^<>]*?;\s*[^<>]*?)('?\"?\s+"
        ."http-equiv\s*=\s*'?\"?refresh)"
        ."))"
        ."('?\"?>|'?\"?\s[^<>]*?>)!is";
	return preg_replace_callback($no_http_pattern, 'edit_meta_callback', $html);
}

function unescape_data($var){
    if (get_magic_quotes_gpc()){
        if (is_array($var)){
            foreach ($var as $k => $escape_me){
                $var[$k] = unescape_data($escape_me);
            }
        } else {
            $var = stripslashes($var);
        }
        return $var;
    } else {
        return $var;
    }
}


/*
* This will find the body tag is it exists and add the header after it
* otherwise  it will prepend the header to the page
*/
function add_header($html){
    global $header_html;
    $s1 = strlen($html);
    $page = preg_replace('/<body[^>]*>/is', '\0'.$header_html,$html,  1);
    if (strlen($page) == $s1){//its got to go there, force it...
        $page = $header_html.$page;
    }
    return $page;
}

/*
* This will conditionally encode the url based on the config
*/
function encode_url($url){
    global $base64_url;
    if  ($base64_url){
        $url = base64_encode($url);
    }
    return urlencode($url);
}

/*
* This will conditionally decode the url based on the config
*/
function decode_url($url){
    global $base64_url;
    if  ($base64_url){
        $url = base64_decode($url);
    }
    return $url;
}

/*
* This  will take the html and encode it, then wrap it in js with a function to decode it
*/
function js_wrap($page){
    global $this_page, $url_self_request;
    $page = base64_encode($page);
    return <<<EOF
    <html><head><title></title></head><body>
    <script type="text/javascript" src="$this_page?$url_self_request=js"></script>
	<!-- RSS FEED -->
    <script type="text/javascript">
    <!--
    document.open();
    document.write(decodeBase64("$page"));
    -->
    </script>
    </body></html>
EOF;
}
//<?php //fix my syntax highlighter...again urrr..

//functions for preg_replace callback
function edit_tags_callback($matches){
	global $stop_url;
	//if this tag has a stop value and this is it
	//then return the tag untouched
	$matches[2] = strtolower($matches[2]);
	if (isset($stop_url[$matches[2]])){
		if (in_array(strtolower($matches[3]), $stop_url[$matches[2]])){
			return $matches[0];
		}
	}
    $matches[3] = htmlspecialchars(edit_url($matches[3],0));
    return $matches[1].$matches[3].$matches[4];
}

function edit_style_tag_callback($matches){
    $matches[2] = edit_css($matches[2]);
    return $matches[1].$matches[2].$matches[3];
}

function edit_forms_callback($form_match){
    global $url_var_name;
    list ($form_match[2],$url_input) = edit_url($form_match[2],1);
    $input_tag = '<input type="hidden" name="'
		.$url_var_name.'" value="'
		. htmlspecialchars(urldecode($url_input)).'">';
	return $form_match[1].$form_match[2].$form_match[3].$input_tag;
}

function edit_css_callback($matches){
    $matches[2] = edit_url($matches[2],0);
    return $matches[1].$matches[2].$matches[3];
}

function edit_meta_callback($matches){
    //print_r($matches);
    if (!empty($matches[4])){
        //use 3/4/9
        $url_a = explode(';', $matches[4], 2);
        if (sizeof($url_a) == 1){
            //leave it
            $tag = '<meta '.$matches[3].$matches[4].$matches[9];
        } else {
            //edit it
            $url_a[1] = preg_replace('!^URL\s*=\s*!is', '', trim($url_a[1]));
            $tag = '<meta '.$matches[3].$url_a[0].';url='.edit_url($url_a[1],0).$matches[9];
        }
    } else {
        //use 6/7/8/9
        $url_a = explode(';', $matches[7], 2);
        if (sizeof($url_a) != 1){
            //leave it
            $tag = '<meta '.$matches[6].$matches[7].$matches[8].$matches[9];
        } else {
            //edit it
            $url_a[1] = preg_replace('!^URL\s*=\s*!is', '', trim($url_a[1]));
            $tag = '<meta '.$matches[6].$url_a[0].';url='.edit_url($url_a[1],0).$matches[8].$matches[9];
        }
    }
    return $tag;
}

/*
* This use used to create a log of all urls visited in html format
*/
function url_log($url){
    global $url_log, $log_urls;
    if ($log_urls){
        $fp = fopen($url_log, 'ab');
        $string = "<br /><a href=\"$url\">$url</a>";
        fwrite($fp, $string, strlen($string));
        fclose($fp);
    }
}

/*
This is for debugging only
*/
function debug_log($name, $message){
    global $log_all_connections, $log_file;
    if ($log_all_connections){
        $s = strlen($message);
        $string = "\n\n***DEBUG-LOG: $name (length $s Bytes) \n\n$message";
        $fp = fopen($log_file, 'ab');
        fwrite($fp, $string, strlen($string));
        fclose($fp);
    }
}
?>