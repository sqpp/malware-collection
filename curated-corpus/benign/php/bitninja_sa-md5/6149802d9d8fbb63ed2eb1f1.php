<?php

	// updateplayercontract.php
	
	require '../includes.php';
	//require 'isleagueready.php';

	$db = Connect();

	// Receiving
	// 0 = Player ID
	// 1 = Contract length being offered in weeks.
	// 2 = Contract wages being offered.
	
	$PlayerID = filter_input(INPUT_POST, 'PlayerID', FILTER_SANITIZE_STRING);
	$Wage = filter_input(INPUT_POST, 'Wage', FILTER_SANITIZE_STRING);
	$Weeks = filter_input(INPUT_POST, 'Weeks', FILTER_SANITIZE_STRING);
	$SigningOnFee = filter_input(INPUT_POST, 'SigningOnFee', FILTER_SANITIZE_STRING);

	// Check for errors in input or unacceptable numbers (e.g negative numbers in this case).
	// Report an error and cancel the script if any of these fail.
	
	if (!is_numeric($PlayerID) or !is_numeric($Wage) or !is_numeric($Weeks) or !is_numeric($SigningOnFee)) {
		die ("Something isn't numeric in 'updateplayercontract.php.");
	}
	
	//if ( IsLeagueReady ($db, $WhichLeagueID, $WhichDay) == false ) {
	//	die(); // If the synch-check didn't match, kill the program so that the order isn't carried out.
	//}

	$db->beginTransaction();

	try {
		// Load in the player, update the contract offer, then end.
		$Player = new Player;
		$Player->Load($PlayerID);

		// Load in his team, update his bank balance and add a profit and loss statement for the contract signing on fee.
		// Unlike normal p&l, we'll take this amount off immediately since it's happening right now. On his next turn, it'll be deleted along with all other p&l.
		$Team = new Team;
		$Team->Load($Player->TeamID);
		$Team->Finances->Balance -= $SigningOnFee;
		$Team->Finances->ProfitAndLoss[$Player->Name . ' signing on fee'] = -$SigningOnFee;
		$Team->Save();
		
		$Player->FinancialArray['Wages'] = intval($Wage);
		$Player->FinancialArray['ContractWeeks'] += intval($Weeks);
		$Weeks = $Player->FinancialArray['ContractWeeks'];
		
		$FinancialJSON = json_encode($Player->FinancialArray);

		if ($Player <> null) {
			$query = $db->prepare("UPDATE players SET FinancialJSON = :FinancialJSON WHERE ID = :PlayerID");
			$query->bindValue(':PlayerID', $PlayerID, PDO::PARAM_INT);
			$query->bindValue(':FinancialJSON', $FinancialJSON, PDO::PARAM_STR);
			$query->execute();
			echo "Ok|" . $Weeks . "|" . $Wage . "|" . $Team->Finances->Balance;
		} else {
			die ("Player doesn't exist.");
		}

		$db->commit();
		
	} catch(PDOException $ex) {
		Echo $ex->getMessage();
			$db->rollback();
	}
