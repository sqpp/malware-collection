<?php
   if (!defined('BASEPATH'))
      exit('No direct script access allowed');

   class Interviews extends MY_Controller {
      function __construct() {
         parent::__construct();
         $this->init_permission_checker("interview");
         $this->config->load('constants');
         //$this->access_only_allowed_members();
      }
      //load the expenses list view
      function index() {
         //$this->check_module_availability("module_interviews");
         $this->access_only_allowed_members();
         $view_data["custom_field_headers"] = $this->Custom_fields_model->get_custom_field_headers_for_table("interviews", $this->login_user->is_admin, $this->login_user->user_type);
         $status = $this->config->item('interview_status_dropdown');
         $view_data['status'] = json_encode($status);  
         $this->template->rander("interviews/index", $view_data);
      }
      //load the add/edit expense form
      function modal_form() {
         validate_submitted_data(array(
            "id" => "numeric"
         ));
         $skills = $this->config->item('skills_dropdown');
         $skills_dropdown = array();
         foreach ($skills as $skill) {
            $skills_dropdown[$skill->id] = $skill->name;
         }
         $status = $this->config->item('status_dropdown');
         $status_dropdown = array();
         foreach ($status as $statuss) {
            $status_dropdown[$statuss->id] = $statuss->name;
         }
         $team_members = $this->Users_model->get_all_where(array("deleted" => 0, "user_type" => "staff", "status" => 'active'))->result();
         $members_dropdown = array();
         foreach ($team_members as $team_member) {
            $members_dropdown[$team_member->id] = $team_member->first_name . " " . $team_member->last_name;
         }
         $view_data['members_dropdown'] = array("0" => "-") + $members_dropdown;
         $view_data['skills_dropdown'] = array("0" => "-") + $skills_dropdown;
         $view_data['status_dropdown'] = array("0" => "-") + $status_dropdown;
         $model_info = $this->Interviews_model->get_one($this->input->post('id'));
         $view_data['model_info'] = $model_info;
         $view_data["custom_fields"] = $this->Custom_fields_model->get_combined_details("interviews", $view_data['model_info']->id, $this->login_user->is_admin, $this->login_user->user_type)->result();
         $this->load->view('interviews/modal_form', $view_data);
      }
      //save an expense
      function save() {
         validate_submitted_data(array(
            "id" => "numeric",
            "interviewer_name" => "required",
            "interviewer_phone" => "required",
            "interviewer_email_id" => "required",
            "interviwer_skills" => "required",
         ));
         $id = $this->input->post('id');
         $target_path = get_setting("timeline_file_path");
         $files_data = move_files_from_temp_dir_to_permanent_dir($target_path, "interview");
         $new_files = unserialize($files_data);
         $data = array(
            "candidate_name" => $this->input->post('interviewer_name'),
            "contact_no" => $this->input->post('interviewer_phone'),
            "email_id" => $this->input->post('interviewer_email_id'),
            "skills" => $this->input->post('interviwer_skills'),
            "interviewer_id" => $this->input->post('interview_person_name'),
            "status" => $this->input->post('status'),
            "comment" => $this->input->post('interview_comment'),
         );
         //is editing? update the files if required
         if ($id) {
            $interview_info = $this->Interviews_model->get_one($id);
            $timeline_file_path = get_setting("timeline_file_path");
            $new_files = update_saved_files($timeline_file_path, $interview_info->resume_url, $new_files);
         }
         $data["resume_url"] = serialize($new_files);
         $save_id = $this->Interviews_model->save($data, $id);

         if ($save_id) {
            save_custom_fields("interviews", $save_id, $this->login_user->is_admin, $this->login_user->user_type);
            echo json_encode(array("success" => true, "data" => $this->_row_data($save_id), 'id' => $save_id, 'message' => lang('record_saved')));
         } else {
            echo json_encode(array("success" => false, 'message' => lang('error_occurred')));
         }
      }
      //delete/undo an expense
      function delete() {
         validate_submitted_data(array(
            "id" => "required|numeric"
         ));
         $id = $this->input->post('id');
         $expense_info = $this->Interviews_model->get_one($id);

         if ($this->Interviews_model->delete($id)) {
            //delete the files
            $file_path = get_setting("timeline_file_path");
            if ($expense_info->files) {
               $files = unserialize($expense_info->files);
               foreach ($files as $file) {
                  delete_app_files($file_path, array($file));
               }
            }
            echo json_encode(array("success" => true, 'message' => lang('record_deleted')));
         } else {
            echo json_encode(array("success" => false, 'message' => lang('record_cannot_be_deleted')));
         }
      }
      //get the expnese list data
      function list_data() {
         $id = $this->input->post('id');
         $email_id = $this->input->post('email_id');
         $statuses = $this->input->post('status');
         //$statuses = $this->input->post('status') ? implode(",", $this->input->post('status')) : "";
         $custom_fields = $this->Custom_fields_model->get_available_fields_for_table("interviews", $this->login_user->is_admin, $this->login_user->user_type);
         $options = array("id" => $id, "email_id" => $email_id, "status" => $statuses, "custom_fields" => $custom_fields);
         $list_data = $this->Interviews_model->get_details($options)->result();
         $result = array();
         foreach ($list_data as $data) {
            $result[] = $this->_make_row($data, $custom_fields);
         }
         echo json_encode(array("data" => $result));
      }
      //get a row of expnese list
      private function _row_data($id) {
         $custom_fields = $this->Custom_fields_model->get_available_fields_for_table("interviews", $this->login_user->is_admin, $this->login_user->user_type);
         $options = array("id" => $id, "custom_fields" => $custom_fields);
         $data = $this->Interviews_model->get_details($options)->row();
         return $this->_make_row($data, $custom_fields);
      }
      //prepare a row of expnese list
      private function _make_row($data, $custom_fields) {
         $files_link = "";
         if ($data->files) {
            $files = unserialize($data->files);
            if (count($files)) {
               foreach ($files as $key => $value) {
                  $file_name = get_array_value($value, "file_name");
                  $link = " fa fa-" . get_file_icon(strtolower(pathinfo($file_name, PATHINFO_EXTENSION)));
                  $files_link .= js_anchor(" ", array('title' => "", "data-toggle" => "app-modal", "data-sidebar" => "0", "class" => "pull-left font-22 mr10 $link", "title" => remove_file_prefix($file_name), "data-url" => get_uri("interviews/file_preview/" . $data->id . "/" . $key)));
               }
            }
         }
         $email_id = '<a href="mailto:'.$data->email_id.'">'.$data->email_id.'</a>';
         $row_data = array(
            $data->id,
            $data->candidate_name,
            anchor('https://web.whatsapp.com/send?phone=+91'.$data->contact_no, $data->contact_no, ['target'=>'_blank']),
            $email_id,
            $data->skills,
            $data->linked_user_name,
            lang($data->status)
         );
         foreach ($custom_fields as $field) {
            $cf_id = "cfv_" . $field->id;
            $row_data[] = $this->load->view("custom_fields/output_" . $field->field_type, array("value" => $data->$cf_id), true);
         }
         $row_data[] = modal_anchor(get_uri("interviews/modal_form"), "<i class='fa fa-envelope'></i>", array("class" => "edit", "title" => lang('edit_expense'), "data-post-id" => $data->id))
                . modal_anchor(get_uri("interviews/modal_form"), "<i class='fa fa-pencil'></i>", array("class" => "edit", "title" => lang('edit_expense'), "data-post-id" => $data->id))
                . js_anchor("<i class='fa fa-times fa-fw'></i>", array('title' => lang('delete_expense'), "class" => "delete", "data-id" => $data->id, "data-action-url" => get_uri("interviews/delete"), "data-action" => "delete-confirmation"));
         return $row_data;
      }
      function file_preview($id = "", $key = "") {
         if ($id) {
            $interview_info = $this->Interviews_model->get_one($id);
            $files = unserialize($interview_info->resume_url);
            $file = get_array_value($files, $key);

            $file_name = get_array_value($file, "file_name");
            $file_id = get_array_value($file, "file_id");
            $service_type = get_array_value($file, "service_type");

            $view_data["file_url"] = get_source_url_of_file($file, get_setting("timeline_file_path"));
            $view_data["is_image_file"] = is_image_file($file_name);
            $view_data["is_google_preview_available"] = is_google_preview_available($file_name);
            $view_data["is_viewable_video_file"] = is_viewable_video_file($file_name);
            $view_data["is_google_drive_file"] = ($file_id && $service_type == "google") ? true : false;
            $this->load->view("interviews/file_preview", $view_data);
         } else {
            show_404();
         }
      }
      /* upload a file */
      function upload_file() {
         upload_file_to_temp();
      }
      /* check valid file for ticket */
      function validate_interview_file() {
         return validate_post_file($this->input->post("file_name"));
      }
   }

/* End of file interviews.php */
/* Location: ./application/controllers/interviews.php */