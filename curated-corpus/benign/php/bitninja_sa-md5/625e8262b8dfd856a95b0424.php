<?php
require_once __DIR__ . "/../../include/dbcommon.php";

use Base\{GenericException, Utils as BaseUtils, Validations};
use Base\QueryBuilder\Select;
use BBPlanner\{Utils};
use BBPlanner\Constants\{CheckInvolvesGuestsIncosistencyModes, GuestStatuses, Permissions, ReservationUnitVariationAlerts, ReservationUnitVariationChoices, ReservationUnitVariationsTypes};
use BBPlanner\Entities\{ReservationsGuestsServices, ReservationsServices, ReservationUnitExtra, ReservationUnitsServices, StructuresServices};

BaseUtils::executeCatchedScript(function () {
    // Validations::validate($_POST, [
    //     "action" => Validations::or(["ADD", "EDIT", "DELETE"]),
    // ]);

    // if (in_array($_POST["action"], ["ADD", "EDIT"])) {
    //     Validations::validate($_POST, [
    //         "reservationID" => $_POST["action"] === "ADD" ? Validations::IS_POSITIVE_INTEGER : Validations::IS_EMPTY,
    //         "reservationUnitID" => $_POST["action"] === "EDIT" ? Validations::IS_POSITIVE_INTEGER : Validations::IS_EMPTY,
    //         "editValues" => Validations::or([Validations::IS_ASSOCIATIVE_ARRAY, function (array $editValues) {
    //             return Validations::validateIfExists($editValues, [
    //                 "mainReservationUnitID" => Validations::or([Validations::IS_EMPTY, Validations::IS_POSITIVE_INTEGER]),
    //                 "checkIn" => Validations::IS_DATE_STRING,
    //                 "checkOut" => Validations::IS_DATE_STRING,
    //                 "treatmentID" => Validations::or([Validations::IS_EMPTY, Validations::IS_POSITIVE_INTEGER]),
    //             ]);
    //         }]),
    //     ]);
    // }

    // if ($_POST["action"] === "ADD") {
    //     $structureID = ReservationsServices::get($_POST["reservationID"])->structureID;
    // } else {
    //     $reservationUnit = ReservationUnitsServices::get($_POST["reservationUnitID"]);
    //     $structureID = $reservationUnit->getStructureID();
    // }

    // $structure = StructuresServices::get($structureID);
    // $bookingPermissionPresence = $structure->checkPermission(Permissions::BOOKING);
    // $alloggiatiPermissionPresence = $structure->checkPermission(Permissions::ALLOGGIATI);

    // $sections = [];

    // if ($_POST["action"] === "ADD") {
    //     $editValues = $_POST["editValues"];

    //     if (
    //         $alloggiatiPermissionPresence &&
    //         array_key_exists("mainReservationUnitID", $editValues) &&
    //         Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::ADD_TO_BLOCK, null, $editValues["checkIn"], $editValues["checkOut"], $editValues["mainReservationUnitID"])
    //     ) {
    //         $sections[] = "showReservationGuestVariationAlert";
    //     }
    // } else if ($_POST["action"] === "EDIT") {
    //     $editValues = $_POST["editValues"];

    //     $checkInToControl = $editValues["checkIn"] ?: $reservationUnit->checkIn;
    //     $checkOutToControl = $editValues["checkOut"] ?: $reservationUnit->checkOut;
    //     $datesAreDifferent = $checkInToControl !== $reservationUnit->checkIn || $checkOutToControl !== $reservationUnit->checkOut;

    //     if ($bookingPermissionPresence && $structure->treatmentsAreActive) {
    //         if ($datesAreDifferent) {
    //             $sections[] = "showRefreshDinnersPlanningAlert";
    //         } else if (array_key_exists("treatmentID", $editValues) && $editValues["treatmentID"] !== $reservationUnit->treatmentID && Validations::isNotEmpty($editValues["treatmentID"])) {
    //             $sections[] = "showChoiceToRefreshDinnersPlanning";
    //         }
    //     }

    //     if ($alloggiatiPermissionPresence) {
    //         $thereAreVariations = false;

    //         if (array_key_exists("mainReservationUnitID", $editValues)) {
    //             if (!$reservationUnit->isUnitChange() && Validations::isNotEmpty($editValues["mainReservationUnitID"])) {
    //                 //EMPTY YO BLOCK
    //                 $reservationGuests = ReservationsGuestsServices::getCount(function (Select $query) use ($reservationUnit) {
    //                     $query->isEqual("reservationUnitID", $reservationUnit->id);
    //                 });

    //                 if ($reservationGuests > 0) {
    //                     throw new GenericException("RESERVATION-UNIT-WITH-GUESTS", 500, compact("reservationUnit", "reservationGuests"));
    //                 }

    //                 $thereAreVariations = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::ADD_TO_BLOCK, $reservationUnit, $editValues["checkIn"], $editValues["checkOut"], $editValues["mainReservationUnitID"]);
    //             } else if ($reservationUnit->isUnitChange() && Validations::isEmpty($editValues["mainReservationUnitID"])) {
    //                 //BLOCK TO EMPTY
    //                 $thereAreVariations = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::REMOVE_TO_BLOCK, $reservationUnit);
    //             } else if (Validations::isNotEmpty($reservationUnit->mainReservationUnitID) && Validations::isNotEmpty($editValues["mainReservationUnitID"]) &&  $reservationUnit->mainReservationUnitID !== $editValues["mainReservationUnitID"]) {
    //                 //BLOCK TO BLOCK
    //                 $thereAreVariationsOnOldBlock = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::REMOVE_TO_BLOCK, $reservationUnit);
    //                 $thereAreVariationsOnNewBlock = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::ADD_TO_BLOCK, $reservationUnit, $editValues["checkIn"], $editValues["checkOut"], $editValues["mainReservationUnitID"]);

    //                 $thereAreVariations = $thereAreVariationsOnOldBlock || $thereAreVariationsOnNewBlock;
    //             } else if ($datesAreDifferent) {
    //                 //CHANGE ONLY DATE
    //                 $thereAreVariations = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::DATE_CHANGE, $reservationUnit, $editValues["checkIn"], $editValues["checkOut"]);
    //             }
    //         } else if ($datesAreDifferent) {
    //             $thereAreVariations = Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::DATE_CHANGE, $reservationUnit, $editValues["checkIn"], $editValues["checkOut"]);
    //         }

    //         if ($thereAreVariations) {
    //             $sections[] = "showReservationGuestVariationAlert";
    //         }
    //     }
    // } else if ($_POST["action"] === "DELETE") {
    //     $someExtrasIsBlocked = ArrayUtils::some($reservationUnit->getExtras(), function (ReservationUnitExtra $reservationUnitExtra) {
    //         return $reservationUnitExtra->isLinkedToAMovement() || $reservationUnitExtra->isDocumented();
    //     });

    //     if (
    //         $reservationUnit->stayPriceIsLinkedToAMovement() || $reservationUnit->stayPriceIsDocumented() ||
    //         $reservationUnit->treatmentPriceIsLinkedToAMovement() || $reservationUnit->treatmentPriceIsDocumented() ||
    //         $reservationUnit->touristTaxAmountIsLinkedToAMovement() || $reservationUnit->touristTaxIsDocumented() ||
    //         $someExtrasIsBlocked
    //     ) {
    //         $sections[] = "showReservationUnitVoicesIsLinkedToMovementsOrDocuments";
    //     }

    //     if ($reservationUnit->isConnectedToUnitChangeReservationUnits()) {
    //         $sections[] = "showReservationUnitsChangeCancellation";
    //     }

    //     if ($alloggiatiPermissionPresence) {
    //         $reservationGuestsWithCheckInDoneCount = ReservationsGuestsServices::getCount(function (Select $query) use ($reservationUnit) {
    //             $query->isEqual("reservationUnitID", $reservationUnit->id);
    //             $query->isEqual("statusID", GuestStatuses::ARRIVED);
    //         });

    //         if ($reservationGuestsWithCheckInDoneCount > 0) {
    //             $sections[] = "showReservationGuestsSetToNotArrivedAlert";
    //         }

    //         if (Utils::reservationUnitEditInvolvesGuestsIncosistency(CheckInvolvesGuestsIncosistencyModes::REMOVE_TO_BLOCK, $reservationUnit)) {
    //             $sections[] = "showReservationGuestVariationAlert";
    //         }
    //     }
    // }

    if ($_POST["action"] === ReservationUnitVariationsTypes::RESTORE) {

        $reservationUnit = ReservationUnitsServices::get($_POST["reservationUnitID"]);

        if ($reservationUnit->isUnitChange()) {
            $mainReservationUnit = ReservationUnitsServices::get($reservationUnit->mainReservationUnitID);

            if ($mainReservationUnit->isCanceled) {
                $message = "Ripristinare la camera principale prima di ripristare i suo cambi camera";
                throw new GenericException("MAIN-RESERVATION-UNIT-IS-NOT-CANCELED", 500, compact("message"));
            }
        }
    }


    list($alertsCodes, $choicesCodes) = Utils::getReservationUnitVariationAlertsAndChoices($_POST["action"], $_POST["reservationID"] ?: $_POST["reservationUnitID"], $_POST["editValues"]);

    $sections = [];

    if (in_array(ReservationUnitVariationAlerts::GUESTS_DATES_TO_REVIEW, $alertsCodes)) {
        $sections[] = "showReservationGuestVariationAlert";
    }

    if (in_array(ReservationUnitVariationAlerts::REFRESH_DINNERS_PLANNING, $alertsCodes)) {
        $sections[] = "showRefreshDinnersPlanningAlert";
    }

    if (in_array(ReservationUnitVariationAlerts::VOICES_LINKED_TO_MOVEMENTS_DOCUMENTS, $alertsCodes)) {
        $sections[] = "showReservationUnitVoicesIsLinkedToMovementsOrDocuments";
    }

    if (in_array(ReservationUnitVariationAlerts::RESERVATION_UNITS_CHANGE_CANCELLATION, $alertsCodes)) {
        $sections[] = "showReservationUnitsChangeCancellation";
    }

    if (in_array(ReservationUnitVariationAlerts::GUESTS_SETTED_AS_NOT_ARRIVED, $alertsCodes)) {
        $sections[] = "showReservationGuestsSetToNotArrivedAlert";
    }

    if (in_array(ReservationUnitVariationChoices::REFRESH_DINNERS_PLANNING, $choicesCodes)) {
        $sections[] = "showChoiceToRefreshDinnersPlanning";
    }

    return compact("sections");
});
