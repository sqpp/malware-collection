<?php
session_start();

require_once $_SERVER['DOCUMENT_ROOT']."/dompdf/autoload.inc.php";
use Dompdf\Dompdf;

include('ActivityLogging.php');
include('HelperClass.php');
$database = include('databaseConfig.php');

//if(!isset($_SESSION['User_Email']) || !isset($_SESSION['User_Id']) || !isset($_SESSION['User_FullName']))
//{
//header("Location:login.php");
//}
date_default_timezone_set('Australia/Melbourne');
header('Content-Type: application/json');
//sleep(2);
$datetime    = new DateTime();
//$datetimeNow = $datetime->format('Y-m-d h:i:s A');
$datetimeNow = $datetime->format('Y-m-d H:i:s');

if (isset($_SESSION['User_Id'])) {
    $UserId = $_SESSION['User_Id'];
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $logger    = new ActivityLogging();
    $operation = $_POST['operation'];
    $dbh       = new PDO($database['provider'], $database['user'], $database['pass']);
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    if ($operation == "getCustomerDetails_Edit") {
        $customerId = $_POST["customerId"];
        
        try {
            $customerSmt = $dbh->prepare('SELECT * FROM CustomerDetails Where CustomerId = ?');
            $customerSmt->execute(array(
                $customerId
            ));
            $customerData              = $customerSmt->fetch();
            //var_dump($customerData);
            $response_array['status']  = 'success';
            $response_array['message'] = 'Customer Found';
            
            $CustomerIdParent = strlen($customerData['CustomerIdParent']) == 0 ? "N/A" : $customerData['CustomerIdParent'];
            
            $response_array['data'] = array(
                'CustomerId' => "{$customerData['CustomerId']}",
                'CustomerIdParent' => "{$CustomerIdParent}",
                'CustomerLastName' => "{$customerData['CustomerLastName']}",
                'CustomerFirstName' => "{$customerData['CustomerFirstName']}",
                'CustomerPhone1' => "{$customerData['CustomerPhone1']}",
                'CustomerPhone2' => "{$customerData['CustomerPhone2']}",
                'CustomerEmail' => "{$customerData['CustomerEmail']}",
                'CustomerDOB' => "{$customerData['CustomerDOB']}",
                'CustomerAddressLine1' => "{$customerData['CustomerAddressLine1']}",
                'CustomerCitySuburb' => "{$customerData['CustomerCitySuburb']}",
                'CustomerState' => "{$customerData['CustomerState']}",
                'CustomerPostCode' => "{$customerData['CustomerPostCode']}",
                'CustomerCountry' => "{$customerData['CustomerCountry']}"
            );
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("getCustomerDetails_Edit Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "updateData") {
        $customerId = $_POST["customerId"];
        
        try {
            $customerSmt = $dbh->prepare('UPDATE CustomerDetails SET CustomerFirstName=?,CustomerLastName=?,CustomerEmail=?,CustomerDOB=?,CustomerPhone1=?,CustomerPhone2=?,CustomerAddressLine1=?,CustomerCitySuburb=?,CustomerState=?,CustomerPostCode=?,CustomerCountry=?,DateModified=?,UserModified=? WHERE customerId = ?');
            $customerSmt->execute(array(
                $_POST['CustomerFirstName'],
                $_POST['CustomerLastName'],
                $_POST['CustomerEmail'],
                $_POST['CustomerDOB'],
                $_POST['CustomerPhone'],
                $_POST['CustomerPhone2'],
                $_POST['CustomerAddressLine'],
                $_POST['CustomerCitySuburb'],
                $_POST['CustomerState'],
                $_POST['CustomerPostCode'],
                $_POST['CustomerCountry'],
                $datetimeNow,
                $UserId,
                $customerId
            ));
            
            $ActivityType = $operation;
            $ActivityText = "Customer data has been updated for customerId: {$customerId}";
            $DateUpdated  = $datetimeNow;
            $SqlQueryUsed = "UPDATE CustomerDetails SET CustomerFirstName='{$_POST['CustomerFirstName']}',CustomerLastName='{$_POST['CustomerLastName']}',CustomerEmail='{$_POST['CustomerEmail']}',CustomerDOB='{$_POST['CustomerDOB']}',CustomerPhone1='{$_POST['CustomerPhone']}',CustomerPhone2='{$_POST['CustomerPhone2']}',CustomerAddressLine1='{$_POST['CustomerAddressLine']}',CustomerCitySuburb='{$_POST['CustomerCitySuburb']}',CustomerState='{$_POST['CustomerState']}',CustomerPostCode='{$_POST['CustomerPostCode']}',CustomerCountry='{$_POST['CustomerCountry']}',DateModified='{$datetimeNow}',UserModified='{$UserId}' WHERE customerId = '{$customerId}'";
            $UpdatedBy    = $UserId;
            $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Customer Data Updated ' . $flag;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("updateData Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "addMember") {
        try {
            //$customerId = date("Ymd").time();
            //create new ID
            $getMaxIdStmt = $dbh->prepare("SELECT MAX(CustomerDetailsId) AS maxId FROM CustomerDetails");
            $getMaxIdStmt->execute(array(
                ''
            ));
            $maxId      = $getMaxIdStmt->fetchColumn();
            $newId      = $maxId + 1;
            $customerId = sprintf('ZWT-%1$05d', $newId);
            
            $CustomerIdParent = $_POST["customerId"];
            
            $ph  = preg_replace('/[^0-9]/', '', $_POST['CustomerPhone']);
            $ph2 = preg_replace('/[^0-9]/', '', $_POST['CustomerPhone2']);
            
            if (strlen($ph) > 0) {
                //Check if PH exists
                $getPhSql = $dbh->prepare("SELECT COUNT(*) FROM CustomerDetails WHERE CustomerPhone1=?");
                $getPhSql->execute(array(
                    $ph
                ));
                if ($getPhSql->fetchColumn() != 0) {
                    $response_array['status']  = 'error';
                    $response_array['message'] = 'PH number already exists';
                    $response_array['data']    = $ph;
                    
                    echo json_encode($response_array);
                } else {
                    $actionSmt = $dbh->prepare("INSERT INTO CustomerDetails (CustomerDetailsId, CustomerId, CustomerFirstName, CustomerIdParent, CustomerLastName, CustomerEmail, CustomerDOB, CustomerPhone1, CustomerPhone2, CustomerAddressLine1, CustomerCitySuburb, CustomerState, CustomerPostCode, CustomerCountry,DateCreated, DateModified, UserCreated, UserModified) VALUES (NULL, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);");
                    $actionSmt->execute(array(
                        $customerId,
                        $_POST['CustomerFirstName'],
                        $CustomerIdParent,
                        $_POST['CustomerLastName'],
                        $_POST['CustomerEmail'],
                        $_POST['CustomerDOB'],
                        $ph,
                        $ph2,
                        $_POST['CustomerAddressLine'],
                        $_POST['CustomerCitySuburb'],
                        $_POST['CustomerState'],
                        $_POST['CustomerPostCode'],
                        $_POST['CustomerCountry'],
                        $datetimeNow,
                        NULL,
                        $UserId,
                        NULL
                    ));
                    
                    $ActivityType = $operation;
                    $ActivityText = "A Member has been added for customerId: {$customerId}";
                    $DateUpdated  = $datetimeNow;
                    $SqlQueryUsed = "N/A";
                    $UpdatedBy    = $UserId;
                    $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
                    
                    $response_array['status']  = 'success';
                    $response_array['message'] = 'Member Added';
                    $response_array['data']    = $customerId;
                    
                    echo json_encode($response_array);
                }
            } else {
                $actionSmt = $dbh->prepare("INSERT INTO CustomerDetails (CustomerDetailsId, CustomerId, CustomerFirstName, CustomerIdParent, CustomerLastName, CustomerEmail, CustomerDOB, CustomerPhone1, CustomerPhone2, CustomerAddressLine1, CustomerCitySuburb, CustomerState, CustomerPostCode, CustomerCountry,DateCreated, DateModified, UserCreated, UserModified) VALUES (NULL, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);");
                $actionSmt->execute(array(
                    $customerId,
                    $_POST['CustomerFirstName'],
                    $CustomerIdParent,
                    $_POST['CustomerLastName'],
                    $_POST['CustomerEmail'],
                    $_POST['CustomerDOB'],
                    $ph,
                    $ph2,
                    $_POST['CustomerAddressLine'],
                    $_POST['CustomerCitySuburb'],
                    $_POST['CustomerState'],
                    $_POST['CustomerPostCode'],
                    $_POST['CustomerCountry'],
                    $datetimeNow,
                    NULL,
                    $UserId,
                    NULL
                ));
                
                $ActivityType = $operation;
                $ActivityText = "A Member has been added for customerId: {$customerId}";
                $DateUpdated  = $datetimeNow;
                $SqlQueryUsed = "N/A";
                $UpdatedBy    = $UserId;
                $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
                
                $response_array['status']  = 'success';
                $response_array['message'] = 'Member Added';
                $response_array['data']    = $customerId;
                
                echo json_encode($response_array);
            }
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("addMember Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "deleteMember") {
        
        $customerId       = $_POST["customerId"];
        $CustomerIdParent = $_POST["customerIdParent"];
        
        try {
            $actionSmt = $dbh->prepare("DELETE From CustomerDetails Where customerId = ? AND customerIdParent = ?;");
            
            $actionSmt->execute(array(
                $customerId,
                $CustomerIdParent
            ));
            
            $ActivityType = $operation;
            $ActivityText = "A Member has been deleted for customerId: {$customerId}";
            $DateUpdated  = $datetimeNow;
            $SqlQueryUsed = "DELETE From CustomerDetails Where customerId = ? AND customerIdParent = ?;";
            $UpdatedBy    = $UserId;
            $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Member Removed';
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("deleteMember Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "deleteCustomerDoc") {
        $customerId  = $_POST["customerId"];
        $docId       = $_POST["docId"];
        $docLocation = $_POST["docLocation"];
        
        try {
            if (unlink($docLocation)) {
                $fileUpSmt = $dbh->prepare("DELETE FROM CustomerDocuments WHERE DocumentId = ? AND CustomerId = ?");
                $fileUpSmt->execute(array(
                    $docId,
                    $customerId
                ));
                
                $response = array(
                    'status' => 'success',
                    'message' => 'Document Deleted',
                    'data' => $docLocation
                );
            } else {
                $response = array(
                    'status' => 'fail',
                    'message' => 'Document Not Deleted',
                    'data' => $docLocation
                );
            }
            
            echo json_encode($response);
        }
        catch (Exception $e) {
            HelperClass::LogSystem("deleteCustomerDoc Error: " . $ex->getMessage());
            $response = array(
                'status' => 'fail',
                'message' => 'Error Deleting Document',
                'data' => $e->getMessage()
            );
            echo json_encode($response);
        }
    }
    
    if ($operation == "loadAllNotes") {
        $customerId  = $_POST["customerId"];
        $noteTableTr = "";
        
        try {
            $loadNoteSmt = $dbh->prepare("SELECT * FROM CustomerNotes WHERE CustomerId = ? ORDER BY NoteId DESC");
            $loadNoteSmt->execute(array(
                $customerId
            ));
            
            while ($row = $loadNoteSmt->fetch(PDO::FETCH_ASSOC)) {
                $datetime  = new DateTime($row['DateAdded']);
                $_datetime = $datetime->format('Y-m-d h:i:s A');
                
                if (strlen($row['FollowUpDate'])) {
                    $followUpDate  = new DateTime($row['FollowUpDate']);
                    $_followUpDate = $followUpDate->format('Y-m-d');
                } else {
                    $_followUpDate = 'N/A';
                }
                
                $noteTableTr .= "<tr><td style='width: 20%;'>{$_datetime}</td><td style='width: 60%;'>{$row['NoteText']}</td><td style='width: 20%;'>{$_followUpDate}</td></tr>";
            }
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Note Loaded';
            $response_array['data']    = $noteTableTr;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("UserLoggedInStatus Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "addNote") {
        $customerId   = $_POST["customerId"];
        $note         = $_POST["txtNote"];
        $followUpDate = $_POST["datePickerNote"];
        
        $logger = new ActivityLogging();
        
        try {
            $actionSmt = $dbh->prepare("INSERT INTO CustomerNotes(NoteId, CustomerId, NoteText, DateAdded, FollowUpDate, UserAdded) VALUES (NULL,?,?,?,?,?)");
            $actionSmt->execute(array(
                $customerId,
                $note,
                $datetimeNow,
                $followUpDate,
                $UserId
            ));
            
            $ActivityType = $operation;
            $ActivityText = "Note added for customerId: {$customerId}";
            $DateUpdated  = $datetimeNow;
            $SqlQueryUsed = "INSERT INTO CustomerNotes(NoteId, CustomerId, NoteText, DateAdded, FollowUpDate, UserAdded) VALUES (NULL,{$customerId},{$note},{$datetimeNow},{$followUpDate},{$UserId})";
            $UpdatedBy    = $UserId;
            $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
            $response_array['message'] = 'Note Added ' . $flag;
            $response_array['status']  = 'success';
            $response_array['data']    = $customerId;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("addNote Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage() . ' - ' . $flag;
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "logInCheck") {
        $email    = $_POST['email'];
        $password = $_POST['password'];
        try {
            $sql = $dbh->prepare("SELECT * FROM UserDetails WHERE UserEmail=?");
            $sql->execute(array(
                $email
            ));
            $userRow = $sql->fetch(PDO::FETCH_ASSOC);
            if ($userRow === false) {
                $response_array['status']  = 'fail';
                $response_array['message'] = 'Email Does Not Exist';
                $response_array['data']    = $email;
            } else {
                //var_dump($userRow);
                $p            = $userRow['UserPassword'];
                $p_salt       = $userRow['UserSalt'];
                $email        = $userRow['UserEmail'];
                $uId          = $userRow['UserId'];
                $UserFullName = $userRow['UserFullName'];
                
                $site_salt   = "SheikhMishuSalt";
                /*Common Salt used for password storing on site. You can't change it. If you want to change it, change it when you register a user.*/
                $salted_hash = hash('sha256', $password . $site_salt . $p_salt);
                
                if ($p == $salted_hash) {
                    $_SESSION['User_Email']    = $email;
                    $_SESSION['User_Id']       = $uId;
                    $_SESSION['User_FullName'] = $UserFullName;
                    
                    //updating login status
                    HelperClass::UserLoggedInStatus(true);
                    
                    $response_array['status']   = 'success';
                    $response_array['message']  = "Email Password matched";
                    $response_array['data']     = $email;
                    $response_array['redirect'] = "index.php";
                    
                } else {
                    $response_array['status']  = 'fail';
                    $response_array['message'] = 'Email Password Did Not Match';
                    $response_array['data']    = $email;
                }
            }
            //$response_array['status'] = 'success';
            //$response_array['message'] = 'Note Added';
            //$response_array['data'] = $customerId;            
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("UserLoggedInStatus Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "registration") {
        //var_dump($_POST);
        $first_name            = $_POST['first_name'];
        $last_name             = $_POST['last_name'];
        $UserFullName          = $first_name . " " . $last_name;
        $email                 = $_POST['email'];
        $password              = $_POST['password'];
        $password_confirmation = $_POST['password_confirmation'];
        $phone                 = $_POST['phone'];
        
        $sql = $dbh->prepare("SELECT COUNT(*) FROM UserDetails WHERE UserEmail=?");
        $sql->execute(array(
            $email
        ));
        if ($sql->fetchColumn() != 0) {
            $response_array['status']  = 'error';
            $response_array['message'] = 'Email already exists';
            $response_array['data']    = $email;
            
            echo json_encode($response_array);
        } else {
            function rand_string($length)
            {
                $str   = "";
                $chars = "sheikhmishuabcdefghijklmanopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
                $size  = strlen($chars);
                for ($i = 0; $i < $length; $i++) {
                    $str .= $chars[rand(0, $size - 1)];
                }
                return $str;
                /* http://subinsb.com/php-generate-random-string */
            }
            
            $p_salt      = rand_string(20);
            /* http://subinsb.com/php-generate-random-string */
            $site_salt   = "SheikhMishuSalt";
            /*Common Salt used for password storing on site.*/
            $salted_hash = hash('sha256', $password . $site_salt . $p_salt);
            
            try {
                $sql = $dbh->prepare("INSERT INTO UserDetails(UserId, UserFullName, UserEmail, UserPassword, UserSalt, UserPhone)
                                        VALUES (?, ?, ?, ?, ?, ?)");
                $sql->execute(array(
                    $datetime->format('Ymdhis'),
                    $UserFullName,
                    $email,
                    $salted_hash,
                    $p_salt,
                    $phone
                ));
                
                if ($sql && $sql->rowCount() > 0) {
                    $response_array['status']  = 'success';
                    $response_array['message'] = 'User registration success';
                    $response_array['data']    = $UserFullName;
                    
                    echo json_encode($response_array);
                } else {
                    $response_array['status']  = 'error';
                    $response_array['message'] = 'Database error';
                    $response_array['data']    = $email;
                    
                    echo json_encode($response_array);
                }
                
            }
            catch (PDOException $ex) {
                HelperClass::LogSystem("registration Error: " . $ex->getMessage());
                $response_array['status']  = 'error';
                $response_array['message'] = $ex->getMessage();
                $response_array['data']    = $ex;
                
                echo json_encode($response_array);
            }
        }
    }
    
    if ($operation == "sendPassResetCode_Email") {
        $userEmail = $_POST['email'];
        
        $characters   = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $securityCode = '';
        $max          = strlen($characters) - 1;
        for ($i = 0; $i < 5; $i++) {
            $securityCode .= $characters[mt_rand(0, $max)];
        }
        
        try {
            $sql = $dbh->prepare("UPDATE UserDetails SET PasswordResetCode = ? WHERE UserEmail = ?");
            $sql->execute(array(
                $securityCode,
                $userEmail
            ));
            
            if ($sql && $sql->rowCount() > 0) {
                HelperClass::SendPassResetCode_SendEmail($userEmail, $securityCode);
                
                $response_array['status']  = 'success';
                $response_array['message'] = 'Code Sent';
                $response_array['data']    = $userEmail;
                
                echo json_encode($response_array);
            } else {
                $response_array['status']  = 'error';
                $response_array['message'] = 'Database error';
                $response_array['data']    = $userEmail;
                
                echo json_encode($response_array);
            }
            
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("sendPassResetCode_Email Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            $response_array['message'] = $ex->getMessage();
            $response_array['data']    = $ex;
            
            echo json_encode($response_array);
        }
    }
    
    if ($operation == "reset_Password") {
        $email        = $_POST['email'];
        $securityCode = $_POST['securityCode'];
        $newPassword  = $_POST['newPassword'];
        
        if (strlen($email) > 0 && strlen($securityCode) > 0 && strlen($newPassword) > 0) {
            $sql = $dbh->prepare("SELECT COUNT(*) FROM UserDetails WHERE UserEmail = ? AND PasswordResetCode = ?");
            $sql->execute(array(
                $email,
                $securityCode
            ));
            if ($sql->fetchColumn() < 1) {
                $response_array['status']  = 'error';
                $response_array['message'] = 'Incorrect Email or Security Code';
                $response_array['data']    = $email;
                
                echo json_encode($response_array);
            } else {
                function rand_string($length)
                {
                    $str   = "";
                    $chars = "sheikhmishuabcdefghijklmanopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
                    $size  = strlen($chars);
                    for ($i = 0; $i < $length; $i++) {
                        $str .= $chars[rand(0, $size - 1)];
                    }
                    return $str;
                    /* http://subinsb.com/php-generate-random-string */
                }
                
                $p_salt      = rand_string(20);
                /* http://subinsb.com/php-generate-random-string */
                $site_salt   = "SheikhMishuSalt";
                /*Common Salt used for password storing on site.*/
                $salted_hash = hash('sha256', $newPassword . $site_salt . $p_salt);
                
                try {
                    $sql = $dbh->prepare("UPDATE UserDetails SET UserPassword = ?, UserSalt = ?, PasswordResetCode = ? WHERE UserEmail = ?");
                    $sql->execute(array(
                        $salted_hash,
                        $p_salt,
                        null,
                        $email
                    ));
                    
                    $response_array['status']  = 'success';
                    $response_array['message'] = 'Password Reset Success';
                    $response_array['data']    = $email;
                    
                    echo json_encode($response_array);
                    
                }
                catch (PDOException $ex) {
                    HelperClass::LogSystem("reset_Password Error: " . $ex->getMessage());
                    $response_array['status']  = 'error';
                    $response_array['message'] = $ex->getMessage();
                    $response_array['data']    = $email;
                    
                    echo json_encode($response_array);
                }
            }
        }
    }
    
    if ($operation == "getInvoiceRow_Edit") {
        //var_dump($_POST);
        $invoiceId        = $_POST["invoiceId"];
        $invoiceDetailsId = $_POST['invoiceDetailsId'];
        
        try {
            $invoiceRowSmt = $dbh->prepare("SELECT * FROM InvoiceDetails WHERE InvoiceId = ? AND InvoiceDetailsId = ?");
            $invoiceRowSmt->execute(array(
                $invoiceId,
                $invoiceDetailsId
            ));
            $invoiceRowData = $invoiceRowSmt->fetch();
            
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'invoice Loaded';
            $response_array['data']    = array(
                'AgentNet' => "{$invoiceRowData['AgentNet']}",
                'InvoiceDetailsId' => "{$invoiceRowData['InvoiceDetailsId']}"
            );
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("getInvoiceRow_Edit Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "InvoiceRow_Update") {
        $invoiceId        = $_POST['hiddenInvoiceId'];
        $invoiceDetailsId = $_POST['hiddenInvoiceDetailsId'];
        $agentNet         = $_POST['agentNet'];
        
        try {
            $invoiceRowSmt = $dbh->prepare("SELECT * FROM InvoiceDetails WHERE InvoiceId = ? AND InvoiceDetailsId = ?");
            $invoiceRowSmt->execute(array(
                $invoiceId,
                $invoiceDetailsId
            ));
            $invoiceRowData = $invoiceRowSmt->fetch();
            
            $sellingProfit = floatval($invoiceRowData['SellingPrice']) - floatval($agentNet);
            
            $invoiceRowUpdateSmt = $dbh->prepare("UPDATE InvoiceDetails SET AgentNet = ?, SellingProfit = ? WHERE InvoiceId = ? AND InvoiceDetailsId = ?");
            $invoiceRowUpdateSmt->execute(array(
                $agentNet,
                $sellingProfit,
                $invoiceId,
                $invoiceDetailsId
            ));
            
            ////////////////
            
            $invoiceRowTotalSmt = $dbh->prepare("SELECT SUM(AgentNet) AS 'AgentNet', SUM(SellingProfit) AS 'SellingProfit' FROM InvoiceDetails WHERE InvoiceId = ?");
            $invoiceRowTotalSmt->execute(array(
                $invoiceId
            ));
            $invoiceRowTotalData = $invoiceRowTotalSmt->fetch();
            
            $paymentRowSmt = $dbh->prepare("UPDATE PaymentDetails SET TotalAgentNet = ?, TotalSellingProfit = ? WHERE InvoiceId = ?");
            $paymentRowSmt->execute(array(
                $invoiceRowTotalData['AgentNet'],
                $invoiceRowTotalData['SellingProfit'],
                $invoiceId
            ));
            //$paymentRowData = $paymentRowSmt->fetch();
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Invoice Updated';
            $response_array['data']    = $invoiceId;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("InvoiceRow_Update Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "getPaymentDetails") {
        //var_dump($_POST);
        $invoiceId  = $_POST["invoiceId"];
        $customerId = $_POST['customerId'];
        
        try {
            $paymentRowSmt = $dbh->prepare("SELECT * FROM PaymentDetails WHERE CustomerId =? AND InvoiceId = ?");
            $paymentRowSmt->execute(array(
                $customerId,
                $invoiceId
            ));
            $paymentRowData = $paymentRowSmt->fetch();
            
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Payment Data Loaded';
            $response_array['data']    = array(
                'invoiceTotal' => "{$paymentRowData['InvoiceTotal']}",
                'totalPaid' => "{$paymentRowData['TotalPaid']}",
                'totalOverDue' => "{$paymentRowData['TotalOverDue']}",
                'followUpDate' => "{$paymentRowData['FollowUpDate']}"
            );
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("getPaymentDetails Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "Make_Payment") {
        //var_dump($_POST);
        $invoiceId      = $_POST["hiddenInvoiceId"];
        $customerId     = $_POST['hiddenCustomerIdPayment'];
        $totalPaid      = $_POST['totalPaid'];
        $currentPayment = $_POST['currentPayment'];
        $updatedOverDue = $_POST['updatedOverDue'];
        $paidInFull     = $updatedOverDue == 0 ? 1 : 0;
        $bankReceipt    = $_POST['bankReceipt'];
        $followUpDate   = $_POST['followUpDate'];
        
        $updatedTotalPaid = floatval($totalPaid) + floatval($currentPayment);
        
        try {
            $paymentRowSmt = $dbh->prepare("UPDATE PaymentDetails SET TotalPaid = ?, TotalOverDue = ?, PaidInFull = ?, FollowUpDate = ? WHERE CustomerId =? AND InvoiceId = ?");
            $paymentRowSmt->execute(array(
                $updatedTotalPaid,
                $updatedOverDue,
                $paidInFull,
                $followUpDate,
                $customerId,
                $invoiceId
            ));
            
            $paymentHistorySmt = $dbh->prepare("INSERT INTO PaymentHistory(CustomerId, InvoiceId, PaymentAmount, BankReceipt, DatePayment, IsActive) VALUES (?,?,?,?,?,?)");
            $paymentHistorySmt->execute(array(
                $customerId,
                $invoiceId,
                $currentPayment,
                $bankReceipt,
                $datetimeNow,
                1
            ));
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Payment Data Updated';
            $response_array['data']    = $invoiceId;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("Make_Payment Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "Load_PaymentHistory") {
        //var_dump($_POST);
        $invoiceId  = $_POST["invoiceId"];
        $customerId = $_POST['customerId'];
        
        try {
            $paymentHistorySmt = $dbh->prepare("SELECT * FROM PaymentHistory WHERE CustomerId =? AND InvoiceId = ?");
            $paymentHistorySmt->execute(array(
                $customerId,
                $invoiceId
            ));
            $paymentHistoryData = $paymentHistorySmt->fetchAll();
            
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Payment History Loaded';
            $response_array['data']    = $paymentHistoryData;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("Load_PaymentHistory Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }
    
    if ($operation == "deleteInvoice") {
        $invoiceId  = $_POST["hiddenInvoiceId_InvoiceDelete"];
        $customerId = $_POST['hiddenCustomerId_InvoiceDelete'];
        
        try {
            $PaymentDetailsSmt = $dbh->prepare("DELETE From PaymentDetails Where customerId = ? AND InvoiceId = ?;");
            $PaymentDetailsSmt->execute(array(
                $customerId,
                $invoiceId
            ));
            
            $InvoiceDetailsSmt = $dbh->prepare("DELETE From InvoiceDetails Where InvoiceId = ?;");
            $InvoiceDetailsSmt->execute(array(
                $invoiceId
            ));
            
            $PaymentHistorySmt = $dbh->prepare("DELETE From PaymentHistory Where InvoiceId = ?;");
            $PaymentHistorySmt->execute(array(
                $invoiceId
            ));
            
            $ActivityType = $operation;
            $ActivityText = "An Invoice: {$invoiceId} has been deleted for customerId: {$customerId}";
            $DateUpdated  = $datetimeNow;
            $SqlQueryUsed = "N/A";
            $UpdatedBy    = $UserId;
            $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
            $response_array['status']  = 'success';
            $response_array['message'] = 'Invoice Deleted';
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("deleteInvoice Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
	}
	
	if ($operation == "deleteQuotation") {
        $quotationId  = $_POST["hiddenQuotationId_QuotationDelete"];
        $customerId = $_POST['hiddenCustomerId_QuotationDelete'];
        
        try {
			// begin transaction
			$dbh->beginTransaction();

			$deleteQdStmt = $dbh->prepare("DELETE FROM QuotationDetails WHERE QuotationID = ?");
			$deleteQdStmt->execute(array($quotationId));

			$deleteQiStmt = $dbh->prepare("DELETE FROM QuotationInclusion WHERE QuotationID = ?");
			$deleteQiStmt->execute(array($quotationId));

			$deleteQidStmt = $dbh->prepare("DELETE FROM QuotationItineraryDetails WHERE QuotationID = ?");
			$deleteQidStmt->execute(array($quotationId));

			$stmt = $dbh->prepare("DELETE FROM CustomerQuotation WHERE CustomerId = ? AND QuotationId = ?");
			$stmt->execute(array($customerId, $quotationId));

			$dbh->commit();
			
            $ActivityType = $operation;
            $ActivityText = "A Quotation: {$quotationId} has been deleted for customerId: {$customerId}";
            $DateUpdated  = $datetimeNow;
            $SqlQueryUsed = "N/A";
            $UpdatedBy    = $UserId;
            $flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
            $response_array['status']  = 'success';
            $response_array['message'] = "Quotation: {$quotationId} Deleted";
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("deleteQuotation Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }

    if ($operation == "sendQuotationEmail") {
        $quotationId  = $_POST["quotationId"];
        $customerId = $_POST['customerId'];
        
        try {
			$content = generateQuotationContentForPDF($quotationId, $customerId);

            $dompdf = new Dompdf();
            $dompdf->loadHtml($content);
            $dompdf->setPaper('A4', 'portrait');
            $dompdf->set_option('isHtml5ParserEnabled', true);
            $dompdf->render();

            $fileName = $quotationId.".pdf";

            // If the PDF file already exists, delete it
            if (file_exists('PDFQuotations/'.$fileName)) unlink('PDFQuotations/'.$fileName);

            //to save PDF file
            $output = $dompdf->output();            
            file_put_contents('PDFQuotations/'.$fileName, $output);
            
            $customerSmt = $dbh->prepare("SELECT *, 
            CONCAT(CustomerFirstName, ' ', CustomerLastName) AS FullName 
            FROM CustomerDetails Where CustomerId = ?");
            $customerSmt->execute(array($customerId));
            $customerData = $customerSmt->fetch();

            if(HelperClass::SendQuotation_SendEmail($customerData['CustomerEmail'], $customerData['FullName'], $fileName))
            {
                $ActivityType = $operation;
                $ActivityText = "A Quotation: {$quotationId} has been Emailed to customerId: {$customerId}";
                $DateUpdated  = $datetimeNow;
                $SqlQueryUsed = "N/A";
                $UpdatedBy    = $UserId;
                //$flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
                $response_array['status']  = 'success';
                $response_array['message'] = "Quotation: {$quotationId} Emailed";
                $response_array['data'] = "Quotation: {$quotationId} Emailed";
            }
            else
            {
                $response_array['status']  = 'error';
                $response_array['message'] = "There was an ERROR !!! Quotation: {$quotationId}";
                $response_array['data'] = "There was an ERROR !!! Quotation: {$quotationId}";
            }   
                        
            echo json_encode($response_array);
        }
        catch (Exception $ex) {
            HelperClass::LogSystem("sendQuotationEmail Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            $response_array['data'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}",
                'data' => "{$ex->getMessage()}"
            ));
        }
    }

    if ($operation == "sendInvoiceEmail") {
        $invoiceId  = $_POST["invoiceId"];
        $customerId = $_POST['customerId'];
        
        try {
			$content = generateInvoiceContentForPDF($invoiceId, $customerId);

            $dompdf = new Dompdf();
            $dompdf->loadHtml($content);
            $dompdf->setPaper('A4', 'portrait');
            $dompdf->set_option('isHtml5ParserEnabled', true);
            $dompdf->render();

            $fileName = $invoiceId.".pdf";

            // If the PDF file already exists, delete it
            if (file_exists('PDFInvoices/'.$fileName)) unlink('PDFInvoices/'.$fileName);

            //to save PDF file
            $output = $dompdf->output();            
            file_put_contents('PDFInvoices/'.$fileName, $output);
            
            $customerSmt = $dbh->prepare("SELECT *, 
            CONCAT(CustomerFirstName, ' ', CustomerLastName) AS FullName 
            FROM CustomerDetails Where CustomerId = ?");
            $customerSmt->execute(array($customerId));
            $customerData = $customerSmt->fetch();

            if(HelperClass::SendInvoice_SendEmail($customerData['CustomerEmail'], $customerData['FullName'], $fileName))
            {
                $ActivityType = $operation;
                $ActivityText = "An Invoice: {$invoiceId} has been Emailed to customerId: {$customerId}";
                $DateUpdated  = $datetimeNow;
                $SqlQueryUsed = "N/A";
                $UpdatedBy    = $UserId;
                //$flag         = $logger->LogActivity($ActivityType, $ActivityText, $customerId, $DateUpdated, $SqlQueryUsed, $UpdatedBy);
            
                $response_array['status']  = 'success';
                $response_array['message'] = "Invoice: {$invoiceId} Emailed";
                $response_array['data'] = "Invoice: {$invoiceId} Emailed";
            }
            else
            {
                $response_array['status']  = 'error';
                $response_array['message'] = "There was an ERROR !!! Invoice: {$invoiceId}";
                $response_array['data'] = "There was an ERROR !!! Invoice: {$invoiceId}";
            }   
                        
            echo json_encode($response_array);
        }
        catch (Exception $ex) {
            HelperClass::LogSystem("sendInvoiceEmail Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            /* match error string in jquery if/else */
            $response_array['message'] = $ex->getMessage();
            $response_array['data'] = $ex->getMessage();
            /* add custom message */
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}",
                'data' => "{$ex->getMessage()}"
            ));
        }
    }

    if ($operation == "CreatePDFQuotation"){
        $quotationId = $_POST['quotationId'];////"INV-00055";//
        $customerId = $_POST['customerId'];////"ZWT-00227";//
        try
        {
            $content = generateQuotationContentForPDF($quotationId, $customerId);

            $dompdf = new Dompdf();
            $dompdf->loadHtml($content);
            $dompdf->setPaper('A4', 'portrait');
            $dompdf->set_option('isHtml5ParserEnabled', true);
            $dompdf->render();

            //output to browser
            $dompdf->stream('Quotation', array('Attachment'=>0));
        }
        catch(Exception $ex)
        {
            HelperClass::LogSystem("CreatePDFQuotation Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            $response_array['message'] = $ex->getMessage();            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }

    if ($operation == "CreatePDFInvoice"){
        $invoiceId = $_POST['invoiceId'];////"INV-00055";//
        $customerId = $_POST['customerId'];////"ZWT-00227";//
        try
        {
            $content = generateInvoiceContentForPDF($invoiceId, $customerId);

            $dompdf = new Dompdf();
            $dompdf->loadHtml($content);
            $dompdf->setPaper('A4', 'portrait');
            $dompdf->set_option('isHtml5ParserEnabled', true);
            $dompdf->render();

            //output to browser
            $dompdf->stream('Invoice', array('Attachment'=>0));
        }
        catch(Exception $ex)
        {
            HelperClass::LogSystem("CreatePDFInvoice Error: " . $ex->getMessage());
            $response_array['status']  = 'error';
            $response_array['message'] = $ex->getMessage();            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}"
            ));
        }
    }

    if ($operation == "configureSendSms") {
        //var_dump($_POST);
        $sendSms  = $_POST["sendSms"];
        $customerId = $_POST['customerId'];
        
        try {
            $updateStmt = $dbh->prepare("UPDATE CustomerDetails SET SendSms = ? WHERE CustomerId = ?");
			$updateStmt->execute(array($sendSms, $customerId));

            $response_array['status']  = 'success';
            $response_array['message'] = 'SMS Option has been updated';
            $response_array['data']    = 'SMS Option has been ste to: '.$sendSms;
            
            echo json_encode($response_array);
        }
        catch (PDOException $ex) {
            HelperClass::LogSystem("configureSendSms Error: " . $ex->getMessage());
            
            echo json_encode(array(
                'status' => 'error',
                'message' => "{$ex->getMessage()}",
                'data' => "{$ex->getMessage()}"
            ));
        }
    }
}

function generateInvoiceContentForPDF($invoiceId, $customerId)
{
    $totalGst = 0;
    try
    {
        //$invoiceId = $_GET['invoiceId'];////"INV-00037";
        //$customerId = $_GET['customerId'];////"ZWT-00443";
        $database = include('databaseConfig.php');
        
        $dbh=new PDO($database['provider'], $database['user'], $database['pass']);
        $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $invoiceSmt = $dbh->prepare('SELECT id.*, CONCAT(cd.CustomerFirstName, " ", cd.CustomerLastName) AS FullName, tm.ItemName FROM InvoiceDetails id INNER JOIN CustomerDetails cd on cd.CustomerId = id.CustomerId INNER JOIN ItemTypeMaster tm on tm.ItemId = id.ItemTypeId WHERE InvoiceId = ?');
        $invoiceSmt->execute(array($invoiceId));

        $invoiceData = $invoiceSmt->fetchAll();

        //var_dump($customerListData);

        $paymentSmt = $dbh->prepare('SELECT * FROM PaymentDetails WHERE InvoiceId = ?');
        $paymentSmt->execute(array($invoiceId));
        $paymentData = $paymentSmt->fetch();
        $customerSmt = $dbh->prepare("SELECT *, CONCAT(CustomerFirstName, ' ', CustomerLastName) AS FullName FROM CustomerDetails WHERE CustomerId = ?");
        $customerSmt->execute(array($customerId));
        $customerData = $customerSmt->fetch();

        $customerAddress = "{$customerData['FullName']} <br> {$customerData['CustomerAddressLine1']} {$customerData['CustomerCitySuburb']} <br> {$customerData['CustomerState']} {$customerData['CustomerPostCode']} {$customerData['CustomerCountry']}";

        $invoiceDate = empty($paymentData['DateCreated']) ? "N/A" : date("d-m-Y", strtotime($paymentData['DateCreated']));

        $customerMemberSmt = $dbh->prepare("SELECT *, CONCAT(CustomerFirstName, ' ', CustomerLastName) AS FullName FROM CustomerDetails WHERE CustomerIdParent = ?");
        $customerMemberSmt->execute(array($customerId));
        $customerMemberData = $customerMemberSmt->fetchAll();
        $totalGst = 0;

        $invoiceRows = "";

        foreach($invoiceData as $row)
        {
            $invoiceRows .= "<tr class='trGrey'><td>{$row['FullName']}</td>			
                <td class='text-center'>{$row['ItemName']}</td>
                <td class='text-center'>{$row['TicketVoucherId']}</td>
                <td class='text-center'>{$row['ItemGross']}</td>
                <td class='text-center'>{$row['PaxServiceFee']}</td>
                <td class='text-center'>{$row['Gst10']}</td>
                <td class='text-center'>{$row['Discount']}</td>
                <td class='text-center'>{$row['SellingPrice']}</td>
            </tr>";
            $totalGst = floatval($totalGst) + floatval($row['Gst10']);
        }
    }
    catch(PDOException $ex)
    {
        HelperClass::LogSystem("AddCustomer Error: ".$ex->getMessage());
        //$response_array['status'] = 'error'; /* match error string in jquery if/else */
        //$response_array['message'] = $ex->getMessage();   /* add custom message */	
        //echo json_encode(array('status' => 'error', 'message' => "{$ex->getMessage()}"));
        throw $ex;
    }

    try
    {
        $content = "<!DOCTYPE html>
        <html>
        <head>
        <style>
            @import url('https://fonts.googleapis.com/css?family=Nobile:400,700');
            body {
                font-size:13px;
                font-family: 'Nobile', sans-serif;
            }
            table {
                border-collapse: collapse;
                width: 100%;
            }
            td, th {
                border: 0.01em solid #dddddd;
                text-align: left;
                padding: 8px;
            }
            .text-center
            {
                text-align: center; 
                vertical-align: middle;
            }
            .text-left
            {
                text-align: left;
            }
            .text-right
            {
                text-align: right;
            }
            .width50
            {
                width:50%;
            }
            .borderNone
            {
                border: none !important;
                border: 0 !important;
            }
            .text-bold
            {
                font-weight: bold;
            }
            .padding10
            {
                padding:10px;
            }
            .padding10NoTop
            {
                padding-top:0px;
                padding-bottom:10px;
                padding-left:10px;
                padding-right:10px;
            }
            .paymentDiv
            {
                width:70%;
                background-color: lightgrey;
                padding: 10px;
                font-size:13px;
            }
            .trGrey:nth-child(even) {
                background-color: #dddddd;
            }
            .font11 {
                font-size:11px;
            }
        </style>
        </head>
        <body>
        <table class='borderNone'>
            <tr>
                <td class='text-center borderNone' colspan='8'>
                    <table class='borderNone'>
                        <tr>
                            <td class='width50 borderNone padding10'><img width='150' height='110px' src='images/zwt_logo.jpg'></td>		
                            <td class='width50 borderNone text-right text-bold padding10'>Zara World Travel Pvt Ltd.<br>
                                2 Comber Cres, Pendle Hill.<br> 
                                NSW-2145, Australia.<br>
                                ABN: 70 619 415 628<br>
                                Phone: 1300 927 287<br>
                                Email: info@zaraworldtravel.com.au</td>
                        </tr>
                        <tr>
                            <td class='borderNone' colspan='2'><hr></td>
                        </tr>
                        <tr class='padding10'>
                        <td class='width50 borderNone text-left text-bold padding10'>
                        {$customerAddress}
                        </td>
                        <td class='width50 borderNone text-right text-bold padding10'>
                            <h4>INVOICE # {$invoiceId}</h4>
                            <h4>Invoice Date: {$invoiceDate}</h4>
                        </td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td class='text-center' colspan='8'><h3>Order Summary</h3></td>
            </tr>
            <tr>
            <th>Customer</th>
            <th class='text-center'><b>Item Type</b></th>
            <th class='text-center'><b>Item No</b></th>
            <th class='text-center'><b>Gross</b></th>
            <th class='text-center'><b>Service Fee</b></th>
            <th class='text-center'><b>GST 10%</b></th>      
            <th class='text-center'><b>Discount</b></th>
            <th class='text-center'><b>Total</b></th>
            </tr>
            {$invoiceRows}
            <tr>
            <td colspan='8'>&nbsp;</td>
            </tr>
            <tr>
            <td colspan='4' class='font11'>
                <h4><b>Payment Option:</b></h4>
                <span>
                You can pay using EFT/Bank Transfer and/or Credit Card. Please see the payment details below.
                </span><br>
                <br>
                <div class='paymentDiv'>
                    <h5>ACCOUNT NAME: <b>Zara World Travel Pty Ltd.</b><br>
                    BSB: <b>062-268</b><br>
                    ACCOUNT NUMBER: <b>10466234</b></h5>
                </div>
                <br>
                Zara World Travel accepts Mastercard, VISA and AMEX cards. <br>Please call our accounts team on 1300 927 287 to process credit card transactions over the phone*
            </td>
            <td colspan='4' valign='top'>
                <table>
                <tr>
                    <td class='borderNone' colspan='4'>&nbsp;</td>
                    <td colspan='2' class='text-center'><b>Total Price</b></td>
                    <td class='text-center' colspan='2'>{$paymentData['InvoiceTotal']}</td>
                </tr>
                <tr>
                    <td class='borderNone' colspan='4'>&nbsp;</td>
                    <td colspan='2' class='text-center'><b>Total GST</b></td>
                    <td class='text-center' colspan='2'>{$totalGst}</td>
                </tr>
                <tr>
                    <td class='borderNone' colspan='4'>&nbsp;</td>
                    <td colspan='2' class='text-center'><b>Total Paid</b></td>
                    <td class='text-center' colspan='2'>{$paymentData['TotalPaid']}</td>
                </tr>
                <tr>
                    <td class='borderNone' colspan='4'>&nbsp;</td>
                    <td colspan='2' class='text-center'><b>Total Due</b></td>
                    <td class='text-center' colspan='2'>{$paymentData['TotalOverDue']}</td>
                </tr>
                </table>
            </td>
            </tr>
        </table>
        </body>
        </html>";

        return $content;
    }
    catch(PDOException $ex)
    {
        HelperClass::LogSystem("InvoicePDF Error: ".$ex->getMessage());
        //$response_array['status'] = 'error'; /* match error string in jquery if/else */
        //$response_array['message'] = $ex->getMessage();   /* add custom message */	
        //echo json_encode(array('status' => 'error', 'message' => "{$ex->getMessage()}"));
        throw $ex;
    }
}

function generateQuotationContentForPDF($quotationId, $customerId)
{
    try{
        //$quotationId = $_GET['quotationId'];////"INV-00055";//
        //$customerId = $_GET['customerId'];////"ZWT-00227";//
        $database = include('databaseConfig.php');
        
    $dbh=new PDO($database['provider'], $database['user'], $database['pass']);
    $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
    $customerSmt = $dbh->prepare("SELECT *, CONCAT(CustomerFirstname, ' ', CustomerLastName) AS 'FullName' FROM CustomerDetails WHERE CustomerId = ?");
    $customerSmt->execute(array($customerId));
    $customerData = $customerSmt->fetch();

    $customerListSmt = $dbh->prepare('SELECT * FROM CustomerDetails c1 WHERE c1.CustomerId = ? OR c1.CustomerId IN (SELECT c2.CustomerId FROM CustomerDetails c2 WHERE c2.customerIdParent = ?)');
    $customerListSmt->execute(array($customerId, $customerId));
    $customerListData = $customerListSmt->fetchAll();
    //var_dump($customerListData);
    
    $itemListSmt = $dbh->prepare('SELECT * FROM ItemTypeMaster WHERE IsActive = 1');
    $itemListSmt->execute(array(''));
    $itemListSmtData = $itemListSmt->fetchAll();
    //var_dump($itemListSmtData);
    
    $inclusionListSmt = $dbh->prepare('SELECT im.InclusionName FROM QuotationInclusion qi INNER JOIN QuotationInclusionMaster im on im.QuotationInclusionMasterId = qi.QuotationInclusionMasterId WHERE QuotationID = ?');
    $inclusionListSmt->execute(array($quotationId));
    $inclusionListData = $inclusionListSmt->fetchAll();
    //var_dump($inclusionListData);

    $inclusionArray1 = [];
    $inclusionArray2 = [];
    $inclusionArray3 = [];
    $inclusionArray4 = [];
    
    list($inclusionArray1, $inclusionArray2, $inclusionArray3) = array_chunk($inclusionListData, ceil(count($inclusionListData) / 3));
    $inclusionList1 = "";
    foreach($inclusionArray1 as $data)
    {
        $inclusionList1 .= "<tr>
                            <td style='width:1%;'><img width='20' height='20' src='images/checked.png'></td>
                            <td class='fontBold'>{$data['InclusionName']}</td>
                            </tr>";
    }
    $inclusionList2 = "";
    foreach($inclusionArray2 as $data)
    {
        $inclusionList2 .= "<tr>
                            <td style='width:1%;'><img width='20' height='20' src='images/checked.png'></td>
                            <td class='fontBold'>{$data['InclusionName']}</td>
                            </tr>";
    }
    $inclusionList3 = "";
    foreach($inclusionArray3 as $data)
    {
        $inclusionList3 .= "<tr>
                            <td style='width:1%;'><img width='20' height='20' src='images/checked.png'></td>
                            <td class='fontBold'>{$data['InclusionName']}</td>
                            </tr>";
    }
    //var_dump($inclusionArray1);
    //var_dump($inclusionArray2);
    //var_dump($inclusionArray3);
    //var_dump($inclusionArray4);

    $itineraryDetailsSmt = $dbh->prepare('SELECT * 
    FROM QuotationItineraryDetails qid 
    INNER JOIN ItineraryItemMaster it on qid.ItineraryItemId = it.ItineraryItemMasterId 
    WHERE qid.QuotationID = ? ORDER BY ItineraryItemSerial');
    $itineraryDetailsSmt->execute(array($quotationId));
    $itineraryDetailsData = $itineraryDetailsSmt->fetchAll();

    // $quotationInclusionSmt = $dbh->prepare('SELECT QuotationInclusionMasterId FROM QuotationInclusion WHERE QuotationID = ?');
    // $quotationInclusionSmt->execute(array($quotationId));
    // $quotationInclusionData = $quotationInclusionSmt->fetchAll(PDO::FETCH_COLUMN, 0);//fetchAll();
    // //var_dump($quotationInclusionData);

    $customerQuotationSmt = $dbh->prepare('SELECT qd.*, CONCAT(cd.CustomerFirstName, " ", cd.CustomerLastName) AS CustomerName , it.ItemName FROM QuotationDetails qd INNER JOIN CustomerDetails cd on qd.CustomerId = cd.CustomerId INNER JOIN ItemTypeMaster it on it.ItemId = qd.ItemTypeId WHERE QuotationID = ? ORDER BY QuotationDetailsId');
    $customerQuotationSmt->execute(array($quotationId));
    $customerQuotationData = $customerQuotationSmt->fetchAll();
    //var_dump($customerQuotationData);

    $packIncludeSmt = $dbh->prepare('SELECT DISTINCT it.ItineraryItemName FROM QuotationItineraryDetails qi INNER JOIN ItineraryItemMaster it on it.ItineraryItemMasterId = qi.ItineraryItemId WHERE QuotationID = ? ORDER BY qi.ItineraryItemSerial');
    $packIncludeSmt->execute(array($quotationId));
    $packIncludeData = $packIncludeSmt->fetchAll();
    //var_dump($packIncludeData);

    $itineraryTable = "";
    foreach($itineraryDetailsData as $data)  {
        if($data['ItineraryItemId'] == "1")
            $itineraryTable .= getPickupCode($data);

        if($data['ItineraryItemId'] == "2")
            $itineraryTable .= getFlightCode($data);

        if($data['ItineraryItemId'] == "3")
            $itineraryTable .=  getCruiseCode($data);

        if($data['ItineraryItemId'] == "4")
            $itineraryTable .=  getAccommodationCode($data);

        if($data['ItineraryItemId'] == "5")
            $itineraryTable .=  getActivitiesCode($data);

        if($data['ItineraryItemId'] == "6")
            $itineraryTable .=  getInsuranceCode($data);
    }

    $quotationData = "";
    $totalPrice = 0.0;
    $totalGst = 0.0;
    foreach ($customerQuotationData as $row) {
        $quotationData .= "<tr>
                            <td>{$row['CustomerName']}</td>
                            <td class='text-center'>{$row['ItemName']}</td>
                            <td class='text-center'>{$row['TicketVoucherId']}</td>
                            <td class='text-center'>{$row['ItemGross']}</td>
                            <td class='text-center'>{$row['PaxServiceFee']}</td>
                            <td class='text-center'>{$row['Gst10']}</td>      
                            <td class='text-center'>{$row['Discount']}</td>
                            <td class='text-center'>{$row['SellingPrice']}</td>
                        </tr>";
        $totalPrice = $totalPrice + floatval($row['SellingPrice']);
        $totalGst = $totalGst + floatval($row['Gst10']);
    }
    
    $packInclude = "";
    foreach ($packIncludeData as $row) {
        $item = strtoupper($row['ItineraryItemName']);
        $packInclude .= "{$item}, ";
    }
    if(strlen($packInclude) > 0)
        $packInclude = substr($packInclude, 0, strlen($packInclude) - 2);
    }
    catch(PDOException $ex)
    {
        HelperClass::LogSystem("AddCustomer Error: ".$ex->getMessage());
        //$response_array['status'] = 'error'; /* match error string in jquery if/else */
        //$response_array['message'] = $ex->getMessage();   /* add custom message */	
        //echo json_encode(array('status' => 'error', 'message' => "{$ex->getMessage()}"));
        throw $ex;
    }
    try
    {
    $content = "<!DOCTYPE html>
        <html>
        <head>
            <style>
            @import url('https://fonts.googleapis.com/css?family=Nobile:400,700');
            body {
                font-size:13px;
                font-family: 'Nobile', sans-serif;
            }
            table {
                border-collapse: collapse;
                width: 100%;
            }
            td, th {
                border: 0.01em solid #dddddd;
                text-align: left;
                padding-left: 4px;
                padding-right: 4px;
                padding-top: 4px;
                padding-bottom: 4px;
            }
            .text-center
            {
                text-align: center; 
                vertical-align: middle;
            }
            .text-left
            {
                text-align: left;
            }
            .text-right
            {
                text-align: right;
            }
            .width50
            {
                width:50%;
            }
            .borderNone
            {
                border: none !important;
                border: 0 !important;
            }
            .text-bold
            {
                font-weight: bold;
            }
            .padding10
            {
                padding:10px;
            }
            .padding20Left
            {
                padding-left:20px;
            }
            .padding10NoTop
            {
                padding-top:0px;
                padding-bottom:10px;
                padding-left:10px;
                padding-right:10px;
            }
            .paymentDiv
            {
                width:70%;
                background-color: lightgrey;
                padding: 10px;
                font-size:13px;
            }
            .trGrey:nth-child(even) {
                background-color: #dddddd;
            }
            .font11 {
                font-size:11px;
            }
            .font8 {
                font-size:8px;
            }
            .font9 {
                font-size:9px;
            }
            .font10 {
                font-size:10px;
            }
            .fontBold{
                font-weight:bold;
            }
            .tdGrey {
                background-color: #dddddd;
            }
            .page_break_after{ 
                page-break-after: always; 
            }
            .page_break_before{ 
                page-break-before: always; 
            }
            .page_break_avoid{
                page-break-inside: avoid;
            }
            .fontItalic{
                font-style: italic;
            }
            .styleAuthorisation{
                font-size: 14px;
                line-height: 22px;
            }
            .line-height16{
                line-height: 16px;
            }
            .line-height14{
                line-height: 14px;
            }
            .line-height24{
                line-height: 24px;
            }
            </style>
            <style>
            /** 
                 Set the margins of the page to 0, so the footer and the header
                can be of the full height and width !
                **/
            @page {
                margin: 0cm 0cm;
            }

            /** Define now the real margins of every page in the PDF **/
            body {
                margin-top: 1cm;
                margin-left: 1cm;
                margin-right: 1cm;
                margin-bottom: 1cm;
            }

            /** Define the header rules **/
            header {
                position: fixed;
                top: 0cm;
                left: 0cm;
                right: 0cm;
                height: 1cm;

                /** Extra personal styles **/
                background-color: #32b67a;
                color: white;
                text-align: center;
                line-height: .7cm;

                border-bottom: 1px solid #000000;
            }

            /** Define the footer rules **/
            footer {
                position: fixed; 
                bottom: 0cm; 
                left: 0cm; 
                right: 0cm;
                height: 1cm;

                /** Extra personal styles **/
                background-color: #32b67a;
                color: white;
                text-align: center;
                line-height: .7cm;

                border-top: 1px solid #000000;
            }
            .page-number:after { content: counter(page); }
            </style>
        </head>
        <body>
        <!-- Define header and footer blocks before your content -->
        <!--<header>
            Our Code World
        </header>-->
        <footer>
            Zara World Travel Pvt Ltd. Pendle Hill NSW 2145. Ph: 1300 927 287
            Email: info@zaraworldtravel.com.au
        </footer>
        <!--header and greetings-->
        <table class='borderNone'>
            <tr>
                <td class='text-center borderNone' colspan='8'>
                    <table class='borderNone'>
                        <tr>
                            <td class='width50 borderNone padding10'><img width='150' height='110px' src='images/zwt_logo.jpg'></td>		
                            <td class='width50 borderNone text-right text-bold padding10'>Zara World Travel Pvt Ltd.<br>
                                2 Comber Cres, Pendle Hill.<br> 
                                NSW-2145, Australia.<br>
                                ABN: 70 619 415 628<br>
                                Phone: 1300 927 287<br>
                                Email: info@zaraworldtravel.com.au</td>
                        </tr>
                        <tr>
                            <td class='borderNone' colspan='2'><hr></td>
                        </tr>                
                    </table>
                </td>
            </tr>
            <tr>
            <td colspan='8'>
            Dear {$customerData['FullName']},<br>
            Thank you for giving us the opportunity to prepare a quote for you. Please see our quote as attached or below.
            </td>
            </tr>
        </table> 
        <br>
        <!--itinerary-->
        <table style='font-size:11px;'>
            {$itineraryTable}
        </table>
        <br>
        <!--inclusions-->
        <table>
            <tr>
            <td colspan='3'>
                <table class='borderNone'>
                <tr>
                    <td style='width:1%;' class='tdGrey'><img width='22' height='22' src='images/list.png'></td>
                    <td class='fontBold tdGrey'>Your package also includes:</td>
                </tr>
                </table>
            </td>
            </tr>
            <tr>
            <td width='33%' valign='top'>
                <table class='borderNone'>
                {$inclusionList1}
                </table>
            </td>
            <td width='33%' valign='top'>
                <table class='borderNone'>
                {$inclusionList2}
                </table>
            </td>
            <td width='33%' valign='top'>
                <table class='borderNone'>
                {$inclusionList3}
                </table>
            </td>
            </tr>      
            <tr>
            <td colspan='3' class='font10'>
                *Non-refundable and no amendments of dates permitted. Full payment required at time of booking.
            </td>
            </tr>
        </table>
        <div class='page_break_after'></div>
        <!--summary -->
        <table class='page_break_avoid'>
            <tr>
            <td class='text-center' colspan='8'><h3>Order Summary</h3></td>
            </tr>
            <tr>
            <th>Customer</th>
            <th class='text-center'><b>Item Type</b></th>
            <th class='text-center'><b>Item No</b></th>
            <th class='text-center'><b>Gross</b></th>
            <th class='text-center'><b>Service Fee</b></th>
            <th class='text-center'><b>GST 10%</b></th>      
            <th class='text-center'><b>Discount</b></th>
            <th class='text-center'><b>Total</b></th>
            </tr>
            {$quotationData}
            <tr>
            <td colspan='8'>&nbsp;</td>
            </tr>
            <tr>
            <td colspan='4'>&nbsp;</td>
            <td colspan='2' class='text-center'><b>Total Price</b></td>
            <td class='text-center' colspan='2'>{$totalPrice}</td>
            </tr>
            <tr>
            <td colspan='4'>&nbsp;</td>
            <td colspan='2' class='text-center'><b>Total GST</b></td>
            <td class='text-center' colspan='2'>{$totalGst}</td>
            </tr>
            <tr>
            <td colspan='4'>&nbsp;</td>
            <td colspan='2' class='text-center'><b>Total Due</b></td>
            <td class='text-center' colspan='2'>{$totalPrice}</td>
            </tr>
        </table>
        <br>
        <!--payment-->
        <table>
            <tr>
            <td>
                <h3>Package cost includes:</h3>
                    <ul>
                    <li>{$packInclude} and other services as specified above. Accommodation price is based on ROOMONLY, unless otherwise specified above.</li>
                        <li>If FLIGHTS are specified above, the quote includes AIRFARES and pre-payable AIRPORT TAXES and charges, based on rates applicable at time of issue of this quote. Airfares are based on specified booking class and may required payment in advance - details for the supplier separately.</li>
                        <li>Pre-payable GOVERNMENT TAXES (and other related charges) are included, but may vary and this may affect your package cost.</li>
                    </ul>
                    Zara World Travel accepts Mastercard, VISA and AMEX cards. <br>Please call our accounts team on 1300 927 287 to process credit card transactions over the phone.
                    <br><br>
                    <span class='font10'>*The above price is quotation only. No accommodation or flights are held until you confirm a booking with a deposit and payment of any relevant airfare components. All packages are non-refundable in most cases depending on the terms and conditions of our suppliers, whom are the providers of the stated services in your quote. Travel Insurance is always recommended (extra cost). Services not specified above (e.g. meals etc) are NOT INCLUDED in the package cost and must be paid direct.</span>
                <br>
                <hr>
                <h3>Payment Option:</h3>
                    You can pay using EFT/Bank Transfer or Credit Card. Please email your deposit number or receipt with your name to confirm payment.<br><br>
                    The Payment details Below.<br><br>
                    <div class='fontBold padding20Left'>Commonwealth Bank<br>
                    ACCOUNT NAME: Zara World Travel Pty Ltd.<br>
                    BSB: 062-268 <br>
                    ACCOUNT NUMBER: 10466234</div><br>
                    <span class='font10'>*If you choose to make a bank transfer, we require the exact amount in Australian dollars in our account in cleared funds. You would need to cover any transfer or bank fees on your end. When payment has been made you need to email us with payment details so that we can correlate the payment with your booking. Payment is deemed to be made only once we have received payment in cleared funds. If you choose to pay by credit card please print out the last page of this document, complete, sign and return to us by fax or email. <br>*For credit card payments additional charges apply.</span>
                <br><hr>
                ZARA WORLD TRAVEL an Agency You Can Trust. Because without an AFTA Travel Agent You're on your own.</td>
            </tr>
        </table>
        <div class='page_break_before'></div>
        <!--authorisation form-->
        <table class='styleAuthorisation'>
            <tr>
            <td>
                <br>
                <div class='text-center fontBold'>AUTHORISATION FOR CREDIT CARD CHARGE BOOKING NO:</div><hr><br>
                    Please fill out the following form, sign it, and fax it back to our office, accompanied with a photocopy of the front and back of your credit card. Alternatively, you can scan the signed form and return by email. Documents cannot be released until a signed copy is on file in our office prior to your departure.<br><br>
                    <div class='line-height24'>I ……………………………………………………………… <br>
                    Of (Billing address, city, postal code, Country) ………………………………………………. <br>
                    Authorise Zara World Travel Pty Ltd to debit my
                    Credit Card (specify type): …………………………… <br>
                    Number: ……………………………………………………... <br>
                    Expiration date: ……………………... <br>
                    ID Number (for Amex card only) …………………... <br>
                    Cardholder's name as it reads on the card: ……………………………………………………. <br>
                    Amount to be charged: ……………………... </div><br>
                    <div class='font10 line-height14'>Please note you will be charged in Australian Dollars. If possible, please provide the amount to be charged in Australian Dollars. If you don't know the AU$ amount, then specify in USD, NZD or Euro however please note the USD, NZD or Euro amount may fluctuate slightly according to exchange rate used by your bank. Please note that for payments Visa/Mastercard a surcharge of 2.9% applies and for AMEX/Diners the surcharge is 3.2%.</div><br>
                    <div class='line-height24'>Accepted total amount/nightly rate of tour: ………………………… <br>
                    <span class='font10'>(Please list nightly or total rate that you were quoted on your tour as the accepted price.)</span><br>
                    For travel to/for: ……………………………………………………………... <br>
                    Departure date: ………………………... <br>
                    Passenger’s name/s……………………………………. <br>
                    Consultant who you are dealing with at our company……………………………. <br>
                    Home Phone Contact: …………………………………. Work Phone: ……………………………………………... <br>
                    Fax Number: ………………………. Email Address…………………………….<br><br>
                    <div class='fontItalic styleAuthorisation'>“I/We have read the terms and conditions as set out on the Zara World Travel Pvt Ltd. Invoice and on the Zara World Travel Pvt Ltd. web site (https://www.zaraworldtravel.com.au/terms-and-conditions/), and agree with these terms and conditions. I understand that cancellation penalties do apply, that deposits/payments are non-refundable, and that travel insurance has been offered to me.”</div><br><br><br>
                    Signature: …………………………………… Date: ……………………..</div><br>
                </td>
            </tr>
        </table>
        </body>
    </html>";

    return $content;
    }
    catch(PDOException $ex)
    {
        HelperClass::LogSystem("InvoicePDF Error: ".$ex->getMessage());
        //$response_array['status'] = 'error'; /* match error string in jquery if/else */
        //$response_array['message'] = $ex->getMessage();   /* add custom message */	
        //echo json_encode(array('status' => 'error', 'message' => "{$ex->getMessage()}"));
        throw $ex;
    }
}
function getPickupCode($pickUpData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/transportation.png'><br><b>Pickup/DropOff</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date:</b> {$pickUpData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Time:</b> {$pickUpData['ItineraryItemTimeFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>From:</b> {$pickUpData['ItineraryItemSource']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>To:</b> {$pickUpData['ItineraryItemDestination']}
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$pickUpData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>    
                </td>
            </tr>";
}
function getFlightCode($flightData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/airport.png'><br><b>Flight</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date:</b> {$flightData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Time:</b> {$flightData['ItineraryItemTimeFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>From:</b> {$flightData['ItineraryItemSource']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>To:</b> {$flightData['ItineraryItemDestination']}
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$flightData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>   
                </td>
            </tr>";   
}
function getCruiseCode($cruiseData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/cruise.png'><br><b>Cruise</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date:</b> {$cruiseData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Time:</b> {$cruiseData['ItineraryItemTimeFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>From:</b> {$cruiseData['ItineraryItemSource']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>To:</b> {$cruiseData['ItineraryItemDestination']}
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$cruiseData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>
                </td>
            </tr>";

}
function getAccommodationCode($accommodationData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/suitcase.png'><br><b>Accommodation</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date:</b> {$accommodationData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Time:</b> {$accommodationData['ItineraryItemTimeFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>From:</b> {$accommodationData['ItineraryItemDateTo']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>To:</b> {$accommodationData['ItineraryItemTimeTo']}
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$accommodationData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>    
                </td>
            </tr>";
}
function getActivitiesCode($activitiesData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/sign.png'><br><b>Activities</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date:</b> {$activitiesData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Time:</b> {$activitiesData['ItineraryItemTimeFrom']}
                    </td>
                    <td colspan='2' class='text-center' width='50%'>                    
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$activitiesData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>    
                </td>
            </tr>";
}
function getInsuranceCode($insuranceData){
    return "<tr>
                <td width='65' class='text-center'><img width='40' height='40' src='images/travelIcons/insurance.png'><br><b>Insurance</b></td>
                <td>
                <table>
                    <tr>
                    <td class='text-center' width='25%'>
                        <b>Date From:</b> {$insuranceData['ItineraryItemDateFrom']}
                    </td>
                    <td class='text-center' width='25%'>
                        <b>Date To:</b> {$insuranceData['ItineraryItemDateTo']}
                    </td>
                    <td colspan='2' class='text-center' width='50%'>                   
                    </td>
                    </tr>
                    <tr>
                    <td colspan='4' style='border: none !important; border: 0 !important;'>
                        <b>Note:</b> {$insuranceData['ItineraryItemNote']}
                        </td>
                    </tr>
                </table>    
                </td>
            </tr>";
}

?>