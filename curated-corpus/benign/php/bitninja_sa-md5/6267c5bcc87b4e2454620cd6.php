<?php 
header('Content-Type: application/json');
date_default_timezone_set('UTC');
set_time_limit(0);
error_reporting(0);
function exceptions_error_handler($severity, $message, $filename, $lineno) {
    throw new ErrorException($message, 0, $severity, $filename, $lineno);
}

set_error_handler('exceptions_error_handler');

class InstallWordpressHandle extends Exception {
	
	public $pluginPath = "";
	public $parameter = array();
	
	public function __construct($attribute)
	{
		$this->pluginPath = dirname(__FILE__);
		$this->parameter = $attribute;
	}
		
	/*
	 * Wordpress Install
	 */
	public function wpinstall()
	{
		// Check parameter domain is available
		if($this->parameter['domain'] == "" || $this->parameter['db_user'] == "" || $this->parameter['db_password'] == "" || $this->parameter['db_name']==""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR8262");			
		}
		$npath = $this->pluginPath;
		$db = $this->getdbparameter($npath);	
		//print_r($db);die;

	
		try {
			// Create connection
			$conn = mysqli_connect("localhost", $this->parameter['db_user'], $this->parameter['db_password'],$this->parameter['db_name']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
			}
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0062");		
		}


		/*
		 * -----Parameters-----
		 * 'domain'				required
		 * 'web_title'			
		 * 'admin_username'
		 * 'admin_password'
		 * 'admin_email'
		 * 'admin_firstname'
		 * 'admin_lastname'
		 * 'db_user'			required
		 * 'db_password'		required		
		 * 'db_name'			required
		 */
				
		$domain = $this->parameter['domain'];
		$web_title = $this->parameter['web_title'];					
		$admin_username = $this->parameter['admin_username'];
		$admin_password = $this->parameter['admin_password'];
		$admin_email = $this->parameter['admin_email'];
		$admin_firstname = $this->parameter['admin_firstname'];
		$admin_lastname = $this->parameter['admin_lastname'];
		$ssl = $this->parameter['ssl'];
					
		try {
			
			$query = mysqli_query($conn,"SHOW TABLES");
			while($row = mysqli_fetch_array($query)){
				mysqli_query($conn,"DROP TABLE ".$row[0]);
			}
						
			/*
			 * location of sql files
			 */
			$locate_sql_file=$this->pluginPath.'/wp-content/plugins/wpgateway/callcid2_wordpress.sql';

			$mysql_ver=$conn->server_info;
			$chk_ver = mb_substr($mysql_ver, 0, 3);			
		
			if($chk_ver <= '5.5'){ 	//removing "COLLATE utf8mb4_unicode_520_ci" to "COLLATE utf8mb4_unicode_ci"
			
			   $locate_sql_file=$this->pluginPath.'/wp-content/plugins/wpgateway/wordpress_mysqlver5.5.sql';
			    
			}
			
			/*
			 * Read sql files line by line
			 */
			$lines = file($locate_sql_file);
			$templine = "";
			
			/*
			 * Execute every line of sql file for create table
			 */
			foreach ($lines as $line)
			{
				// Skip it if it's a comment
				if (substr($line, 0, 2) == '--' || $line == '')
					continue;
			 
				// Add this line to the current segment
				$templine .= $line;
				// If it has a semicolon at the end, it's the end of the query
				if (substr(trim($line), -1, 1) == ';')
				{
					// Perform the query
		
					mysqli_query($conn,$templine);
										
					// Reset temp variable to empty
					$templine = '';
						
				}
			}
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0036");
		}
		/*
		 * Return value
		 */
		$return = array();	
		$return['username'] = $admin_username;
		$return['password'] = $admin_password;
		$return['email'] = $admin_email;				
		
		/*
		 * Get url path from post method
		 */
		$url_path = "http://".$domain."/";

		if($ssl==1)
		{
			$url_path = "https://".$domain."/";
		}
		
		
		try {
			/*
			 * Update current domain in wp_options
			 */
			mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='".$url_path."' WHERE option_name='siteurl' OR option_name='home'");					
			
			/*
			 * Update site title
			 */
			if($web_title!="")
				mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='".$web_title."' WHERE option_name='blogname'");
			if($web_title!="")
				mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='' WHERE option_name='blogdescription'");
			if($admin_email!='')
				mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='".$admin_email."' WHERE option_name='admin_email'");
			/*
			 * Update ".$db['table_prefix']."users credential -> email, username and password
			 */
			$flag = false;
			$q = "UPDATE ".$db['table_prefix']."users SET ";					 
			if($admin_username!=""){
				$q .= "user_login = '".$admin_username."', ";
				$flag = true;
				$return['username'] = $admin_username;
			}
			if($admin_password!=""){
				$q .= "user_pass = '".md5($admin_password)."', ";
				$flag = true;
				$return['password'] = $admin_password;
			}
			if($admin_email!=""){
				$q .= "user_email = '".$admin_email."', ";
				$flag = true;
				$return['email'] = $admin_email;
			}
			
			if($flag){
				$q = substr($q,0,-2);
				$q .= " WHERE ID = 1";
			
				mysqli_query($conn,$q);
			}
			
			if($admin_firstname!="")
				mysqli_query($conn,"UPDATE ".$db['table_prefix']."usermeta SET meta_value='".$admin_firstname."' WHERE meta_key = 'first_name' AND user_id = 1");
			if($admin_lastname!="")
				mysqli_query($conn,"UPDATE ".$db['table_prefix']."usermeta SET meta_value='".$admin_lastname."' WHERE meta_key = 'last_name' AND user_id = 1");	
				
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0033");
		}
		
		/*
		 * Return value
		 */			
		$q = mysqli_query($conn,"SELECT user_login,user_email FROM ".$db['table_prefix']."users LIMIT 0,1");
		$r = mysqli_fetch_assoc($q);
		if($return['username'] == "")
			$return['username'] = $r['user_login'];
		if($return['email'] == "")
			$return['email'] = $r['user_email'];
		if($return['password']=="")
			$return['password'] = "admin123";
		$return['code'] = 1;			
			
		$this->deleteSqlFiles();
		return $return;
		
	} 

	public function deleteSqlFiles(){
		$callcid2_wordpress= $this->pluginPath.'/wp-content/plugins/wpgateway/callcid2_wordpress.sql';
		$wordpress_mysqlver5= $this->pluginPath.'/wp-content/plugins/wpgateway/wordpress_mysqlver5.5.sql';
		$callcid2_wordpress_new= $this->pluginPath.'/wp-content/plugins/wpgateway/callcid2_wordpress_new.sql';
		$callcid222_wordpress= $this->pluginPath.'/wp-content/plugins/wpgateway/22callcid2_wordpress.sql';
		if (file_exists($callcid2_wordpress)) {
			@chmod($callcid2_wordpress, 0777);
            @unlink($callcid2_wordpress);
        }

		if (file_exists($wordpress_mysqlver5)) {
			@chmod($wordpress_mysqlver5, 0777);
            @unlink($wordpress_mysqlver5);
        }

		if (file_exists($callcid2_wordpress_new)) {
			@chmod($callcid2_wordpress_new, 0777);
            @unlink($callcid2_wordpress_new);
        }

		if (file_exists($callcid222_wordpress)) {
			@chmod($callcid222_wordpress, 0777);
            @unlink($callcid222_wordpress);
        }
		return true;
	}
	
	public function wpinstalltheme()
	{
		try {	
			$npath = $this->pluginPath;
			$db = $this->getdbparameter($npath);
			
			if($db['error']!=""){
				return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
			}
			
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
			}
			
			/*
			 * Update theme name in database
			 */
			mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value='christianus' WHERE option_name='template' || option_name='stylesheet'");
			
			$this->deleteSqlFiles();

		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0026");			
		}
		
		return array("code"=>1);		
	}
	
	public function wpinstallstefantheme()
	{
		try {	
			$npath = $this->pluginPath;
			$db = $this->getdbparameter($npath);
			
			if($db['error']!=""){
				return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
			}
			
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
			}
			
			/*
			 * Update theme name in database
			 */
			mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value='stefan' WHERE option_name='template' || option_name='stylesheet'");
			
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0026");			
		}
		$this->deleteSqlFiles();
		return array("code"=>1);		
	}
	
	
	
	public function wpuploadniche()
	{
		$return = array();
		$return['password'] = "";
		try {	
			$npath = $this->pluginPath;
			$db = $this->getdbparameter($npath);
			
			if($db['error']!=""){
				return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
			}	
						
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
			}
			
			if($this->parameter['overwrite']=="yes"){
				$return['username']="";
				$return['password']="";
				$return['email']="";
				/*
				 * Update site title
				 */
				if($this->parameter['web_title']!="")
					mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='".$this->parameter['web_title']."' WHERE option_name='blogname'");
				if($this->parameter['web_title']!="")
					mysqli_query($conn,"UPDATE ".$db['table_prefix']."options SET option_value ='' WHERE option_name='blogdescription'");
					
				$flag = false;
				$q = "UPDATE ".$db['table_prefix']."users SET ";					 
				if($this->parameter['admin_username']!="" && $this->parameter['admin_password']!=""){
					$q .= "user_login = '".$this->parameter['admin_username']."', user_pass = '".md5($this->parameter['admin_password'])."', ";
					$flag = true;
					$return['username'] = $this->parameter['admin_username'];
					$return['password'] = $this->parameter['admin_password'];
				}				
				if($this->parameter['admin_email']!=""){
					$q .= "user_email = '".$this->parameter['admin_email']."', ";
					$flag = true;
					$return['email'] = $this->parameter['admin_email'];
				}
				
				if($flag){
					$q = substr($q,0,-2);
					$q .= " WHERE ID = 1";				
					mysqli_query($conn,$q);
				}
				
				if($this->parameter['admin_firstname']!="")
					mysqli_query($conn,"UPDATE ".$db['table_prefix']."usermeta SET meta_value='".$this->parameter['admin_firstname']."' WHERE meta_key = 'first_name' AND user_id = 1");
				if($this->parameter['admin_lastname']!="")
					mysqli_query($conn,"UPDATE ".$db['table_prefix']."usermeta SET meta_value='".$this->parameter['admin_lastname']."' WHERE meta_key = 'last_name' AND user_id = 1");
					
					
				if($return['username']=="" || $return['password']==""){
					$q = mysqli_query($conn,"SELECT user_login FROM ".$db['table_prefix']."users LIMIT 0,1");
					$r = mysqli_fetch_assoc($q);
					$return['username'] = $r['user_login'];
					$return['password'] = "";
				}			
			} else {
				/*
				 * Get credential of users
				 */
				$q = mysqli_query($conn,"SELECT user_login,user_email FROM ".$db['table_prefix']."users LIMIT 0,1");
				$r = mysqli_fetch_assoc($q);
				$return['username'] = $r['user_login'];
				$return['email'] = $r['user_email'];
				$return['password'] = "";
			}										
			
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0033");
		}
		
		$this->deleteSqlFiles(); 

		$return['code'] = 1;
		return $return;		
	}
	
	
	/*
	 * Get Backup of wordpress files and database
	 * 
	 */
	public function wpbackup()
	{
		if($this->parameter['dbfilename'] == "" || $this->parameter['basedir'] == ""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0412");
		} 
		
		try {				
			/*
			 * Create blank sql file
			 */					
			$npath = $this->pluginPath;
			$dbfile = $npath."/".$this->parameter['dbfilename'];
			
			$templine = '';																	
			$table_v = array();	
						
			$db = $this->getdbparameter($npath);
			
			if($db['error']!=""){
				return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0741");
			}
					
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0052");
			}
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage().$ex->getLine(),"error_code"=>"WPERR0876");			
		}
				
		try {
			$f2 = false;
			/* Try database update by exec command */
			$result = array();
			$output = '';
			exec('ls',$result,$output);
			if(trim($output)==0 && is_array($result) && count($result)>0){
				
				$command = "mysqldump -u ".$db['dbuser']." -p'".$db['dbpassword']."' ".$db['dbname']." > ".$dbfile;
				
				exec($command,$result,$output);
				
				if(trim($output)==0){
					$f2 = true;
					sleep(5);
					
					$rand = rand();
					try{
						$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
						mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."options` (option_name,option_value,autoload) VALUES('backupfilename".$rand."','".$this->parameter['dbfilename']."','yes')");
					} catch(ErrorException $ex){
						// may it returns array in result if there is no need to check from db for upper record added !!
					}
				} 				
			}
			
		} catch(ErrorException $ex){
			if(file_exists($dbfile)){
				unlink($dbfile);
			}
			return array("code"=>3,"message"=>$ex->getMessage().$ex->getLine(),"error_code"=>"WPERR8852");			
		}
		
		try {	
			if(!$f2){						
				$table = mysqli_query($conn,"SHOW TABLES");
				while($row = mysqli_fetch_row($table))
				{
					$table_v[] = $row[0];
				}
				foreach($table_v as $table)
				{	
					$checkTable = mysqli_query($conn,'SHOW CREATE TABLE `'.$table.'`');
					if(!$checkTable){
						continue;
					}									
					$result = mysqli_query($conn,'SELECT * FROM `'.$table.'`');											
					$num_fields = mysqli_field_count($conn);					
					$rowA = mysqli_query($conn,'SHOW CREATE TABLE `'.$table.'`');
					$row2 = mysqli_fetch_row($rowA);
					$templine.= "\n\n".$row2[1].";\n\n";
									
					for ($i = 0; $i < $num_fields; $i++) 
					{			
						while($row = mysqli_fetch_row($result))
						{																
							$templine.= 'INSERT INTO `'.$table.'` VALUES(';
							for($j=0; $j<$num_fields; $j++) 
							{
								$row[$j] = mysqli_real_escape_string($conn,$row[$j]);
								
								//$row[$j] = ereg_replace("\n","\\n",$row[$j]);
								//$row[$j] = str_replace("\'","''",$row[$j]);
								//$row[$j] = str_replace('\"','"',$row[$j]);
								if (isset($row[$j])) { $templine.= "'".$row[$j]."'" ; } else { $templine.= "''"; }
								if ($j<($num_fields-1)) { $templine.= ','; }
							}
							$templine.= ");\n";
						}
					}
					$templine.="\n\n\n";
				}				
				//Save table data in sql file 
				$handle = fopen($dbfile,'w+');
				fwrite($handle,$templine);
				fclose($handle);
				if(isset($this->parameter['dbfilename'])){
					$rand = rand();  
					mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."options` (option_name,option_value,autoload) VALUES('backupfilename".$rand."','".$this->parameter['dbfilename']."','yes')");	
				}
				
			}			
		} catch (ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR8832");		
		}
		
		$ver = $this->getmysqlversion($conn);		
		return array("code"=>1,"version"=>$ver);		 
	}
	
	
	public function removebackupdbfile()
	{
		if($this->parameter['dbfilename'] == ""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0412");
		} 
		
		try {				
			
			$npath = $this->pluginPath;
			$dbfile = $npath."/".$this->parameter['dbfilename'];

			$filepath = $dbfile;
			if(file_exists($filepath)){
				unlink($filepath);
				
			}
			return true;
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage().$ex->getLine(),"error_code"=>"WPERR0869");			
		}
		$ver = $this->getmysqlversion($conn);		
		return array("code"=>1,"version"=>$ver);		 
	}
	
	public function backupfile(){
		
		if($this->parameter['dbfilename'] == ""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0562");
		} 
		
		try {				
			/*
			 * Create blank sql file
			 */					
			$npath = $this->pluginPath;
			$dbfile = $npath."/".$this->parameter['dbfilename'];
		
			$templine = '';																	
			$table_v = array();	
						
			$db = $this->getdbparameter($npath);
			
			if($db['error']!=""){
				return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
			}
					
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
			}
			
			$result = mysqli_query($conn,"SELECT * FROM `".$db['table_prefix']."options` where option_value = '".$this->parameter['dbfilename']."'");	
			$num_rows = $result->num_rows;
			if($num_rows>0){
				return array("code"=>1);
			}
			else{
				return array("code"=>2);	
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0046");			
		}
			
		return array("code"=>3,"message"=>"Backup file record not found in database.");	
		
		
	}
	
	public function read_dbfile(){
		
		if($this->parameter['dbfilename'] == ""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0762");
		} 
		
		try {				
			/*
			 * Get written db name from txt file
			 */					
			$npath = $this->pluginPath;		
			$filepath = $npath.'/dbcreate.txt';
			if(file_exists($filepath)){
				$lines = file($filepath);
				$tex = $this->parameter['dbfilename'];
				foreach($lines as $this_line)
				{
					if (stristr ($this_line, $tex)) 
					{
						return array("code"=>1);
					}
				}
			}
			return array("code"=>2);	
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0078");			
		}
		
		return array("code"=>3,"message"=>"Database file not found. Please try again.");	
		
		
	}
	
	
	public function getdetails_fromfile(){
		
		if($this->parameter['dbfilename'] == ""){
			return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0862");
		} 
		
		try {				
			/*
			 * Get written db name from txt file
			 */					
			$npath = $this->pluginPath;		
			$filepath = $npath.'/dbdetails.txt';
			if(file_exists($filepath)){
				$lines = file($filepath);
				$tex = 'old_url';
				foreach($lines as $this_line)
				{
					if (stristr ($this_line, $tex)) 
					{
						$getline = trim($this_line);
						$res = json_decode($getline);
						return $res;
					}
				}
			}
			return array("code"=>2);	
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0178");			
		}
		
		return array("code"=>3,"message"=>"Database file not found. Please try again.");	
		
		
	}
	
	/*
	 * Insert table in database and update wp-config
	 */
	public function wpdatabase()
	{
		/*
		 * ----Parameter----
		 * basedir					required					 
		 * dbfile					required	
		 * domain					required
		 * admin_email
		 * admin_username
		 * admin_password
		 * db_user					required
		 * db_password				required
		 * db_name					required						 		
		 */ 
		 
		 try {
			$return = array();						
			// Check parameter domain is available
			if($this->parameter['basedir'] == "" || $this->parameter['dbfile'] == "" || $this->parameter['db_user'] == "" || $this->parameter['db_password'] == "" || $this->parameter['db_name']==""){
				return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0013");				
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0062");			
		}
			
		try {
			// Create connection
			$conn = mysqli_connect("localhost", $this->parameter['db_user'], $this->parameter['db_password'],$this->parameter['db_name']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");								
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0062");			
		}
				
		$npath = $this->pluginPath;
		
		$dbfile = $npath."/".$this->parameter['dbfile'];
		$domain = $this->parameter['domain'];
		
		$ver = "";
		$source_domain = "";
		if(isset($this->parameter['version']) && !empty($this->parameter['version'])){
			$ver = $this->parameter['version'];			
		}
		
		if(isset($this->parameter['source_domain']) && !empty($this->parameter['source_domain'])){
			$source_domain = $this->parameter['source_domain'];
		}
		
		if(!file_exists($npath."/wp-config.php")){
			return array("code"=>3,"message"=>"Not found wp-config file in your domain directory","error_code"=>"WPERR0058");			
		}		
		/*
		 * Update wp-config.php file
		 * Get table_prefix
		 */
		try {
			$lines = file($npath."/wp-config.php");				
			$mdlines = "";					
			foreach ($lines as $line)
			{					
				if(substr(trim($line),0,6)=="define"){
					$as = explode("'",$line);
					if(count($as)>2){
						if($as[1]=="DB_NAME")
							$as[3] = $this->parameter['db_name'];
						else if($as[1] == "DB_USER")
							$as[3] = $this->parameter['db_user'];
						else if($as[1] == "DB_PASSWORD")
							$as[3] = $this->parameter['db_password'];															
							
						$line = implode("'",$as);
					} else {
						$as = explode('"',$line);
						if($as[1]=="DB_NAME")
							$as[3] = $this->parameter['db_name'];
						else if($as[1] == "DB_USER")
							$as[3] = $this->parameter['db_user'];
						else if($as[1] == "DB_PASSWORD")
							$as[3] = $this->parameter['db_password'];															
							
						$line = implode('"',$as);
					}
				}												
				$mdlines .= $line;				
			}
			chmod($npath."/wp-config.php", 0644);
			file_put_contents($npath."/wp-config.php", $mdlines);
				
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0015");			
		}	
		
		try {
			$f2 = false;
			/* Try database update by exec command */
			$result =  array();
			$output =  '';
			exec('ls',$result,$output);
			
			if(trim($output)==0 && is_array($result) && count($result)>0){
				
				$command = "mysql -u ".$this->parameter['db_user']." -p'".$this->parameter['db_password']."' ".$this->parameter['db_name']." < ".$this->parameter['dbfile'];
				
				exec($command,$result,$output);
				
				if(trim($output)==0){
					$f2 = true;
					try{
						if(isset($this->parameter['random_num'])){
							$filepath = $npath.'/dbcreate.txt';		
							$cont = trim($this->parameter['random_num'].$this->parameter['dbfile']);
							$content = $cont;
							$file = fopen($filepath,"w");
							fwrite($file,$content);
							fclose($file);
						}
						
					} catch(ErrorException $ex){

					}
					
					
				} 				
			}
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0036");			
		}
		
		if(!$f2){									
			/*
			 * Execute every line of sql file for create table
			 */		
			try {
				$templine = "";			
				$lines = file($this->parameter['dbfile']);							
			} catch(ErrorException $ex){
				return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0036");			
			}		
			
			$i = 0;
			
			// Loop through each line
			foreach ($lines as $line)
			{
				// Skip it if it's a comment
				if (substr($line, 0, 2) == '--' || substr($line,0,2) == '/*'){			
					continue;
				}
															
				// Add this line to the current segment
				$templine .= $line;
				$last_check = ');';
				$last_count = 2;
				if(substr(trim($templine),0,12)=="CREATE TABLE" || substr(trim($templine),0,12) == "SET SQL_MODE" || substr(trim($templine),0,13) == "SET time_zone"){
					$last_check = ';';
					$last_count = 1;				
				}			
				
				// If it has a semicolon at the end, it's the end of the query
				if (substr(trim($line), -$last_count, $last_count) == $last_check)
				{														
					try {	
																			
						// Perform the query						
						$fg = mysqli_query($conn,$templine);														
						if(!$fg){						
							if(!empty($ver) && !empty($source_domain)){
								$c = $this->checkmysqlversion($ver,$conn);
								if(!$c){								
									return array("code"=>3,"message"=>"Please contact your host to update mysqli version from <b>".$domain."</b> to equal or above <b>".$ver."</b> since <b>".$source_domain."</b> has mysqli <b>".$ver."</b> version","error_code"=>"WPERR0036");		
								}
							}
						}
					$i++;				
					} catch(ErrorException $ex){
						return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0036");			
					}
					// Reset temp variable to empty										
					$templine = '';				
				}
				
				if($i%100==0)
					sleep(2);
			}	
			try{
				if(isset($this->parameter['random_num'])){
					$filepath = $npath.'/dbcreate.txt';		
					$cont = trim($this->parameter['random_num'].$this->parameter['dbfile']);
					$content = $cont;
					$file = fopen($filepath,"w");
					fwrite($file,$content);
					fclose($file);
				}
				
			} catch(ErrorException $ex){

			}
		}
		
		unlink($dbfile);
		return array("code"=>1);
		 
	}
	
	/*
	 * Action for clone wordpress of database and update siteurl
	 */
	public function wpclone()
	{  
		
		
		 
		/*
		 * ----Parameter----
		 * basedir					required					 
		 * dbfile					required	
		 * domain					required
		 * admin_email
		 * admin_username
		 * admin_password
		 * db_user					required
		 * db_password				required
		 * db_name					required						 		
		 */ 		
		try {
			$return = array();						
			// Check parameter domain is available
			if($this->parameter['basedir'] == ""){
				return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0089");				
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0090");			
		}
						
		$npath = $this->pluginPath;
		
		
		$accessurl = $this->parameter['domain'];
		$domain = $this->parameter['maindomain'];
		$admin_username = $this->parameter['admin_username'];
		$admin_password = $this->parameter['admin_password'];
		$admin_email = $this->parameter['admin_email'];
		$admin_nicename = 'wpg_'.$this->parameter['admin_username'];
			
		/*
		 * Return value
		 */
		
		$return['username'] = $admin_username;
		$return['password'] = $admin_password;
		$return['email'] = $admin_email;				
		
		$db = $this->getdbparameter($npath);
		
		if($db['error']!=""){
			return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0091");
		}
		
		try {
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'],$db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0092");								
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0093");			
		}
		
		try {	
			$q = mysqli_query($conn,"SELECT option_value FROM ".$db['table_prefix']."options WHERE option_name='siteurl'");
			$r = mysqli_fetch_array($q);				
			
			/*					
			 * Generate new url 
			 */	
			$replace = array('http://', 'https://', 'www.');
			$old_url = str_replace($replace,"",$r['option_value']);											
			$old_url_access = array('http://'.$old_url,'https://'.$old_url,'http://www.'.$old_url,'https://www.'.$old_url,'www.'.$old_url);
			$domain = rtrim($domain,"/");
			$new_url = 'http://'.$domain."/";	
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0094");			
		}
								
		/*
		 * Update data with serialize or non serialize
		 * Replace host url 
		 */	
		try {
			
			$table_v = array();								
			$table = mysqli_query($conn,"SHOW TABLES");
		
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0095");			
		}				
		
		while($row = mysqli_fetch_row($table))
		{
			$table_v[] = $row[0];
		}	
		
		
											
		foreach($table_v as $table)
		{	
			try {								
				$query = mysqli_query($conn,"SELECT COUNT(*) FROM `".$table."`");
				$result = mysqli_fetch_array( $query );
				$count = $result[ 0 ];
				if ( $count == 0 )						
					continue;	
			} catch(ErrorException $ex){}			
									
			$column_field = array();
			$ncol = "";
			try {
				
				$fields = mysqli_query($conn,'DESCRIBE `' . $table .'`');
				while( $column = mysqli_fetch_array( $fields ) ){
					$column_field[ $column[ 'Field' ] ] = $column[ 'Key' ] == 'PRI' ? true : false;
					if($column[ 'Key' ] == 'PRI'){
						$ncol = $column[ 'Field' ];
					}
				}
				
				if($ncol == ""){
					continue;
				}
					
			} catch(ErrorException $ex){}
		
			$limit = 5000;
			$totalpage = ceil($count/$limit);
			$start = 0;
			$page = 1;
			
			while($page <= $totalpage){
				
				$query = mysqli_query($conn,'SELECT * FROM `'.$table.'` LIMIT '.$start.','.$limit);
				while($row = mysqli_fetch_array($query)){												
					$start++;
					$flag = false;
					$qus = "UPDATE `".$table."` SET ";					
					foreach($column_field as $column => $key){
						
						$updateData = $oldData = $row[ $column ];
						
						try {
														
							if($this->is_serialized_wpgateway($updateData)){								
				
								$unserialize = array();	
																
								if(is_string($updateData) && ($unserialize = @unserialize($updateData)) !== false){																
									$updateData = serialize($this->recursive_unserialize_replace($old_url_access, $new_url, $unserialize));													
								}
								else {
									if ( is_string( $updateData ) ){					
										$updateData = str_replace( $old_url_access, $new_url, $updateData );			
									}
								}
																														
							} else {
								if ( is_string( $updateData ) ){					
									$updateData = str_replace( $old_url_access, $new_url, $updateData );			
								}
							}
							
							
						} catch(ErrorException $ex){}
						
						try {
							if($updateData!=$oldData){
								$flag = true;
								$qus .= $column." = '".mysqli_real_escape_string($conn,$updateData)."', "; 								
							}	
						} catch(ErrorException $ex){}													
					}
					
					if($flag){
						$qus = substr($qus,0,-2);
						$qus .= " WHERE ".$ncol." = ".$row[$ncol];
						try {
							mysqli_query($conn,$qus);
						} catch(ErrorException $ex){}
						
					}						
				}
				$page++;						
			}			
		}	
									
		if($admin_username != "" && $admin_password != ""){
			
			try {				
				$q00 = mysqli_query($conn,"SELECT count(ID) FROM `".$db['table_prefix']."users` WHERE user_login='".$admin_username."'");
				$r00 = mysqli_fetch_row($q00);
				$id = 0;
				if($r00[0]==1){
					$q0 = mysqli_query($conn,"SELECT ID FROM `".$db['table_prefix']."users` WHERE user_login='".$admin_username."'");	
					$r0 = mysqli_fetch_row($q0);
					$id = $r0[0];
				}				
								
				if($id != 0 && $id > 0){
					$q1 = mysqli_query($conn,"UPDATE `".$db['table_prefix']."users` SET user_pass = '".md5($admin_password)."', user_email = '".$admin_email."', user_nicename = '".$admin_nicename."'  WHERE ID=".$id);
					// delete rest of the users.
					// $del = mysqli_query($conn,"DELETE FROM `".$db['table_prefix']."users` WHERE ID !=".$id);
					// $del = mysqli_query($conn,"DELETE FROM `".$db['table_prefix']."usermeta` WHERE user_id !=".$id);
				} else {
					$q = mysqli_query($conn,"SELECT * FROM `".$db['table_prefix']."users` LIMIT 0,1");
					$r = mysqli_fetch_row($q);
						
					$q1 = mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."users` (user_login,user_pass,user_email,user_nicename,display_name,user_registered) VALUES('".$admin_username."','".md5($admin_password)."','".$admin_email."','".$admin_nicename."','".$r[9]."','".date('Y-m-d H:i:s')."')");				
					$id = mysqli_insert_id($conn);
					$q2 = mysqli_query($conn,"SELECT * FROM `".$db['table_prefix']."usermeta` LIMIT 0,1");
					$r2 = mysqli_fetch_assoc($q2);
					$f1 = ""; $f2 = "";
					$i=1;
					foreach($r2 as $key => $v){
						if($i!=1)
							$f1 .= $key.", ";		
						$i++;
					}	
					$f1 = substr($f1,0,-2);
					$f2 = str_replace("user_id",$id,$f1);
					
					$q3 = mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."usermeta` (".$f1.") SELECT ".$f2." FROM ".$db['table_prefix']."usermeta WHERE user_id=".$r[0]);
					
					
					// delete rest of the user meta user details
					// $del = mysqli_query($conn,"DELETE FROM `".$db['table_prefix']."usermeta` WHERE user_id !=".$id);
					// $del = mysqli_query($conn,"DELETE FROM `".$db['table_prefix']."users` WHERE ID !=".$id);
					
					//Update options table for providing permission to user "theme_jack_access_user"
					$ch1 = mysqli_query($conn,"SELECT * FROM `".$db['table_prefix']."options` WHERE option_name='theme_jack_access_user'");
					$rh1 = mysqli_fetch_row($ch1);
					$ac_user = array();
					$ac_user_ser = "";
					$op_id = 0;
					if(!empty($rh1) && isset($rh1) && $rh1[0]>0){
						if($this->is_serialized_wpgateway($rh1[2])){
							$op_id = $rh1[0];
							$ac_user = @unserialize($rh1[2]);
							if(!in_array($id,$ac_user))
								array_push($ac_user,$id);
								
							$ac_user_ser = serialize($ac_user);
						} else {
							$ac_user = array("0"=>"1","1"=>$id);
							$ac_user_ser = serialize($ac_user);
						}
						
						mysqli_query($conn,"UPDATE `".$db['table_prefix']."options` SET option_value='".$ac_user_ser."' WHERE option_id=".$op_id);
					} else {
						$ac_user = array("0"=>"1","1"=>$id);
						$ac_user_ser = serialize($ac_user);
						mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."options` (option_name,option_value,autoload) VALUES('theme_jack_access_user','".$ac_user_ser."','yes')");
					}
					
										
					//Update options table for providing permission to user "jack_installer_user"
					$ch1 = mysqli_query($conn,"SELECT * FROM `".$db['table_prefix']."options` WHERE option_name='jack_installer_user'");
					$rh1 = mysqli_fetch_row($ch1);					
					$op_id = 0;
					if(!empty($rh1) && isset($rh1) && $rh1[0]>0){
						$op_id = $rh1[0];
						if(empty($rh1[2])){
							mysqli_query($conn,"UPDATE `".$db['table_prefix']."options` SET option_value='MQ==' WHERE option_id=".$op_id);
						}						
					} else {
						mysqli_query($conn,"INSERT INTO `".$db['table_prefix']."options` (option_name,option_value,autoload) VALUES('jack_installer_user','MQ==','yes')");
					}
				}
				
			} catch(ErrorException $ex){
				return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0096");			
			}
		} 
		
		try {	
			$q = mysqli_fetch_assoc(mysqli_query($conn,"SELECT user_login,user_email FROM `".$db['table_prefix']."users` LIMIT 0,1"));
			if($admin_username == "")
				$return['username'] = $q['user_login'];
			if($admin_email == "")
				$return['email'] = $q['user_email'];
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0097");			
		}
		
		try {	
			$q = mysqli_query($conn,"DELETE FROM `".$db['table_prefix']."options` where option_name = 'upload_path'");
		} catch(ErrorException $ex){
			
		}
		
		
		
		$return['old_url'] = $old_url;
		$return['new_url'] = $new_url;				
		$return['code'] = "1"; 
		
		try{
			if(isset($this->parameter['random_num'])){
				$filepath = $npath.'/dbcreate.txt';		
				$cont = $this->parameter['random_num'].$this->parameter['domain'];
				$content = $cont;
				$file = fopen($filepath,"w");
				fwrite($file,$content);
				fclose($file);
			}
			
			$filepath = $npath.'/dbdetails.txt';		
			$cont = json_encode($return);
			$content = $cont;
			$file = fopen($filepath,"w");
			fwrite($file,$content);
			fclose($file);
		} catch(ErrorException $ex){

		}
		
					
		return $return;		
	}
	
	
	/*
	 * For different domain need to update siteurl in db
	 */
	public function wprestore()
	{
		/*
		 * ----Parameter----
		 * basedir					required					 
		 * domain					required						 	
		 */ 		
		try {
			$return = array();						
			// Check parameter domain is available
			if($this->parameter['basedir'] == ""){
				return array("code"=>3,"message"=>"Database not update due to lost connection with your cpanel","error_code"=>"WPERR0262");				
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0062");			
		}
					
		$npath = $this->pluginPath;
		
		$domain = $this->parameter['domain'];
		
		$db = $this->getdbparameter($npath);
		
		if($db['error']!=""){
			return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
		}
		
		try {
			// Create connection
			$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'],$db['dbname']);
			
			// Check connection
			if (mysqli_connect_errno())
			{
				return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");								
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0062");			
		}
		
		try {				
			$q = mysqli_query($conn,"SELECT option_value FROM ".$db['table_prefix']."options WHERE option_name='siteurl'");
			$r = mysqli_fetch_array($q);				
			
			/*					
			 * Generate new url 
			 */	
			$replace = array('http://', 'https://', 'www.');
			$old_url = str_replace($replace,"",$r['option_value']);											
			$old_url_access = array('http://'.$old_url,'https://'.$old_url,'http://www.'.$old_url,'https://www.'.$old_url,'www.'.$old_url);
			$domain = rtrim($domain,"/");
			$new_url = 'http://'.$domain."/";	
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage()." ".$ex->getLine(),"error_code"=>"WPERR0033");			
		}
								
		/*
		 * Update data with serialize or non serialize
		 * Replace host url 
		 */	
		try {
			
			$table_v = array();								
			$table = mysqli_query($conn,"SHOW TABLES");
		
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0033");			
		}				
		
		while($row = mysqli_fetch_row($table))
		{
			$table_v[] = $row[0];
		}	
											
		foreach($table_v as $table)
		{	
			try {								
				$query = mysqli_query($conn,"SELECT COUNT(*) FROM `".$table."`");
				$result = mysqli_fetch_array( $query );
				$count = $result[ 0 ];
				if ( $count == 0 )						
					continue;	
			} catch(ErrorException $ex){}			
									
			$column_field = array();
			$ncol = "";
			try {
				
				$fields = mysqli_query($conn,'DESCRIBE `' . $table .'`');
				while( $column = mysqli_fetch_array( $fields ) ){
					$column_field[ $column[ 'Field' ] ] = $column[ 'Key' ] == 'PRI' ? true : false;
					if($column[ 'Key' ] == 'PRI'){
						$ncol = $column[ 'Field' ];
					}
				}
				
				if($ncol == ""){
					continue;
				}
					
			} catch(ErrorException $ex){}
		
			$limit = 5000;
			$totalpage = ceil($count/$limit);
			$start = 0;
			$page = 1;
			
			while($page <= $totalpage){
				
				$query = mysqli_query($conn,'SELECT * FROM `'.$table.'` LIMIT '.$start.','.$limit);
				while($row = mysqli_fetch_array($query)){												
					$start++;
					$flag = false;
					$qus = "UPDATE `".$table."` SET ";					
					foreach($column_field as $column => $key){
						
						$updateData = $oldData = $row[ $column ];
						
						try {
														
							if($this->is_serialized_wpgateway($updateData)){								
				
								$unserialize = array();	
																
								if(is_string($updateData) && ($unserialize = @unserialize($updateData)) !== false){																
									$updateData = serialize($this->recursive_unserialize_replace($old_url_access, $new_url, $unserialize));													
								}
								else {
									if ( is_string( $updateData ) ){					
										$updateData = str_replace( $old_url_access, $new_url, $updateData );			
									}
								}
																														
							} else {
								if ( is_string( $updateData ) ){					
									$updateData = str_replace( $old_url_access, $new_url, $updateData );			
								}
							}
							
							
						} catch(ErrorException $ex){}
						
						try {
							if($updateData!=$oldData){
								$flag = true;
								$qus .= $column." = '".mysqli_real_escape_string($conn,$updateData)."', "; 								
							}	
						} catch(ErrorException $ex){}													
					}
					
					if($flag){
						$qus = substr($qus,0,-2);
						$qus .= " WHERE ".$ncol." = ".$row[$ncol];
						try {
							mysqli_query($conn,$qus);
						} catch(ErrorException $ex){}
						
					}						
				}
				$page++;						
			}			
		}	
		
		try {	
			$q = mysqli_fetch_assoc(mysqli_query($conn,"SELECT user_login,user_email FROM `".$db['table_prefix']."users` LIMIT 0,1"));
			$return['username'] = $q['user_login'];
			$return['email'] = $q['user_email'];
			
			$admin_password = '';
			if(isset($this->parameter['admin_password']) && !empty($this->parameter['admin_password'])){
				$admin_password = $this->parameter['admin_password'];
				$q1 = mysqli_query($conn,"UPDATE `".$db['table_prefix']."users` SET user_pass = '".md5($admin_password)."'  WHERE user_email = '".$q['user_email']."' ");
				
			}
			$return['password'] = $admin_password;
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"error_code"=>"WPERR0033");			
		}
		
		$return['old_url'] = $old_url;
		$return['new_url'] = $new_url;						
		$return['code'] = "1"; 
		return $return;
	}
	
	
	public function create_zip() 
	{
		try {
			$npath = $this->pluginPath;
			
			$bool = class_exists("ZipArchive");
			if(!$bool){
				return array("code"=>3,"message"=>"ZipArchive class not found in your cpanel","line"=>__LINE__,"error_code"=>"WPERR0034");
			}			
			
			if(!isset($this->parameter['zipfile']) || !isset($this->parameter['dirs']) || !isset($this->parameter['exclude'])){
				return array("code"=>3,"message"=>"Cpanel has denined to access files and directory","line"=>__LINE__,"error_code"=>"WPERR0034");
			}
			
			$destination = $this->parameter['zipfile'];
			$dirs = $this->parameter['dirs'];
			$exclude = $this->parameter['exclude'];
			
			$directory = array();
			if(!empty($dirs) && strpos($dirs,",")>-1){
				$directory  = explode(",",$dirs);
			}
			
			$exclude_files = array();
			if(!empty($exclude) && strpos($exclude,",")>-1){
				$exclude_files = explode(",",$exclude);
			}
			
			array_push($directory,"wp-admin");
			array_push($directory,"wp-content");
			array_push($directory,"wp-includes");
			
			$files = scandir($npath);
			if(count($files)>0){
				foreach($files as $v){
					if( strpos(strtolower($v),"pclzip-")>-1 && ( substr($v,-3)==".gz" || substr($v,-4)==".tmp" ) ){
						unlink($v);
					}
				}
			}
			
			//Get total files with absolute path
			//$di = new RecursiveDirectoryIterator($npath);
			//$iterator = new RecursiveIteratorIterator($di, RecursiveIteratorIterator::CHILD_FIRST);
			$iterator = $this->list_files_dirs_recursively($npath);
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"line"=>$ex->getLine(),"error_code"=>"WPERR0034");			
		}
		
		$files = array();				
		foreach ($iterator as $filename){
			try {		
				$f = str_replace($npath."/","",$filename);
				
				if(filesize($f)<=0)
					continue;
				
				if(strpos($f,"/")>-1){
					$g = explode("/",$f);
					
					if($g[count($g)-1] == '.' || $g[count($g)-1] == '..')
						continue;
					
					if(!in_array($g[0],$directory))
						continue;
					
				} else {									
					if(!in_array($f,$directory) && is_dir($f)){
						continue;
					}
					
					if($f=='.' || $f=='..'){
						continue;
					}
				}
				
				if(is_file($f) && file_exists($f)){
					
					if(!empty($exclude_files) && in_array($f,$exclude_files)){
						continue;
					}							
					$files[] = $f;						
				} else {
					if(file_exists($f))
						$files[] = $f;
				}
			} catch( ErrorException $ex ) {
				continue;
			}						
		}
				
		try {	
			$overwrite = false;
					
			//if we have good files...
			if(count($files)>0) {
				
				if(file_exists($destination))
					unlink($destination);
				
				require_once('wp-content/plugins/wpgateway/pclzip.lib.php');
				$zip = new PclZip($destination);
				
				//create the archive
				//$zip = new ZipArchive();
				//if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
					//return array("code"=>3,"message"=>"Cpanel has denined to access files and directory","line"=>__LINE__,"error_code"=>"WPERR0034");
				//}
				//add the files
				$i = 0;
				foreach($files as $file) {
					
					if(file_exists($destination)){
					
						if(!is_dir($file)){
							//$zip->addFile($file,"wpclonejack_0777/".ltrim($file, '/'));
							$zip->add($file,PCLZIP_OPT_ADD_PATH, 'wpclonejack_0777');
						} else {
							if(count(glob($file."/*"))===0){
								$zip->add($file,PCLZIP_OPT_ADD_PATH, 'wpclonejack_0777');
								//$zip->addEmptyDir("wpclonejack_0777/".ltrim($file, '/'));
							}
						}	
						
						if(++$i%100==0){
							sleep(2);
						}
					} else {
						if(!is_dir($file)){
							//$zip->addFile($file,"wpclonejack_0777/".ltrim($file, '/'));
							$zip->create($file,PCLZIP_OPT_ADD_PATH, 'wpclonejack_0777');
						} else {
							if(count(glob($file."/*"))===0){
								$zip->create($file,PCLZIP_OPT_ADD_PATH, 'wpclonejack_0777');
							}
						}	
						
						sleep(2);
					}								
				}
				//debug
				//echo 'The zip archive contains ',$zip->numFiles,' files with a status of ',$zip->status;
				
				//close the zip -- done!
				//$zip->close();
				
				//check to make sure the file exists
				if(file_exists($destination))
					return array("code"=>1);
				else
					return array("code"=>3,"message"=>"Cpanel has denined to access files and directory","line"=>__LINE__,"error_code"=>"WPERR0034");
			}
			else
			{
				return array("code"=>3,"message"=>"Cpanel has denined to access files and directory","line"=>__LINE__,"error_code"=>"WPERR0034");	
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"line"=>$ex->getLine(),"error_code"=>"WPERR0034");			
		}
	}
	
	public function addLargeFileInZip()
	{
		try {
			$npath = $this->pluginPath;
			
			if(!isset($this->parameter['zipfile']) || !isset($this->parameter['exclude'])){
				return array("code"=>3,"message"=>"Required parameter is missing","line"=>__LINE__,"error_code"=>"WPERR0034");
			}
			
			$destination = $this->parameter['zipfile'];
			$exclude = $this->parameter['exclude'];
			
			if(!file_exists($destination)){
				return array("code"=>3,"message"=>"Zip file not found","line"=>__LINE__,"error_code"=>"WPERR0034");
			}
			
			$exclude_files = explode(",",$exclude);
			$addfile = array();
			$data = array();
			foreach($exclude_files as $v){
				if(file_exists($v)){
					array_push($addfile,$v);					
				} else {
					array_push($data,$v);
				}
			}
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"line"=>$ex->getLine(),"error_code"=>"WPERR0034");			
		}
				
		if(count($addfile)>0){
			require_once('wp-content/plugins/wpgateway/pclzip.lib.php');
			$zip = new PclZip($destination);
					
			foreach($addfile as $file){
				try {
					$f = $zip->add($file,PCLZIP_OPT_ADD_PATH, 'wpclonejack_0777');
					if(!$f){
						$size = filesize($file);
						$i = array();
						$i['file'] = $file;
						$i['usage'] = $size;
						array_push($data,$i);
					}																		
				} catch(ErrorException $ex){
					$size = filesize($file);
					$i = array();
					$i['file'] = $file;
					$i['usage'] = $size;
					array_push($data,$i);								
				}	
				sleep(3);
			}
						
			if(file_exists($destination))
				return array("code"=>1,"data"=>$data);
			else
				return array("code"=>4,"message"=>"Zip file not available after adding large files","line"=>__LINE__,"error_code"=>"WPERR0034");
		} else {
			return array("code"=>1,"data"=>$data);
		}
		
	}
	
	public function checkBackupZipSize()
	{
		try {
			$npath = $this->pluginPath;
			
			if(!isset($this->parameter['zipfile'])){
				return array("code"=>3,"message"=>"Required parameter is missing","line"=>__LINE__,"error_code"=>"WPERR0034");
			}
			
			$destination = $this->parameter['zipfile'];
			
			$pr = false;
			$files = scandir($npath);
			if(count($files)>0){
				foreach($files as $v){
					if(strpos(strtolower($v),"pclzip-")>-1  && ( substr($v,-3)==".gz" || substr($v,-4)==".tmp" ) ){
						$pr = true;
						break;
					}
				}
			}
			
			if($pr){
				return array("code"=>4);
			}
			
			if(!file_exists($destination)){				
				return array("code"=>3,"message"=>"Zip file not found","line"=>__LINE__,"error_code"=>"WPERR0034");				
			}
			
			$size = filesize($destination);			
			return array("code"=>1,"size"=>$size);	
			
			
		} catch(ErrorException $ex){
			return array("code"=>3,"message"=>$ex->getMessage(),"line"=>$ex->getLine(),"error_code"=>"WPERR0034");			
		}				
	}
	
	public function getbigsizefile() 
	{
		$byte = 209715200;		
		//$byte = 10000000;		
		//Get Actual Path		
		$npath = $this->pluginPath;
		
		$dirs = "";
		if(isset($this->parameter['dirs']))
			$dirs = $this->parameter['dirs'];
		
		$directory = array();
		if(!empty($dirs) && strpos($dirs,",")>-1){
			$directory  = explode(",",$dirs);
		}
		
		array_push($directory,"wp-admin");
		array_push($directory,"wp-content");
		array_push($directory,"wp-includes");
		
		try {
			//Get total files with absolute path
			//$di = new RecursiveDirectoryIterator($npath);
			//$iterator = new RecursiveIteratorIterator($di, RecursiveIteratorIterator::CHILD_FIRST);
			$iterator = $this->list_files_dirs_recursively($npath);
		} catch( ErrorException $ex ) {
			return array("code"=>3,"data"=>array(),"message"=>$ex->getMessage(),"line"=>$ex->getLine());
		}
		$data = array();	
		
		foreach ($iterator as $filename) {
			try {		
				$f = str_replace($npath."/","",$filename);
				
				if(filesize($f)<=0)
					continue;
					
				if(strpos($f,"/")>-1){
					$g = explode("/",$f);
					if(!in_array($g[0],$directory))
						continue;
				} else {									
					if(!in_array($f,$directory) && is_dir($f)){
						continue;
					}										
				}
				
				if(is_file($f) && file_exists($f)){
					
					$size = filesize($f);
					if($size>=$byte){
						$i = array();
						$i['file'] = $f;
						$i['usage'] = $size;
						array_push($data,$i);
					}
				}
			} catch( ErrorException $ex ) {
				continue;
			}						
		}

		return array("code"=>1,"data"=>$data,"message"=>"","line"=>"");
	}
	
	/*
	 * Recursive function unserialize replace
	 */
	public function recursive_unserialize_replace( $from, $to, $array ) {

		// some unseriliased data cannot be re-serialised eg. SimpleXMLElements
		try {
			
			if (!is_array($array)) {
				if(is_string($array)){				
					return str_replace($from, $from, $array);
				} else {				
					return $array;
				}
			}

			$newArray = array();
			foreach ($array as $key => $value) {
				$newArray[$key] = $this->recursive_unserialize_replace($from,$to,$value);
			}							
			return $newArray;

		} catch( ErrorException $ex ) {
			return $array;
		}
	}
	
	/*
	 * Check data is serialized or not
	 */
	public function is_serialized_wpgateway( $data, $strict = true ) {
		// if it isn't a string, it isn't serialized.
		if ( ! is_string( $data ) ) {
			return false;
		}
		$data = trim( $data );
		if ( 'N;' == $data ) {
			return true;
		}
		if ( strlen( $data ) < 4 ) {
			return false;
		}
		if ( ':' !== $data[1] ) {
			return false;
		}
		if ( $strict ) {
			$lastc = substr( $data, -1 );
			if ( ';' !== $lastc && '}' !== $lastc ) {
				return false;
			}
		} else {
			$semicolon = strpos( $data, ';' );
			$brace     = strpos( $data, '}' );
			// Either ; or } must exist.
			if ( false === $semicolon && false === $brace )
				return false;
			// But neither must be in the first X characters.
			if ( false !== $semicolon && $semicolon < 3 )
				return false;
			if ( false !== $brace && $brace < 4 )
				return false;
		}
		$token = $data[0];
		switch ( $token ) {
			case 's' :
				if ( $strict ) {
					if ( '"' !== substr( $data, -2, 1 ) ) {
						return false;
					}
				} elseif ( false === strpos( $data, '"' ) ) {
					return false;
				}
				// or else fall through
			case 'a' :
			case 'O' :
				return (bool) preg_match( "/^{$token}:[0-9]+:/s", $data );
			case 'b' :
			case 'i' :
			case 'd' :
				$end = $strict ? '$' : '';
				return (bool) preg_match( "/^{$token}:[0-9.E-]+;$end/", $data );
		}
		return false;
	}
	public function findWordpressTable()
	{
	
		$npath = $this->pluginPath;
	
		$db = $this->getdbparameter($npath);
			
		if($db['error']!=""){
			return array("code"=>3,"message"=>$db['error'],"error_code"=>"WPERR0058");
		}
	
		// Create connection
		$conn = mysqli_connect($db['dbhost'], $db['dbuser'], $db['dbpassword'], $db['dbname']);
	
		// Check connection
		if (mysqli_connect_errno())
		{
			return array("code"=>3,"message"=>mysqli_connect_error(),"error_code"=>"WPERR0062");
		}
		$res = mysqli_query($conn,"SHOW TABLES");
	
		while($cRow = mysqli_fetch_array($res))
		{
			$tableList[] = $cRow[0];
		}
		//checking default table
		$defaultTable=array("users","usermeta","comments","options","postmeta","posts","terms","term_relationships","term_taxonomy");
		foreach($defaultTable as $dtable)
		{
			$dbParticularTable=$db['table_prefix'].$dtable;
			if(!in_array($dbParticularTable,$tableList))
			{
				return array("code"=>3,"message"=>"$dbParticularTable is not installed","error_code"=>"WPERR0062");
			}
		}
		return array("code"=>1);
			
	}
	public function getdbparameter($npath)
	{		
		$param  = array();
		try {
			if(!file_exists($npath."/wp-config.php")){
				return array("dbname"=>"","dbuser"=>"","dbpassword"=>"","dbhost"=>"","table_prefix"=>"","error"=>"Not found wp-config file in your domain directory");
			}
			
			$lines = file($npath."/wp-config.php");
			$param['table_prefix'] = "wp_";	
			$p =array();
			foreach ($lines as $line)
			{		
				if(strpos($line,"define")>-1){
					$s = strpos($line,"define");
					$e = strpos($line,");")+2;
					if($s>0){
					   $e = ($e-$s);
					}
					if(strpos($line,"DB_NAME")){						
						array_push($p,substr($line,$s,$e));						
					} else if(strpos($line,"DB_USER")){
						array_push($p,substr($line,$s,$e));
					} else if(strpos($line,"DB_PASSWORD")){
						array_push($p,substr($line,$s,$e));
					} else if(strpos($line,"DB_HOST")){
						array_push($p,substr($line,$s,$e));
					}				
				}
							
				/*if(substr(trim($line),0,6)=="define"){
					$as = explode("'",$line);
					if(count($as)>2){
						if($as[1]=="DB_NAME")
							$param['dbname'] = $as[3];
						else if($as[1] == "DB_USER")
							$param['dbuser'] = $as[3];
						else if($as[1] == "DB_PASSWORD")
							$param['dbpassword'] = $as[3];	
						else if($as[1] == "DB_HOST")
							$param['dbhost'] = $as[3];													
							
					} else {
						$as = explode('"',$line);
						if($as[1]=="DB_NAME")
							$param['dbname'] = $as[3];
						else if($as[1] == "DB_USER")
							$param['dbuser'] = $as[3];
						else if($as[1] == "DB_PASSWORD")
							$param['dbpassword'] = $as[3];	
						else if($as[1] == "DB_HOST")
							$param['dbhost'] = $as[3];																													
					}
				}*/
				
				if(strpos($line,'$table_prefix')>-1){
					$s = strpos($line,'$table_prefix');
					$e = strpos($line,";")+1;
					if($s>0){
						$e = $e-$s;
					}
					$at = substr($line,$s,$e);					
					$as = explode("=",$at);
					if(count($as)==2){
						$as[1] = trim($as[1]);
						$as2 = str_replace(array("'",'"'),"",$as[1]);
						$param['table_prefix'] = str_replace(";","",$as2);						
					}
				}
				
				/*if(substr(trim($line),0,13) == '$table_prefix'){
					$as = explode("=",$line);
					if(count($as)==2){
						$as[1] = trim($as[1]);
						$as2 = str_replace(array("'",'"'),"",$as[1]);
						$param['table_prefix'] = str_replace(";","",$as2);						
					} 
				}*/	
				
				$param['error']="";		
																
			}
			
			foreach($p as $v){
				$as = explode("'",$v);
				if(count($as)>2){
					if($as[1]=="DB_NAME")
						$param['dbname'] = $as[3];
					else if($as[1] == "DB_USER")
						$param['dbuser'] = $as[3];
					else if($as[1] == "DB_PASSWORD")
						$param['dbpassword'] = $as[3];	
					else if($as[1] == "DB_HOST")
						$param['dbhost'] = $as[3];													
						
				} else {
					$as = explode('"',$line);
					if($as[1]=="DB_NAME")
						$param['dbname'] = $as[3];
					else if($as[1] == "DB_USER")
						$param['dbuser'] = $as[3];
					else if($as[1] == "DB_PASSWORD")
						$param['dbpassword'] = $as[3];	
					else if($as[1] == "DB_HOST")
						$param['dbhost'] = $as[3];																													
				}
			}
			
			
			/*$ep = explode("/",$npath);			
			if(count($ep)>2){
				$un = $ep[2];
				
				if(strpos($param['dbname'],"_")>1){
					$dbn = explode("_",$param['dbname']);
															
					if(substr($un,0,8)!=$dbn[0]){
						return array("dbname"=>"","dbuser"=>"","dbpassword"=>"","dbhost"=>"","table_prefix"=>"","error"=>"Database not found");
					}
				} 
									
			} else {
				return array("dbname"=>"","dbuser"=>"","dbpassword"=>"","dbhost"=>"","table_prefix"=>"","error"=>"Database not found");
			}*/
							
		} catch(ErrorException $ex){			
			return array("dbname"=>"","dbuser"=>"","dbpassword"=>"","dbhost"=>"","table_prefix"=>"","error"=>$ex->getMessage());
		}
		return $param;
	}
	
	public function checkmysqlversion($ver,$conn){
		$this_ver = substr(mysqli_get_server_version($conn),0,3);
		
		$av = substr($this_ver,0,1);
		if(substr($this_ver,1,1)==0)
			$av .= ".";
		else
			$av .= ".".substr($this_ver,1,1);
		$av .= substr($this_ver,2,1);
		
		$av = floatval($av);
		$ver = floatval($ver);
		if($av<$ver){
			return false;
		}
		
		return true;
	}
	
	public function getmysqlversion($conn){
		$this_ver = substr(mysqli_get_server_version($conn),0,3);
		
		$av = substr($this_ver,0,1);
		if(substr($this_ver,1,1)==0)
			$av .= ".";
		else
			$av .= ".".substr($this_ver,1,1);
		$av .= substr($this_ver,2,1);
		
		$av = floatval($av);
		if($av>0)
			return $av;
		else
			return 0;		
	}
	
	/*
	 * Get directory and files from subfolder also
	 */
	public function list_files_dirs_recursively($dir) {
		static $alldirs = array();
		$dirs = glob($dir . '/*');
		if (count($dirs) > 0) {
			foreach ($dirs as $d) $alldirs[] = $d;
		}
		foreach ($dirs as $dir) {
			if(is_dir($dir))
				$this->list_files_dirs_recursively($dir);
		}
		return $alldirs;
	}
	
}


/*
 * Get Action 
 */
$request = file_get_contents('php://input');
$input = json_decode($request,true);

$pluginPath= dirname(__FILE__);

$action=$input['action'];

switch($action){
	
	/*
	 * At the time of check url exists or not
	 */
	case 'wp_check':
			
		echo json_encode(array("code"=>"1"));
		break;
		exit();
		
	/*
	 * At the time of install wordpress
	 */
	case 'wp_install': 
		
		$return = array();			
										
		// create object of wp install wordpress handle
		$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
		
		// Call wpclone function to clone the database and update with siteurl
		$return = $wpinstallhandle->wpinstall();
		
		echo json_encode($return);			
		break;	
		exit();
		
		
	/*
	 * At the time of install theme
	*/
	case 'wp_install_theme':
			
		$return = array();			
						
		// create object of wp install wordpress handle
		$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
		
		// Call wpclone function to activate theme
		$return = $wpinstallhandle->wpinstalltheme();
		
		echo json_encode($return);			
		break;	
		exit();	
	case 'wp_install_dragtheme':
			
		$return = array();			
						
		// create object of wp install wordpress handle
		$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
		
		// Call wpclone function to activate theme
		$return = $wpinstallhandle->wpinstallstefantheme();
		
		echo json_encode($return);			
		break;	
		exit();	
			
	/*	
	 * At the time of upload niche
	 */
	case 'wp_upload_niche':		
			
		$return = array();			
					
		// create object of wp install wordpress handle
		$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
		
		// Call wpclone function to activate theme
		$return = $wpinstallhandle->wpuploadniche();
		
		echo json_encode($return);			
		break;	
		exit();						 		
	
	/*
	 * At the time of backup wordpress
	 */
	case 'wp_backup':	
			/*
			 * ----Parameter----
			 * randomnumber 			required	
			 * basedir					required				 
			 */ 
			 			 
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->wpbackup();
			
			echo json_encode($return);			
			break;	
			exit();	
	case 'remove_backupdbfile':	
			/*
			 * ----Parameter----
			 * randomnumber 			required	
			 * basedir					required				 
			 */ 
			 			 
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->removebackupdbfile();
			
			echo json_encode($return);			
			break;	
			exit();	
				
			
	case 'backupfile':	
			/*
			 * ----Parameter----
			 * randomnumber 			required	
			 * basedir					required				 
			 */ 
			 			 
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->backupfile();
			
			echo json_encode($return);			
			break;	
			exit();		
	case 'readdbfile':	
			/*
			 * ----Parameter----
			 * randomnumber 			required	
			 * basedir					required				 
			 */ 
			 			 
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->read_dbfile();
			
			echo json_encode($return);			
			break;	
			exit();		
	case 'getdetailsfromfile':	
			/*
			 * ----Parameter----
			 * randomnumber 			required	
			 * basedir					required				 
			 */ 
			 			 
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->getdetails_fromfile();
			
			echo json_encode($return);			
			break;	
			exit();	
	case 'wp_database':
	
			$return = array();			
			
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->wpdatabase();
			
			echo json_encode($return);			
			break;	
			exit();		
			
	/*
	 * At the time clone wordpress
	 */
	 case 'wp_clone':	 			
			
			$return = array();			
										
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->wpclone();
			
			echo json_encode($return);			
			break;	
			exit();		
	/*
	 * At the time restore wordpress on different domain
	 */
	 case 'wp_restore':	 			
			/*
			 * ----Parameter----
			 * basedir					required					 			 
			 * domain					required
			 */ 
			
			$return = array();			
										
			// create object of wp install wordpress handle
			$wpinstallhandle = new InstallWordpressHandle($input['parameter']);			
			
			// Call wpclone function to clone the database and update with siteurl
			$return = $wpinstallhandle->wprestore();
			
			echo json_encode($return);			
			break;	
			exit();				 
			/*
			 * check that default table exist or not
			*   */
	case 'check_wordpress_default_table':
				 
				$wpinstallhandle = new InstallWordpressHandle(array());
				 
				$return =$wpinstallhandle->findWordpressTable();
				 
				echo json_encode($return);
				break;
				exit();
				
	case 'wpgateway_zipcreate':
				 
				$wpinstallhandle = new InstallWordpressHandle($input['parameter']);
				 
				$return =$wpinstallhandle->create_zip();
				 
				echo json_encode($return);
				break;
				exit();
	
	case 'wpgateway_addinzip':
				 
				$wpinstallhandle = new InstallWordpressHandle($input['parameter']);
				 
				$return =$wpinstallhandle->addLargeFileInZip();
				 
				echo json_encode($return);
				break;
				exit();
	
	case 'wpgateway_checkzipsize':
				 
				$wpinstallhandle = new InstallWordpressHandle($input['parameter']);
				 
				$return =$wpinstallhandle->checkBackupZipSize();
				 
				echo json_encode($return);
				break;
				exit();
				
	case 'wpgateway_bigsizefile':
				 
				$wpinstallhandle = new InstallWordpressHandle($input['parameter']);
				 
				$return =$wpinstallhandle->getbigsizefile();
				 
				echo json_encode($return);
				break;
				exit();
				
	/** 
	 * function used to update the admin password
	 **/
	case 'wp_update_credentials':
		
		$parameter=$input['parameter'];
		include_once("../../../wp-load.php");
		global $wpdb;
		$table_name = $wpdb->prefix . "users";
		$updateData=array(
				"user_login"=>$parameter['admin_username'],
				"user_pass"=>md5($parameter['admin_password']),
				"user_email"=>$parameter['admin_email']
		);
		$wpdb->update($table_name,$updateData, array('ID' =>1));
		echo json_encode(array("code"=>"1"));
		break;			
			
	/*
	 * At the time of not define any action
	 */		
	default:
		echo json_encode(array("code"=>"3","message"=>"Action not defined $action","error_code"=>"WPERR0062"));
			break;
}

die();
