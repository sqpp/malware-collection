<?php
/* This script (re)creates the orm files required for Database.
 */
$dbc_myClasses = array();

//echo "Removing old PHP orms...\n";
removeOrms_dbc($dbc_ormDir);

//echo "Removing old Javascript classes...\n";
removeOrms_dbc($dbc_jsDbDir);

//echo "Reading attributes...\n";
readMyClasses_dbc($dbc_classesDir, 'readAttributes_dbc');

//echo "Reading variables...\n";
readMyClasses_dbc($dbc_classesDir, 'readVariables_dbc');

//echo "Writing orm files...\n";
writeOrms_dbc();

//echo "Writing Javascript classes...\n";
writeJsClasses_dbc();

//echo "Writing orm.inc.php...\n";
writeInc_dbc();

//echo "Writing _create.php...\n";
writeCreate_dbc();

echo "Done.\n";

function removeOrms_dbc($dir) {
  $dh = opendir($dir);
  if (!$dh) {
    echo "ERROR: Couldn't open directory: $dir\n";
    return;
  }
  while (($file = readdir($dh)) !== false) {
    $name = "$dir/$file";
    if (is_dir($name)) {
      continue;
    }
    unlink($name);
  }
  closedir($dh);
}

function readMyClasses_dbc($dir, $func) {
  global $dbc_ormDir;

  $dh = opendir($dir);
  if (!$dh) {
    echo "ERROR: Couldn't open directory: $dir\n";
    return;
  }
  while (($file = readdir($dh)) !== false) {
    if ($file[0] == '.') {
      continue;
    }
    $name = "$dir/$file";
    if (is_dir($name)) {
      if ($name != $dbc_ormDir) {
        echo " -> $name\n";
        readMyClasses_dbc($name, $func);
      }
      continue;
    } else {
      $fp = file_get_contents($name);
      if ($fp === false) {
        echo "ERROR: Failed to read: $name\n";
      } else {
        call_user_func($func, $name, $fp);
      }
    }
  }
  closedir($dh);
}

function readAttributes_dbc($file, $fp) {
  global $dbc_myClasses;
  $matches = array();
  if (preg_match_all('/orm (.*)/m', $fp, $matches)) {
    $dbc_myClasses[$file]['attr'] = $matches[1];
  }
}

function readVariables_dbc($file, $fp) {
  global $dbc_myClasses;
  $matches = array();
  if (preg_match_all('/public \$(.*);/m', $fp, $matches)) {
    $dbc_myClasses[$file]['var'] = $matches[1];
  }
}

function writeOrms_dbc() {
  global $dbc_myClasses;
  
  foreach ($dbc_myClasses as $name => &$class) {
    _writeOrm_dbc($name, $class['attr'], $class['var']);
  }
}

function _writeOrm_dbc($file, $attributes, $variables) {
  global $dbc_ormDir;
  
  $name = basename($file);
  $name = substr($name, 0, stripos($name, '.'));
  $file = "$dbc_ormDir/ORM$name.class.php";
  $fp = fopen($file, 'wt');
  if ($fp === false) {
    echo "ERROR: Failed to write: $file\n";
  } else {
    fprintf($fp, "<?php\n");
    fprintf($fp, "class ORM%s {\n", $name);
    fprintf($fp, "  public function toObj(\$args) {\n");
    fprintf($fp, "    \$obj = new stdClass();\n");
    _toObj_dbc($fp, $attributes, $variables);
    fprintf($fp, "    return \$obj;\n");
    fprintf($fp, "  }\n");
    fprintf($fp, "}\n");
    fprintf($fp, "?>\n");
    fclose($fp);
  }
}

function _toObj_dbc($fp, $attributes, $variables) {
  foreach ($attributes as $key => &$attribute) {
    $variable = $variables[$key];
    
    $variable = trim($variable);
    $attribute = trim($attribute);
    
    $contents = explode(' ', $attribute);
    $default = 0;
    if (stripos($contents[0], 'char') !== false || stripos($contents[0], 'clob') !== false || stripos($contents[0], 'blob') !== false) {
      $default = '\'\'';
    }
    fprintf($fp, "    if (isset(\$args->%s)) {\n      \$obj->%s =  \$args->%s;\n    }\n", $variable, $variable, $variable);
  }
}

function writeJsClasses_dbc() {
  global $dbc_myClasses;
  
  foreach ($dbc_myClasses as $name => &$class) {
    _writeJsClass_dbc($name, $class['attr'], $class['var']);
  }
}

function _writeJsClass_dbc($file, $attributes, $variables) {
  global $dbc_jsDbDir;
  $name = basename($file);
  $name = substr($name, 0, stripos($name, '.'));
  $file = "$dbc_jsDbDir/" . strtolower($name) . '.class.tpl';
  $fp = fopen($file, 'wt');
  if ($fp === false) {
    echo "ERROR: Failed to write: $file\n";
  } else {
    fprintf($fp, "function %s() {\n", $name);
    fprintf($fp, "};\n");
    fprintf($fp, "\n");
    fprintf($fp, "%s.instance = function() {\n", $name);
    foreach ($attributes as $key => &$attribute) {
      $variable = $variables[$key];
      $variable = trim($variable);
      $attribute = trim($attribute);
      $default = 'null';
      $contents = explode(' ', $attribute);
      if (stripos($contents[0], 'char') !== false || stripos($contents[0], 'text') !== false) {
          $default = '\'\'';
        } else if (stripos($contents[0], 'date') !== false) {
          $default = 'parseInt(new Date().getTime() / 1000, 10) ';
        } else {
          $default = 0;
        }
      if ($variable == 'track_id') {
        $default = 'MiscUtils.unique()';
      }
      if ($key == 0) {
        fprintf($fp, "  return { %s: %s%s\n", $variable, $default, ($key == (count($attributes) - 1)) ? '' : ',');
      } else {
        fprintf($fp, "           %s: %s%s\n", $variable, $default, ($key == (count($attributes) - 1)) ? '' : ',');
      }
    }
    fprintf($fp, "         }\n");
    fprintf($fp, "};\n");
    fclose($fp);
  }
}

function writeInc_dbc() {
  global $dbc_incFile, $dbc_myClasses;
  $fp = fopen($dbc_incFile, 'wt');
  if ($fp === false) {
    echo "ERROR: Failed to write: $dbc_incFile\n";
  } else {
    fprintf($fp, "<?php\n");
    fprintf($fp, "function classToOrm(\$class = NULL) {\n");
    fprintf($fp, "  \$class = strtolower(\$class);\n");
    fprintf($fp, "  switch (\$class) {\n");
    $files = array_keys($dbc_myClasses);
    sort($files);
    foreach ($files as &$file) {
      $name = basename($file);
      $name = substr($name, 0, stripos($name, '.'));
      fprintf($fp, "    case '%s':\n", strtolower($name));
      fprintf($fp, "      require_once dirname(__FILE__) . '/ORM%s.class.php';\n", $name);
      fprintf($fp, "      return new ORM%s();\n", $name);
    }
    fprintf($fp, "    default:\n");
    fprintf($fp, "      return NULL;\n");
    fprintf($fp, "  }\n");
    fprintf($fp, "  return NULL;\n");
    fprintf($fp, "}\n");
    fprintf($fp, "?>\n");
    fclose($fp);
  }
}

function writeCreate_dbc() {
  global $dbc_createFile, $dbc_myClasses;
  $fp = fopen($dbc_createFile, 'wt');
  if ($fp === false) {
    echo "ERROR: Failed to write: $dbc_createFile\n";
  } else {
    fprintf($fp, "<?php\n");
    fprintf($fp, "require_once dirname(__FILE__) . '/../../common.inc.php';\n");
    fprintf($fp, "try {\n");
    fprintf($fp, "  \$hostname = DB_HOST;\n");
    fprintf($fp, "  \$username = DB_LOGIN;\n");
    fprintf($fp, "  \$password = DB_PASS;\n");
    fprintf($fp, "  \$dbname = DB_NAME;\n");
    fprintf($fp, "  \$myPdo = new PDO ('mysql:host=' . \$hostname, \$username, \$password);\n");
    fprintf($fp, "  \$myPdo->exec('USE ' . \$dbname);\n");
    fprintf($fp, "  \$myPdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n");
    foreach ($dbc_myClasses as $file => &$class) {
    	$name = basename($file);
      $name = substr($name, 0, stripos($name, '.'));
      fprintf($fp, "  \$sql = \"CREATE TABLE IF NOT EXISTS `%s`(\n", $name);
      fprintf($fp, "           `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,\n");
      foreach ($class['attr'] as $key => &$attribute) {
        $variable = $class['var'][$key];
        $variable = trim($variable);
        $attribute = trim($attribute);
        $seprator = ($key == (count($class['attr']) - 1)) ? '' : ',';
        fprintf($fp, "           `%s` %s%s\n", $variable, $attribute, $seprator);
      }
      fprintf($fp, "          ) ENGINE=MYISAM;\";\n");
      fprintf($fp, "  \$myPdo->exec(\$sql);\n");
    }
    fprintf($fp, "  echo 'Completed Successfully.';\n");
    fprintf($fp, "} catch (PDOException \$e) {\n");
    fprintf($fp, "  echo ERROR_SIGN . \$e->getMessage();\n");
    fprintf($fp, "}\n");
    fprintf($fp, "?>\n");
    fclose($fp);
  }
}
?>
