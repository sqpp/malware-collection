<?php
ini_set('display_errors', 0); ini_set('display_startup_errors', 0); define('AM_VERSION', 87); define('AM_UPD', '2021-03-01 06:12:51'); define('USER_IDENTIFIER', '6iV9Gphjb8CQEYmugtzHMOAmL6NMEJ4H'); define('AGENT_KEY', 'bPTjAxkFSdlvVJEGBYMj2Ujm8cAYNTN3'); define('PUBLIC_KEY_ENCODED', 'unfKXPROYYMV6o3rnFmbFfanMxIUWztvJVnJcoLH4LM='); define('PUBLIC_KEY', base64_decode(PUBLIC_KEY_ENCODED)); if (!defined('TOTEM_MBSTR')) { define('TOTEM_MBSTR', extension_loaded('mbstring')); } define('DEBUGAM', FALSE); define('CHECKSIGNATURE', TRUE); define('FILESTUB', '<?php exit(); ?>'); define('CACHE_DIR', getStorage(true)); define('CONFIG_PATH', configPath(CACHE_DIR)); define('LOGS_FILE', dirname(__FILE__) . '/logs_' . wtam_substr(basename(__FILE__), 0, 16) . '.txt'); define('WRITE_LOGS', getWriteLogs(CONFIG_PATH, FALSE)); define('STOCK_DIR', dirname(CACHE_DIR) . '/.stock' . basename(CACHE_DIR)); define('WTWPP', wt_check_wpp()); define('DATE_FORMAT', 'Y-m-d'); define('SESSIONS_DAYS', 7); $sp16f5bb = getData($sp2c28f4 = false, $sp4366b1 = true); $speaa945 = '.wtotem_av_' . wtam_substr(basename(__FILE__), 0, 12); define('AV_CACHE_DIR', wt_check_dir(dirname(CACHE_DIR), $speaa945)); if (!function_exists('wt_check_sqlite')) { function wt_check_sqlite() { $spb36295 = false; if (class_exists('SQLite3')) { $spb36295 = true; } return $spb36295; } } define('WT_SQLITE', wt_check_sqlite()); function configPath($spf5796f = CACHE_DIR) { return dirname($spf5796f) . substr(basename($spf5796f), 0, 10) . '_conf.php'; } function getWriteLogs($spf5796f = CONFIG_PATH, $sp951c24 = FALSE) { if (file_exists($spf5796f)) { $sp6bbc7a = file_get_contents($spf5796f); if ($sp6bbc7a === FILESTUB . '1') { return true; } } return $sp951c24; } function wt_check_wpp() { $sp9fd6ef = dirname(__FILE__) . '/wp-content/plugins/wt-security/generate.php'; if (@file_exists($sp9fd6ef)) { if (@is_readable($sp9fd6ef)) { if ($sp6c22ad = @file_get_contents($sp9fd6ef)) { if ($sp6c22ad === FILESTUB . basename(__FILE__)) { wt_logs('WTWPP', 'this agent'); return true; } else { wt_logs('WTWPP', 'another agent'); } } else { wt_logs('WTWPP', 'not received'); } } else { wt_logs('WTWPP', 'not readable'); } } else { wt_logs('WTWPP', 'not found'); } return false; } function wtam_strlen($spd9b91d) { if (TOTEM_MBSTR) { return mb_strlen($spd9b91d, 'ASCII'); } else { return strlen($spd9b91d); } } function wtam_substr($spd9b91d, $sp3b2bd8, $sp0789ad = NULL) { if ($sp0789ad === NULL) { $sp0789ad = wtam_strlen($spd9b91d); } if (TOTEM_MBSTR) { return mb_substr($spd9b91d, $sp3b2bd8, $sp0789ad, 'ASCII'); } else { return substr($spd9b91d, $sp3b2bd8, $sp0789ad); } } function wtam_stripos($sp0775b7, $sp7c2f5e, $sp4bee5b = 0) { if (TOTEM_MBSTR) { return mb_stripos($sp0775b7, $sp7c2f5e, $sp4bee5b, 'ASCII'); } else { return stripos($sp0775b7, $sp7c2f5e, $sp4bee5b); } } function wtam_strtolower($spd9b91d) { if (TOTEM_MBSTR) { return mb_strtolower($spd9b91d, 'ASCII'); } else { return strtolower($spd9b91d); } } function wt_logs($spf6846f = '*', $spa5a6a5 = '#') { $spaf9cd9 = 'xx '; if (defined('WTSN')) { $spaf9cd9 = WTSN; } if (WRITE_LOGS === true) { $spbeed09 = LOGS_FILE; $spbbfff6 = date('[Y-m-d_H:i:s]') . ' ' . $spaf9cd9 . $spa5a6a5 . ' = ' . print_r($spf6846f, true) . PHP_EOL; file_put_contents($spbeed09, $spbbfff6, FILE_APPEND); } } function updateData($spbbfff6 = array(), $spffd246 = false) { $sp3d6f4f = getData($spffd246, $sp4366b1 = true); $spe2b620 = array_merge($sp3d6f4f, $spbbfff6); return saveData($spe2b620, $spffd246); } function saveData($spbbfff6 = array(), $spffd246 = false) { if (is_array($spbbfff6)) { $spbbfff6 = json_encode($spbbfff6); } if ($spffd246 === false) { $spffd246 = CACHE_DIR; } wt_logs($spffd246, '$storage'); if (file_put_contents($spffd246, FILESTUB . $spbbfff6, LOCK_EX) !== false) { return true; } else { return false; } } function getData($spf5796f = false, $sp4366b1 = true) { if ($spf5796f === false) { $spf5796f = CACHE_DIR; } wt_logs($spf5796f, '$path2'); $sp8ace1e = @file_get_contents($spf5796f); if ($sp8ace1e !== FALSE) { $sp8ace1e = wtam_substr($sp8ace1e, wtam_strlen(FILESTUB)); wt_logs($sp8ace1e, 'getData_storege'); if ($sp4366b1 === true) { $sp8ace1e = json_decode($sp8ace1e, true); } } return $sp8ace1e; } function getStorage($sp2637aa = true) { $sp2f4470 = array(); $spece6cd = '.'; if (DEBUGAM === true) { $spece6cd .= 'v56'; } $sp2a3aa3 = $spece6cd . basename($_SERVER['SCRIPT_NAME']) . ''; $sp97040d = dirname(__FILE__) . '/' . $sp2a3aa3; $sp493276 = session_save_path(); if (wtam_strlen($sp493276) > 0 && wtam_substr($sp493276, -1) !== '/') { $sp493276 .= '/'; } array_push($sp2f4470, $sp493276 . $sp2a3aa3); array_push($sp2f4470, $sp97040d); $spda18c3 = sys_get_temp_dir(); if (wtam_strlen($spda18c3) > 0 && wtam_substr($spda18c3, -1) !== '/') { $spda18c3 .= '/'; } if ($sp493276 === $spda18c3) { $sp2f4470 = array($sp2a3aa3, $sp493276 . $sp2a3aa3); } else { array_push($sp2f4470, $spda18c3 . $sp2a3aa3); } $sp8ace1e = array('status' => 0, 'path' => $sp97040d); foreach ($sp2f4470 as $sp800a4d => $spbeed09) { if (@file_exists($spbeed09) === true) { if (@is_readable($spbeed09) === true && @is_writable($spbeed09)) { $sp8ace1e['status'] = 1; $sp8ace1e['path'] = $spbeed09; if ($sp2637aa === true) { return $sp8ace1e['path']; } return $sp8ace1e; } else { $sp8ace1e['status'] = -1; $sp8ace1e['path'] = $spbeed09; if ($sp2637aa === true) { return $sp8ace1e['path']; } return $sp8ace1e; } } else { if (@file_put_contents($spbeed09, 'helloworld', LOCK_EX) !== false) { @unlink($spbeed09); $sp8ace1e['status'] = 0; $sp8ace1e['path'] = $spbeed09; if ($sp2637aa === true) { return $sp8ace1e['path']; } return $sp8ace1e; } else { $sp8ace1e['status'] = -2; $sp8ace1e['path'] = $spbeed09; } } } if ($sp2637aa === true) { return $sp8ace1e['path']; } return $sp8ace1e; } function deleteStorage() { @unlink(STOCK_DIR); @unlink(CACHE_DIR); } function deleteAVStorage($spc3ed07 = AV_CACHE_DIR) { if ($spc3ed07) { $sp05d858 = substr(USER_IDENTIFIER, 0, 10); $spfe53fb = $sp05d858 . '_*.*'; $sp98139c = $spc3ed07 . $spfe53fb; $spb0cad0 = glob($sp98139c, GLOB_NOSORT); wt_logs($spb0cad0, '$glob'); if (is_array($spb0cad0)) { foreach ($spb0cad0 as $spbeed09) { wt_logs($spbeed09, 'Del[av] $file'); @unlink($spbeed09); } } wt_logs($spc3ed07, 'Del[av] $dir'); @unlink($spc3ed07); } } function deleteWAFStorage($spc3ed07 = false, $sp184f26 = false, $sp2dab6b = true) { if ($sp184f26) { $spfe53fb = 'waf' . substr($sp184f26, 0, 12) . '_*.*'; $sp98139c = $spc3ed07 . $spfe53fb; $spb0cad0 = glob($sp98139c, GLOB_NOSORT); wt_logs($spb0cad0, '$glob'); if (is_array($spb0cad0)) { foreach ($spb0cad0 as $spbeed09) { wt_logs($spbeed09, 'Del $file'); @unlink($spbeed09); } } if ($sp2dab6b === true) { $sp2dab6b = $_SERVER['DOCUMENT_ROOT'] . '/wp-content/uploads/'; $speaa945 = '.wtotem_waf_' . substr($sp184f26, 0, 12); $spc3ed07 = $sp2dab6b . $speaa945 . '/'; $sp98139c = $spc3ed07 . $spfe53fb; wt_logs($sp98139c, '$for_glob'); $spb0cad0 = glob($sp98139c, GLOB_NOSORT); wt_logs($spb0cad0, '$glob'); if (is_array($spb0cad0)) { foreach ($spb0cad0 as $spbeed09) { wt_logs($spbeed09, 'Del $file'); @unlink($spbeed09); } } wt_logs($spc3ed07, 'Del wp $dir'); @unlink($spc3ed07); } wt_logs($spc3ed07, 'Del $dir'); @unlink($spc3ed07); } } function checkSessions($sp16f5bb = array()) { wt_logs($sp16f5bb, '$storage_data (start)'); $spff0ee0 = date(DATE_FORMAT); wt_logs($spff0ee0, '$current_date'); $sp866079 = 0; wt_logs(SESSIONS_DAYS, 'SESSIONS_DAYS'); foreach ($sp16f5bb as $spad7c4b => $spf6846f) { wt_logs($spad7c4b, '$key'); $sp56f5ff = array('am', 'av', 'waf'); if (!in_array($spad7c4b, $sp56f5ff)) { if (isset($spf6846f['date'])) { wt_logs($spf6846f['date'], '$value[date]'); $spb75f8c = daysBetween($spf6846f['date'], $spff0ee0); wt_logs($spb75f8c, '$days'); if ($spb75f8c > SESSIONS_DAYS) { unset($sp16f5bb[$spad7c4b]); wt_logs($spad7c4b, 'remove: ' . $spad7c4b); $sp866079++; } } else { $sp16f5bb[$spad7c4b]['date'] = $spff0ee0; } } } wt_logs($sp866079, '$count'); return $sp16f5bb; } function wt_handle_error($sp540d85 = 'error text', $sp7c8f4f = 0) { $sp8ace1e = json_encode(array('version' => AM_VERSION, 'error' => $sp7c8f4f, 'error_text' => $sp540d85)); return $sp8ace1e; } function sign_verify($sp9d08d6, $sp260a19, $sped4015) { return Salt::sign_verify($sp9d08d6, $sp260a19, $sped4015); } function decrypt_chacha20($sp05f76a, $spad7c4b = null, $spfe5171 = null) { $sp8189ad = new Cipher(); $sp46b86d = $sp8189ad->init($spad7c4b, $spfe5171); $spc20010 = $sp8189ad->decrypt($sp46b86d, $sp05f76a); return $spc20010; } function encrypt_chacha20($sp05f76a, $spad7c4b = null, $spfe5171 = null) { return decrypt_chacha20($sp05f76a, $spad7c4b, $spfe5171); } if (!function_exists('getallheaders')) { function getallheaders() { if (!is_array($_SERVER)) { return array(); } $spe7e97c = array(); foreach ($_SERVER as $sp2a3aa3 => $spf6846f) { $spe7094c = wtam_substr($sp2a3aa3, 0, 5); if ($spe7094c === 'HTTP_') { $sp764505 = wtam_substr($sp2a3aa3, 5); $spe7e97c[str_replace(' ', '-', ucwords(wtam_strtolower(str_replace('_', ' ', $sp764505))))] = $spf6846f; } } return $spe7e97c; } } class Salt { const salsa20_KEY = 32; const salsa20_NONCE = 8; const salsa20_INPUT = 16; const salsa20_OUTPUT = 64; const salsa20_CONST = 16; const hsalsa20_KEY = 32; const hsalsa20_INPUT = 16; const hsalsa20_OUTPUT = 32; const hsalsa20_CONST = 16; const xsalsa20_KEY = 32; const xsalsa20_NONCE = 24; const stream_salsa20_KEY = 32; const stream_salsa20_NONCE = 24; const poly1305_KEY = 32; const poly1305_OUTPUT = 16; const onetimeauth_KEY = 32; const onetimeauth_OUTPUT = 16; const secretbox_KEY = 32; const secretbox_NONCE = 24; const secretbox_ZERO = 32; const secretbox_BOXZERO = 16; const scalarmult_INPUT = 32; const scalarmult_SCALAR = 32; const box_PRIVATEKEY = 32; const box_PUBLICKEY = 32; const box_NONCE = 24; const sign_PRIVATEKEY = 64; const sign_PUBLICKEY = 32; const sign_SIGNATURE = 64; protected static $instance; public static function instance() { if (!isset(static::$instance)) { static::$instance = new Salt(); } return static::$instance; } public static function randombytes($sp0789ad = 32) { $sp41cbaa = ''; if (@is_readable('/dev/urandom')) { $sp499c8e = true; if ($sp499c8e === true) { $sp499c8e = @fopen('/dev/urandom', 'rb'); } if ($sp499c8e !== true && $sp499c8e !== false) { $sp41cbaa = fread($sp499c8e, $sp0789ad); } } else { if (function_exists('mcrypt_create_iv')) { $sp41cbaa = mcrypt_create_iv($sp0789ad, MCRYPT_DEV_URANDOM); } else { if (function_exists('openssl_random_pseudo_bytes')) { $sp41cbaa = openssl_random_pseudo_bytes($sp0789ad); } } } if (!$sp41cbaa || wtam_strlen($sp41cbaa) !== $sp0789ad) { throw new SaltException('Unable to generate randombytes'); } return $sp41cbaa; } public static function equal($sp94473b, $spf56e7d) { $sp74a46b = count($sp94473b); if ($sp74a46b !== count($spf56e7d)) { return false; } $spf50b6f = 0; for ($sp043126 = 0; $sp043126 < $sp74a46b; $sp043126++) { $spf50b6f |= $sp94473b[$sp043126] ^ $spf56e7d[$sp043126]; } $spf50b6f = $spf50b6f - 1 >> 31; return ($spf50b6f & 1) === 1; } public function crypto_core_salsa20($sp4f9b23, $spad7c4b, $sp2d24f8) { $sp0e5d27 = new FieldElement(32); Salsa20::instance()->core($sp0e5d27, $sp4f9b23, $spad7c4b, $sp2d24f8); return $sp0e5d27; } public function crypto_core_hsalsa20($sp4f9b23, $spad7c4b, $sp2d24f8) { $sp0e5d27 = new FieldElement(32); Salsa20::instance()->core($sp0e5d27, $sp4f9b23, $spad7c4b, $sp2d24f8, false); return $sp0e5d27; } public function crypto_onetimeauth($sp4f9b23, $sp0789ad, $spad7c4b) { $spd67ee8 = new FieldElement(16); Poly1305::auth($spd67ee8, $sp4f9b23, $sp0789ad, $spad7c4b); return $spd67ee8; } public function crypto_onetimeauth_verify($spd67ee8, $sp4f9b23, $sp0789ad, $spad7c4b) { $sp55f4a4 = $this->crypto_onetimeauth($sp4f9b23, $sp0789ad, $spad7c4b); return Salt::equal($sp55f4a4, $spd67ee8->slice(0, 16)); } public function crypto_stream_salsa20($sp0789ad, $spfe5171, $spad7c4b) { $sp0e5d27 = new FieldElement($sp0789ad); Salsa20::instance()->stream($sp0e5d27, false, $sp0789ad, $spfe5171, $spad7c4b); return $sp0e5d27; } public function crypto_stream_salsa20_xor($sp4f9b23, $sp0789ad, $spfe5171, $spad7c4b) { $sp0e5d27 = new FieldElement($sp0789ad); Salsa20::instance()->stream($sp0e5d27, $sp4f9b23, $sp0789ad, $spfe5171, $spad7c4b); return $sp0e5d27; } public function crypto_stream_xsalsa20($sp0789ad, $spfe5171, $spad7c4b) { $sp26496d = $this->crypto_core_hsalsa20($spfe5171, $spad7c4b, Salsa20::$sigma); return $this->crypto_stream_salsa20($sp0789ad, $spfe5171->slice(16), $sp26496d); } public function crypto_stream_xsalsa20_xor($sp4f9b23, $sp0789ad, $spfe5171, $spad7c4b) { $sp26496d = $this->crypto_core_hsalsa20($spfe5171, $spad7c4b, Salsa20::$sigma); return $this->crypto_stream_salsa20_xor($sp4f9b23, $sp0789ad, $spfe5171->slice(16), $sp26496d); } public function crypto_stream($sp0789ad, $spfe5171, $spad7c4b) { return $this->crypo_stream_xsalsa20($sp0789ad, $spfe5171, $spad7c4b); } public function crypto_stream_xor($sp4f9b23, $sp0789ad, $spfe5171, $spad7c4b) { return $this->crypo_stream_xsalsa20_xor($sp4f9b23, $sp0789ad, $spfe5171, $spad7c4b); } public function crypto_secretbox($spe4aba0, $sp0789ad, $spfe5171, $spad7c4b) { if ($sp0789ad < 32) { return false; } $sp0e5d27 = $this->crypto_stream_xsalsa20_xor($spe4aba0, $sp0789ad, $spfe5171, $spad7c4b); $spd67ee8 = $this->crypto_onetimeauth($sp0e5d27->slice(32), $sp0789ad - 32, $sp0e5d27); for ($sp043126 = 0; $sp043126 < 16; ++$sp043126) { $sp0e5d27[$sp043126] = 0; $sp0e5d27[$sp043126 + 16] = $spd67ee8[$sp043126]; } return $sp0e5d27; } public function crypto_secretbox_open($sp05f76a, $sp0789ad, $spfe5171, $spad7c4b) { if ($sp0789ad < 32) { return false; } $sp26496d = $this->crypto_stream_xsalsa20(32, $spfe5171, $spad7c4b); if (!$this->crypto_onetimeauth_verify($sp05f76a->slice(16), $sp05f76a->slice(32), $sp0789ad - 32, $sp26496d)) { return false; } $sp0e5d27 = $this->crypto_stream_xsalsa20_xor($sp05f76a, $sp0789ad, $spfe5171, $spad7c4b); for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { $sp0e5d27[$sp043126] = 0; } return $sp0e5d27; } public function crypto_scalarmult($sp4f9b23, $sp5ea7fb) { return FieldElement::fromArray(Curve25519::instance()->scalarmult($sp4f9b23, $sp5ea7fb)->toArray()); } public function crypto_scalarmult_base($sp4f9b23) { return FieldElement::fromArray(Curve25519::instance()->scalarbase($sp4f9b23)->toArray()); } public function crypto_box_keypair() { $sp15a955 = FieldElement::fromString(Salt::randombytes()); $sp8f081d = $this->crypto_scalarmult_base($sp15a955); return array($sp15a955, $sp8f081d); } public function crypto_box_beforenm($sped4015, $sp26a689) { $spadb990 = $this->crypto_scalarmult($sp26a689, $sped4015); return $this->crypto_core_hsalsa20(new FieldElement(16), $spadb990, Salsa20::$sigma); } public function crypto_box_afternm($sp5d634f, $sp0789ad, $spfe5171, $spad7c4b) { return $this->crypto_secretbox($sp5d634f, $sp0789ad, $spfe5171, $spad7c4b); } public function crypto_box($sp5d634f, $sp0789ad, $spfe5171, $sped4015, $sp26a689) { $sp26496d = $this->crypto_box_beforenm($sped4015, $sp26a689); $sp1bdca5 = count($sp5d634f); $sp4f9b23 = new FieldElement($sp1bdca5 + 32); for ($sp043126 = 32; $sp043126--;) { $sp4f9b23[$sp043126] = 0; } for ($sp043126 = 0; $sp043126 < $sp1bdca5; ++$sp043126) { $sp4f9b23[$sp043126 + 32] = $sp5d634f[$sp043126]; } return $this->crypto_box_afternm($sp4f9b23, $sp0789ad + 32, $spfe5171, $sp26496d); } public function crypto_box_open_afternm($sp05f76a, $sp0789ad, $spfe5171, $spad7c4b) { return $this->crypto_secretbox_open($sp05f76a, $sp0789ad, $spfe5171, $spad7c4b); } public function crypto_box_open($sp05f76a, $sp0789ad, $spfe5171, $sped4015, $sp26a689) { $sp26496d = $this->crypto_box_beforenm($sped4015, $sp26a689); return $this->crypto_box_open_afternm($sp05f76a, $sp0789ad, $spfe5171, $sp26496d); } public function crypto_sign_keypair($spf83a6a = null) { if ($spf83a6a === null) { $sp15a955 = FieldElement::fromString(Salt::randombytes()); } else { $sp15a955 = Salt::decodeInput($spf83a6a); if ($sp15a955->count() !== Salt::sign_PUBLICKEY) { throw new SaltException('crypto_sign_keypair: seed must be 32 byte'); } } $sp0e6be4 = hash('sha512', $sp15a955->toString(), true); $sp4c7cfc = FieldElement::fromString($sp0e6be4); $sp4c7cfc[0] &= 248; $sp4c7cfc[31] &= 63; $sp4c7cfc[31] |= 64; $spb467b5 = Ed25519::instance(); $spe56c2e = new GeExtended(); $sp8f081d = new FieldElement(32); $spb467b5->geScalarmultBase($spe56c2e, $sp4c7cfc); $spb467b5->GeExtendedtoBytes($sp8f081d, $spe56c2e); $sp15a955->setSize(64); $sp15a955->copy($sp8f081d, 32, 32); return array($sp15a955, $sp8f081d); } public function crypto_sign($sp9d08d6, $sp9b3945, $sp405cd6) { $sp15a955 = Salt::decodeInput($sp405cd6); if ($sp15a955->count() !== Salt::sign_PRIVATEKEY) { throw new SaltException('crypto_sign: private key must be 64 byte'); } $sp8f081d = $sp15a955->slice(32, 32); $sp0e6be4 = hash('sha512', $sp15a955->slice(0, 32)->toString(), true); $sp4c7cfc = FieldElement::fromString($sp0e6be4); $sp4c7cfc[0] &= 248; $sp4c7cfc[31] &= 63; $sp4c7cfc[31] |= 64; $sp040516 = Salt::decodeInput($sp9d08d6); $sp292950 = new FieldElement($sp9b3945 + 64); $sp292950->copy($sp040516, $sp9b3945, 64); $sp292950->copy($sp4c7cfc, 32, 32, 32); $sp60d8b5 = hash('sha512', $sp292950->slice(32, $sp9b3945 + 32)->toString(), true); $spfe5171 = FieldElement::fromString($sp60d8b5); $sp292950->copy($sp8f081d, 32, 32); $spb467b5 = Ed25519::instance(); $spabd5a1 = new GeExtended(); $spb467b5->scReduce($spfe5171); $spb467b5->geScalarmultBase($spabd5a1, $spfe5171); $spb467b5->GeExtendedtoBytes($sp292950, $spabd5a1); $sp3a4980 = hash('sha512', $sp292950->toString(), true); $spb1c841 = FieldElement::fromString($sp3a4980); $spb467b5->scReduce($spb1c841); $spa5cfe7 = new FieldElement(32); $spb467b5->scMulAdd($spa5cfe7, $spb1c841, $sp4c7cfc, $spfe5171); $sp292950->copy($spa5cfe7, 32, 32); return $sp292950; } public function crypto_sign_open($spe6bf8c, $spf2e0d6, $sped4015) { $sp292950 = Salt::decodeInput($spe6bf8c); $sp8f081d = Salt::decodeInput($sped4015); if ($spf2e0d6 < 64) { return false; } if ($sp292950[63] & 224) { return false; } $spb467b5 = Ed25519::instance(); $spe56c2e = new GeExtended(); if (!$spb467b5->geFromBytesNegateVartime($spe56c2e, $sp8f081d)) { return false; } $sp3da250 = 0; for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { $sp3da250 |= $sp8f081d[$sp043126]; } if ($sp3da250 === 0) { return false; } $sp07abef = hash_init('sha512'); hash_update($sp07abef, $sp292950->slice(0, 32)->toString()); hash_update($sp07abef, $sp8f081d->toString()); hash_update($sp07abef, $sp292950->slice(64, $spf2e0d6 - 64)->toString()); $spc33d3b = hash_final($sp07abef, true); $spf0651e = FieldElement::fromString($spc33d3b); $spb467b5->scReduce($spf0651e); $spabd5a1 = new GeProjective(); $sp236067 = new FieldElement(32); $spb467b5->geDoubleScalarmultVartime($spabd5a1, $spf0651e, $spe56c2e, $sp292950->slice(32)); $spb467b5->geToBytes($sp236067, $spabd5a1); if ($spb467b5->cryptoVerify32($sp236067, $sp292950) === 0) { return $sp292950->slice(64, $spf2e0d6 - 64); } return false; } public static function decodeInput($spf6846f) { if (is_string($spf6846f)) { return FieldElement::fromBase64($spf6846f); } else { if ($spf6846f instanceof FieldElement) { return $spf6846f; } else { if ($spf6846f instanceof SplFixedArray) { return FieldElement::fromArray($spf6846f->toArray(), false); } else { if ((array) $spf6846f === $spf6846f) { return FieldElement::fromArray($spf6846f, false); } } } } throw new SaltException('Unexpected input'); } public static function onetimeauth($sp9d08d6, $spad7c4b) { $sp45eea6 = Salt::decodeInput($spad7c4b); if ($sp45eea6->count() !== Salt::onetimeauth_KEY) { throw new SaltException('Invalid key size'); } $sp4f9b23 = Salt::decodeInput($sp9d08d6); return Salt::instance()->crypto_onetimeauth($sp4f9b23, $sp4f9b23->count(), $sp45eea6); } public static function onetimeauth_verify($spd67ee8, $sp9d08d6, $sp405cd6) { $sp20b13b = Salt::decodeInput($spd67ee8); $sp040516 = Salt::decodeInput($sp9d08d6); $sp45eea6 = Salt::decodeInput($sp405cd6); if ($sp20b13b->count() !== Salt::onetimeauth_OUTPUT) { throw new SaltException('Invalid mac size'); } if ($sp45eea6->count() !== Salt::onetimeauth_KEY) { throw new SaltException('Invalid secret key size'); } return Salt::instance()->crypto_onetimeauth_verify($sp20b13b, $sp040516, $sp040516->count(), $sp45eea6); } public static function secretbox($sp9d08d6, $spfe5171, $spad7c4b) { $sp45eea6 = Salt::decodeInput($spad7c4b); $spc5de55 = Salt::decodeInput($spfe5171); if ($sp45eea6->count() !== Salt::secretbox_KEY) { throw new SaltException('Invalid key size'); } if ($spc5de55->count() !== Salt::secretbox_NONCE) { throw new SaltException('Invalid nonce size'); } $sp4f9b23 = new FieldElement(32); for ($sp043126 = 32; $sp043126--;) { $sp4f9b23[$sp043126] = 0; } $spbbfff6 = Salt::decodeInput($sp9d08d6); $sp4f9b23->setSize(32 + $spbbfff6->count()); $sp4f9b23->copy($spbbfff6, $spbbfff6->count(), 32); return Salt::instance()->crypto_secretbox($sp4f9b23, $sp4f9b23->count(), $spc5de55, $sp45eea6); } public static function secretbox_open($sp05f76a, $spfe5171, $spad7c4b) { $sp45eea6 = Salt::decodeInput($spad7c4b); $spc5de55 = Salt::decodeInput($spfe5171); if ($sp45eea6->count() !== Salt::secretbox_KEY) { throw new SaltException('Invalid key size'); } if ($spc5de55->count() !== Salt::secretbox_NONCE) { throw new SaltException('Invalid nonce size'); } $sp4f9b23 = Salt::decodeInput($sp05f76a); return Salt::instance()->crypto_secretbox_open($sp4f9b23, $sp4f9b23->count(), $spc5de55, $sp45eea6); } public static function scalarmult($sp405cd6, $sped4015) { $sp15a955 = Salt::decodeInput($sp405cd6); $sp8f081d = Salt::decodeInput($sped4015); if ($sp15a955->count() !== Salt::scalarmult_INPUT) { wt_logs($sp15a955->count() . ' !==' . Salt::scalarmult_INPUT, 'Invalid secret key size'); throw new SaltException('Invalid secret key size'); } if ($sp8f081d->count() !== Salt::scalarmult_SCALAR) { wt_logs($sp8f081d->count() . ' !==' . Salt::scalarmult_SCALAR, 'Invalid public key size'); throw new SaltException('Invalid public key size'); } return Salt::instance()->crypto_scalarmult($sp15a955, $sp8f081d); } public static function scalarmult_base($sp405cd6) { $sp15a955 = Salt::decodeInput($sp405cd6); if ($sp15a955->count() !== Salt::scalarmult_INPUT) { throw new SaltException('Invalid secret key size (' . Salt::scalarmult_INPUT . ')'); } return Salt::instance()->crypto_scalarmult_base($sp15a955); } public static function box($sp9d08d6, $sp405cd6, $sped4015, $spfe5171) { $sp4f9b23 = Salt::decodeInput($sp9d08d6); $sp15a955 = Salt::decodeInput($sp405cd6); $sp8f081d = Salt::decodeInput($sped4015); $spc5de55 = Salt::decodeInput($spfe5171); if ($sp15a955->count() !== Salt::box_PRIVATEKEY) { throw new SaltException('Invalid secret key size'); } if ($sp8f081d->count() !== Salt::box_PUBLICKEY) { throw new SaltException('Invalid public key size'); } if ($spc5de55->count() !== Salt::box_NONCE) { throw new SaltException('Invalid nonce size'); } return Salt::instance()->crypto_box($sp4f9b23, $sp4f9b23->count(), $spc5de55, $sp8f081d, $sp15a955); } public static function box_open($sp05f76a, $sp405cd6, $sped4015, $spfe5171) { $spf833ad = Salt::decodeInput($sp05f76a); $sp15a955 = Salt::decodeInput($sp405cd6); $sp8f081d = Salt::decodeInput($sped4015); $spc5de55 = Salt::decodeInput($spfe5171); if ($sp15a955->count() !== Salt::box_PRIVATEKEY) { throw new SaltException('Invalid secret key size'); } if ($sp8f081d->count() !== Salt::box_PUBLICKEY) { throw new SaltException('Invalid public key size'); } if ($spc5de55->count() !== Salt::box_NONCE) { throw new SaltException('Invalid nonce size'); } return Salt::instance()->crypto_box_open($spf833ad, $spf833ad->count(), $spc5de55, $sp8f081d, $sp15a955); } public static function box_keypair() { return Salt::instance()->crypto_box_keypair(); } public static function sign($sp9d08d6, $sp405cd6) { $sp040516 = Salt::decodeInput($sp9d08d6); $sp292950 = Salt::instance()->crypto_sign($sp040516, $sp040516->count(), $sp405cd6); return $sp292950->slice(0, 64); } public static function sign_verify($sp9d08d6, $sp260a19, $sped4015) { $sp292950 = Salt::decodeInput($sp260a19); $sp040516 = Salt::decodeInput($sp9d08d6); $sp292950->setSize($sp292950->count() + $sp040516->count()); $sp292950->copy($sp040516, $sp040516->count, 64); $sp8f081d = Salt::decodeInput($sped4015); $sp5a99ce = Salt::instance()->crypto_sign_open($sp292950, $sp292950->count(), $sp8f081d); return $sp5a99ce !== false; } public static function sign_keypair($spf83a6a = null) { return Salt::instance()->crypto_sign_keypair($spf83a6a); } public static function encrypt($sp5d634f, $spbbfff6, $spfe5171, $sp405cd6) { $sp4f9b23 = Salt::decodeInput($sp5d634f); $spd998aa = Salt::decodeInput($spbbfff6); $spc5de55 = Salt::decodeInput($spfe5171); $sp45eea6 = Salt::decodeInput($sp405cd6); if ($sp45eea6->count() !== Chacha20::KeySize) { throw new SaltException('Invalid key size'); } if ($spc5de55->count() !== Chacha20::NonceSize) { throw new SaltException('Invalid nonce size'); } $sp1c0ffc = new Chacha20Poly1305($sp45eea6); return $sp1c0ffc->encrypt($spc5de55, $sp4f9b23, $spd998aa); } public static function decrypt($sp05f76a, $spbbfff6, $spfe5171, $sp405cd6) { $sp4f9b23 = Salt::decodeInput($sp05f76a); $spd998aa = Salt::decodeInput($spbbfff6); $spc5de55 = Salt::decodeInput($spfe5171); $sp45eea6 = Salt::decodeInput($sp405cd6); if ($sp45eea6->count() !== Chacha20::KeySize) { throw new SaltException('Invalid key size'); } if ($spc5de55->count() !== Chacha20::NonceSize) { throw new SaltException('Invalid nonce size'); } $sp1c0ffc = new Chacha20Poly1305($sp45eea6); return $sp1c0ffc->decrypt($spc5de55, $sp4f9b23, $spd998aa); } public static function hash($sp5d8cfa, $spad7c4b = null) { $sp0876e6 = new Blake2b(); $sp45eea6 = $spad7c4b; if ($spad7c4b !== null) { $sp45eea6 = Salt::decodeInput($spad7c4b); if ($sp45eea6->count() > $sp0876e6::KEYBYTES) { throw new SaltException('Invalid key size'); } } $sp4f9b23 = Salt::decodeInput($sp5d8cfa); $sp653c2f = $sp0876e6->init($sp45eea6); $sp0876e6->update($sp653c2f, $sp4f9b23, $sp4f9b23->count()); $sp0e5d27 = new FieldElement(Blake2b::OUTBYTES); $sp0876e6->finish($sp653c2f, $sp0e5d27); return $sp0e5d27; } } class Curve25519 { const KEYSIZE = 32; const MASK26 = 67108863; const MASK25 = 33554431; protected static $_instance; public static function instance() { if (!isset(static::$_instance)) { static::$_instance = new Curve25519(); } return static::$_instance; } function feCopy($sp0e5d27, $sp4f9b23) { for ($sp043126 = 0; $sp043126 < 10; $sp043126++) { $sp0e5d27[$sp043126] = $sp4f9b23[$sp043126]; } } function add($sp0e5d27, $spac00d1, $sp947dc8) { for ($sp043126 = 10; $sp043126--;) { $sp0e5d27[$sp043126] = $spac00d1[$sp043126] + $sp947dc8[$sp043126]; } } function sub($sp0e5d27, $spac00d1, $sp947dc8) { $sp0e5d27[0] = 134217690 + $spac00d1[0] - $sp947dc8[0]; $spf833ad = $sp0e5d27[0] >> 26; $sp0e5d27[0] &= static::MASK26; $sp0e5d27[1] = 67108862 + $spac00d1[1] - $sp947dc8[1] + $spf833ad; $spf833ad = $sp0e5d27[1] >> 25; $sp0e5d27[1] &= static::MASK25; $sp0e5d27[2] = 134217726 + $spac00d1[2] - $sp947dc8[2] + $spf833ad; $spf833ad = $sp0e5d27[2] >> 26; $sp0e5d27[2] &= static::MASK26; $sp0e5d27[3] = 67108862 + $spac00d1[3] - $sp947dc8[3] + $spf833ad; $spf833ad = $sp0e5d27[3] >> 25; $sp0e5d27[3] &= static::MASK25; $sp0e5d27[4] = 134217726 + $spac00d1[4] - $sp947dc8[4] + $spf833ad; $spf833ad = $sp0e5d27[4] >> 26; $sp0e5d27[4] &= static::MASK26; $sp0e5d27[5] = 67108862 + $spac00d1[5] - $sp947dc8[5] + $spf833ad; $spf833ad = $sp0e5d27[5] >> 25; $sp0e5d27[5] &= static::MASK25; $sp0e5d27[6] = 134217726 + $spac00d1[6] - $sp947dc8[6] + $spf833ad; $spf833ad = $sp0e5d27[6] >> 26; $sp0e5d27[6] &= static::MASK26; $sp0e5d27[7] = 67108862 + $spac00d1[7] - $sp947dc8[7] + $spf833ad; $spf833ad = $sp0e5d27[7] >> 25; $sp0e5d27[7] &= static::MASK25; $sp0e5d27[8] = 134217726 + $spac00d1[8] - $sp947dc8[8] + $spf833ad; $spf833ad = $sp0e5d27[8] >> 26; $sp0e5d27[8] &= static::MASK26; $sp0e5d27[9] = 67108862 + $spac00d1[9] - $sp947dc8[9] + $spf833ad; $spf833ad = $sp0e5d27[9] >> 25; $sp0e5d27[9] &= static::MASK25; $sp0e5d27[0] += 19 * $spf833ad; } function scalar_product($sp0e5d27, $sp4f9b23, $sp5ea7fb) { $spac00d1 = $sp4f9b23[0] * $sp5ea7fb; $sp0e5d27[0] = $spac00d1 & 4294967295 & static::MASK26; $spf833ad = $spac00d1 >> 26 & 4294967295; $spac00d1 = $sp4f9b23[1] * $sp5ea7fb + $spf833ad; $sp0e5d27[1] = $spac00d1 & 4294967295 & static::MASK25; $spf833ad = $spac00d1 >> 25 & 4294967295; $spac00d1 = $sp4f9b23[2] * $sp5ea7fb + $spf833ad; $sp0e5d27[2] = $spac00d1 & 4294967295 & static::MASK26; $spf833ad = $spac00d1 >> 26 & 4294967295; $spac00d1 = $sp4f9b23[3] * $sp5ea7fb + $spf833ad; $sp0e5d27[3] = $spac00d1 & 4294967295 & static::MASK25; $spf833ad = $spac00d1 >> 25 & 4294967295; $spac00d1 = $sp4f9b23[4] * $sp5ea7fb + $spf833ad; $sp0e5d27[4] = $spac00d1 & 4294967295 & static::MASK26; $spf833ad = $spac00d1 >> 26 & 4294967295; $spac00d1 = $sp4f9b23[5] * $sp5ea7fb + $spf833ad; $sp0e5d27[5] = $spac00d1 & 4294967295 & static::MASK25; $spf833ad = $spac00d1 >> 25 & 4294967295; $spac00d1 = $sp4f9b23[6] * $sp5ea7fb + $spf833ad; $sp0e5d27[6] = $spac00d1 & 4294967295 & static::MASK26; $spf833ad = $spac00d1 >> 26 & 4294967295; $spac00d1 = $sp4f9b23[7] * $sp5ea7fb + $spf833ad; $sp0e5d27[7] = $spac00d1 & 4294967295 & static::MASK25; $spf833ad = $spac00d1 >> 25 & 4294967295; $spac00d1 = $sp4f9b23[8] * $sp5ea7fb + $spf833ad; $sp0e5d27[8] = $spac00d1 & 4294967295 & static::MASK26; $spf833ad = $spac00d1 >> 26 & 4294967295; $spac00d1 = $sp4f9b23[9] * $sp5ea7fb + $spf833ad; $sp0e5d27[9] = $spac00d1 & 4294967295 & static::MASK25; $spf833ad = $spac00d1 >> 25 & 4294967295; $sp0e5d27[0] += $spf833ad * 19; } function mul($sp0e5d27, $spac00d1, $sp947dc8) { $sp8307d9 = $sp947dc8[0]; $spc8027b = $sp947dc8[1]; $sp1fcda8 = $sp947dc8[2]; $spa0e393 = $sp947dc8[3]; $sp131cdb = $sp947dc8[4]; $spc366c8 = $sp947dc8[5]; $sp29226e = $sp947dc8[6]; $sp47600d = $sp947dc8[7]; $sp1cebc2 = $sp947dc8[8]; $spa39854 = $sp947dc8[9]; $spfb36f7 = $spac00d1[0]; $spca2b68 = $spac00d1[1]; $sp4955ee = $spac00d1[2]; $spcf5973 = $spac00d1[3]; $sp44fe81 = $spac00d1[4]; $spca02ad = $spac00d1[5]; $spee696a = $spac00d1[6]; $sp5de041 = $spac00d1[7]; $spdd4643 = $spac00d1[8]; $sp9c9dfb = $spac00d1[9]; $sp11d262 = $sp8307d9 * $spca2b68 + $spc8027b * $spfb36f7; $sp91f10e = $sp8307d9 * $spcf5973 + $spc8027b * $sp4955ee + $sp1fcda8 * $spca2b68 + $spa0e393 * $spfb36f7; $sp6ec212 = $sp8307d9 * $spca02ad + $spc8027b * $sp44fe81 + $sp1fcda8 * $spcf5973 + $spa0e393 * $sp4955ee + $sp131cdb * $spca2b68 + $spc366c8 * $spfb36f7; $spb4031d = $sp8307d9 * $sp5de041 + $spc8027b * $spee696a + $sp1fcda8 * $spca02ad + $spa0e393 * $sp44fe81 + $sp131cdb * $spcf5973 + $spc366c8 * $sp4955ee + $sp29226e * $spca2b68 + $sp47600d * $spfb36f7; $sp47c847 = $sp8307d9 * $sp9c9dfb + $spc8027b * $spdd4643 + $sp1fcda8 * $sp5de041 + $spa0e393 * $spee696a + $sp131cdb * $spca02ad + $spc366c8 * $sp44fe81 + $sp29226e * $spcf5973 + $sp47600d * $sp4955ee + $sp1cebc2 * $spca2b68 + $spa39854 * $spfb36f7; $spc8027b *= 2; $spa0e393 *= 2; $spc366c8 *= 2; $sp47600d *= 2; $sp3f198c = $sp8307d9 * $spfb36f7; $sp7555ec = $sp8307d9 * $sp4955ee + $spc8027b * $spca2b68 + $sp1fcda8 * $spfb36f7; $sp534cbb = $sp8307d9 * $sp44fe81 + $spc8027b * $spcf5973 + $sp1fcda8 * $sp4955ee + $spa0e393 * $spca2b68 + $sp131cdb * $spfb36f7; $sp94a6e3 = $sp8307d9 * $spee696a + $spc8027b * $spca02ad + $sp1fcda8 * $sp44fe81 + $spa0e393 * $spcf5973 + $sp131cdb * $sp4955ee + $spc366c8 * $spca2b68 + $sp29226e * $spfb36f7; $sp315192 = $sp8307d9 * $spdd4643 + $spc8027b * $sp5de041 + $sp1fcda8 * $spee696a + $spa0e393 * $spca02ad + $sp131cdb * $sp44fe81 + $spc366c8 * $spcf5973 + $sp29226e * $sp4955ee + $sp47600d * $spca2b68 + $sp1cebc2 * $spfb36f7; $spc8027b *= 19; $sp1fcda8 *= 19; $spa0e393 = $spa0e393 / 2 * 19; $sp131cdb *= 19; $spc366c8 = $spc366c8 / 2 * 19; $sp29226e *= 19; $sp47600d = $sp47600d / 2 * 19; $sp1cebc2 *= 19; $spa39854 *= 19; $sp11d262 += $spa39854 * $sp4955ee + $sp1cebc2 * $spcf5973 + $sp47600d * $sp44fe81 + $sp29226e * $spca02ad + $spc366c8 * $spee696a + $sp131cdb * $sp5de041 + $spa0e393 * $spdd4643 + $sp1fcda8 * $sp9c9dfb; $sp91f10e += $spa39854 * $sp44fe81 + $sp1cebc2 * $spca02ad + $sp47600d * $spee696a + $sp29226e * $sp5de041 + $spc366c8 * $spdd4643 + $sp131cdb * $sp9c9dfb; $sp6ec212 += $spa39854 * $spee696a + $sp1cebc2 * $sp5de041 + $sp47600d * $spdd4643 + $sp29226e * $sp9c9dfb; $spb4031d += $spa39854 * $spdd4643 + $sp1cebc2 * $sp9c9dfb; $spa0e393 *= 2; $spc366c8 *= 2; $sp47600d *= 2; $spa39854 *= 2; $sp3f198c += $spa39854 * $spca2b68 + $sp1cebc2 * $sp4955ee + $sp47600d * $spcf5973 + $sp29226e * $sp44fe81 + $spc366c8 * $spca02ad + $sp131cdb * $spee696a + $spa0e393 * $sp5de041 + $sp1fcda8 * $spdd4643 + $spc8027b * $sp9c9dfb; $sp7555ec += $spa39854 * $spcf5973 + $sp1cebc2 * $sp44fe81 + $sp47600d * $spca02ad + $sp29226e * $spee696a + $spc366c8 * $sp5de041 + $sp131cdb * $spdd4643 + $spa0e393 * $sp9c9dfb; $sp534cbb += $spa39854 * $spca02ad + $sp1cebc2 * $spee696a + $sp47600d * $sp5de041 + $sp29226e * $spdd4643 + $spc366c8 * $sp9c9dfb; $sp94a6e3 += $spa39854 * $sp5de041 + $sp1cebc2 * $spdd4643 + $sp47600d * $sp9c9dfb; $sp315192 += $spa39854 * $sp9c9dfb; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spf833ad = $sp3f198c >> 26; $sp11d262 += $spf833ad; $spc8027b = $sp11d262 & 4294967295 & static::MASK25; $spf833ad = $sp11d262 >> 25; $sp7555ec += $spf833ad; $sp1fcda8 = $sp7555ec & 4294967295 & static::MASK26; $spf833ad = $sp7555ec >> 26; $sp91f10e += $spf833ad; $spa0e393 = $sp91f10e & 4294967295 & static::MASK25; $spf833ad = $sp91f10e >> 25; $sp534cbb += $spf833ad; $sp131cdb = $sp534cbb & 4294967295 & static::MASK26; $spf833ad = $sp534cbb >> 26; $sp6ec212 += $spf833ad; $spc366c8 = $sp6ec212 & 4294967295 & static::MASK25; $spf833ad = $sp6ec212 >> 25; $sp94a6e3 += $spf833ad; $sp29226e = $sp94a6e3 & 4294967295 & static::MASK26; $spf833ad = $sp94a6e3 >> 26; $spb4031d += $spf833ad; $sp47600d = $spb4031d & 4294967295 & static::MASK25; $spf833ad = $spb4031d >> 25; $sp315192 += $spf833ad; $sp1cebc2 = $sp315192 & 4294967295 & static::MASK26; $spf833ad = $sp315192 >> 26; $sp47c847 += $spf833ad; $spa39854 = $sp47c847 & 4294967295 & static::MASK25; $spdb27be = $sp47c847 >> 25 & 4294967295; $sp3f198c = $sp8307d9 + $spdb27be * 19; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spdb27be = $sp3f198c >> 26 & 4294967295; $spc8027b += $spdb27be; $sp0e5d27[0] = $sp8307d9; $sp0e5d27[1] = $spc8027b; $sp0e5d27[2] = $sp1fcda8; $sp0e5d27[3] = $spa0e393; $sp0e5d27[4] = $sp131cdb; $sp0e5d27[5] = $spc366c8; $sp0e5d27[6] = $sp29226e; $sp0e5d27[7] = $sp47600d; $sp0e5d27[8] = $sp1cebc2; $sp0e5d27[9] = $spa39854; } function square($sp0e5d27, $sp4f9b23) { $sp8307d9 = $sp4f9b23[0]; $spc8027b = $sp4f9b23[1]; $sp1fcda8 = $sp4f9b23[2]; $spa0e393 = $sp4f9b23[3]; $sp131cdb = $sp4f9b23[4]; $spc366c8 = $sp4f9b23[5]; $sp29226e = $sp4f9b23[6]; $sp47600d = $sp4f9b23[7]; $sp1cebc2 = $sp4f9b23[8]; $spa39854 = $sp4f9b23[9]; $sp3f198c = $sp8307d9 * $sp8307d9; $sp8307d9 *= 2; $sp11d262 = $sp8307d9 * $spc8027b; $sp7555ec = $sp8307d9 * $sp1fcda8 + $spc8027b * $spc8027b * 2; $spc8027b *= 2; $sp91f10e = $sp8307d9 * $spa0e393 + $spc8027b * $sp1fcda8; $sp534cbb = $sp8307d9 * $sp131cdb + $spc8027b * $spa0e393 * 2 + $sp1fcda8 * $sp1fcda8; $sp1fcda8 *= 2; $sp6ec212 = $sp8307d9 * $spc366c8 + $spc8027b * $sp131cdb + $sp1fcda8 * $spa0e393; $sp94a6e3 = $sp8307d9 * $sp29226e + $spc8027b * $spc366c8 * 2 + $sp1fcda8 * $sp131cdb + $spa0e393 * $spa0e393 * 2; $spa0e393 *= 2; $spb4031d = $sp8307d9 * $sp47600d + $spc8027b * $sp29226e + $sp1fcda8 * $spc366c8 + $spa0e393 * $sp131cdb; $sp315192 = $sp8307d9 * $sp1cebc2 + $spc8027b * $sp47600d * 2 + $sp1fcda8 * $sp29226e + $spa0e393 * $spc366c8 * 2 + $sp131cdb * $sp131cdb; $sp47c847 = $sp8307d9 * $spa39854 + $spc8027b * $sp1cebc2 + $sp1fcda8 * $sp47600d + $spa0e393 * $sp29226e + $sp131cdb * $spc366c8 * 2; $sp17c4da = $sp29226e * 19; $spd6f6b9 = $sp47600d * 2 * 19; $spb7f285 = $sp1cebc2 * 19; $sp51449a = $spa39854 * 2 * 19; $sp3f198c += $sp51449a * $spc8027b + $spb7f285 * $sp1fcda8 + $spd6f6b9 * $spa0e393 + $sp17c4da * $sp131cdb * 2 + $spc366c8 * $spc366c8 * 2 * 19; $sp11d262 += $sp51449a * $sp1fcda8 / 2 + $spb7f285 * $spa0e393 + $spd6f6b9 * $sp131cdb + $sp17c4da * $spc366c8 * 2; $sp7555ec += $sp51449a * $spa0e393 + $spb7f285 * $sp131cdb * 2 + $spd6f6b9 * $spc366c8 * 2 + $sp17c4da * $sp29226e; $sp91f10e += $sp51449a * $sp131cdb + $spb7f285 * $spc366c8 * 2 + $spd6f6b9 * $sp29226e; $sp534cbb += $sp51449a * $spc366c8 * 2 + $spb7f285 * $sp29226e * 2 + $spd6f6b9 * $sp47600d; $sp6ec212 += $sp51449a * $sp29226e + $spb7f285 * $sp47600d * 2; $sp94a6e3 += $sp51449a * $sp47600d * 2 + $spb7f285 * $sp1cebc2; $spb4031d += $sp51449a * $sp1cebc2; $sp315192 += $sp51449a * $spa39854; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spf833ad = $sp3f198c >> 26; $sp11d262 += $spf833ad; $spc8027b = $sp11d262 & 4294967295 & static::MASK25; $spf833ad = $sp11d262 >> 25; $sp7555ec += $spf833ad; $sp1fcda8 = $sp7555ec & 4294967295 & static::MASK26; $spf833ad = $sp7555ec >> 26; $sp91f10e += $spf833ad; $spa0e393 = $sp91f10e & 4294967295 & static::MASK25; $spf833ad = $sp91f10e >> 25; $sp534cbb += $spf833ad; $sp131cdb = $sp534cbb & 4294967295 & static::MASK26; $spf833ad = $sp534cbb >> 26; $sp6ec212 += $spf833ad; $spc366c8 = $sp6ec212 & 4294967295 & static::MASK25; $spf833ad = $sp6ec212 >> 25; $sp94a6e3 += $spf833ad; $sp29226e = $sp94a6e3 & 4294967295 & static::MASK26; $spf833ad = $sp94a6e3 >> 26; $spb4031d += $spf833ad; $sp47600d = $spb4031d & 4294967295 & static::MASK25; $spf833ad = $spb4031d >> 25; $sp315192 += $spf833ad; $sp1cebc2 = $sp315192 & 4294967295 & static::MASK26; $spf833ad = $sp315192 >> 26; $sp47c847 += $spf833ad; $spa39854 = $sp47c847 & 4294967295 & static::MASK25; $spdb27be = $sp47c847 >> 25 & 4294967295; $sp3f198c = $sp8307d9 + $spdb27be * 19; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spdb27be = $sp3f198c >> 26 & 4294967295; $spc8027b += $spdb27be; $sp0e5d27[0] = $sp8307d9; $sp0e5d27[1] = $spc8027b; $sp0e5d27[2] = $sp1fcda8; $sp0e5d27[3] = $spa0e393; $sp0e5d27[4] = $sp131cdb; $sp0e5d27[5] = $spc366c8; $sp0e5d27[6] = $sp29226e; $sp0e5d27[7] = $sp47600d; $sp0e5d27[8] = $sp1cebc2; $sp0e5d27[9] = $spa39854; } function square_times($sp0e5d27, $sp4f9b23, $sp866079) { $sp8307d9 = $sp4f9b23[0]; $spc8027b = $sp4f9b23[1]; $sp1fcda8 = $sp4f9b23[2]; $spa0e393 = $sp4f9b23[3]; $sp131cdb = $sp4f9b23[4]; $spc366c8 = $sp4f9b23[5]; $sp29226e = $sp4f9b23[6]; $sp47600d = $sp4f9b23[7]; $sp1cebc2 = $sp4f9b23[8]; $spa39854 = $sp4f9b23[9]; do { $sp3f198c = $sp8307d9 * $sp8307d9; $sp8307d9 *= 2; $sp11d262 = $sp8307d9 * $spc8027b; $sp7555ec = $sp8307d9 * $sp1fcda8 + $spc8027b * $spc8027b * 2; $spc8027b *= 2; $sp91f10e = $sp8307d9 * $spa0e393 + $spc8027b * $sp1fcda8; $sp534cbb = $sp8307d9 * $sp131cdb + $spc8027b * $spa0e393 * 2 + $sp1fcda8 * $sp1fcda8; $sp1fcda8 *= 2; $sp6ec212 = $sp8307d9 * $spc366c8 + $spc8027b * $sp131cdb + $sp1fcda8 * $spa0e393; $sp94a6e3 = $sp8307d9 * $sp29226e + $spc8027b * $spc366c8 * 2 + $sp1fcda8 * $sp131cdb + $spa0e393 * $spa0e393 * 2; $spa0e393 *= 2; $spb4031d = $sp8307d9 * $sp47600d + $spc8027b * $sp29226e + $sp1fcda8 * $spc366c8 + $spa0e393 * $sp131cdb; $sp315192 = $sp8307d9 * $sp1cebc2 + $spc8027b * $sp47600d * 2 + $sp1fcda8 * $sp29226e + $spa0e393 * $spc366c8 * 2 + $sp131cdb * $sp131cdb; $sp47c847 = $sp8307d9 * $spa39854 + $spc8027b * $sp1cebc2 + $sp1fcda8 * $sp47600d + $spa0e393 * $sp29226e + $sp131cdb * $spc366c8 * 2; $sp17c4da = $sp29226e * 19; $spd6f6b9 = $sp47600d * 2 * 19; $spb7f285 = $sp1cebc2 * 19; $sp51449a = $spa39854 * 2 * 19; $sp3f198c += $sp51449a * $spc8027b + $spb7f285 * $sp1fcda8 + $spd6f6b9 * $spa0e393 + $sp17c4da * $sp131cdb * 2 + $spc366c8 * $spc366c8 * 2 * 19; $sp11d262 += $sp51449a * $sp1fcda8 / 2 + $spb7f285 * $spa0e393 + $spd6f6b9 * $sp131cdb + $sp17c4da * $spc366c8 * 2; $sp7555ec += $sp51449a * $spa0e393 + $spb7f285 * $sp131cdb * 2 + $spd6f6b9 * $spc366c8 * 2 + $sp17c4da * $sp29226e; $sp91f10e += $sp51449a * $sp131cdb + $spb7f285 * $spc366c8 * 2 + $spd6f6b9 * $sp29226e; $sp534cbb += $sp51449a * $spc366c8 * 2 + $spb7f285 * $sp29226e * 2 + $spd6f6b9 * $sp47600d; $sp6ec212 += $sp51449a * $sp29226e + $spb7f285 * $sp47600d * 2; $sp94a6e3 += $sp51449a * $sp47600d * 2 + $spb7f285 * $sp1cebc2; $spb4031d += $sp51449a * $sp1cebc2; $sp315192 += $sp51449a * $spa39854; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spf833ad = $sp3f198c >> 26; $sp11d262 += $spf833ad; $spc8027b = $sp11d262 & 4294967295 & static::MASK25; $spf833ad = $sp11d262 >> 25; $sp7555ec += $spf833ad; $sp1fcda8 = $sp7555ec & 4294967295 & static::MASK26; $spf833ad = $sp7555ec >> 26; $sp91f10e += $spf833ad; $spa0e393 = $sp91f10e & 4294967295 & static::MASK25; $spf833ad = $sp91f10e >> 25; $sp534cbb += $spf833ad; $sp131cdb = $sp534cbb & 4294967295 & static::MASK26; $spf833ad = $sp534cbb >> 26; $sp6ec212 += $spf833ad; $spc366c8 = $sp6ec212 & 4294967295 & static::MASK25; $spf833ad = $sp6ec212 >> 25; $sp94a6e3 += $spf833ad; $sp29226e = $sp94a6e3 & 4294967295 & static::MASK26; $spf833ad = $sp94a6e3 >> 26; $spb4031d += $spf833ad; $sp47600d = $spb4031d & 4294967295 & static::MASK25; $spf833ad = $spb4031d >> 25; $sp315192 += $spf833ad; $sp1cebc2 = $sp315192 & 4294967295 & static::MASK26; $spf833ad = $sp315192 >> 26; $sp47c847 += $spf833ad; $spa39854 = $sp47c847 & 4294967295 & static::MASK25; $spdb27be = $sp47c847 >> 25 & 4294967295; $sp3f198c = $sp8307d9 + $spdb27be * 19; $sp8307d9 = $sp3f198c & 4294967295 & static::MASK26; $spdb27be = $sp3f198c >> 26 & 4294967295; $spc8027b += $spdb27be; } while (--$sp866079); $sp0e5d27[0] = $sp8307d9; $sp0e5d27[1] = $spc8027b; $sp0e5d27[2] = $sp1fcda8; $sp0e5d27[3] = $spa0e393; $sp0e5d27[4] = $sp131cdb; $sp0e5d27[5] = $spc366c8; $sp0e5d27[6] = $sp29226e; $sp0e5d27[7] = $sp47600d; $sp0e5d27[8] = $sp1cebc2; $sp0e5d27[9] = $spa39854; } function load32($sp4f9b23, $spa0668e) { return $sp4f9b23[$spa0668e] | $sp4f9b23[$spa0668e + 1] << 8 | $sp4f9b23[$spa0668e + 2] << 16 | $sp4f9b23[$spa0668e + 3] << 24; } function expand($sp0e5d27, $sp4f9b23) { $sp11aea3 = $this->load32($sp4f9b23, 0); $spe705a6 = $this->load32($sp4f9b23, 4); $sp9411c6 = $this->load32($sp4f9b23, 8); $sp2de8dc = $this->load32($sp4f9b23, 12); $sp257200 = $this->load32($sp4f9b23, 16); $sp4c0906 = $this->load32($sp4f9b23, 20); $sp699eb0 = $this->load32($sp4f9b23, 24); $sp57bf7c = $this->load32($sp4f9b23, 28); $sp0e5d27[0] = $sp11aea3 & static::MASK26; $sp0e5d27[1] = ($spe705a6 << 32 | $sp11aea3) >> 26 & static::MASK25; $sp0e5d27[2] = ($sp9411c6 << 32 | $spe705a6) >> 19 & static::MASK26; $sp0e5d27[3] = ($sp2de8dc << 32 | $sp9411c6) >> 13 & static::MASK25; $sp0e5d27[4] = $sp2de8dc >> 6 & static::MASK26; $sp0e5d27[5] = $sp257200 & static::MASK25; $sp0e5d27[6] = ($sp4c0906 << 32 | $sp257200) >> 25 & static::MASK26; $sp0e5d27[7] = ($sp699eb0 << 32 | $sp4c0906) >> 19 & static::MASK25; $sp0e5d27[8] = ($sp57bf7c << 32 | $sp699eb0) >> 12 & static::MASK26; $sp0e5d27[9] = $sp57bf7c >> 6 & static::MASK25; } function carry_pass($sp9fd6ef) { $sp9fd6ef[1] += $sp9fd6ef[0] >> 26; $sp9fd6ef[0] &= static::MASK26; $sp9fd6ef[2] += $sp9fd6ef[1] >> 25; $sp9fd6ef[1] &= static::MASK25; $sp9fd6ef[3] += $sp9fd6ef[2] >> 26; $sp9fd6ef[2] &= static::MASK26; $sp9fd6ef[4] += $sp9fd6ef[3] >> 25; $sp9fd6ef[3] &= static::MASK25; $sp9fd6ef[5] += $sp9fd6ef[4] >> 26; $sp9fd6ef[4] &= static::MASK26; $sp9fd6ef[6] += $sp9fd6ef[5] >> 25; $sp9fd6ef[5] &= static::MASK25; $sp9fd6ef[7] += $sp9fd6ef[6] >> 26; $sp9fd6ef[6] &= static::MASK26; $sp9fd6ef[8] += $sp9fd6ef[7] >> 25; $sp9fd6ef[7] &= static::MASK25; $sp9fd6ef[9] += $sp9fd6ef[8] >> 26; $sp9fd6ef[8] &= static::MASK26; } function carry_pass_full($sp9fd6ef) { $this->carry_pass($sp9fd6ef); $sp9fd6ef[0] += 19 * ($sp9fd6ef[9] >> 25); $sp9fd6ef[9] &= static::MASK25; } function carry_pass_final($sp9fd6ef) { $this->carry_pass($sp9fd6ef); $sp9fd6ef[9] &= static::MASK25; } function store32($sp0e5d27, $spa0668e, $sp4f9b23) { $sp0e5d27[$spa0668e] |= $sp4f9b23 & 255; $sp4f9b23 >>= 8; $sp0e5d27[$spa0668e + 1] = $sp4f9b23 & 255; $sp4f9b23 >>= 8; $sp0e5d27[$spa0668e + 2] = $sp4f9b23 & 255; $sp4f9b23 >>= 8; $sp0e5d27[$spa0668e + 3] = $sp4f9b23 & 255; } function contract($sp0e5d27, $sp4f9b23) { $sp9fd6ef = new SplFixedArray(10); $this->feCopy($sp9fd6ef, $sp4f9b23); $this->carry_pass_full($sp9fd6ef); $this->carry_pass_full($sp9fd6ef); $sp9fd6ef[0] += 19; $this->carry_pass_full($sp9fd6ef); $sp9fd6ef[0] += (1 << 26) - 19; $sp9fd6ef[1] += static::MASK25; $sp9fd6ef[2] += static::MASK26; $sp9fd6ef[3] += static::MASK25; $sp9fd6ef[4] += static::MASK26; $sp9fd6ef[5] += static::MASK25; $sp9fd6ef[6] += static::MASK26; $sp9fd6ef[7] += static::MASK25; $sp9fd6ef[8] += static::MASK26; $sp9fd6ef[9] += static::MASK25; $this->carry_pass_final($sp9fd6ef); $sp9fd6ef[1] <<= 2; $sp9fd6ef[2] <<= 3; $sp9fd6ef[3] <<= 5; $sp9fd6ef[4] <<= 6; $sp9fd6ef[6] <<= 1; $sp9fd6ef[7] <<= 3; $sp9fd6ef[8] <<= 4; $sp9fd6ef[9] <<= 6; $sp0e5d27[0] = 0; $sp0e5d27[16] = 0; $this->store32($sp0e5d27, 0, $sp9fd6ef[0]); $this->store32($sp0e5d27, 3, $sp9fd6ef[1]); $this->store32($sp0e5d27, 6, $sp9fd6ef[2]); $this->store32($sp0e5d27, 9, $sp9fd6ef[3]); $this->store32($sp0e5d27, 12, $sp9fd6ef[4]); $this->store32($sp0e5d27, 16, $sp9fd6ef[5]); $this->store32($sp0e5d27, 19, $sp9fd6ef[6]); $this->store32($sp0e5d27, 22, $sp9fd6ef[7]); $this->store32($sp0e5d27, 25, $sp9fd6ef[8]); $this->store32($sp0e5d27, 28, $sp9fd6ef[9]); } function swap_conditional($sp94473b, $sp94551b, $sp39c5dd) { $sp885358 = -$sp39c5dd; for ($sp043126 = 0; $sp043126 < 10; $sp043126++) { $sp20b13b = $sp885358 & ($sp94473b[$sp043126] ^ $sp94551b[$sp043126]); $sp94473b[$sp043126] ^= $sp20b13b; $sp94551b[$sp043126] ^= $sp20b13b; } } function pow_two5mtwo0_two250mtwo0($sp947dc8) { $spf833ad = new SplFixedArray(16); $spb0fb6a = new SplFixedArray(16); $this->square_times($spb0fb6a, $sp947dc8, 5); $this->mul($sp947dc8, $spb0fb6a, $sp947dc8); $this->square_times($spb0fb6a, $sp947dc8, 10); $this->mul($spf833ad, $spb0fb6a, $sp947dc8); $this->square_times($spb0fb6a, $spf833ad, 20); $this->mul($spb0fb6a, $spb0fb6a, $spf833ad); $this->square_times($spb0fb6a, $spb0fb6a, 10); $this->mul($sp947dc8, $spb0fb6a, $sp947dc8); $this->square_times($spb0fb6a, $sp947dc8, 50); $this->mul($spf833ad, $spb0fb6a, $sp947dc8); $this->square_times($spb0fb6a, $spf833ad, 100); $this->mul($spb0fb6a, $spb0fb6a, $spf833ad); $this->square_times($spb0fb6a, $spb0fb6a, 50); $this->mul($sp947dc8, $spb0fb6a, $sp947dc8); } function recip($sp0e5d27, $spff6364) { $spac00d1 = new SplFixedArray(16); $sp947dc8 = new SplFixedArray(16); $spb0fb6a = new SplFixedArray(16); $this->square($spac00d1, $spff6364); $this->square_times($spb0fb6a, $spac00d1, 2); $this->mul($sp947dc8, $spb0fb6a, $spff6364); $this->mul($spac00d1, $sp947dc8, $spac00d1); $this->square($spb0fb6a, $spac00d1); $this->mul($sp947dc8, $spb0fb6a, $sp947dc8); $this->pow_two5mtwo0_two250mtwo0($sp947dc8); $this->square_times($sp947dc8, $sp947dc8, 5); $this->mul($sp0e5d27, $sp947dc8, $spac00d1); } function scalarmult($sp92a357, $sp4d04ec) { $sp69bf58 = new SplFixedArray(10); $sp69bf58[0] = 1; $spf52552 = new SplFixedArray(10); $spf32f3d = new SplFixedArray(10); $spf32f3d[0] = 1; $spf702a3 = new SplFixedArray(10); $sp7b77be = new SplFixedArray(10); $sp66a8d4 = new SplFixedArray(10); $sp69a5d6 = new SplFixedArray(10); $spc3e879 = new SplFixedArray(10); $sp3e3a95 = new SplFixedArray(10); $sp86f6a0 = new SplFixedArray(10); $spf6517c = new SplFixedArray(32); $sp8f081d = new SplFixedArray(32); for ($sp043126 = 32; $sp043126--;) { $spf6517c[$sp043126] = $sp92a357[$sp043126]; } $spf6517c[0] &= 248; $spf6517c[31] &= 127; $spf6517c[31] |= 64; $this->expand($sp7b77be, $sp4d04ec); $this->feCopy($spf702a3, $sp7b77be); $spe0889d = 1; for ($sp043126 = 253; $sp043126 >= 2; $sp043126--) { $this->add($sp66a8d4, $spf702a3, $spf32f3d); $this->sub($spf32f3d, $spf702a3, $spf32f3d); $this->add($sp69a5d6, $sp69bf58, $spf52552); $this->sub($spf52552, $sp69bf58, $spf52552); $this->mul($sp69bf58, $sp69a5d6, $spf32f3d); $this->mul($spf52552, $sp66a8d4, $spf52552); $this->add($spc3e879, $sp69bf58, $spf52552); $this->sub($spf52552, $sp69bf58, $spf52552); $this->square($spf52552, $spf52552); $this->square($sp69bf58, $spc3e879); $this->mul($spf52552, $spf52552, $sp7b77be); $this->square($sp66a8d4, $sp66a8d4); $this->square($spf32f3d, $spf32f3d); $this->mul($spf702a3, $sp66a8d4, $spf32f3d); $this->sub($spf32f3d, $sp66a8d4, $spf32f3d); $this->scalar_product($sp3e3a95, $spf32f3d, 121665); $this->add($sp3e3a95, $sp3e3a95, $sp66a8d4); $this->mul($spf32f3d, $spf32f3d, $sp3e3a95); $sp9550f0 = $spf6517c[$sp043126 / 8] >> ($sp043126 & 7) & 1; $this->swap_conditional($spf702a3, $sp69bf58, $sp9550f0 ^ $spe0889d); $this->swap_conditional($spf32f3d, $spf52552, $sp9550f0 ^ $spe0889d); $spe0889d = $sp9550f0; } for ($sp043126 = 0; $sp043126 < 3; $sp043126++) { $this->add($sp66a8d4, $spf702a3, $spf32f3d); $this->sub($spf32f3d, $spf702a3, $spf32f3d); $this->square($sp66a8d4, $sp66a8d4); $this->square($spf32f3d, $spf32f3d); $this->mul($spf702a3, $sp66a8d4, $spf32f3d); $this->sub($spf32f3d, $sp66a8d4, $spf32f3d); $this->scalar_product($sp3e3a95, $spf32f3d, 121665); $this->add($sp3e3a95, $sp3e3a95, $sp66a8d4); $this->mul($spf32f3d, $spf32f3d, $sp3e3a95); } $this->recip($sp86f6a0, $spf32f3d); $this->mul($spf32f3d, $spf702a3, $sp86f6a0); $this->contract($sp8f081d, $spf32f3d); return $sp8f081d; } function scalarbase($sp92a357) { $sp4d04ec = new SplFixedArray(32); $sp4d04ec[0] = 9; return $this->scalarmult($sp92a357, $sp4d04ec); } } class FieldElement extends SplFixedArray { public function toString() { $this->rewind(); $sp5ab545 = ''; while ($this->valid()) { $sp5ab545 .= chr($this->current()); $this->next(); } $this->rewind(); return $sp5ab545; } public function toHex() { $this->rewind(); $sp0cfec2 = '0123456789abcdef'; $sp5ab545 = ''; while ($this->valid()) { $spf833ad = $this->current(); $sp5ab545 .= $sp0cfec2[$spf833ad >> 4]; $sp5ab545 .= $sp0cfec2[$spf833ad & 15]; $this->next(); } $this->rewind(); return $sp5ab545; } public function toBase64() { return base64_encode($this->toString()); } public function toJson() { return json_encode($this->toString()); } public function slice($sp4bee5b, $sp0789ad = null) { $sp0789ad = $sp0789ad ? $sp0789ad : $this->getSize() - $sp4bee5b; $spb5fa57 = new FieldElement($sp0789ad); for ($sp043126 = 0; $sp043126 < $sp0789ad; ++$sp043126) { $spb5fa57[$sp043126] = $this->offsetGet($sp043126 + $sp4bee5b); } return $spb5fa57; } public function copy($sp8e0fc6, $spa4e6b3, $sp4bee5b = 0, $sp968f54 = 0) { for ($sp043126 = 0; $sp043126 < $spa4e6b3; ++$sp043126) { $this->offsetSet($sp043126 + $sp4bee5b, $sp8e0fc6[$sp043126 + $sp968f54]); } } public static function fromArray($sp4366b1, $sp974581 = true) { $spab9e5c = count($sp4366b1); $spcea2a2 = new FieldElement($spab9e5c); $sp4366b1 = $sp974581 ? $sp4366b1 : array_values($sp4366b1); foreach ($sp4366b1 as $sp45eea6 => $sp0606f5) { $spcea2a2[$sp45eea6] = $sp0606f5; } return $spcea2a2; } public static function fromString($sp5d8cfa) { return static::fromArray(unpack('C*', $sp5d8cfa), false); } public static function fromHex($sp8dd6cc) { $sp8dd6cc = preg_replace('/[^0-9a-f]/', '', $sp8dd6cc); return static::fromString(pack('H*', $sp8dd6cc)); } public static function fromBase64($sp417723) { return FieldElement::fromString(base64_decode($sp417723, true)); } public static function fromJson($spff4c14) { return FieldElement::fromArray(json_decode($spff4c14, true)); } } class GeProjective { public $X; public $Y; public $Z; function __construct() { $this->X = new SplFixedArray(10); $this->Y = new SplFixedArray(10); $this->Z = new SplFixedArray(10); } } class GeExtended extends GeProjective { public $T; function __construct() { parent::__construct(); $this->T = new SplFixedArray(10); } } class GeCompleted extends GeExtended { } class GePrecomp { public $yplusx; public $yminusx; public $xy2d; function __construct($sp94473b = null, $spf56e7d = null, $spff6364 = null) { $this->yplusx = $sp94473b ? SplFixedArray::fromArray($sp94473b) : new SplFixedArray(10); $this->yminusx = $spf56e7d ? SplFixedArray::fromArray($spf56e7d) : new SplFixedArray(10); $this->xy2d = $spff6364 ? SplFixedArray::fromArray($spff6364) : new SplFixedArray(10); } } class GeCached { public $YplusX; public $YminusX; public $Z; public $T2d; function __construct() { $this->YplusX = new SplFixedArray(10); $this->YminusX = new SplFixedArray(10); $this->Z = new SplFixedArray(10); $this->T2d = new SplFixedArray(10); } } class Ed25519 { protected static $instance; public static function instance() { if (!isset(static::$instance)) { static::$instance = new Ed25519(); } return static::$instance; } protected static $base; protected static $Bi; function __construct() { if (!isset(static::$base)) { static::$base = new SplFixedArray(32); $sp2d24f8 = SplFixedArray::fromArray(include 'base.php', false); for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { static::$base[$sp043126] = new SplFixedArray(8); for ($sp387c8b = 0; $sp387c8b < 8; ++$sp387c8b) { static::$base[$sp043126][$sp387c8b] = new GePrecomp($sp2d24f8[$sp043126][$sp387c8b][0], $sp2d24f8[$sp043126][$sp387c8b][1], $sp2d24f8[$sp043126][$sp387c8b][2]); } } } if (!isset(static::$Bi)) { static::$Bi = new SplFixedArray(8); $sp2d24f8 = SplFixedArray::fromArray(include 'base2.php', false); for ($sp043126 = 0; $sp043126 < 8; ++$sp043126) { static::$Bi[$sp043126] = new GePrecomp($sp2d24f8[$sp043126][0], $sp2d24f8[$sp043126][1], $sp2d24f8[$sp043126][2]); } } } function feZero($spf0651e) { for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $spf0651e[$sp043126] = 0; } } function feOne($spf0651e) { $this->feZero($spf0651e); $spf0651e[0] = 1; } function feAdd($spf0651e, $sp9fd6ef, $spb50ac0) { for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $spf0651e[$sp043126] = $sp9fd6ef[$sp043126] + $spb50ac0[$sp043126]; } } function feCMove($sp9fd6ef, $spb50ac0, $sp947dc8) { $sp947dc8 = -$sp947dc8; for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $sp94473b = $sp947dc8 & ($sp9fd6ef[$sp043126] ^ $spb50ac0[$sp043126]); $sp9fd6ef[$sp043126] ^= $sp94473b; } } function feCopy($spf0651e, $sp9fd6ef) { for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $spf0651e[$sp043126] = $sp9fd6ef[$sp043126]; } } function feSub($spf0651e, $sp9fd6ef, $spb50ac0) { for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $spf0651e[$sp043126] = $sp9fd6ef[$sp043126] - $spb50ac0[$sp043126]; } } function feLoad3($sp4f9b23, $spa0668e) { $sp8ace1e = $sp4f9b23[$spa0668e]; $sp8ace1e |= $sp4f9b23[1 + $spa0668e] << 8; $sp8ace1e |= $sp4f9b23[2 + $spa0668e] << 16; return $sp8ace1e; } function feLoad4($sp4f9b23, $spa0668e) { $sp8ace1e = $sp4f9b23[$spa0668e]; $sp8ace1e |= $sp4f9b23[1 + $spa0668e] << 8; $sp8ace1e |= $sp4f9b23[2 + $spa0668e] << 16; $sp8ace1e |= $sp4f9b23[3 + $spa0668e] << 24; return $sp8ace1e; } function feFromBytes($spf0651e, $spadb990) { $sp82ad2d = $this->feLoad4($spadb990, 0); $sp83b3d9 = $this->feLoad3($spadb990, 4) << 6; $sp10f1bf = $this->feLoad3($spadb990, 7) << 5; $spc8d35f = $this->feLoad3($spadb990, 10) << 3; $sp9b628d = $this->feLoad3($spadb990, 13) << 2; $spa7e176 = $this->feLoad4($spadb990, 16); $sp5c4231 = $this->feLoad3($spadb990, 20) << 7; $sp556f85 = $this->feLoad3($spadb990, 23) << 5; $sp785e40 = $this->feLoad3($spadb990, 26) << 4; $sp196028 = ($this->feLoad3($spadb990, 29) & 8388607) << 2; $spba60da = $sp196028 + (1 << 24) >> 25; $sp82ad2d += $spba60da * 19; $sp196028 -= $spba60da << 25; $sp8ba87b = $sp83b3d9 + (1 << 24) >> 25; $sp10f1bf += $sp8ba87b; $sp83b3d9 -= $sp8ba87b << 25; $spad0033 = $spc8d35f + (1 << 24) >> 25; $sp9b628d += $spad0033; $spc8d35f -= $spad0033 << 25; $sp368b76 = $spa7e176 + (1 << 24) >> 25; $sp5c4231 += $sp368b76; $spa7e176 -= $sp368b76 << 25; $spc85c85 = $sp556f85 + (1 << 24) >> 25; $sp785e40 += $spc85c85; $sp556f85 -= $spc85c85 << 25; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $spd64f56 = $sp10f1bf + (1 << 25) >> 26; $spc8d35f += $spd64f56; $sp10f1bf -= $spd64f56 << 26; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $spec0ba1 = $sp5c4231 + (1 << 25) >> 26; $sp556f85 += $spec0ba1; $sp5c4231 -= $spec0ba1 << 26; $sp1be762 = $sp785e40 + (1 << 25) >> 26; $sp196028 += $sp1be762; $sp785e40 -= $sp1be762 << 26; $spf0651e[0] = $sp82ad2d; $spf0651e[1] = $sp83b3d9; $spf0651e[2] = $sp10f1bf; $spf0651e[3] = $spc8d35f; $spf0651e[4] = $sp9b628d; $spf0651e[5] = $spa7e176; $spf0651e[6] = $sp5c4231; $spf0651e[7] = $sp556f85; $spf0651e[8] = $sp785e40; $spf0651e[9] = $sp196028; } function feToBytes($spadb990, $spf0651e) { $sp7b77be = 19 * $spf0651e[9] + (1 << 24) >> 25; $sp7b77be = $spf0651e[0] + $sp7b77be >> 26; $sp7b77be = $spf0651e[1] + $sp7b77be >> 25; $sp7b77be = $spf0651e[2] + $sp7b77be >> 26; $sp7b77be = $spf0651e[3] + $sp7b77be >> 25; $sp7b77be = $spf0651e[4] + $sp7b77be >> 26; $sp7b77be = $spf0651e[5] + $sp7b77be >> 25; $sp7b77be = $spf0651e[6] + $sp7b77be >> 26; $sp7b77be = $spf0651e[7] + $sp7b77be >> 25; $sp7b77be = $spf0651e[8] + $sp7b77be >> 26; $sp7b77be = $spf0651e[9] + $sp7b77be >> 25; $spf0651e[0] += 19 * $sp7b77be; $sp0f8791 = $spf0651e[0] >> 26; $spf0651e[1] += $sp0f8791; $spf0651e[0] -= $sp0f8791 << 26; $sp8ba87b = $spf0651e[1] >> 25; $spf0651e[2] += $sp8ba87b; $spf0651e[1] -= $sp8ba87b << 25; $spd64f56 = $spf0651e[2] >> 26; $spf0651e[3] += $spd64f56; $spf0651e[2] -= $spd64f56 << 26; $spad0033 = $spf0651e[3] >> 25; $spf0651e[4] += $spad0033; $spf0651e[3] -= $spad0033 << 25; $sp3c2321 = $spf0651e[4] >> 26; $spf0651e[5] += $sp3c2321; $spf0651e[4] -= $sp3c2321 << 26; $sp368b76 = $spf0651e[5] >> 25; $spf0651e[6] += $sp368b76; $spf0651e[5] -= $sp368b76 << 25; $spec0ba1 = $spf0651e[6] >> 26; $spf0651e[7] += $spec0ba1; $spf0651e[6] -= $spec0ba1 << 26; $spc85c85 = $spf0651e[7] >> 25; $spf0651e[8] += $spc85c85; $spf0651e[7] -= $spc85c85 << 25; $sp1be762 = $spf0651e[8] >> 26; $spf0651e[9] += $sp1be762; $spf0651e[8] -= $sp1be762 << 26; $spba60da = $spf0651e[9] >> 25; $spf0651e[9] -= $spba60da << 25; $spadb990[0] = $spf0651e[0] >> 0 & 255; $spadb990[1] = $spf0651e[0] >> 8 & 255; $spadb990[2] = $spf0651e[0] >> 16 & 255; $spadb990[3] = ($spf0651e[0] >> 24 | $spf0651e[1] << 2) & 255; $spadb990[4] = $spf0651e[1] >> 6 & 255; $spadb990[5] = $spf0651e[1] >> 14 & 255; $spadb990[6] = ($spf0651e[1] >> 22 | $spf0651e[2] << 3) & 255; $spadb990[7] = $spf0651e[2] >> 5 & 255; $spadb990[8] = $spf0651e[2] >> 13 & 255; $spadb990[9] = ($spf0651e[2] >> 21 | $spf0651e[3] << 5) & 255; $spadb990[10] = $spf0651e[3] >> 3 & 255; $spadb990[11] = $spf0651e[3] >> 11 & 255; $spadb990[12] = ($spf0651e[3] >> 19 | $spf0651e[4] << 6) & 255; $spadb990[13] = $spf0651e[4] >> 2 & 255; $spadb990[14] = $spf0651e[4] >> 10 & 255; $spadb990[15] = $spf0651e[4] >> 18 & 255; $spadb990[16] = $spf0651e[5] >> 0 & 255; $spadb990[17] = $spf0651e[5] >> 8 & 255; $spadb990[18] = $spf0651e[5] >> 16 & 255; $spadb990[19] = ($spf0651e[5] >> 24 | $spf0651e[6] << 1) & 255; $spadb990[20] = $spf0651e[6] >> 7 & 255; $spadb990[21] = $spf0651e[6] >> 15 & 255; $spadb990[22] = ($spf0651e[6] >> 23 | $spf0651e[7] << 3) & 255; $spadb990[23] = $spf0651e[7] >> 5 & 255; $spadb990[24] = $spf0651e[7] >> 13 & 255; $spadb990[25] = ($spf0651e[7] >> 21 | $spf0651e[8] << 4) & 255; $spadb990[26] = $spf0651e[8] >> 4 & 255; $spadb990[27] = $spf0651e[8] >> 12 & 255; $spadb990[28] = ($spf0651e[8] >> 20 | $spf0651e[9] << 6) & 255; $spadb990[29] = $spf0651e[9] >> 2 & 255; $spadb990[30] = $spf0651e[9] >> 10 & 255; $spadb990[31] = $spf0651e[9] >> 18 & 255; } function feMul($spf0651e, $sp9fd6ef, $spb50ac0) { $spac2a8e = $sp9fd6ef[0]; $sp9d0926 = $sp9fd6ef[1]; $sp2b6c45 = $sp9fd6ef[2]; $sp773f3c = $sp9fd6ef[3]; $sp5dc4c9 = $sp9fd6ef[4]; $sp524d94 = $sp9fd6ef[5]; $sp4d1923 = $sp9fd6ef[6]; $spb072f3 = $sp9fd6ef[7]; $sp2f1d66 = $sp9fd6ef[8]; $sp398d84 = $sp9fd6ef[9]; $spf9c3f6 = $spb50ac0[0]; $sp406ed7 = $spb50ac0[1]; $sp037665 = $spb50ac0[2]; $sp8a7ed5 = $spb50ac0[3]; $spcb5397 = $spb50ac0[4]; $sp3e3178 = $spb50ac0[5]; $spa23353 = $spb50ac0[6]; $spfe1d00 = $spb50ac0[7]; $sp8bb6c2 = $spb50ac0[8]; $spc114b4 = $spb50ac0[9]; $sp466a4c = 19 * $sp406ed7; $sp58579a = 19 * $sp037665; $sp64e9dd = 19 * $sp8a7ed5; $spada685 = 19 * $spcb5397; $sp1ec69d = 19 * $sp3e3178; $spf1e81b = 19 * $spa23353; $spd18cc2 = 19 * $spfe1d00; $spcc76d8 = 19 * $sp8bb6c2; $sp93428f = 19 * $spc114b4; $sp73c53f = 2 * $sp9d0926; $sp9d106c = 2 * $sp773f3c; $spaccc93 = 2 * $sp524d94; $sp956579 = 2 * $spb072f3; $sp1198c0 = 2 * $sp398d84; $sp14d1f3 = $spac2a8e * $spf9c3f6; $spf8ae9c = $spac2a8e * $sp406ed7; $sp2a516b = $spac2a8e * $sp037665; $spa2c7ac = $spac2a8e * $sp8a7ed5; $spfdbb96 = $spac2a8e * $spcb5397; $sp592bba = $spac2a8e * $sp3e3178; $spcad4c6 = $spac2a8e * $spa23353; $spa59daf = $spac2a8e * $spfe1d00; $sp60663c = $spac2a8e * $sp8bb6c2; $sp2ccf03 = $spac2a8e * $spc114b4; $spa71a0d = $sp9d0926 * $spf9c3f6; $spcd497e = $sp73c53f * $sp406ed7; $spf4046c = $sp9d0926 * $sp037665; $spfad991 = $sp73c53f * $sp8a7ed5; $sp6560ee = $sp9d0926 * $spcb5397; $sp5c647c = $sp73c53f * $sp3e3178; $sp183b13 = $sp9d0926 * $spa23353; $sp93cee8 = $sp73c53f * $spfe1d00; $sp37b30f = $sp9d0926 * $sp8bb6c2; $spf5f37b = $sp73c53f * $sp93428f; $spd4ddef = $sp2b6c45 * $spf9c3f6; $spe641bd = $sp2b6c45 * $sp406ed7; $spacc831 = $sp2b6c45 * $sp037665; $sp5d33be = $sp2b6c45 * $sp8a7ed5; $spe7bb93 = $sp2b6c45 * $spcb5397; $sp9d6f1f = $sp2b6c45 * $sp3e3178; $spefe17f = $sp2b6c45 * $spa23353; $sp0ee357 = $sp2b6c45 * $spfe1d00; $spacc246 = $sp2b6c45 * $spcc76d8; $spd8313f = $sp2b6c45 * $sp93428f; $spc68a68 = $sp773f3c * $spf9c3f6; $sp916db8 = $sp9d106c * $sp406ed7; $sp0792f2 = $sp773f3c * $sp037665; $spb02946 = $sp9d106c * $sp8a7ed5; $sp21bc8e = $sp773f3c * $spcb5397; $sp3fb413 = $sp9d106c * $sp3e3178; $spb12218 = $sp773f3c * $spa23353; $sp0beaa9 = $sp9d106c * $spd18cc2; $spb25cc7 = $sp773f3c * $spcc76d8; $sp0cf246 = $sp9d106c * $sp93428f; $spe12a00 = $sp5dc4c9 * $spf9c3f6; $sp85b19f = $sp5dc4c9 * $sp406ed7; $sp7cb16d = $sp5dc4c9 * $sp037665; $sp4472e9 = $sp5dc4c9 * $sp8a7ed5; $sp60376b = $sp5dc4c9 * $spcb5397; $sp5af07b = $sp5dc4c9 * $sp3e3178; $spa76de0 = $sp5dc4c9 * $spf1e81b; $sp1fbb7f = $sp5dc4c9 * $spd18cc2; $spfb8584 = $sp5dc4c9 * $spcc76d8; $sp2c2da7 = $sp5dc4c9 * $sp93428f; $sp3d0f1a = $sp524d94 * $spf9c3f6; $spa58747 = $spaccc93 * $sp406ed7; $sp80f80b = $sp524d94 * $sp037665; $spf78c4d = $spaccc93 * $sp8a7ed5; $sp026f5d = $sp524d94 * $spcb5397; $sp32bdd5 = $spaccc93 * $sp1ec69d; $spc65a28 = $sp524d94 * $spf1e81b; $spe584cd = $spaccc93 * $spd18cc2; $sp5d5ada = $sp524d94 * $spcc76d8; $sp03ee4c = $spaccc93 * $sp93428f; $sp02495f = $sp4d1923 * $spf9c3f6; $spf6c3fe = $sp4d1923 * $sp406ed7; $spb5c331 = $sp4d1923 * $sp037665; $sp43e826 = $sp4d1923 * $sp8a7ed5; $spd5e6d3 = $sp4d1923 * $spada685; $sp4380d0 = $sp4d1923 * $sp1ec69d; $spebab4e = $sp4d1923 * $spf1e81b; $spee6261 = $sp4d1923 * $spd18cc2; $spc2fa34 = $sp4d1923 * $spcc76d8; $sp3b70ee = $sp4d1923 * $sp93428f; $sp7d47de = $spb072f3 * $spf9c3f6; $sp0d1651 = $sp956579 * $sp406ed7; $sp103023 = $spb072f3 * $sp037665; $sp4c469b = $sp956579 * $sp64e9dd; $spae2042 = $spb072f3 * $spada685; $sp16f890 = $sp956579 * $sp1ec69d; $sp4be706 = $spb072f3 * $spf1e81b; $spd27944 = $sp956579 * $spd18cc2; $sp04da21 = $spb072f3 * $spcc76d8; $sp3117a6 = $sp956579 * $sp93428f; $sp7b232d = $sp2f1d66 * $spf9c3f6; $spb089ef = $sp2f1d66 * $sp406ed7; $sp190b75 = $sp2f1d66 * $sp58579a; $spe61f34 = $sp2f1d66 * $sp64e9dd; $sp47ac4b = $sp2f1d66 * $spada685; $sp78980a = $sp2f1d66 * $sp1ec69d; $sp9ace35 = $sp2f1d66 * $spf1e81b; $sp536a86 = $sp2f1d66 * $spd18cc2; $spb3a304 = $sp2f1d66 * $spcc76d8; $sp317836 = $sp2f1d66 * $sp93428f; $sp5349cd = $sp398d84 * $spf9c3f6; $sp8f2b38 = $sp1198c0 * $sp466a4c; $sp8692d9 = $sp398d84 * $sp58579a; $spaf0f0b = $sp1198c0 * $sp64e9dd; $sp0511f1 = $sp398d84 * $spada685; $sp6216d9 = $sp1198c0 * $sp1ec69d; $sp980883 = $sp398d84 * $spf1e81b; $sp955a2e = $sp1198c0 * $spd18cc2; $spdc9624 = $sp398d84 * $spcc76d8; $sp09615d = $sp1198c0 * $sp93428f; $sp82ad2d = $sp14d1f3 + $spf5f37b + $spacc246 + $sp0beaa9 + $spa76de0 + $sp32bdd5 + $spd5e6d3 + $sp4c469b + $sp190b75 + $sp8f2b38; $sp83b3d9 = $spf8ae9c + $spa71a0d + $spd8313f + $spb25cc7 + $sp1fbb7f + $spc65a28 + $sp4380d0 + $spae2042 + $spe61f34 + $sp8692d9; $sp10f1bf = $sp2a516b + $spcd497e + $spd4ddef + $sp0cf246 + $spfb8584 + $spe584cd + $spebab4e + $sp16f890 + $sp47ac4b + $spaf0f0b; $spc8d35f = $spa2c7ac + $spf4046c + $spe641bd + $spc68a68 + $sp2c2da7 + $sp5d5ada + $spee6261 + $sp4be706 + $sp78980a + $sp0511f1; $sp9b628d = $spfdbb96 + $spfad991 + $spacc831 + $sp916db8 + $spe12a00 + $sp03ee4c + $spc2fa34 + $spd27944 + $sp9ace35 + $sp6216d9; $spa7e176 = $sp592bba + $sp6560ee + $sp5d33be + $sp0792f2 + $sp85b19f + $sp3d0f1a + $sp3b70ee + $sp04da21 + $sp536a86 + $sp980883; $sp5c4231 = $spcad4c6 + $sp5c647c + $spe7bb93 + $spb02946 + $sp7cb16d + $spa58747 + $sp02495f + $sp3117a6 + $spb3a304 + $sp955a2e; $sp556f85 = $spa59daf + $sp183b13 + $sp9d6f1f + $sp21bc8e + $sp4472e9 + $sp80f80b + $spf6c3fe + $sp7d47de + $sp317836 + $spdc9624; $sp785e40 = $sp60663c + $sp93cee8 + $spefe17f + $sp3fb413 + $sp60376b + $spf78c4d + $spb5c331 + $sp0d1651 + $sp7b232d + $sp09615d; $sp196028 = $sp2ccf03 + $sp37b30f + $sp0ee357 + $spb12218 + $sp5af07b + $sp026f5d + $sp43e826 + $sp103023 + $spb089ef + $sp5349cd; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp8ba87b = $sp83b3d9 + (1 << 24) >> 25; $sp10f1bf += $sp8ba87b; $sp83b3d9 -= $sp8ba87b << 25; $sp368b76 = $spa7e176 + (1 << 24) >> 25; $sp5c4231 += $sp368b76; $spa7e176 -= $sp368b76 << 25; $spd64f56 = $sp10f1bf + (1 << 25) >> 26; $spc8d35f += $spd64f56; $sp10f1bf -= $spd64f56 << 26; $spec0ba1 = $sp5c4231 + (1 << 25) >> 26; $sp556f85 += $spec0ba1; $sp5c4231 -= $spec0ba1 << 26; $spad0033 = $spc8d35f + (1 << 24) >> 25; $sp9b628d += $spad0033; $spc8d35f -= $spad0033 << 25; $spc85c85 = $sp556f85 + (1 << 24) >> 25; $sp785e40 += $spc85c85; $sp556f85 -= $spc85c85 << 25; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp1be762 = $sp785e40 + (1 << 25) >> 26; $sp196028 += $sp1be762; $sp785e40 -= $sp1be762 << 26; $spba60da = $sp196028 + (1 << 24) >> 25; $sp82ad2d += $spba60da * 19; $sp196028 -= $spba60da << 25; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $spf0651e[0] = $sp82ad2d; $spf0651e[1] = $sp83b3d9; $spf0651e[2] = $sp10f1bf; $spf0651e[3] = $spc8d35f; $spf0651e[4] = $sp9b628d; $spf0651e[5] = $spa7e176; $spf0651e[6] = $sp5c4231; $spf0651e[7] = $sp556f85; $spf0651e[8] = $sp785e40; $spf0651e[9] = $sp196028; } function feSquare($spf0651e, $sp9fd6ef) { $spac2a8e = $sp9fd6ef[0]; $sp9d0926 = $sp9fd6ef[1]; $sp2b6c45 = $sp9fd6ef[2]; $sp773f3c = $sp9fd6ef[3]; $sp5dc4c9 = $sp9fd6ef[4]; $sp524d94 = $sp9fd6ef[5]; $sp4d1923 = $sp9fd6ef[6]; $spb072f3 = $sp9fd6ef[7]; $sp2f1d66 = $sp9fd6ef[8]; $sp398d84 = $sp9fd6ef[9]; $spc35650 = 2 * $spac2a8e; $sp73c53f = 2 * $sp9d0926; $spd5fe58 = 2 * $sp2b6c45; $sp9d106c = 2 * $sp773f3c; $sp9304c9 = 2 * $sp5dc4c9; $spaccc93 = 2 * $sp524d94; $sp6f5804 = 2 * $sp4d1923; $sp956579 = 2 * $spb072f3; $spc51895 = 38 * $sp524d94; $spf949fc = 19 * $sp4d1923; $sp623f59 = 38 * $spb072f3; $spc4fcfc = 19 * $sp2f1d66; $spdda4ea = 38 * $sp398d84; $sp12f33b = $spac2a8e * $spac2a8e; $spc1d673 = $spc35650 * $sp9d0926; $spdc86c9 = $spc35650 * $sp2b6c45; $spcdd094 = $spc35650 * $sp773f3c; $sp460c08 = $spc35650 * $sp5dc4c9; $spcc256c = $spc35650 * $sp524d94; $spd86a20 = $spc35650 * $sp4d1923; $spa5776f = $spc35650 * $spb072f3; $sp62086b = $spc35650 * $sp2f1d66; $sp53f189 = $spc35650 * $sp398d84; $sp4a8991 = $sp73c53f * $sp9d0926; $sp02291c = $sp73c53f * $sp2b6c45; $sp6bea6f = $sp73c53f * $sp9d106c; $spe33fb8 = $sp73c53f * $sp5dc4c9; $sp7de45d = $sp73c53f * $spaccc93; $sp09550d = $sp73c53f * $sp4d1923; $sp52fc1d = $sp73c53f * $sp956579; $spe43ecc = $sp73c53f * $sp2f1d66; $spdaaf45 = $sp73c53f * $spdda4ea; $spcfcb4b = $sp2b6c45 * $sp2b6c45; $spb3f1e7 = $spd5fe58 * $sp773f3c; $sp278c10 = $spd5fe58 * $sp5dc4c9; $sp82ce4f = $spd5fe58 * $sp524d94; $sp3d4b30 = $spd5fe58 * $sp4d1923; $spb00bcb = $spd5fe58 * $spb072f3; $spb785c6 = $spd5fe58 * $spc4fcfc; $sp672d7e = $sp2b6c45 * $spdda4ea; $sp82c0c6 = $sp9d106c * $sp773f3c; $sp0ec1fe = $sp9d106c * $sp5dc4c9; $spbeb101 = $sp9d106c * $spaccc93; $sp681aca = $sp9d106c * $sp4d1923; $sp7d20bc = $sp9d106c * $sp623f59; $spe1d145 = $sp9d106c * $spc4fcfc; $spd042ea = $sp9d106c * $spdda4ea; $sp715a39 = $sp5dc4c9 * $sp5dc4c9; $spc800d8 = $sp9304c9 * $sp524d94; $spd6e92c = $sp9304c9 * $spf949fc; $sp8473e2 = $sp5dc4c9 * $sp623f59; $spd97645 = $sp9304c9 * $spc4fcfc; $sp2ace97 = $sp5dc4c9 * $spdda4ea; $spf55fa6 = $sp524d94 * $spc51895; $sp7c4e8f = $spaccc93 * $spf949fc; $spe84719 = $spaccc93 * $sp623f59; $sp87ff4b = $spaccc93 * $spc4fcfc; $sp849580 = $spaccc93 * $spdda4ea; $sp3b1e7b = $sp4d1923 * $spf949fc; $sp39b2e2 = $sp4d1923 * $sp623f59; $sp31f02d = $sp6f5804 * $spc4fcfc; $sp37ed8c = $sp4d1923 * $spdda4ea; $sp1142fc = $spb072f3 * $sp623f59; $spce4f6c = $sp956579 * $spc4fcfc; $sp71cb4a = $sp956579 * $spdda4ea; $sp540366 = $sp2f1d66 * $spc4fcfc; $spec1ad5 = $sp2f1d66 * $spdda4ea; $sp9a1b94 = $sp398d84 * $spdda4ea; $sp82ad2d = $sp12f33b + $spdaaf45 + $spb785c6 + $sp7d20bc + $spd6e92c + $spf55fa6; $sp83b3d9 = $spc1d673 + $sp672d7e + $spe1d145 + $sp8473e2 + $sp7c4e8f; $sp10f1bf = $spdc86c9 + $sp4a8991 + $spd042ea + $spd97645 + $spe84719 + $sp3b1e7b; $spc8d35f = $spcdd094 + $sp02291c + $sp2ace97 + $sp87ff4b + $sp39b2e2; $sp9b628d = $sp460c08 + $sp6bea6f + $spcfcb4b + $sp849580 + $sp31f02d + $sp1142fc; $spa7e176 = $spcc256c + $spe33fb8 + $spb3f1e7 + $sp37ed8c + $spce4f6c; $sp5c4231 = $spd86a20 + $sp7de45d + $sp278c10 + $sp82c0c6 + $sp71cb4a + $sp540366; $sp556f85 = $spa5776f + $sp09550d + $sp82ce4f + $sp0ec1fe + $spec1ad5; $sp785e40 = $sp62086b + $sp52fc1d + $sp3d4b30 + $spbeb101 + $sp715a39 + $sp9a1b94; $sp196028 = $sp53f189 + $spe43ecc + $spb00bcb + $sp681aca + $spc800d8; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp8ba87b = $sp83b3d9 + (1 << 24) >> 25; $sp10f1bf += $sp8ba87b; $sp83b3d9 -= $sp8ba87b << 25; $sp368b76 = $spa7e176 + (1 << 24) >> 25; $sp5c4231 += $sp368b76; $spa7e176 -= $sp368b76 << 25; $spd64f56 = $sp10f1bf + (1 << 25) >> 26; $spc8d35f += $spd64f56; $sp10f1bf -= $spd64f56 << 26; $spec0ba1 = $sp5c4231 + (1 << 25) >> 26; $sp556f85 += $spec0ba1; $sp5c4231 -= $spec0ba1 << 26; $spad0033 = $spc8d35f + (1 << 24) >> 25; $sp9b628d += $spad0033; $spc8d35f -= $spad0033 << 25; $spc85c85 = $sp556f85 + (1 << 24) >> 25; $sp785e40 += $spc85c85; $sp556f85 -= $spc85c85 << 25; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp1be762 = $sp785e40 + (1 << 25) >> 26; $sp196028 += $sp1be762; $sp785e40 -= $sp1be762 << 26; $spba60da = $sp196028 + (1 << 24) >> 25; $sp82ad2d += $spba60da * 19; $sp196028 -= $spba60da << 25; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $spf0651e[0] = $sp82ad2d; $spf0651e[1] = $sp83b3d9; $spf0651e[2] = $sp10f1bf; $spf0651e[3] = $spc8d35f; $spf0651e[4] = $sp9b628d; $spf0651e[5] = $spa7e176; $spf0651e[6] = $sp5c4231; $spf0651e[7] = $sp556f85; $spf0651e[8] = $sp785e40; $spf0651e[9] = $sp196028; } function feInvert($sp0e5d27, $spff6364) { $spb0fb6a = new SplFixedArray(10); $sp18758a = new SplFixedArray(10); $sp37a4fe = new SplFixedArray(10); $sp7c4299 = new SplFixedArray(10); $this->feSquare($spb0fb6a, $spff6364); for ($sp043126 = 1; $sp043126 < 1; ++$sp043126) { $this->feSquare($spb0fb6a, $spb0fb6a); } $this->feSquare($sp18758a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 2; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($sp18758a, $spff6364, $sp18758a); $this->feMul($spb0fb6a, $spb0fb6a, $sp18758a); $this->feSquare($sp37a4fe, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 1; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp18758a, $sp37a4fe); $this->feSquare($sp37a4fe, $sp18758a); for ($sp043126 = 1; $sp043126 < 5; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp37a4fe, $sp18758a); $this->feSquare($sp37a4fe, $sp18758a); for ($sp043126 = 1; $sp043126 < 10; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp37a4fe, $sp37a4fe, $sp18758a); $this->feSquare($sp7c4299, $sp37a4fe); for ($sp043126 = 1; $sp043126 < 20; ++$sp043126) { $this->feSquare($sp7c4299, $sp7c4299); } $this->feMul($sp37a4fe, $sp7c4299, $sp37a4fe); $this->feSquare($sp37a4fe, $sp37a4fe); for ($sp043126 = 1; $sp043126 < 10; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp37a4fe, $sp18758a); $this->feSquare($sp37a4fe, $sp18758a); for ($sp043126 = 1; $sp043126 < 50; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp37a4fe, $sp37a4fe, $sp18758a); $this->feSquare($sp7c4299, $sp37a4fe); for ($sp043126 = 1; $sp043126 < 100; ++$sp043126) { $this->feSquare($sp7c4299, $sp7c4299); } $this->feMul($sp37a4fe, $sp7c4299, $sp37a4fe); $this->feSquare($sp37a4fe, $sp37a4fe); for ($sp043126 = 1; $sp043126 < 50; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp37a4fe, $sp18758a); $this->feSquare($sp18758a, $sp18758a); for ($sp043126 = 1; $sp043126 < 5; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($sp0e5d27, $sp18758a, $spb0fb6a); } function feSquare2($spf0651e, $sp9fd6ef) { $spac2a8e = $sp9fd6ef[0]; $sp9d0926 = $sp9fd6ef[1]; $sp2b6c45 = $sp9fd6ef[2]; $sp773f3c = $sp9fd6ef[3]; $sp5dc4c9 = $sp9fd6ef[4]; $sp524d94 = $sp9fd6ef[5]; $sp4d1923 = $sp9fd6ef[6]; $spb072f3 = $sp9fd6ef[7]; $sp2f1d66 = $sp9fd6ef[8]; $sp398d84 = $sp9fd6ef[9]; $spc35650 = 2 * $spac2a8e; $sp73c53f = 2 * $sp9d0926; $spd5fe58 = 2 * $sp2b6c45; $sp9d106c = 2 * $sp773f3c; $sp9304c9 = 2 * $sp5dc4c9; $spaccc93 = 2 * $sp524d94; $sp6f5804 = 2 * $sp4d1923; $sp956579 = 2 * $spb072f3; $spc51895 = 38 * $sp524d94; $spf949fc = 19 * $sp4d1923; $sp623f59 = 38 * $spb072f3; $spc4fcfc = 19 * $sp2f1d66; $spdda4ea = 38 * $sp398d84; $sp12f33b = $spac2a8e * $spac2a8e; $spc1d673 = $spc35650 * $sp9d0926; $spdc86c9 = $spc35650 * $sp2b6c45; $spcdd094 = $spc35650 * $sp773f3c; $sp460c08 = $spc35650 * $sp5dc4c9; $spcc256c = $spc35650 * $sp524d94; $spd86a20 = $spc35650 * $sp4d1923; $spa5776f = $spc35650 * $spb072f3; $sp62086b = $spc35650 * $sp2f1d66; $sp53f189 = $spc35650 * $sp398d84; $sp4a8991 = $sp73c53f * $sp9d0926; $sp02291c = $sp73c53f * $sp2b6c45; $sp6bea6f = $sp73c53f * $sp9d106c; $spe33fb8 = $sp73c53f * $sp5dc4c9; $sp7de45d = $sp73c53f * $spaccc93; $sp09550d = $sp73c53f * $sp4d1923; $sp52fc1d = $sp73c53f * $sp956579; $spe43ecc = $sp73c53f * $sp2f1d66; $spdaaf45 = $sp73c53f * $spdda4ea; $spcfcb4b = $sp2b6c45 * $sp2b6c45; $spb3f1e7 = $spd5fe58 * $sp773f3c; $sp278c10 = $spd5fe58 * $sp5dc4c9; $sp82ce4f = $spd5fe58 * $sp524d94; $sp3d4b30 = $spd5fe58 * $sp4d1923; $spb00bcb = $spd5fe58 * $spb072f3; $spb785c6 = $spd5fe58 * $spc4fcfc; $sp672d7e = $sp2b6c45 * $spdda4ea; $sp82c0c6 = $sp9d106c * $sp773f3c; $sp0ec1fe = $sp9d106c * $sp5dc4c9; $spbeb101 = $sp9d106c * $spaccc93; $sp681aca = $sp9d106c * $sp4d1923; $sp7d20bc = $sp9d106c * $sp623f59; $spe1d145 = $sp9d106c * $spc4fcfc; $spd042ea = $sp9d106c * $spdda4ea; $sp715a39 = $sp5dc4c9 * $sp5dc4c9; $spc800d8 = $sp9304c9 * $sp524d94; $spd6e92c = $sp9304c9 * $spf949fc; $sp8473e2 = $sp5dc4c9 * $sp623f59; $spd97645 = $sp9304c9 * $spc4fcfc; $sp2ace97 = $sp5dc4c9 * $spdda4ea; $spf55fa6 = $sp524d94 * $spc51895; $sp7c4e8f = $spaccc93 * $spf949fc; $spe84719 = $spaccc93 * $sp623f59; $sp87ff4b = $spaccc93 * $spc4fcfc; $sp849580 = $spaccc93 * $spdda4ea; $sp3b1e7b = $sp4d1923 * $spf949fc; $sp39b2e2 = $sp4d1923 * $sp623f59; $sp31f02d = $sp6f5804 * $spc4fcfc; $sp37ed8c = $sp4d1923 * $spdda4ea; $sp1142fc = $spb072f3 * $sp623f59; $spce4f6c = $sp956579 * $spc4fcfc; $sp71cb4a = $sp956579 * $spdda4ea; $sp540366 = $sp2f1d66 * $spc4fcfc; $spec1ad5 = $sp2f1d66 * $spdda4ea; $sp9a1b94 = $sp398d84 * $spdda4ea; $sp82ad2d = $sp12f33b + $spdaaf45 + $spb785c6 + $sp7d20bc + $spd6e92c + $spf55fa6; $sp83b3d9 = $spc1d673 + $sp672d7e + $spe1d145 + $sp8473e2 + $sp7c4e8f; $sp10f1bf = $spdc86c9 + $sp4a8991 + $spd042ea + $spd97645 + $spe84719 + $sp3b1e7b; $spc8d35f = $spcdd094 + $sp02291c + $sp2ace97 + $sp87ff4b + $sp39b2e2; $sp9b628d = $sp460c08 + $sp6bea6f + $spcfcb4b + $sp849580 + $sp31f02d + $sp1142fc; $spa7e176 = $spcc256c + $spe33fb8 + $spb3f1e7 + $sp37ed8c + $spce4f6c; $sp5c4231 = $spd86a20 + $sp7de45d + $sp278c10 + $sp82c0c6 + $sp71cb4a + $sp540366; $sp556f85 = $spa5776f + $sp09550d + $sp82ce4f + $sp0ec1fe + $spec1ad5; $sp785e40 = $sp62086b + $sp52fc1d + $sp3d4b30 + $spbeb101 + $sp715a39 + $sp9a1b94; $sp196028 = $sp53f189 + $spe43ecc + $spb00bcb + $sp681aca + $spc800d8; $sp82ad2d += $sp82ad2d; $sp83b3d9 += $sp83b3d9; $sp10f1bf += $sp10f1bf; $spc8d35f += $spc8d35f; $sp9b628d += $sp9b628d; $spa7e176 += $spa7e176; $sp5c4231 += $sp5c4231; $sp556f85 += $sp556f85; $sp785e40 += $sp785e40; $sp196028 += $sp196028; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp8ba87b = $sp83b3d9 + (1 << 24) >> 25; $sp10f1bf += $sp8ba87b; $sp83b3d9 -= $sp8ba87b << 25; $sp368b76 = $spa7e176 + (1 << 24) >> 25; $sp5c4231 += $sp368b76; $spa7e176 -= $sp368b76 << 25; $spd64f56 = $sp10f1bf + (1 << 25) >> 26; $spc8d35f += $spd64f56; $sp10f1bf -= $spd64f56 << 26; $spec0ba1 = $sp5c4231 + (1 << 25) >> 26; $sp556f85 += $spec0ba1; $sp5c4231 -= $spec0ba1 << 26; $spad0033 = $spc8d35f + (1 << 24) >> 25; $sp9b628d += $spad0033; $spc8d35f -= $spad0033 << 25; $spc85c85 = $sp556f85 + (1 << 24) >> 25; $sp785e40 += $spc85c85; $sp556f85 -= $spc85c85 << 25; $sp3c2321 = $sp9b628d + (1 << 25) >> 26; $spa7e176 += $sp3c2321; $sp9b628d -= $sp3c2321 << 26; $sp1be762 = $sp785e40 + (1 << 25) >> 26; $sp196028 += $sp1be762; $sp785e40 -= $sp1be762 << 26; $spba60da = $sp196028 + (1 << 24) >> 25; $sp82ad2d += $spba60da * 19; $sp196028 -= $spba60da << 25; $sp0f8791 = $sp82ad2d + (1 << 25) >> 26; $sp83b3d9 += $sp0f8791; $sp82ad2d -= $sp0f8791 << 26; $spf0651e[0] = $sp82ad2d; $spf0651e[1] = $sp83b3d9; $spf0651e[2] = $sp10f1bf; $spf0651e[3] = $spc8d35f; $spf0651e[4] = $sp9b628d; $spf0651e[5] = $spa7e176; $spf0651e[6] = $sp5c4231; $spf0651e[7] = $sp556f85; $spf0651e[8] = $sp785e40; $spf0651e[9] = $sp196028; } function feIsNegative($sp9fd6ef) { $spadb990 = new SplFixedArray(32); $this->feToBytes($spadb990, $sp9fd6ef); return $spadb990[0] & 1; } function cryptoVerify32($sp94473b, $spf56e7d) { $sp3da250 = 0; for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { $sp3da250 |= $sp94473b[$sp043126] ^ $spf56e7d[$sp043126]; } return (1 & $sp3da250 - 1 >> 8) - 1; } function feIsNonZero($sp9fd6ef) { $spadb990 = new SplFixedArray(32); $sp55d9c6 = new SplFixedArray(32); $this->feZero($sp55d9c6); $this->feToBytes($spadb990, $sp9fd6ef); return $this->cryptoVerify32($spadb990, $sp55d9c6); } function feNegative($spf0651e, $sp9fd6ef) { for ($sp043126 = 0; $sp043126 < 10; ++$sp043126) { $spf0651e[$sp043126] = -$sp9fd6ef[$sp043126]; } } function fePow22523($sp0e5d27, $spff6364) { $spb0fb6a = new SplFixedArray(10); $sp18758a = new SplFixedArray(10); $sp37a4fe = new SplFixedArray(10); $this->feSquare($spb0fb6a, $spff6364); for ($sp043126 = 1; $sp043126 < 1; ++$sp043126) { $this->feSquare($spb0fb6a, $spb0fb6a); } $this->feSquare($sp18758a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 2; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($sp18758a, $spff6364, $sp18758a); $this->feMul($spb0fb6a, $spb0fb6a, $sp18758a); $this->feSquare($spb0fb6a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 1; ++$sp043126) { $this->feSquare($spb0fb6a, $spb0fb6a); } $this->feMul($spb0fb6a, $sp18758a, $spb0fb6a); $this->feSquare($sp18758a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 5; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($spb0fb6a, $sp18758a, $spb0fb6a); $this->feSquare($sp18758a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 10; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($sp18758a, $sp18758a, $spb0fb6a); $this->feSquare($sp37a4fe, $sp18758a); for ($sp043126 = 1; $sp043126 < 20; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp37a4fe, $sp18758a); $this->feSquare($sp18758a, $sp18758a); for ($sp043126 = 1; $sp043126 < 10; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($spb0fb6a, $sp18758a, $spb0fb6a); $this->feSquare($sp18758a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 50; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($sp18758a, $sp18758a, $spb0fb6a); $this->feSquare($sp37a4fe, $sp18758a); for ($sp043126 = 1; $sp043126 < 100; ++$sp043126) { $this->feSquare($sp37a4fe, $sp37a4fe); } $this->feMul($sp18758a, $sp37a4fe, $sp18758a); $this->feSquare($sp18758a, $sp18758a); for ($sp043126 = 1; $sp043126 < 50; ++$sp043126) { $this->feSquare($sp18758a, $sp18758a); } $this->feMul($spb0fb6a, $sp18758a, $spb0fb6a); $this->feSquare($spb0fb6a, $spb0fb6a); for ($sp043126 = 1; $sp043126 < 2; ++$sp043126) { $this->feSquare($spb0fb6a, $spb0fb6a); } $this->feMul($sp0e5d27, $spb0fb6a, $spff6364); } function GeProjectiveZero(GeProjective $spf0651e) { $this->feZero($spf0651e->X); $this->feOne($spf0651e->Y); $this->feOne($spf0651e->Z); } function GeProjectiveDouble(GeCompleted $sp21b9f1, GeProjective $spdb27be) { $spb0fb6a = new SplFixedArray(10); $this->feSquare($sp21b9f1->X, $spdb27be->X); $this->feSquare($sp21b9f1->Z, $spdb27be->Y); $this->feSquare2($sp21b9f1->T, $spdb27be->Z); $this->feAdd($sp21b9f1->Y, $spdb27be->X, $spdb27be->Y); $this->feSquare($spb0fb6a, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Y, $sp21b9f1->Z, $sp21b9f1->X); $this->feSub($sp21b9f1->Z, $sp21b9f1->Z, $sp21b9f1->X); $this->feSub($sp21b9f1->X, $spb0fb6a, $sp21b9f1->Y); $this->feSub($sp21b9f1->T, $sp21b9f1->T, $sp21b9f1->Z); } function GeExtendedZero(GeExtended $spf0651e) { $this->feZero($spf0651e->X); $this->feOne($spf0651e->Y); $this->feOne($spf0651e->Z); $this->feZero($spf0651e->T); } function GeExtendedtoGeProjective(GeProjective $sp21b9f1, GeExtended $spdb27be) { $this->feCopy($sp21b9f1->X, $spdb27be->X); $this->feCopy($sp21b9f1->Y, $spdb27be->Y); $this->feCopy($sp21b9f1->Z, $spdb27be->Z); } function GeExtendedDouble(GeCompleted $sp21b9f1, GeExtended $spdb27be) { $sp7b77be = new GeProjective(); $this->GeExtendedtoGeProjective($sp7b77be, $spdb27be); $this->GeProjectiveDouble($sp21b9f1, $sp7b77be); } function GeExtendedtoGeCached(GeCached $sp21b9f1, GeExtended $spdb27be) { $spb51323 = array(-21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199); $this->feAdd($sp21b9f1->YplusX, $spdb27be->Y, $spdb27be->X); $this->feSub($sp21b9f1->YminusX, $spdb27be->Y, $spdb27be->X); $this->feCopy($sp21b9f1->Z, $spdb27be->Z); $this->feMul($sp21b9f1->T2d, $spdb27be->T, $spb51323); } function GeExtendedtoBytes($spadb990, GeExtended $spf0651e) { $sp43a06a = new SplFixedArray(10); $sp94473b = new SplFixedArray(10); $spf56e7d = new SplFixedArray(10); $this->feInvert($sp43a06a, $spf0651e->Z); $this->feMul($sp94473b, $spf0651e->X, $sp43a06a); $this->feMul($spf56e7d, $spf0651e->Y, $sp43a06a); $this->feToBytes($spadb990, $spf56e7d); $spadb990[31] ^= $this->feIsNegative($sp94473b) << 7; } function GeCompletedtoGeProjective(GeProjective $sp21b9f1, GeCompleted $spdb27be) { $this->feMul($sp21b9f1->X, $spdb27be->X, $spdb27be->T); $this->feMul($sp21b9f1->Y, $spdb27be->Y, $spdb27be->Z); $this->feMul($sp21b9f1->Z, $spdb27be->Z, $spdb27be->T); } function GeCompletedtoGeExtended(GeExtended $sp21b9f1, GeCompleted $spdb27be) { $this->feMul($sp21b9f1->X, $spdb27be->X, $spdb27be->T); $this->feMul($sp21b9f1->Y, $spdb27be->Y, $spdb27be->Z); $this->feMul($sp21b9f1->Z, $spdb27be->Z, $spdb27be->T); $this->feMul($sp21b9f1->T, $spdb27be->X, $spdb27be->Y); } function GePrecompZero(GePrecomp $spf0651e) { $this->feOne($spf0651e->yplusx); $this->feOne($spf0651e->yminusx); $this->feZero($spf0651e->xy2d); } function geAdd(GeCompleted $sp21b9f1, GeExtended $spdb27be, GeCached $sp7b77be) { $spb0fb6a = new SplFixedArray(10); $this->feAdd($sp21b9f1->X, $spdb27be->Y, $spdb27be->X); $this->feSub($sp21b9f1->Y, $spdb27be->Y, $spdb27be->X); $this->feMul($sp21b9f1->Z, $sp21b9f1->X, $sp7b77be->YplusX); $this->feMul($sp21b9f1->Y, $sp21b9f1->Y, $sp7b77be->YminusX); $this->feMul($sp21b9f1->T, $sp7b77be->T2d, $spdb27be->T); $this->feMul($sp21b9f1->X, $spdb27be->Z, $sp7b77be->Z); $this->feAdd($spb0fb6a, $sp21b9f1->X, $sp21b9f1->X); $this->feSub($sp21b9f1->X, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Y, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Z, $spb0fb6a, $sp21b9f1->T); $this->feSub($sp21b9f1->T, $spb0fb6a, $sp21b9f1->T); } function geMixedAdd(GeCompleted $sp21b9f1, GeExtended $spdb27be, GePrecomp $sp7b77be) { $spb0fb6a = new SplFixedArray(10); $this->feAdd($sp21b9f1->X, $spdb27be->Y, $spdb27be->X); $this->feSub($sp21b9f1->Y, $spdb27be->Y, $spdb27be->X); $this->feMul($sp21b9f1->Z, $sp21b9f1->X, $sp7b77be->yplusx); $this->feMul($sp21b9f1->Y, $sp21b9f1->Y, $sp7b77be->yminusx); $this->feMul($sp21b9f1->T, $sp7b77be->xy2d, $spdb27be->T); $this->feAdd($spb0fb6a, $spdb27be->Z, $spdb27be->Z); $this->feSub($sp21b9f1->X, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Y, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Z, $spb0fb6a, $sp21b9f1->T); $this->feSub($sp21b9f1->T, $spb0fb6a, $sp21b9f1->T); } function geSub(GeCompleted $sp21b9f1, GeExtended $spdb27be, GeCached $sp7b77be) { $spb0fb6a = new SplFixedArray(10); $this->feAdd($sp21b9f1->X, $spdb27be->Y, $spdb27be->X); $this->feSub($sp21b9f1->Y, $spdb27be->Y, $spdb27be->X); $this->feMul($sp21b9f1->Z, $sp21b9f1->X, $sp7b77be->YminusX); $this->feMul($sp21b9f1->Y, $sp21b9f1->Y, $sp7b77be->YplusX); $this->feMul($sp21b9f1->T, $sp7b77be->T2d, $spdb27be->T); $this->feMul($sp21b9f1->X, $spdb27be->Z, $sp7b77be->Z); $this->feAdd($spb0fb6a, $sp21b9f1->X, $sp21b9f1->X); $this->feSub($sp21b9f1->X, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Y, $sp21b9f1->Z, $sp21b9f1->Y); $this->feSub($sp21b9f1->Z, $spb0fb6a, $sp21b9f1->T); $this->feAdd($sp21b9f1->T, $spb0fb6a, $sp21b9f1->T); } function geMixedSub(GeCompleted $sp21b9f1, GeExtended $spdb27be, GePrecomp $sp7b77be) { $spb0fb6a = new SplFixedArray(10); $this->feAdd($sp21b9f1->X, $spdb27be->Y, $spdb27be->X); $this->feSub($sp21b9f1->Y, $spdb27be->Y, $spdb27be->X); $this->feMul($sp21b9f1->Z, $sp21b9f1->X, $sp7b77be->yminusx); $this->feMul($sp21b9f1->Y, $sp21b9f1->Y, $sp7b77be->yplusx); $this->feMul($sp21b9f1->T, $sp7b77be->xy2d, $spdb27be->T); $this->feAdd($spb0fb6a, $spdb27be->Z, $spdb27be->Z); $this->feSub($sp21b9f1->X, $sp21b9f1->Z, $sp21b9f1->Y); $this->feAdd($sp21b9f1->Y, $sp21b9f1->Z, $sp21b9f1->Y); $this->feSub($sp21b9f1->Z, $spb0fb6a, $sp21b9f1->T); $this->feAdd($sp21b9f1->T, $spb0fb6a, $sp21b9f1->T); } function geFromBytesNegateVartime(GeExtended $spf0651e, $spadb990) { $sp9b84fb = new SplFixedArray(10); $sp0606f5 = new SplFixedArray(10); $sp59b3ba = new SplFixedArray(10); $spd3b5e1 = new SplFixedArray(10); $sp3b1b79 = new SplFixedArray(10); $sp3da250 = array(-10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116); $spd7b413 = array(-32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482); $this->feFromBytes($spf0651e->Y, $spadb990); $this->feOne($spf0651e->Z); $this->feSquare($sp9b84fb, $spf0651e->Y); $this->feMul($sp0606f5, $sp9b84fb, $sp3da250); $this->feSub($sp9b84fb, $sp9b84fb, $spf0651e->Z); $this->feAdd($sp0606f5, $sp0606f5, $spf0651e->Z); $this->feSquare($sp59b3ba, $sp0606f5); $this->feMul($sp59b3ba, $sp59b3ba, $sp0606f5); $this->feSquare($spf0651e->X, $sp59b3ba); $this->feMul($spf0651e->X, $spf0651e->X, $sp0606f5); $this->feMul($spf0651e->X, $spf0651e->X, $sp9b84fb); $this->fePow22523($spf0651e->X, $spf0651e->X); $this->feMul($spf0651e->X, $spf0651e->X, $sp59b3ba); $this->feMul($spf0651e->X, $spf0651e->X, $sp9b84fb); $speca94f = new SplFixedArray(32); $spef51fd = new SplFixedArray(32); $this->feSquare($spd3b5e1, $spf0651e->X); $this->feMul($spd3b5e1, $spd3b5e1, $sp0606f5); $this->feSub($sp3b1b79, $spd3b5e1, $sp9b84fb); if ($this->feIsNonZero($sp3b1b79)) { $this->feAdd($sp3b1b79, $spd3b5e1, $sp9b84fb); if ($this->feIsNonZero($sp3b1b79)) { return false; } $this->feMul($spf0651e->X, $spf0651e->X, $spd7b413); $this->feToBytes($speca94f, $spf0651e->X); for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { $spef51fd[31 - $sp043126] = $speca94f[$sp043126]; } } if ($this->feIsNegative($spf0651e->X) == $spadb990[31] >> 7) { $this->feNegative($spf0651e->X, $spf0651e->X); } $this->feMul($spf0651e->T, $spf0651e->X, $spf0651e->Y); return true; } function geToBytes($spadb990, GeProjective $spf0651e) { $sp43a06a = new SplFixedArray(10); $sp94473b = new SplFixedArray(10); $spf56e7d = new SplFixedArray(10); $this->feInvert($sp43a06a, $spf0651e->Z); $this->feMul($sp94473b, $spf0651e->X, $sp43a06a); $this->feMul($spf56e7d, $spf0651e->Y, $sp43a06a); $this->feToBytes($spadb990, $spf56e7d); $spadb990[31] ^= $this->feIsNegative($sp94473b) << 7; } function equal($sp947dc8, $spf833ad) { $sp94473b = $sp947dc8 ^ $spf833ad; $sp94473b--; $sp94473b &= 4294967295; return $sp94473b >> 31; } function negative($sp947dc8) { return $sp947dc8 >> 31 & 1; } function cMove(GePrecomp $sp20b13b, GePrecomp $sp9b84fb, $sp947dc8) { $this->feCMove($sp20b13b->yplusx, $sp9b84fb->yplusx, $sp947dc8); $this->feCMove($sp20b13b->yminusx, $sp9b84fb->yminusx, $sp947dc8); $this->feCMove($sp20b13b->xy2d, $sp9b84fb->xy2d, $sp947dc8); } function select(GePrecomp $sp20b13b, $spa0668e, $sp947dc8) { $spac76ea = new GePrecomp(); $sp3c1e67 = $this->negative($sp947dc8); $sp0b5674 = $sp947dc8 - ((-$sp3c1e67 & $sp947dc8) << 1); $this->GePrecompZero($sp20b13b); for ($sp043126 = 0; $sp043126 < 8; ++$sp043126) { $this->cMove($sp20b13b, static::$base[$spa0668e][$sp043126], $this->equal($sp0b5674, $sp043126 + 1)); } $this->feCopy($spac76ea->yplusx, $sp20b13b->yminusx); $this->feCopy($spac76ea->yminusx, $sp20b13b->yplusx); $this->feNegative($spac76ea->xy2d, $sp20b13b->xy2d); $this->cMove($sp20b13b, $spac76ea, $sp3c1e67); } function geScalarmultBase(GeExtended $spf0651e, $spac00d1) { $spf6517c = new SplFixedArray(64); $sp21b9f1 = new GeCompleted(); $spadb990 = new GeProjective(); $sp20b13b = new GePrecomp(); for ($sp043126 = 0; $sp043126 < 32; ++$sp043126) { $spf6517c[2 * $sp043126] = $spac00d1[$sp043126] & 15; $spf6517c[2 * $sp043126 + 1] = $spac00d1[$sp043126] >> 4 & 15; } $sp936b13 = 0; for ($sp043126 = 0; $sp043126 < 63; ++$sp043126) { $spf6517c[$sp043126] += $sp936b13; $sp936b13 = $spf6517c[$sp043126] + 8; $sp936b13 >>= 4; $spf6517c[$sp043126] -= $sp936b13 << 4; } $spf6517c[63] += $sp936b13; $this->GeExtendedZero($spf0651e); for ($sp043126 = 1; $sp043126 < 64; $sp043126 += 2) { $this->select($sp20b13b, $sp043126 / 2, $spf6517c[$sp043126]); $this->geMixedAdd($sp21b9f1, $spf0651e, $sp20b13b); $this->GeCompletedtoGeExtended($spf0651e, $sp21b9f1); } $this->GeExtendedDouble($sp21b9f1, $spf0651e); $this->GeCompletedtoGeProjective($spadb990, $sp21b9f1); $this->GeProjectiveDouble($sp21b9f1, $spadb990); $this->GeCompletedtoGeProjective($spadb990, $sp21b9f1); $this->GeProjectiveDouble($sp21b9f1, $spadb990); $this->GeCompletedtoGeProjective($spadb990, $sp21b9f1); $this->GeProjectiveDouble($sp21b9f1, $spadb990); $this->GeCompletedtoGeExtended($spf0651e, $sp21b9f1); for ($sp043126 = 0; $sp043126 < 64; $sp043126 += 2) { $this->select($sp20b13b, $sp043126 / 2, $spf6517c[$sp043126]); $this->geMixedAdd($sp21b9f1, $spf0651e, $sp20b13b); $this->GeCompletedtoGeExtended($spf0651e, $sp21b9f1); } } function slide($sp21b9f1, $spac00d1) { for ($sp043126 = 0; $sp043126 < 256; ++$sp043126) { $sp21b9f1[$sp043126] = 1 & $spac00d1[$sp043126 >> 3] >> ($sp043126 & 7); } for ($sp043126 = 0; $sp043126 < 256; ++$sp043126) { if ($sp21b9f1[$sp043126]) { for ($sp947dc8 = 1; $sp947dc8 <= 6 && $sp043126 + $sp947dc8 < 256; ++$sp947dc8) { if ($sp21b9f1[$sp043126 + $sp947dc8]) { if ($sp21b9f1[$sp043126] + ($sp21b9f1[$sp043126 + $sp947dc8] << $sp947dc8) <= 15) { $sp21b9f1[$sp043126] += $sp21b9f1[$sp043126 + $sp947dc8] << $sp947dc8; $sp21b9f1[$sp043126 + $sp947dc8] = 0; } else { if ($sp21b9f1[$sp043126] - ($sp21b9f1[$sp043126 + $sp947dc8] << $sp947dc8) >= -15) { $sp21b9f1[$sp043126] -= $sp21b9f1[$sp043126 + $sp947dc8] << $sp947dc8; for ($sp45eea6 = $sp043126 + $sp947dc8; $sp45eea6 < 256; ++$sp45eea6) { if (!$sp21b9f1[$sp45eea6]) { $sp21b9f1[$sp45eea6] = 1; break; } $sp21b9f1[$sp45eea6] = 0; } } else { break; } } } } } } } function geDoubleScalarmultVartime(GeProjective $sp21b9f1, $spac00d1, GeExtended $spe56c2e, $sp947dc8) { $sp4d794a = new SplFixedArray(256); $sp64d3e8 = new SplFixedArray(256); $sp20b13b = new GeCompleted(); $sp9b84fb = new GeExtended(); $sp5d8900 = new GeExtended(); $spb91c34 = new SplFixedArray(8); for ($sp043126 = 0; $sp043126 < 8; ++$sp043126) { $spb91c34[$sp043126] = new GeCached(); } $this->slide($sp4d794a, $spac00d1); $this->slide($sp64d3e8, $sp947dc8); $this->GeExtendedtoGeCached($spb91c34[0], $spe56c2e); $this->GeExtendedDouble($sp20b13b, $spe56c2e); $this->GeCompletedtoGeExtended($sp5d8900, $sp20b13b); for ($sp043126 = 0; $sp043126 < 7; ++$sp043126) { $this->geAdd($sp20b13b, $sp5d8900, $spb91c34[$sp043126]); $this->GeCompletedtoGeExtended($sp9b84fb, $sp20b13b); $this->GeExtendedtoGeCached($spb91c34[$sp043126 + 1], $sp9b84fb); } $this->GeProjectiveZero($sp21b9f1); for ($sp043126 = 255; $sp043126 >= 0; --$sp043126) { if ($sp4d794a[$sp043126] || $sp64d3e8[$sp043126]) { break; } } for ($sp043126 = 255; $sp043126 >= 0; --$sp043126) { $this->GeProjectiveDouble($sp20b13b, $sp21b9f1); if ($sp4d794a[$sp043126] > 0) { $this->GeCompletedtoGeExtended($sp9b84fb, $sp20b13b); $this->geAdd($sp20b13b, $sp9b84fb, $spb91c34[$sp4d794a[$sp043126] / 2]); } else { if ($sp4d794a[$sp043126] < 0) { $this->GeCompletedtoGeExtended($sp9b84fb, $sp20b13b); $this->geSub($sp20b13b, $sp9b84fb, $spb91c34[-$sp4d794a[$sp043126] / 2]); } } if ($sp64d3e8[$sp043126] > 0) { $this->GeCompletedtoGeExtended($sp9b84fb, $sp20b13b); $this->geMixedAdd($sp20b13b, $sp9b84fb, static::$Bi[$sp64d3e8[$sp043126] / 2]); } else { if ($sp64d3e8[$sp043126] < 0) { $this->GeCompletedtoGeExtended($sp9b84fb, $sp20b13b); $this->geMixedSub($sp20b13b, $sp9b84fb, static::$Bi[-$sp64d3e8[$sp043126] / 2]); } } $this->GeCompletedtoGeProjective($sp21b9f1, $sp20b13b); } } function scReduce($spadb990) { $spfb36f7 = 2097151 & $this->feLoad3($spadb990, 0); $spca2b68 = 2097151 & $this->feLoad4($spadb990, 2) >> 5; $sp4955ee = 2097151 & $this->feLoad3($spadb990, 5) >> 2; $spcf5973 = 2097151 & $this->feLoad4($spadb990, 7) >> 7; $sp44fe81 = 2097151 & $this->feLoad4($spadb990, 10) >> 4; $spca02ad = 2097151 & $this->feLoad3($spadb990, 13) >> 1; $spee696a = 2097151 & $this->feLoad4($spadb990, 15) >> 6; $sp5de041 = 2097151 & $this->feLoad3($spadb990, 18) >> 3; $spdd4643 = 2097151 & $this->feLoad3($spadb990, 21); $sp9c9dfb = 2097151 & $this->feLoad4($spadb990, 23) >> 5; $sp82fab0 = 2097151 & $this->feLoad3($spadb990, 26) >> 2; $spbf8166 = 2097151 & $this->feLoad4($spadb990, 28) >> 7; $spa34977 = 2097151 & $this->feLoad4($spadb990, 31) >> 4; $spb81d12 = 2097151 & $this->feLoad3($spadb990, 34) >> 1; $sp796040 = 2097151 & $this->feLoad4($spadb990, 36) >> 6; $sp4b374f = 2097151 & $this->feLoad3($spadb990, 39) >> 3; $sp0f2b64 = 2097151 & $this->feLoad3($spadb990, 42); $sp0c3b31 = 2097151 & $this->feLoad4($spadb990, 44) >> 5; $spf2632e = 2097151 & $this->feLoad3($spadb990, 47) >> 2; $sp61f66f = 2097151 & $this->feLoad4($spadb990, 49) >> 7; $sp995e5a = 2097151 & $this->feLoad4($spadb990, 52) >> 4; $sp1b3e70 = 2097151 & $this->feLoad3($spadb990, 55) >> 1; $sp56e2c5 = 2097151 & $this->feLoad4($spadb990, 57) >> 6; $sp0332fa = $this->feLoad4($spadb990, 60) >> 3; $spbf8166 += $sp0332fa * 666643; $spa34977 += $sp0332fa * 470296; $spb81d12 += $sp0332fa * 654183; $sp796040 -= $sp0332fa * 997805; $sp4b374f += $sp0332fa * 136657; $sp0f2b64 -= $sp0332fa * 683901; $sp0332fa = 0; $sp82fab0 += $sp56e2c5 * 666643; $spbf8166 += $sp56e2c5 * 470296; $spa34977 += $sp56e2c5 * 654183; $spb81d12 -= $sp56e2c5 * 997805; $sp796040 += $sp56e2c5 * 136657; $sp4b374f -= $sp56e2c5 * 683901; $sp56e2c5 = 0; $sp9c9dfb += $sp1b3e70 * 666643; $sp82fab0 += $sp1b3e70 * 470296; $spbf8166 += $sp1b3e70 * 654183; $spa34977 -= $sp1b3e70 * 997805; $spb81d12 += $sp1b3e70 * 136657; $sp796040 -= $sp1b3e70 * 683901; $sp1b3e70 = 0; $spdd4643 += $sp995e5a * 666643; $sp9c9dfb += $sp995e5a * 470296; $sp82fab0 += $sp995e5a * 654183; $spbf8166 -= $sp995e5a * 997805; $spa34977 += $sp995e5a * 136657; $spb81d12 -= $sp995e5a * 683901; $sp995e5a = 0; $sp5de041 += $sp61f66f * 666643; $spdd4643 += $sp61f66f * 470296; $sp9c9dfb += $sp61f66f * 654183; $sp82fab0 -= $sp61f66f * 997805; $spbf8166 += $sp61f66f * 136657; $spa34977 -= $sp61f66f * 683901; $sp61f66f = 0; $spee696a += $spf2632e * 666643; $sp5de041 += $spf2632e * 470296; $spdd4643 += $spf2632e * 654183; $sp9c9dfb -= $spf2632e * 997805; $sp82fab0 += $spf2632e * 136657; $spbf8166 -= $spf2632e * 683901; $spf2632e = 0; $spec0ba1 = $spee696a + (1 << 20) >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $sp1be762 = $spdd4643 + (1 << 20) >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $sp897c6c = $sp82fab0 + (1 << 20) >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spa79c5f = $spa34977 + (1 << 20) >> 21; $spb81d12 += $spa79c5f; $spa34977 -= $spa79c5f << 21; $sp34c4be = $sp796040 + (1 << 20) >> 21; $sp4b374f += $sp34c4be; $sp796040 -= $sp34c4be << 21; $sp96d6ed = $sp0f2b64 + (1 << 20) >> 21; $sp0c3b31 += $sp96d6ed; $sp0f2b64 -= $sp96d6ed << 21; $spc85c85 = $sp5de041 + (1 << 20) >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $spba60da = $sp9c9dfb + (1 << 20) >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $spd9a392 = $spbf8166 + (1 << 20) >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $sp400ade = $spb81d12 + (1 << 20) >> 21; $sp796040 += $sp400ade; $spb81d12 -= $sp400ade << 21; $spd9b8e5 = $sp4b374f + (1 << 20) >> 21; $sp0f2b64 += $spd9b8e5; $sp4b374f -= $spd9b8e5 << 21; $spca02ad += $sp0c3b31 * 666643; $spee696a += $sp0c3b31 * 470296; $sp5de041 += $sp0c3b31 * 654183; $spdd4643 -= $sp0c3b31 * 997805; $sp9c9dfb += $sp0c3b31 * 136657; $sp82fab0 -= $sp0c3b31 * 683901; $sp0c3b31 = 0; $sp44fe81 += $sp0f2b64 * 666643; $spca02ad += $sp0f2b64 * 470296; $spee696a += $sp0f2b64 * 654183; $sp5de041 -= $sp0f2b64 * 997805; $spdd4643 += $sp0f2b64 * 136657; $sp9c9dfb -= $sp0f2b64 * 683901; $sp0f2b64 = 0; $spcf5973 += $sp4b374f * 666643; $sp44fe81 += $sp4b374f * 470296; $spca02ad += $sp4b374f * 654183; $spee696a -= $sp4b374f * 997805; $sp5de041 += $sp4b374f * 136657; $spdd4643 -= $sp4b374f * 683901; $sp4b374f = 0; $sp4955ee += $sp796040 * 666643; $spcf5973 += $sp796040 * 470296; $sp44fe81 += $sp796040 * 654183; $spca02ad -= $sp796040 * 997805; $spee696a += $sp796040 * 136657; $sp5de041 -= $sp796040 * 683901; $sp796040 = 0; $spca2b68 += $spb81d12 * 666643; $sp4955ee += $spb81d12 * 470296; $spcf5973 += $spb81d12 * 654183; $sp44fe81 -= $spb81d12 * 997805; $spca02ad += $spb81d12 * 136657; $spee696a -= $spb81d12 * 683901; $spb81d12 = 0; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 + (1 << 20) >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $spd64f56 = $sp4955ee + (1 << 20) >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $sp3c2321 = $sp44fe81 + (1 << 20) >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $spec0ba1 = $spee696a + (1 << 20) >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $sp1be762 = $spdd4643 + (1 << 20) >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $sp897c6c = $sp82fab0 + (1 << 20) >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $sp8ba87b = $spca2b68 + (1 << 20) >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spad0033 = $spcf5973 + (1 << 20) >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp368b76 = $spca02ad + (1 << 20) >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spc85c85 = $sp5de041 + (1 << 20) >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $spba60da = $sp9c9dfb + (1 << 20) >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $spd9a392 = $spbf8166 + (1 << 20) >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $sp8ba87b = $spca2b68 >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spd64f56 = $sp4955ee >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $spad0033 = $spcf5973 >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp3c2321 = $sp44fe81 >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $sp368b76 = $spca02ad >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spec0ba1 = $spee696a >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $spc85c85 = $sp5de041 >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $sp1be762 = $spdd4643 >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $spba60da = $sp9c9dfb >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $sp897c6c = $sp82fab0 >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spd9a392 = $spbf8166 >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $sp8ba87b = $spca2b68 >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spd64f56 = $sp4955ee >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $spad0033 = $spcf5973 >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp3c2321 = $sp44fe81 >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $sp368b76 = $spca02ad >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spec0ba1 = $spee696a >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $spc85c85 = $sp5de041 >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $sp1be762 = $spdd4643 >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $spba60da = $sp9c9dfb >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $sp897c6c = $sp82fab0 >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spadb990[0] = $spfb36f7 >> 0 & 255; $spadb990[1] = $spfb36f7 >> 8 & 255; $spadb990[2] = ($spfb36f7 >> 16 | $spca2b68 << 5) & 255; $spadb990[3] = $spca2b68 >> 3 & 255; $spadb990[4] = $spca2b68 >> 11 & 255; $spadb990[5] = ($spca2b68 >> 19 | $sp4955ee << 2) & 255; $spadb990[6] = $sp4955ee >> 6 & 255; $spadb990[7] = ($sp4955ee >> 14 | $spcf5973 << 7) & 255; $spadb990[8] = $spcf5973 >> 1 & 255; $spadb990[9] = $spcf5973 >> 9 & 255; $spadb990[10] = ($spcf5973 >> 17 | $sp44fe81 << 4) & 255; $spadb990[11] = $sp44fe81 >> 4 & 255; $spadb990[12] = $sp44fe81 >> 12 & 255; $spadb990[13] = ($sp44fe81 >> 20 | $spca02ad << 1) & 255; $spadb990[14] = $spca02ad >> 7 & 255; $spadb990[15] = ($spca02ad >> 15 | $spee696a << 6) & 255; $spadb990[16] = $spee696a >> 2 & 255; $spadb990[17] = $spee696a >> 10 & 255; $spadb990[18] = ($spee696a >> 18 | $sp5de041 << 3) & 255; $spadb990[19] = $sp5de041 >> 5 & 255; $spadb990[20] = $sp5de041 >> 13 & 255; $spadb990[21] = $spdd4643 >> 0 & 255; $spadb990[22] = $spdd4643 >> 8 & 255; $spadb990[23] = ($spdd4643 >> 16 | $sp9c9dfb << 5) & 255; $spadb990[24] = $sp9c9dfb >> 3 & 255; $spadb990[25] = $sp9c9dfb >> 11 & 255; $spadb990[26] = ($sp9c9dfb >> 19 | $sp82fab0 << 2) & 255; $spadb990[27] = $sp82fab0 >> 6 & 255; $spadb990[28] = ($sp82fab0 >> 14 | $spbf8166 << 7) & 255; $spadb990[29] = $spbf8166 >> 1 & 255; $spadb990[30] = $spbf8166 >> 9 & 255; $spadb990[31] = $spbf8166 >> 17 & 255; } function scMulAdd($spadb990, $spac00d1, $sp947dc8, $spf833ad) { $sp851265 = 2097151 & $this->feLoad3($spac00d1, 0); $sp3c05e1 = 2097151 & $this->feLoad4($spac00d1, 2) >> 5; $sp478a48 = 2097151 & $this->feLoad3($spac00d1, 5) >> 2; $spd5822c = 2097151 & $this->feLoad4($spac00d1, 7) >> 7; $sp20bdc7 = 2097151 & $this->feLoad4($spac00d1, 10) >> 4; $spdd30a7 = 2097151 & $this->feLoad3($spac00d1, 13) >> 1; $spc0fd47 = 2097151 & $this->feLoad4($spac00d1, 15) >> 6; $sp0c6778 = 2097151 & $this->feLoad3($spac00d1, 18) >> 3; $sp390804 = 2097151 & $this->feLoad3($spac00d1, 21); $sp753cd1 = 2097151 & $this->feLoad4($spac00d1, 23) >> 5; $sp13137b = 2097151 & $this->feLoad3($spac00d1, 26) >> 2; $spd01da5 = $this->feLoad4($spac00d1, 28) >> 7; $sp3eede2 = 2097151 & $this->feLoad3($sp947dc8, 0); $spd2f7a1 = 2097151 & $this->feLoad4($sp947dc8, 2) >> 5; $sp4b3a12 = 2097151 & $this->feLoad3($sp947dc8, 5) >> 2; $spa54f24 = 2097151 & $this->feLoad4($sp947dc8, 7) >> 7; $sp873272 = 2097151 & $this->feLoad4($sp947dc8, 10) >> 4; $sp6ed325 = 2097151 & $this->feLoad3($sp947dc8, 13) >> 1; $sp9ee327 = 2097151 & $this->feLoad4($sp947dc8, 15) >> 6; $spfb038e = 2097151 & $this->feLoad3($sp947dc8, 18) >> 3; $sp3710ff = 2097151 & $this->feLoad3($sp947dc8, 21); $sp0974a2 = 2097151 & $this->feLoad4($sp947dc8, 23) >> 5; $sp8f9918 = 2097151 & $this->feLoad3($sp947dc8, 26) >> 2; $spdc57c3 = $this->feLoad4($sp947dc8, 28) >> 7; $sp9c74be = 2097151 & $this->feLoad3($spf833ad, 0); $sp83e98e = 2097151 & $this->feLoad4($spf833ad, 2) >> 5; $sp2b0972 = 2097151 & $this->feLoad3($spf833ad, 5) >> 2; $sp147500 = 2097151 & $this->feLoad4($spf833ad, 7) >> 7; $sp2621cd = 2097151 & $this->feLoad4($spf833ad, 10) >> 4; $sp917c15 = 2097151 & $this->feLoad3($spf833ad, 13) >> 1; $spfa6e4f = 2097151 & $this->feLoad4($spf833ad, 15) >> 6; $spbcfe75 = 2097151 & $this->feLoad3($spf833ad, 18) >> 3; $sp799399 = 2097151 & $this->feLoad3($spf833ad, 21); $sp9c06a4 = 2097151 & $this->feLoad4($spf833ad, 23) >> 5; $sp3646fd = 2097151 & $this->feLoad3($spf833ad, 26) >> 2; $spd8e43c = $this->feLoad4($spf833ad, 28) >> 7; $spfb36f7 = $sp9c74be + $sp851265 * $sp3eede2; $spca2b68 = $sp83e98e + $sp851265 * $spd2f7a1 + $sp3c05e1 * $sp3eede2; $sp4955ee = $sp2b0972 + $sp851265 * $sp4b3a12 + $sp3c05e1 * $spd2f7a1 + $sp478a48 * $sp3eede2; $spcf5973 = $sp147500 + $sp851265 * $spa54f24 + $sp3c05e1 * $sp4b3a12 + $sp478a48 * $spd2f7a1 + $spd5822c * $sp3eede2; $sp44fe81 = $sp2621cd + $sp851265 * $sp873272 + $sp3c05e1 * $spa54f24 + $sp478a48 * $sp4b3a12 + $spd5822c * $spd2f7a1 + $sp20bdc7 * $sp3eede2; $spca02ad = $sp917c15 + $sp851265 * $sp6ed325 + $sp3c05e1 * $sp873272 + $sp478a48 * $spa54f24 + $spd5822c * $sp4b3a12 + $sp20bdc7 * $spd2f7a1 + $spdd30a7 * $sp3eede2; $spee696a = $spfa6e4f + $sp851265 * $sp9ee327 + $sp3c05e1 * $sp6ed325 + $sp478a48 * $sp873272 + $spd5822c * $spa54f24 + $sp20bdc7 * $sp4b3a12 + $spdd30a7 * $spd2f7a1 + $spc0fd47 * $sp3eede2; $sp5de041 = $spbcfe75 + $sp851265 * $spfb038e + $sp3c05e1 * $sp9ee327 + $sp478a48 * $sp6ed325 + $spd5822c * $sp873272 + $sp20bdc7 * $spa54f24 + $spdd30a7 * $sp4b3a12 + $spc0fd47 * $spd2f7a1 + $sp0c6778 * $sp3eede2; $spdd4643 = $sp799399 + $sp851265 * $sp3710ff + $sp3c05e1 * $spfb038e + $sp478a48 * $sp9ee327 + $spd5822c * $sp6ed325 + $sp20bdc7 * $sp873272 + $spdd30a7 * $spa54f24 + $spc0fd47 * $sp4b3a12 + $sp0c6778 * $spd2f7a1 + $sp390804 * $sp3eede2; $sp9c9dfb = $sp9c06a4 + $sp851265 * $sp0974a2 + $sp3c05e1 * $sp3710ff + $sp478a48 * $spfb038e + $spd5822c * $sp9ee327 + $sp20bdc7 * $sp6ed325 + $spdd30a7 * $sp873272 + $spc0fd47 * $spa54f24 + $sp0c6778 * $sp4b3a12 + $sp390804 * $spd2f7a1 + $sp753cd1 * $sp3eede2; $sp82fab0 = $sp3646fd + $sp851265 * $sp8f9918 + $sp3c05e1 * $sp0974a2 + $sp478a48 * $sp3710ff + $spd5822c * $spfb038e + $sp20bdc7 * $sp9ee327 + $spdd30a7 * $sp6ed325 + $spc0fd47 * $sp873272 + $sp0c6778 * $spa54f24 + $sp390804 * $sp4b3a12 + $sp753cd1 * $spd2f7a1 + $sp13137b * $sp3eede2; $spbf8166 = $spd8e43c + $sp851265 * $spdc57c3 + $sp3c05e1 * $sp8f9918 + $sp478a48 * $sp0974a2 + $spd5822c * $sp3710ff + $sp20bdc7 * $spfb038e + $spdd30a7 * $sp9ee327 + $spc0fd47 * $sp6ed325 + $sp0c6778 * $sp873272 + $sp390804 * $spa54f24 + $sp753cd1 * $sp4b3a12 + $sp13137b * $spd2f7a1 + $spd01da5 * $sp3eede2; $spa34977 = $sp3c05e1 * $spdc57c3 + $sp478a48 * $sp8f9918 + $spd5822c * $sp0974a2 + $sp20bdc7 * $sp3710ff + $spdd30a7 * $spfb038e + $spc0fd47 * $sp9ee327 + $sp0c6778 * $sp6ed325 + $sp390804 * $sp873272 + $sp753cd1 * $spa54f24 + $sp13137b * $sp4b3a12 + $spd01da5 * $spd2f7a1; $spb81d12 = $sp478a48 * $spdc57c3 + $spd5822c * $sp8f9918 + $sp20bdc7 * $sp0974a2 + $spdd30a7 * $sp3710ff + $spc0fd47 * $spfb038e + $sp0c6778 * $sp9ee327 + $sp390804 * $sp6ed325 + $sp753cd1 * $sp873272 + $sp13137b * $spa54f24 + $spd01da5 * $sp4b3a12; $sp796040 = $spd5822c * $spdc57c3 + $sp20bdc7 * $sp8f9918 + $spdd30a7 * $sp0974a2 + $spc0fd47 * $sp3710ff + $sp0c6778 * $spfb038e + $sp390804 * $sp9ee327 + $sp753cd1 * $sp6ed325 + $sp13137b * $sp873272 + $spd01da5 * $spa54f24; $sp4b374f = $sp20bdc7 * $spdc57c3 + $spdd30a7 * $sp8f9918 + $spc0fd47 * $sp0974a2 + $sp0c6778 * $sp3710ff + $sp390804 * $spfb038e + $sp753cd1 * $sp9ee327 + $sp13137b * $sp6ed325 + $spd01da5 * $sp873272; $sp0f2b64 = $spdd30a7 * $spdc57c3 + $spc0fd47 * $sp8f9918 + $sp0c6778 * $sp0974a2 + $sp390804 * $sp3710ff + $sp753cd1 * $spfb038e + $sp13137b * $sp9ee327 + $spd01da5 * $sp6ed325; $sp0c3b31 = $spc0fd47 * $spdc57c3 + $sp0c6778 * $sp8f9918 + $sp390804 * $sp0974a2 + $sp753cd1 * $sp3710ff + $sp13137b * $spfb038e + $spd01da5 * $sp9ee327; $spf2632e = $sp0c6778 * $spdc57c3 + $sp390804 * $sp8f9918 + $sp753cd1 * $sp0974a2 + $sp13137b * $sp3710ff + $spd01da5 * $spfb038e; $sp61f66f = $sp390804 * $spdc57c3 + $sp753cd1 * $sp8f9918 + $sp13137b * $sp0974a2 + $spd01da5 * $sp3710ff; $sp995e5a = $sp753cd1 * $spdc57c3 + $sp13137b * $sp8f9918 + $spd01da5 * $sp0974a2; $sp1b3e70 = $sp13137b * $spdc57c3 + $spd01da5 * $sp8f9918; $sp56e2c5 = $spd01da5 * $spdc57c3; $sp0332fa = 0; $sp0f8791 = $spfb36f7 + (1 << 20) >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $spd64f56 = $sp4955ee + (1 << 20) >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $sp3c2321 = $sp44fe81 + (1 << 20) >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $spec0ba1 = $spee696a + (1 << 20) >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $sp1be762 = $spdd4643 + (1 << 20) >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $sp897c6c = $sp82fab0 + (1 << 20) >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spa79c5f = $spa34977 + (1 << 20) >> 21; $spb81d12 += $spa79c5f; $spa34977 -= $spa79c5f << 21; $sp34c4be = $sp796040 + (1 << 20) >> 21; $sp4b374f += $sp34c4be; $sp796040 -= $sp34c4be << 21; $sp96d6ed = $sp0f2b64 + (1 << 20) >> 21; $sp0c3b31 += $sp96d6ed; $sp0f2b64 -= $sp96d6ed << 21; $spa2ad5b = $spf2632e + (1 << 20) >> 21; $sp61f66f += $spa2ad5b; $spf2632e -= $spa2ad5b << 21; $spc9af79 = $sp995e5a + (1 << 20) >> 21; $sp1b3e70 += $spc9af79; $sp995e5a -= $spc9af79 << 21; $spa6c251 = $sp56e2c5 + (1 << 20) >> 21; $sp0332fa += $spa6c251; $sp56e2c5 -= $spa6c251 << 21; $sp8ba87b = $spca2b68 + (1 << 20) >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spad0033 = $spcf5973 + (1 << 20) >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp368b76 = $spca02ad + (1 << 20) >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spc85c85 = $sp5de041 + (1 << 20) >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $spba60da = $sp9c9dfb + (1 << 20) >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $spd9a392 = $spbf8166 + (1 << 20) >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $sp400ade = $spb81d12 + (1 << 20) >> 21; $sp796040 += $sp400ade; $spb81d12 -= $sp400ade << 21; $spd9b8e5 = $sp4b374f + (1 << 20) >> 21; $sp0f2b64 += $spd9b8e5; $sp4b374f -= $spd9b8e5 << 21; $sp95153a = $sp0c3b31 + (1 << 20) >> 21; $spf2632e += $sp95153a; $sp0c3b31 -= $sp95153a << 21; $sp87c284 = $sp61f66f + (1 << 20) >> 21; $sp995e5a += $sp87c284; $sp61f66f -= $sp87c284 << 21; $sp1f6241 = $sp1b3e70 + (1 << 20) >> 21; $sp56e2c5 += $sp1f6241; $sp1b3e70 -= $sp1f6241 << 21; $spbf8166 += $sp0332fa * 666643; $spa34977 += $sp0332fa * 470296; $spb81d12 += $sp0332fa * 654183; $sp796040 -= $sp0332fa * 997805; $sp4b374f += $sp0332fa * 136657; $sp0f2b64 -= $sp0332fa * 683901; $sp0332fa = 0; $sp82fab0 += $sp56e2c5 * 666643; $spbf8166 += $sp56e2c5 * 470296; $spa34977 += $sp56e2c5 * 654183; $spb81d12 -= $sp56e2c5 * 997805; $sp796040 += $sp56e2c5 * 136657; $sp4b374f -= $sp56e2c5 * 683901; $sp56e2c5 = 0; $sp9c9dfb += $sp1b3e70 * 666643; $sp82fab0 += $sp1b3e70 * 470296; $spbf8166 += $sp1b3e70 * 654183; $spa34977 -= $sp1b3e70 * 997805; $spb81d12 += $sp1b3e70 * 136657; $sp796040 -= $sp1b3e70 * 683901; $sp1b3e70 = 0; $spdd4643 += $sp995e5a * 666643; $sp9c9dfb += $sp995e5a * 470296; $sp82fab0 += $sp995e5a * 654183; $spbf8166 -= $sp995e5a * 997805; $spa34977 += $sp995e5a * 136657; $spb81d12 -= $sp995e5a * 683901; $sp995e5a = 0; $sp5de041 += $sp61f66f * 666643; $spdd4643 += $sp61f66f * 470296; $sp9c9dfb += $sp61f66f * 654183; $sp82fab0 -= $sp61f66f * 997805; $spbf8166 += $sp61f66f * 136657; $spa34977 -= $sp61f66f * 683901; $sp61f66f = 0; $spee696a += $spf2632e * 666643; $sp5de041 += $spf2632e * 470296; $spdd4643 += $spf2632e * 654183; $sp9c9dfb -= $spf2632e * 997805; $sp82fab0 += $spf2632e * 136657; $spbf8166 -= $spf2632e * 683901; $spf2632e = 0; $spec0ba1 = $spee696a + (1 << 20) >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $sp1be762 = $spdd4643 + (1 << 20) >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $sp897c6c = $sp82fab0 + (1 << 20) >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spa79c5f = $spa34977 + (1 << 20) >> 21; $spb81d12 += $spa79c5f; $spa34977 -= $spa79c5f << 21; $sp34c4be = $sp796040 + (1 << 20) >> 21; $sp4b374f += $sp34c4be; $sp796040 -= $sp34c4be << 21; $sp96d6ed = $sp0f2b64 + (1 << 20) >> 21; $sp0c3b31 += $sp96d6ed; $sp0f2b64 -= $sp96d6ed << 21; $spc85c85 = $sp5de041 + (1 << 20) >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $spba60da = $sp9c9dfb + (1 << 20) >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $spd9a392 = $spbf8166 + (1 << 20) >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $sp400ade = $spb81d12 + (1 << 20) >> 21; $sp796040 += $sp400ade; $spb81d12 -= $sp400ade << 21; $spd9b8e5 = $sp4b374f + (1 << 20) >> 21; $sp0f2b64 += $spd9b8e5; $sp4b374f -= $spd9b8e5 << 21; $spca02ad += $sp0c3b31 * 666643; $spee696a += $sp0c3b31 * 470296; $sp5de041 += $sp0c3b31 * 654183; $spdd4643 -= $sp0c3b31 * 997805; $sp9c9dfb += $sp0c3b31 * 136657; $sp82fab0 -= $sp0c3b31 * 683901; $sp0c3b31 = 0; $sp44fe81 += $sp0f2b64 * 666643; $spca02ad += $sp0f2b64 * 470296; $spee696a += $sp0f2b64 * 654183; $sp5de041 -= $sp0f2b64 * 997805; $spdd4643 += $sp0f2b64 * 136657; $sp9c9dfb -= $sp0f2b64 * 683901; $sp0f2b64 = 0; $spcf5973 += $sp4b374f * 666643; $sp44fe81 += $sp4b374f * 470296; $spca02ad += $sp4b374f * 654183; $spee696a -= $sp4b374f * 997805; $sp5de041 += $sp4b374f * 136657; $spdd4643 -= $sp4b374f * 683901; $sp4b374f = 0; $sp4955ee += $sp796040 * 666643; $spcf5973 += $sp796040 * 470296; $sp44fe81 += $sp796040 * 654183; $spca02ad -= $sp796040 * 997805; $spee696a += $sp796040 * 136657; $sp5de041 -= $sp796040 * 683901; $sp796040 = 0; $spca2b68 += $spb81d12 * 666643; $sp4955ee += $spb81d12 * 470296; $spcf5973 += $spb81d12 * 654183; $sp44fe81 -= $spb81d12 * 997805; $spca02ad += $spb81d12 * 136657; $spee696a -= $spb81d12 * 683901; $spb81d12 = 0; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 + (1 << 20) >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $spd64f56 = $sp4955ee + (1 << 20) >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $sp3c2321 = $sp44fe81 + (1 << 20) >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $spec0ba1 = $spee696a + (1 << 20) >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $sp1be762 = $spdd4643 + (1 << 20) >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $sp897c6c = $sp82fab0 + (1 << 20) >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $sp8ba87b = $spca2b68 + (1 << 20) >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spad0033 = $spcf5973 + (1 << 20) >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp368b76 = $spca02ad + (1 << 20) >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spc85c85 = $sp5de041 + (1 << 20) >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $spba60da = $sp9c9dfb + (1 << 20) >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $spd9a392 = $spbf8166 + (1 << 20) >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $sp8ba87b = $spca2b68 >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spd64f56 = $sp4955ee >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $spad0033 = $spcf5973 >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp3c2321 = $sp44fe81 >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $sp368b76 = $spca02ad >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spec0ba1 = $spee696a >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $spc85c85 = $sp5de041 >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $sp1be762 = $spdd4643 >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $spba60da = $sp9c9dfb >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $sp897c6c = $sp82fab0 >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spd9a392 = $spbf8166 >> 21; $spa34977 += $spd9a392; $spbf8166 -= $spd9a392 << 21; $spfb36f7 += $spa34977 * 666643; $spca2b68 += $spa34977 * 470296; $sp4955ee += $spa34977 * 654183; $spcf5973 -= $spa34977 * 997805; $sp44fe81 += $spa34977 * 136657; $spca02ad -= $spa34977 * 683901; $spa34977 = 0; $sp0f8791 = $spfb36f7 >> 21; $spca2b68 += $sp0f8791; $spfb36f7 -= $sp0f8791 << 21; $sp8ba87b = $spca2b68 >> 21; $sp4955ee += $sp8ba87b; $spca2b68 -= $sp8ba87b << 21; $spd64f56 = $sp4955ee >> 21; $spcf5973 += $spd64f56; $sp4955ee -= $spd64f56 << 21; $spad0033 = $spcf5973 >> 21; $sp44fe81 += $spad0033; $spcf5973 -= $spad0033 << 21; $sp3c2321 = $sp44fe81 >> 21; $spca02ad += $sp3c2321; $sp44fe81 -= $sp3c2321 << 21; $sp368b76 = $spca02ad >> 21; $spee696a += $sp368b76; $spca02ad -= $sp368b76 << 21; $spec0ba1 = $spee696a >> 21; $sp5de041 += $spec0ba1; $spee696a -= $spec0ba1 << 21; $spc85c85 = $sp5de041 >> 21; $spdd4643 += $spc85c85; $sp5de041 -= $spc85c85 << 21; $sp1be762 = $spdd4643 >> 21; $sp9c9dfb += $sp1be762; $spdd4643 -= $sp1be762 << 21; $spba60da = $sp9c9dfb >> 21; $sp82fab0 += $spba60da; $sp9c9dfb -= $spba60da << 21; $sp897c6c = $sp82fab0 >> 21; $spbf8166 += $sp897c6c; $sp82fab0 -= $sp897c6c << 21; $spadb990[0] = $spfb36f7 >> 0 & 255; $spadb990[1] = $spfb36f7 >> 8 & 255; $spadb990[2] = ($spfb36f7 >> 16 | $spca2b68 << 5) & 255; $spadb990[3] = $spca2b68 >> 3 & 255; $spadb990[4] = $spca2b68 >> 11 & 255; $spadb990[5] = ($spca2b68 >> 19 | $sp4955ee << 2) & 255; $spadb990[6] = $sp4955ee >> 6 & 255; $spadb990[7] = ($sp4955ee >> 14 | $spcf5973 << 7) & 255; $spadb990[8] = $spcf5973 >> 1 & 255; $spadb990[9] = $spcf5973 >> 9 & 255; $spadb990[10] = ($spcf5973 >> 17 | $sp44fe81 << 4) & 255; $spadb990[11] = $sp44fe81 >> 4 & 255; $spadb990[12] = $sp44fe81 >> 12 & 255; $spadb990[13] = ($sp44fe81 >> 20 | $spca02ad << 1) & 255; $spadb990[14] = $spca02ad >> 7 & 255; $spadb990[15] = ($spca02ad >> 15 | $spee696a << 6) & 255; $spadb990[16] = $spee696a >> 2 & 255; $spadb990[17] = $spee696a >> 10 & 255; $spadb990[18] = ($spee696a >> 18 | $sp5de041 << 3) & 255; $spadb990[19] = $sp5de041 >> 5 & 255; $spadb990[20] = $sp5de041 >> 13 & 255; $spadb990[21] = $spdd4643 >> 0 & 255; $spadb990[22] = $spdd4643 >> 8 & 255; $spadb990[23] = ($spdd4643 >> 16 | $sp9c9dfb << 5) & 255; $spadb990[24] = $sp9c9dfb >> 3 & 255; $spadb990[25] = $sp9c9dfb >> 11 & 255; $spadb990[26] = ($sp9c9dfb >> 19 | $sp82fab0 << 2) & 255; $spadb990[27] = $sp82fab0 >> 6 & 255; $spadb990[28] = ($sp82fab0 >> 14 | $spbf8166 << 7) & 255; $spadb990[29] = $spbf8166 >> 1 & 255; $spadb990[30] = $spbf8166 >> 9 & 255; $spadb990[31] = $spbf8166 >> 17 & 255; } } class Cipher { function init($spad7c4b, $spfe5171) { if (wtam_strlen($spad7c4b) !== 32) { throw new \LengthException('Key must be a 256-bit string'); } if (wtam_strlen($spfe5171) !== 12) { throw new \LengthException('Nonce must be a 96-bit string'); } $sp653c2f = new Context(); $sp653c2f->state = array_values(unpack('V16', "expand 32-byte k{$spad7c4b}    {$spfe5171}")); return $sp653c2f; } public function decrypt($sp653c2f, $spe4aba0) { return $this->encrypt($sp653c2f, $spe4aba0); } function encrypt($sp653c2f, $spe4aba0) { $sp0a3f22 = $sp653c2f->state; $sp9e68f8 = $sp653c2f->buffer; $sp2b9f1f = wtam_strlen($spe4aba0) - wtam_strlen($sp9e68f8); $sp9996c6 = $sp2b9f1f % 64; $sp7246dc = ($sp2b9f1f >> 6) + ($sp9996c6 > 0); while ($sp7246dc-- > 0) { list($sp3c3dce, $sp24a471, $sp36720c, $sp5aaec7, $sp28d15f, $spa6d49a, $spe40426, $sp37a7d8, $sp6ac833, $sp4e3360, $sp82fab0, $spbf8166, $spa34977, $spb81d12, $sp796040, $sp4b374f) = $sp0a3f22; $sp043126 = 10; while ($sp043126--) { $sp28d15f = ($spf833ad = $sp28d15f ^ ($sp6ac833 += $spa34977 = ($spf833ad = $spa34977 ^ ($sp3c3dce += $sp28d15f = ($spf833ad = $sp28d15f ^ ($sp6ac833 += $spa34977 = ($spf833ad = $spa34977 ^ ($sp3c3dce += $sp28d15f) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $spa6d49a = ($spf833ad = $spa6d49a ^ ($sp4e3360 += $spb81d12 = ($spf833ad = $spb81d12 ^ ($sp24a471 += $spa6d49a = ($spf833ad = $spa6d49a ^ ($sp4e3360 += $spb81d12 = ($spf833ad = $spb81d12 ^ ($sp24a471 += $spa6d49a) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $spe40426 = ($spf833ad = $spe40426 ^ ($sp82fab0 += $sp796040 = ($spf833ad = $sp796040 ^ ($sp36720c += $spe40426 = ($spf833ad = $spe40426 ^ ($sp82fab0 += $sp796040 = ($spf833ad = $sp796040 ^ ($sp36720c += $spe40426) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $sp37a7d8 = ($spf833ad = $sp37a7d8 ^ ($spbf8166 += $sp4b374f = ($spf833ad = $sp4b374f ^ ($sp5aaec7 += $sp37a7d8 = ($spf833ad = $sp37a7d8 ^ ($spbf8166 += $sp4b374f = ($spf833ad = $sp4b374f ^ ($sp5aaec7 += $sp37a7d8) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $spa6d49a = ($spf833ad = $spa6d49a ^ ($sp82fab0 += $sp4b374f = ($spf833ad = $sp4b374f ^ ($sp3c3dce += $spa6d49a = ($spf833ad = $spa6d49a ^ ($sp82fab0 += $sp4b374f = ($spf833ad = $sp4b374f ^ ($sp3c3dce += $spa6d49a) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $spe40426 = ($spf833ad = $spe40426 ^ ($spbf8166 += $spa34977 = ($spf833ad = $spa34977 ^ ($sp24a471 += $spe40426 = ($spf833ad = $spe40426 ^ ($spbf8166 += $spa34977 = ($spf833ad = $spa34977 ^ ($sp24a471 += $spe40426) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $sp37a7d8 = ($spf833ad = $sp37a7d8 ^ ($sp6ac833 += $spb81d12 = ($spf833ad = $spb81d12 ^ ($sp36720c += $sp37a7d8 = ($spf833ad = $sp37a7d8 ^ ($sp6ac833 += $spb81d12 = ($spf833ad = $spb81d12 ^ ($sp36720c += $sp37a7d8) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; $sp28d15f = ($spf833ad = $sp28d15f ^ ($sp4e3360 += $sp796040 = ($spf833ad = $sp796040 ^ ($sp5aaec7 += $sp28d15f = ($spf833ad = $sp28d15f ^ ($sp4e3360 += $sp796040 = ($spf833ad = $sp796040 ^ ($sp5aaec7 += $sp28d15f) & 4294967295) << 16 & 4294967295 | $spf833ad >> 16) & 4294967295) << 12 & 4294967295 | $spf833ad >> 20) & 4294967295) << 8 & 4294967295 | $spf833ad >> 24) & 4294967295) << 7 & 4294967295 | $spf833ad >> 25; } $sp9e68f8 .= pack('V16', $sp3c3dce + $sp0a3f22[0], $sp24a471 + $sp0a3f22[1], $sp36720c + $sp0a3f22[2], $sp5aaec7 + $sp0a3f22[3], $sp28d15f + $sp0a3f22[4], $spa6d49a + $sp0a3f22[5], $spe40426 + $sp0a3f22[6], $sp37a7d8 + $sp0a3f22[7], $sp6ac833 + $sp0a3f22[8], $sp4e3360 + $sp0a3f22[9], $sp82fab0 + $sp0a3f22[10], $spbf8166 + $sp0a3f22[11], $spa34977 + $sp0a3f22[12], $spb81d12 + $sp0a3f22[13], $sp796040 + $sp0a3f22[14], $sp4b374f + $sp0a3f22[15]); if (++$sp0a3f22[12] & 64424509440) { throw new \OverflowException('Counter overflowed upper bound'); } } $sp653c2f->buffer = wtam_substr($sp9e68f8, $sp2b9f1f); $sp653c2f->state = $sp0a3f22; return $spe4aba0 ^ $sp9e68f8; } public function setCounter($sp653c2f, $sp8551b6) { if ($sp8551b6 < 0 || $sp8551b6 > 4294967295) { throw new \InvalidArgumentException('Counter must be 32-bit positive integer'); } $sp653c2f->state[12] = $sp8551b6; $sp653c2f->buffer = ''; } } class Context { public $state; public $buffer = ''; } class Native implements Streamable { function init($spad7c4b) { if (wtam_strlen($spad7c4b) !== 32) { throw new \InvalidArgumentException('Key must be a 256-bit string'); } $sp653c2f = new Context(); $sp48c1a5 = unpack('v8', $spad7c4b); $sp653c2f->r = array(($sp48c1a5[1] | $sp48c1a5[2] << 16) & 67108863, ($sp48c1a5[2] >> 10 | $sp48c1a5[3] << 6 | $sp48c1a5[4] << 22) & 67108611, ($sp48c1a5[4] >> 4 | $sp48c1a5[5] << 12) & 67092735, ($sp48c1a5[5] >> 14 | $sp48c1a5[6] << 2 | $sp48c1a5[7] << 18) & 66076671, ($sp48c1a5[7] >> 8 | $sp48c1a5[8] << 8) & 1048575); $sp48c1a5 = unpack('@16/v8', $spad7c4b); $sp653c2f->s = array(($sp48c1a5[1] | $sp48c1a5[2] << 16) & 67108863, ($sp48c1a5[2] >> 10 | $sp48c1a5[3] << 6 | $sp48c1a5[4] << 22) & 67108863, ($sp48c1a5[4] >> 4 | $sp48c1a5[5] << 12) & 67108863, ($sp48c1a5[5] >> 14 | $sp48c1a5[6] << 2 | $sp48c1a5[7] << 18) & 67108863, ($sp48c1a5[7] >> 8 | $sp48c1a5[8] << 8) & 16777215); $sp653c2f->h = array(0, 0, 0, 0, 0); $sp653c2f->buffer = ''; $sp653c2f->hibit = 16777216; $sp653c2f->init = true; return $sp653c2f; } function update($sp653c2f, $spe4aba0) { if (!$sp653c2f->init) { throw new \InvalidArgumentException('Context not initialised'); } if ($sp653c2f->buffer) { $spe4aba0 = $sp653c2f->buffer . $spe4aba0; $sp653c2f->buffer = ''; } $sp4bee5b = 0; $spa2d44f = $sp653c2f->hibit; list($sp8307d9, $spc8027b, $sp1fcda8, $spa0e393, $sp131cdb) = $sp653c2f->r; $spca2b68 = 5 * $spc8027b; $sp4955ee = 5 * $sp1fcda8; $spcf5973 = 5 * $spa0e393; $sp44fe81 = 5 * $sp131cdb; list($sp82ad2d, $sp83b3d9, $sp10f1bf, $spc8d35f, $sp9b628d) = $sp653c2f->h; $sp3cfc86 = wtam_strlen($spe4aba0); $sp7246dc = $sp3cfc86 >> 4; while ($sp7246dc--) { $sp48c1a5 = unpack("@{$sp4bee5b}/v8", $spe4aba0); $sp82ad2d += ($sp48c1a5[1] | $sp48c1a5[2] << 16) & 67108863; $sp83b3d9 += ($sp48c1a5[2] >> 10 | $sp48c1a5[3] << 6 | $sp48c1a5[4] << 22) & 67108863; $sp10f1bf += ($sp48c1a5[4] >> 4 | $sp48c1a5[5] << 12) & 67108863; $spc8d35f += ($sp48c1a5[5] >> 14 | $sp48c1a5[6] << 2 | $sp48c1a5[7] << 18) & 67108863; $sp9b628d += $sp48c1a5[7] >> 8 | $sp48c1a5[8] << 8 | $spa2d44f; $spff215f = $sp82ad2d * $sp8307d9 + $sp83b3d9 * $sp44fe81 + $sp10f1bf * $spcf5973 + $spc8d35f * $sp4955ee + $sp9b628d * $spca2b68; $sp2ffdf6 = $sp82ad2d * $spc8027b + $sp83b3d9 * $sp8307d9 + $sp10f1bf * $sp44fe81 + $spc8d35f * $spcf5973 + $sp9b628d * $sp4955ee; $spba5b82 = $sp82ad2d * $sp1fcda8 + $sp83b3d9 * $spc8027b + $sp10f1bf * $sp8307d9 + $spc8d35f * $sp44fe81 + $sp9b628d * $spcf5973; $spbe5664 = $sp82ad2d * $spa0e393 + $sp83b3d9 * $sp1fcda8 + $sp10f1bf * $spc8027b + $spc8d35f * $sp8307d9 + $sp9b628d * $sp44fe81; $sp1f7800 = $sp82ad2d * $sp131cdb + $sp83b3d9 * $spa0e393 + $sp10f1bf * $sp1fcda8 + $spc8d35f * $spc8027b + $sp9b628d * $sp8307d9; $spf833ad = $spff215f >> 26; $sp82ad2d = $spff215f & 67108863; $sp2ffdf6 += $spf833ad; $spf833ad = $sp2ffdf6 >> 26; $sp83b3d9 = $sp2ffdf6 & 67108863; $spba5b82 += $spf833ad; $spf833ad = $spba5b82 >> 26; $sp10f1bf = $spba5b82 & 67108863; $spbe5664 += $spf833ad; $spf833ad = $spbe5664 >> 26; $spc8d35f = $spbe5664 & 67108863; $sp1f7800 += $spf833ad; $spf833ad = $sp1f7800 >> 26; $sp9b628d = $sp1f7800 & 67108863; $sp82ad2d += 5 * $spf833ad; $spf833ad = $sp82ad2d >> 26; $sp82ad2d &= 67108863; $sp83b3d9 += $spf833ad; $sp4bee5b += 16; } $sp653c2f->h = array($sp82ad2d, $sp83b3d9, $sp10f1bf, $spc8d35f, $sp9b628d); if ($sp4bee5b < $sp3cfc86) { $sp653c2f->buffer = wtam_substr($spe4aba0, $sp4bee5b); } } function finish($sp653c2f) { if (!$sp653c2f->init) { throw new \InvalidArgumentException('Context not initialised'); } if ($sp653c2f->buffer) { $sp653c2f->hibit = 0; $this->update($sp653c2f, '' . str_repeat(' ', 15 - wtam_strlen($sp653c2f->buffer))); } list($sp82ad2d, $sp83b3d9, $sp10f1bf, $spc8d35f, $sp9b628d) = $sp653c2f->h; $spf833ad = $sp83b3d9 >> 26; $sp83b3d9 &= 67108863; $sp10f1bf += $spf833ad; $spf833ad = $sp10f1bf >> 26; $sp10f1bf &= 67108863; $spc8d35f += $spf833ad; $spf833ad = $spc8d35f >> 26; $spc8d35f &= 67108863; $sp9b628d += $spf833ad; $spf833ad = $sp9b628d >> 26; $sp9b628d &= 67108863; $sp82ad2d += 5 * $spf833ad; $spf833ad = $sp82ad2d >> 26; $sp82ad2d &= 67108863; $sp83b3d9 += $spf833ad; $spf9c3f6 = $sp82ad2d + 5; $spf833ad = $spf9c3f6 >> 26; $spf9c3f6 &= 67108863; $sp406ed7 = $sp83b3d9 + $spf833ad; $spf833ad = $sp406ed7 >> 26; $sp406ed7 &= 67108863; $sp037665 = $sp10f1bf + $spf833ad; $spf833ad = $sp037665 >> 26; $sp037665 &= 67108863; $sp8a7ed5 = $spc8d35f + $spf833ad; $spf833ad = $sp8a7ed5 >> 26; $sp8a7ed5 &= 67108863; $spcb5397 = $sp9b628d + $spf833ad - (1 << 26) & 4294967295; $sp22431a = ($spcb5397 >> 31) - 1; $spf9c3f6 &= $sp22431a; $sp406ed7 &= $sp22431a; $sp037665 &= $sp22431a; $sp8a7ed5 &= $sp22431a; $spcb5397 &= $sp22431a; $sp22431a = ~$sp22431a & 4294967295; $sp82ad2d = $sp82ad2d & $sp22431a | $spf9c3f6; $sp83b3d9 = $sp83b3d9 & $sp22431a | $sp406ed7; $sp10f1bf = $sp10f1bf & $sp22431a | $sp037665; $spc8d35f = $spc8d35f & $sp22431a | $sp8a7ed5; $sp9b628d = $sp9b628d & $sp22431a | $spcb5397; list($spfb36f7, $spca2b68, $sp4955ee, $spcf5973, $sp44fe81) = $sp653c2f->s; $spf833ad = $sp82ad2d + $spfb36f7; $sp82ad2d = $spf833ad & 67108863; $spf833ad = $sp83b3d9 + $spca2b68 + ($spf833ad >> 26); $sp83b3d9 = $spf833ad & 67108863; $spf833ad = $sp10f1bf + $sp4955ee + ($spf833ad >> 26); $sp10f1bf = $spf833ad & 67108863; $spf833ad = $spc8d35f + $spcf5973 + ($spf833ad >> 26); $spc8d35f = $spf833ad & 67108863; $spf833ad = $sp9b628d + $sp44fe81 + ($spf833ad >> 26); $sp9b628d = $spf833ad & 16777215; $spd67ee8 = pack('v8', $sp82ad2d, $sp82ad2d >> 16 | $sp83b3d9 << 10, $sp83b3d9 >> 6, $sp83b3d9 >> 22 | $sp10f1bf << 4, $sp10f1bf >> 12 | $spc8d35f << 14, $spc8d35f >> 2, $spc8d35f >> 18 | $sp9b628d << 8, $sp9b628d >> 8); $sp653c2f->init = false; return $spd67ee8; } } interface Streamable { function init($spad7c4b); function update($sp653c2f, $spe4aba0); function finish($sp653c2f); } if (!extension_loaded('poly1305')) { function authenticate($spad7c4b, $spe4aba0) { $sp47501c = new Authenticator(); $sp46b86d = $sp47501c->init($spad7c4b); $sp47501c->update($sp46b86d, $spe4aba0); return $sp47501c->finish($sp46b86d); } function verify($spd67ee8, $spad7c4b, $spe4aba0) { if (wtam_strlen($spd67ee8) !== 16) { throw new \InvalidArgumentException('MAC must be a 128-bit string.'); } return hash_equals($spd67ee8, authenticate($spad7c4b, $spe4aba0)); } } class GMP2 implements Streamable { private $p; private $hibit; function __construct() { $this->hibit = gmp_init('100000000000000000000000000000000', 16); $this->p = gmp_init('3fffffffffffffffffffffffffffffffb', 16); } function init($spad7c4b) { if (wtam_strlen($spad7c4b) !== 32) { throw new \InvalidArgumentException('Key must be a 256-bit string'); } $sp653c2f = new Context(); $sp653c2f->r = gmp_import($spad7c4b & '������������', 1, GMP_LSW_FIRST | GMP_LITTLE_ENDIAN); $sp653c2f->s = gmp_import(wtam_substr($spad7c4b, 16), 1, GMP_LSW_FIRST | GMP_LITTLE_ENDIAN); $sp653c2f->h = gmp_init('0'); $sp653c2f->buffer = ''; $sp653c2f->init = true; return $sp653c2f; } function update($sp653c2f, $spe4aba0) { if (!$sp653c2f->init) { throw new \InvalidArgumentException('Context not initialised'); } $sp3cfc86 = wtam_strlen($spe4aba0); if ($sp653c2f->buffer) { $sp363c9c = wtam_strlen($sp653c2f->buffer); $sp4bee5b = 16 - $sp363c9c; if ($sp3cfc86 + $sp363c9c >= 16) { $spf833ad = gmp_import($sp653c2f->buffer . wtam_substr($spe4aba0, 0, $sp4bee5b), 1, GMP_LSW_FIRST | GMP_LITTLE_ENDIAN); $sp653c2f->h = gmp_div_r(($spf833ad + $sp653c2f->h + $this->hibit) * $sp653c2f->r, $this->p); $sp653c2f->buffer = ''; } else { $sp653c2f->buffer .= $spe4aba0; return; } } else { $sp4bee5b = 0; } $sp7246dc = $sp3cfc86 - $sp4bee5b >> 4; while ($sp7246dc--) { $spf833ad = gmp_import(wtam_substr($spe4aba0, $sp4bee5b, 16), 1, GMP_LSW_FIRST | GMP_LITTLE_ENDIAN); $sp653c2f->h = gmp_div_r(($spf833ad + $sp653c2f->h + $this->hibit) * $sp653c2f->r, $this->p); $sp4bee5b += 16; } if ($sp4bee5b < $sp3cfc86) { $sp653c2f->buffer = wtam_substr($spe4aba0, $sp4bee5b); } } function finish($sp653c2f) { if (!$sp653c2f->init) { throw new \InvalidArgumentException('Context not initialised'); } if ($sp653c2f->buffer) { $spf833ad = gmp_import($sp653c2f->buffer, 1, GMP_LSW_FIRST | GMP_LITTLE_ENDIAN); $sp653c2f->h = gmp_div_r(($spf833ad + $sp653c2f->h + gmp_pow('2', wtam_strlen($sp653c2f->buffer) << 3)) * $sp653c2f->r, $this->p); } $sp653c2f->h += $sp653c2f->s; $sp0e5d27 = array(); $sp1a8cd2 = array(4 => array(8, 65536, 'v8'), 8 => array(4, 4294967296, 'V4')); list($spcc630f, $spd20c83, $spb24ff5) = $sp1a8cd2[PHP_INT_SIZE]; for ($sp387c8b = 0; $sp387c8b < $spcc630f; $sp387c8b++) { list($sp653c2f->h, $sp0e5d27[$sp387c8b]) = gmp_div_qr($sp653c2f->h, $spd20c83); } $sp653c2f->init = false; if (version_compare(phpversion(), '5.6.0', '<')) { $sp1a8cd2 = extract($sp0e5d27, EXTR_PREFIX_SAME, 'wtvar'); return pack($spb24ff5, $sp1a8cd2); } else { return pack($spb24ff5, ...$sp0e5d27); } } } if (extension_loaded('gmp')) { class Authenticator extends GMP2 { } } else { class Authenticator extends Native { } } function randomStr($sp0789ad = 12) { $spae0d0f = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; $spd9b91d = ''; for ($sp043126 = 0; $sp043126 < $sp0789ad; $sp043126++) { $spd9b91d .= wtam_substr($spae0d0f, rand(1, wtam_strlen($spae0d0f)) - 1, 1); } return $spd9b91d; } function string2ByteArray($spd9b91d) { return unpack('C*', $spd9b91d); } function byteArray2String($spded23f) { $spae0d0f = array_map('chr', $spded23f); return join($spae0d0f); } function byteObj2String($spded23f) { $spded23f = (array) $spded23f; $spae0d0f = array_map('chr', $spded23f); return join($spae0d0f); } function byteArray2Hex($spded23f) { $spae0d0f = array_map('chr', $spded23f); $sp97a68a = join($spae0d0f); return bin2hex($sp97a68a); } function hex2ByteArray($sp609be3) { $spd9b91d = hex2bin($sp609be3); return unpack('C*', $spd9b91d); } function string2Hex($spd9b91d) { return bin2hex($spd9b91d); } function hex2String($sp609be3) { return hex2bin($sp609be3); } function receiveRequest($sp90a523 = AGENT_KEY, $sp16f5bb = false, $sp006c27 = '') { $sp5e63f6 = file_get_contents('php://input'); wt_logs($sp5e63f6, 'totem_request'); $sp2aa6f3 = wtam_strlen($sp5e63f6); wt_logs($sp2aa6f3, 'totem_request_len'); $spe7e97c = getallheaders(); $sp531cf1 = $spe7e97c['Wt-Signature']; if ($sp531cf1) { wt_logs($sp531cf1, 'header_signature'); $sp602ba8 = base64_decode($sp531cf1); if (!$sp602ba8) { wt_logs('header not decoded', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'header not decoded', $sp7c8f4f = 1), $sp90a523)); } } else { wt_logs('header not found', 'INFO'); $sp02b2cb = 'wt-signature'; if (isset($_COOKIE[$sp02b2cb])) { $sp602ba8 = base64_decode($_COOKIE[$sp02b2cb]); if (!$sp602ba8) { wt_logs('cookie not decoded', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'cookie not decoded', $sp7c8f4f = 2), $sp90a523)); } } else { wt_logs("cookies not found [{$sp02b2cb}]", 'ERROR'); wt_logs($_COOKIE, '$_COOKIE'); die(sendRequest(wt_handle_error($sp540d85 = 'cookies not found', $sp7c8f4f = 3), $sp90a523)); } } wt_logs($sp602ba8, 'requests_signature'); $spb359f3 = wtam_substr($sp602ba8, 0, 16); $spa2395a = wtam_substr($sp602ba8, 16); if (!$spb359f3) { wt_logs('hmac not found', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac not found', $sp7c8f4f = 4), $sp90a523)); } if (!verify($spb359f3, AGENT_KEY, $spa2395a)) { wt_logs('VERIFYED: [hmac in header wrong]', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac in header is wrong', $sp7c8f4f = 6), $sp90a523)); } else { wt_logs('VERIFYED: [hmac in header is right]', 'INFO'); $spbbbe69 = false; if (function_exists('sodium_crypto_sign_verify_detached')) { if (CHECKSIGNATURE) { $sp384722 = microtime(true); $sp8b0f64 = sodium_crypto_sign_verify_detached($spa2395a, $sp5e63f6, PUBLIC_KEY); $sp29616a = microtime(true); wt_logs($sp8b0f64, 'sign_verify2'); wt_logs($sp29616a - $sp384722, 'check_signature secs'); if ($sp8b0f64) { wt_logs('YES', 'VERIFY 2'); $spbbbe69 = true; } else { wt_logs('NO', 'VERIFY 2'); $spbbbe69 = false; } } } else { $spbbbe69 = true; } if ($spbbbe69 && CHECKSIGNATURE || !CHECKSIGNATURE) { wt_logs('YES (or pass) SIGNATURED: sign in header right', 'INFO'); $sp5cfd48 = wtam_substr($sp5e63f6, 0, 8); $sp5cfd48 = unpack('P', $sp5cfd48); $sp5cfd48 = $sp5cfd48[1]; wt_logs($sp5cfd48, 'timestamp'); wt_logs($sp16f5bb[$sp006c27]['last_timestamp'], '$storage_data[$ses_name][last_timestamp]'); $spf7637b = 0; if (isset($sp16f5bb[$sp006c27]['last_timestamp'])) { $spf7637b = $sp16f5bb[$sp006c27]['last_timestamp']; } wt_logs($spf7637b, 'last_timestamp'); if ($sp5cfd48 > $spf7637b) { $sp16f5bb[$sp006c27]['last_timestamp'] = $sp5cfd48; $sp5404ed = saveData($sp16f5bb, $sp2c28f4 = false); wt_logs($sp5404ed, 'save_res'); $spfe5171 = wtam_substr($sp5e63f6, 8, 12); $spba073a = wtam_substr($sp5e63f6, 20, 16); $spaf4047 = wtam_substr($sp5e63f6, 36); if (!verify($spba073a, AGENT_KEY, $spaf4047)) { wt_logs('VERIFYED: [hmac in body is wrong]', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac in body is wrong', $sp7c8f4f = 8), $sp90a523)); } wt_logs($sp90a523, '[hmac in body is right] seskey len(' . wtam_strlen($sp90a523) . ')'); $sp93a2e8 = decrypt_chacha20($spaf4047, $sp90a523, $spfe5171); wt_logs($sp93a2e8, 'request'); return $sp93a2e8; } else { wt_logs('timestamp error', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'timestamp error', $sp7c8f4f = 7), $sp90a523)); } } else { die(sendRequest(wt_handle_error($sp540d85 = 'signature is incorrect', $sp7c8f4f = 10), $sp90a523)); } } } function receiveHashedRequest($sp90a523 = AGENT_KEY, $sp16f5bb = false, $sp006c27 = '') { $sp5e63f6 = file_get_contents('php://input'); wt_logs($sp5e63f6, 'totem_request'); $sp2aa6f3 = wtam_strlen($sp5e63f6); wt_logs($sp2aa6f3, 'totem_request_len'); $spe7e97c = getallheaders(); $sp531cf1 = $spe7e97c['Wt-Signature']; if ($sp531cf1) { wt_logs($sp531cf1, 'header_signature'); $sp602ba8 = base64_decode($sp531cf1); if (!$sp602ba8) { wt_logs('header not decoded', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'header not decoded', $sp7c8f4f = 1), $sp90a523)); } } else { wt_logs('header not found', 'INFO'); $sp02b2cb = 'wt-signature'; if (isset($_COOKIE[$sp02b2cb])) { $sp602ba8 = base64_decode($_COOKIE[$sp02b2cb]); if (!$sp602ba8) { wt_logs('cookie not decoded', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'cookie not decoded', $sp7c8f4f = 2), $sp90a523)); } } else { wt_logs("cookies not found [{$sp02b2cb}]", 'ERROR'); wt_logs($_COOKIE, '$_COOKIE'); die(sendRequest(wt_handle_error($sp540d85 = 'cookies not found', $sp7c8f4f = 3), $sp90a523)); } } wt_logs($sp602ba8, 'requests_signature'); $spb359f3 = wtam_substr($sp602ba8, 0, 16); $spa2395a = wtam_substr($sp602ba8, 16); if (!$spb359f3) { wt_logs('hmac not found', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac not found', $sp7c8f4f = 4), $sp90a523)); } if (!verify($spb359f3, AGENT_KEY, $spa2395a)) { wt_logs('VERIFYED: [hmac in header wrong]', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac in header is wrong', $sp7c8f4f = 6), $sp90a523)); } else { wt_logs('VERIFYED: [hmac in header is right]', 'INFO'); $spbbbe69 = false; if (function_exists('sodium_crypto_sign_verify_detached')) { if (CHECKSIGNATURE) { $sp384722 = microtime(true); $sp8b0f64 = sodium_crypto_sign_verify_detached($spa2395a, $sp5e63f6, PUBLIC_KEY); $sp29616a = microtime(true); wt_logs($sp8b0f64, 'sign_verify2'); wt_logs($sp29616a - $sp384722, 'check_signature secs'); if ($sp8b0f64) { wt_logs('YES', 'VERIFY 2'); $spbbbe69 = true; } else { wt_logs('NO', 'VERIFY 2'); $spbbbe69 = false; } } } else { $spbbbe69 = true; } if ($spbbbe69 && CHECKSIGNATURE || !CHECKSIGNATURE) { wt_logs('YES (or pass) SIGNATURED: sign in header right 0', 'INFO'); $sp5cfd48 = wtam_substr($sp5e63f6, 0, 8); $sp5cfd48 = unpack('P', $sp5cfd48); $sp5cfd48 = $sp5cfd48[1]; wt_logs($sp5cfd48, 'timestamp'); wt_logs($sp16f5bb[$sp006c27]['last_timestamp'], '$storage_data[$ses_name][last_timestamp]'); $spf7637b = 0; if (isset($sp16f5bb[$sp006c27]['last_timestamp'])) { $spf7637b = $sp16f5bb[$sp006c27]['last_timestamp']; } wt_logs($spf7637b, 'last_timestamp'); if ($sp5cfd48 > $spf7637b) { $sp16f5bb[$sp006c27]['last_timestamp'] = $sp5cfd48; $sp5404ed = saveData($sp16f5bb, $sp2c28f4 = false); wt_logs($sp5404ed, 'save_res'); $sp0ec590 = wtam_substr($sp5e63f6, 8, 64); wt_logs($sp0ec590, 'hash_temp'); $spfe5171 = wtam_substr($sp5e63f6, 72, 12); $spba073a = wtam_substr($sp5e63f6, 84, 16); wt_logs($spba073a, 'hmac'); $spaf4047 = wtam_substr($sp5e63f6, 100); wt_logs($spaf4047, 'request_encrypted'); wt_logs(wtam_strlen($spaf4047), 'request_encrypted (wtam_strlen)'); if (!verify($spba073a, AGENT_KEY, $spaf4047)) { wt_logs('VERIFYED: [hmac in body is wrong] (receiveHashedRequest)', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac in body is wrong', $sp7c8f4f = 8), $sp90a523)); } wt_logs($sp90a523, '[hmac in body is right] seskey'); wt_logs(wtam_strlen($sp90a523), 'seskey (wtam_strlen)'); $sp93a2e8 = decrypt_chacha20($spaf4047, $sp90a523, $spfe5171); wt_logs($sp93a2e8, 'request'); $spbb5e21 = hash('sha512', $sp93a2e8, true); if ($spbb5e21 === $sp0ec590) { $spb36295 = true; wt_logs('YES', 'Equal!'); } else { $spb36295 = false; wt_logs('NO', 'Not equal!'); wt_logs(base64_encode($spbb5e21), 'sha512_temp_str (base64)'); wt_logs(base64_encode($sp0ec590), 'hash_temp (base64)'); } wt_logs($spbb5e21, 'sha512_temp_str'); wt_logs($sp0ec590, 'hash_temp'); $spdaa01d = array('hash' => $sp0ec590, 'test_str' => $sp93a2e8, 'res' => $spb36295); wt_logs($spdaa01d, 'return'); return $spdaa01d; } else { wt_logs('timestamp error', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'timestamp error', $sp7c8f4f = 7), $sp90a523)); } } else { die(sendRequest(wt_handle_error($sp540d85 = 'signature is incorrect', $sp7c8f4f = 10), $sp90a523)); } } } function sendRequest($spbbfff6 = '', $sp90a523 = AGENT_KEY) { $sp782d4b = headers_list(); wt_logs($sp782d4b, 'headers_for_send'); wt_logs('start', 'sendRequest'); wt_logs($spbbfff6, 'data'); $spfe5171 = randomStr(12); $sp2424c2 = encrypt_chacha20($spbbfff6, $sp90a523, $spfe5171); $spfad881 = authenticate(AGENT_KEY, $sp2424c2); $sp93a2e8 = $spfe5171 . $spfad881 . $sp2424c2; wt_logs($sp93a2e8, 'request'); return $sp93a2e8; } function resetStorage($sp16f5bb = false) { wt_logs('resetStorage', 'INFO'); $spcb1e2d = array('am' => array('version' => AM_VERSION, 'timestamp' => AM_UPD, 'name' => basename(__FILE__)), 'av' => array('version' => null, 'timestamp' => null, 'name' => null), 'waf' => array('version' => null, 'timestamp' => null, 'name' => null)); if ($sp16f5bb) { array_merge($spcb1e2d, $sp16f5bb); } wt_logs($spcb1e2d, 'data_for_storage'); $sp5404ed = saveData($spcb1e2d, $sp2c28f4 = false); if ($sp5404ed === FALSE) { die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = 'storage not saved', $sp7c8f4f = 80), AGENT_KEY)); } } if (isset($_GET)) { if (isset($_GET['ping'])) { die(USER_IDENTIFIER); } } wt_logs('BEGIN', '___'); wt_logs('START', 'REQUEST'); $sp527496 = phpversion(); wt_logs($sp527496, 'php_ver'); if (version_compare($sp527496, '5.6.0', '<')) { wt_logs($sp527496, 'less than PHP 5.6 versions is not supported'); die('less than PHP 5.6 versions is not supported'); } $sp99a740 = wtam_strlen(FILESTUB) + 2; wt_logs($sp99a740, 'empty'); wt_logs(CACHE_DIR, 'CACHE_DIR'); $sp81b595 = @filesize(CACHE_DIR); wt_logs($sp81b595, 'storage_size'); if (file_exists(CACHE_DIR) === false || $sp81b595 <= $sp99a740) { wt_logs('CACHE_DIR', 'not found or small size'); resetStorage(false); } else { wt_logs('Default storage exist', 'INFO'); } $sp16f5bb = getData($sp2c28f4 = false, $sp4366b1 = true); if ($sp16f5bb === FALSE) { die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = 'storage not allowed', $sp7c8f4f = 90), AGENT_KEY)); } $sp3ccbc2 = LOGS_FILE; $sp006c27 = randomStr(12); $spa0d3d9 = '_wtotem'; $sp4cc7f4 = getallheaders(); wt_logs($sp4cc7f4, 'allheaders'); if (isset($_COOKIE[$spa0d3d9])) { $spafd249 = $_COOKIE[$spa0d3d9]; wt_logs($spafd249, 'cook'); if ($spafd249) { $sp006c27 = $spafd249; wt_logs('SET', 'ses_name FROM COOKIE'); } } wt_logs($sp006c27, 'ses_name (RESULT)'); $spaf9cd9 = wtam_substr($sp006c27, 0, 2) . ' '; define('WTSN', $spaf9cd9); $sp2fda5e = isset($sp16f5bb[$sp006c27]); wt_logs($sp2fda5e, 'ses_storage_exist'); if ($sp2fda5e) { wt_logs($sp006c27, 'ses_name (yes)'); $sp556ed6 = base64_decode($sp16f5bb[$sp006c27]['seskey_base64']); $sp087e66 = $sp16f5bb[$sp006c27]['sid']; } else { wt_logs($sp006c27, 'ses_name (no)'); $sp556ed6 = '00000000000000001111111111111111'; $sp087e66 = 0; } setcookie($spa0d3d9, $sp006c27, time() + 3600, '/', $_SERVER['SERVER_NAME'], false, true); wt_logs($sp556ed6, 'seskey_decoded'); wt_logs($spa0d3d9, 'cookie "name"'); wt_logs($sp006c27, 'ses_name (cookies value)'); wt_logs($sp087e66, 'sesid (switch)'); $sp5f92d4 = microtime(true); $sp960cd7 = hash_file('sha256', __FILE__); $spe06166 = microtime(true); wt_logs($sp960cd7, 'hash_am'); wt_logs($spe06166 - $sp5f92d4, 'get_hash secs'); switch ($sp087e66) { case 0: $sp93a2e8 = receiveRequest(AGENT_KEY, $sp16f5bb, $sp006c27); $sp390f2f = $sp93a2e8; $sp354dbd = base64_encode($sp390f2f); wt_logs($sp354dbd, 'SSPub_base64'); $spf4eb9a = Salt::box_keypair(); $sp9343e7 = $spf4eb9a[0]; $sp29a7bf = $spf4eb9a[1]; $sp9343e7 = byteObj2String($sp9343e7); $sp29a7bf = byteObj2String($sp29a7bf); $sp3da371 = base64_encode($sp29a7bf); $spacfba0 = base64_encode($sp9343e7); if (wtam_strlen($spacfba0) === 44 && wtam_strlen($sp354dbd) === 44) { $sp83acd6 = Salt::scalarmult($spacfba0, $sp354dbd); $sp83acd6 = byteObj2String($sp83acd6); $spfaa975 = base64_encode($sp83acd6); wt_logs($spfaa975, 'SesKey (base64_encode)'); $spff0ee0 = date(DATE_FORMAT); wt_logs($spff0ee0, 'current_date'); $sp3b3e71 = array('sid' => 1, 'seskey_base64' => $spfaa975, 'date' => $spff0ee0); $sp16f5bb[$sp006c27] = $sp3b3e71; wt_logs($sp16f5bb, 'storage_data (updated)'); saveData($sp16f5bb, $sp2c28f4 = false); $sp16f5bb = getData($sp2c28f4 = false, $sp4366b1 = true); $sp8ace1e = sendRequest($sp29a7bf); wt_logs($sp8ace1e, 'result :::' . PHP_EOL . 'END'); die($sp8ace1e); } else { die(sendRequest(wt_handle_error($sp540d85 = 'keys length error', $sp7c8f4f = 20))); } break; case 1: $sp93a2e8 = receiveHashedRequest($sp556ed6, $sp16f5bb, $sp006c27); wt_logs($sp93a2e8, 'request'); $sp0e25c5 = $sp93a2e8['hash']; $sp62719f = $sp93a2e8['test_str']; $spf580a1 = hash('sha512', $sp62719f, true); $spa3df6a = strcasecmp($sp0e25c5, $spf580a1); $sp16f5bb[$sp006c27]['sid'] = 2; if ($spa3df6a === 0) { wt_logs('DONE!', 'strings is equal'); } else { wt_logs('NONE!', 'strings is NOT equal'); die(sendRequest(wt_handle_error($sp540d85 = 'strings is not equal', $sp7c8f4f = 30))); } $spbb9e77 = $sp62719f . USER_IDENTIFIER; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); wt_logs($sp8ace1e, 'result :::' . PHP_EOL . 'END'); saveData($sp16f5bb, $sp2c28f4 = false); $sp16f5bb = getData($sp2c28f4 = false, $sp4366b1 = true); wt_logs($sp16f5bb, 'storage_data sesid 2'); die($sp8ace1e); break; default: $sp93a2e8 = receiveRequest($sp556ed6, $sp16f5bb, $sp006c27); wt_logs('request', 'receiveRequest($seskey_decoded)'); $sp087e66 += 1; $sp16f5bb[$sp006c27]['sid'] = $sp087e66; wt_logs($sp93a2e8, 'request'); $spff4c14 = json_decode($sp93a2e8, true); if ($spff4c14 !== NULL && $spff4c14 !== FALSE) { $spb08065 = $spff4c14['cmd']; $spf67387 = $spff4c14['module']; wt_logs($spb08065, 'cmd'); switch ($spb08065) { case 'update_waf': $spbbfff6 = update_agent_inc('waf', $spff4c14['params']['filename'], $spff4c14['params']['content'], $spff4c14['params']['upd_time'], $spff4c14['params']['agent_version']); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'update_av': $spbbfff6 = update_agent_inc('av', $spff4c14['params']['filename'], $spff4c14['params']['content'], $spff4c14['params']['upd_time'], $spff4c14['params']['agent_version']); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'update_am': $sp3f38db = check_update_agent(); wt_logs($sp3f38db, 'check_res'); $spbbfff6 = update_agent($spf67387 = 'am', $spff4c14['params']['filename'], $spff4c14['params']['content'], $spff4c14['params']['upd_time'], $spff4c14['params']['agent_version']); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'get_upd_timestamp': $sp5cfd48 = ''; $sp540d85 = 'timestamp not found'; if (isset($sp16f5bb[$spf67387]['timestamp'])) { $sp5cfd48 = $sp16f5bb[$spf67387]['timestamp']; $sp540d85 = 'timestamp from storage'; } wt_logs($sp5cfd48, ' timestamp (' . $spf67387 . ')'); $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'get_upd_timestamp', 'timestamp' => $sp5cfd48), 'text' => $sp540d85); wt_logs($spbbfff6, 'data'); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'postinstall': $spb36295 = false; $sp839fcf = 'start error'; $spf2168c = 50; if ($spf67387 === 'waf') { $sp184f26 = $sp16f5bb['waf']['name']; $sp35cc94 = $spff4c14['key']; $spe669e0 = prepare_agent_inc('waf', $sp184f26, $sp35cc94, $sp556ed6); if ($spe669e0 !== false) { eval($spe669e0); if (class_exists('Waf')) { wt_logs('exists', 'class Waf'); $sp524b16 = new Waf(); $sp8ace1e = $sp524b16->cmd_create_file(); $sp4f0085 = json_decode($sp8ace1e, true); if ($sp4f0085['result']['status'] === 1) { if (WTWPP !== true) { $sp467018 = dirname(__FILE__) . '/'; $sp7acad4 = 'index.php'; $sp93f3af = $sp467018 . $sp7acad4; $sp67196d = '_include_' . $sp184f26; $spe2ec11 = '<?php $wtwaf = dirname(__FILE__) ."/' . $sp67196d . '"; if (file_exists($wtwaf)) { @include_once($wtwaf); } unset($wtwaf); ?>' . PHP_EOL; $sp9a452c = file_get_contents($sp93f3af); $sp0d4d54 = wtam_strlen($spe2ec11); $sp3b2bd8 = wtam_substr($sp9a452c, 0, $sp0d4d54); if ($sp3b2bd8 !== $spe2ec11) { $sp26300b = $spe2ec11 . $sp9a452c . PHP_EOL; $spb36295 = file_put_contents($sp93f3af, $sp26300b, LOCK_EX); $spefd898 = 'insert in entrypoint (now)'; } else { $spb36295 = true; $spefd898 = 'was included in entrypoint (earlier)'; } } else { $spb36295 = true; $spefd898 = 'no need include in entrypoint (WP)'; } } else { $spb36295 = false; $spf2168c = 53; $sp839fcf = 'create file error (inc)'; } } else { $spb36295 = false; $spf2168c = 52; $sp839fcf = 'prepare file error: decrypt (waf)'; } } else { $spb36295 = false; $spf2168c = 51; $sp839fcf = 'prepare file error: content of file (waf)'; } } if ($spf67387 === 'av' || $spf67387 === 'am') { $spb36295 = true; $spefd898 = 'nothing to do (av|am)'; } if ($spb36295 !== false) { $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'postinstall', 'postinstall_status' => 100, 'text' => $spefd898)); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); } else { die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = $sp839fcf, $spf2168c), $sp556ed6)); } break; case 'delete': $sp184f26 = $sp16f5bb['waf']['name']; wt_logs($sp184f26, 'waf_agent'); wt_logs($spf67387, 'module'); if ($spf67387 === 'am') { @unlink($sp16f5bb['av']['name']); @unlink($sp184f26); @unlink(LOGS_FILE); postdelete($spf67387 = 'waf', $sp184f26); wt_logs($sp16f5bb, 'storage_data'); $sp90e2d3 = wt_check_cache_dir_for_waf($sp184f26); $sp499701 = AV_CACHE_DIR; wt_logs($sp90e2d3, 'waf_dir'); deleteStorage(); deleteWAFStorage($sp90e2d3, $sp184f26); deleteAVStorage($sp499701); $spf67387 = 'am,av,waf'; @unlink($sp16f5bb['am']['name']); wt_logs($spf67387, '$module'); } else { @unlink($sp16f5bb[$spf67387]['name']); $sp16f5bb = array($spf67387 => array('version' => 0, 'timestamp' => 'deleted', 'name' => 'deleted')); wt_logs($sp16f5bb, '$storage_data'); updateData($sp16f5bb, $sp2c28f4 = false); if ($spf67387 === 'waf') { wt_logs($spf67387, '$module (postdelete)'); postdelete($spf67387 = 'waf', $sp184f26); $sp90e2d3 = wt_check_cache_dir_for_waf($sp184f26); deleteWAFStorage($sp90e2d3, $sp184f26); } wt_logs($sp16f5bb, '$storage_data'); } $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'delete', 'module' => $spf67387, 'delete_status' => 100)); wt_logs($spbbfff6, '$data'); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; wt_logs($spbb9e77, '$send'); $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); wt_logs($spbb9e77, '$send'); die($sp8ace1e); break; case 'get_stats': case 'get_server_stats': $spbbfff6 = get_server_stats(); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'get_info': case 'get_server_info': $spbbfff6 = get_server_info(); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'enable_logs': $spbbfff6 = cmd_enable_logs(); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'disable_logs': $spbbfff6 = cmd_disable_logs(); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; case 'logout': unset($sp16f5bb[$sp006c27]); $sp16f5bb = checkSessions($sp16f5bb); saveData($sp16f5bb, $sp2c28f4 = false); $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'logout')); $spbbfff6 = json_encode($spbbfff6); $spbb9e77 = microtime_pack() . $spbbfff6; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); break; default: wt_logs($spff4c14['cmd'], 'json[cmd]'); break; } $sp184f26 = $sp16f5bb['waf']['name']; $sp35cc94 = $spff4c14['key']; if ($spf67387 === 'waf') { $spf2168c = 60; if (file_exists($sp184f26) && $sp35cc94) { $spe669e0 = prepare_agent_inc($spf67387, $sp184f26, $sp35cc94, $sp556ed6); if ($spe669e0 !== false) { eval($spe669e0); if (class_exists('Waf')) { $sp524b16 = new Waf(); $spa08947 = $spff4c14['params']; switch ($spb08065) { case 'ping': die(TOTEM_VERIFY_CODE); break; case 'init': $spbb9e77 = $sp524b16->cmd_init($spa08947); break; case 'get_blacklist': $spbb9e77 = $sp524b16->cmd_get_blacklist($spa08947); break; case 'update_signatures': $spbb9e77 = $sp524b16->cmd_update_signatures($spa08947, TOTEM_SIGNATURES_DB); break; case 'update_signatures_files': $spbb9e77 = $sp524b16->cmd_update_signatures($spa08947, TOTEM_SIGNATURES_FILES_DB); break; case 'update_blacklist': $spbb9e77 = $sp524b16->cmd_update_blacklist($spa08947); break; case 'update_full_signatures': $spbb9e77 = $sp524b16->cmd_update_full_signatures($spa08947); break; case 'update_full_blacklist': $spbb9e77 = $sp524b16->cmd_update_full_blacklist($spa08947); break; case 'update_full_whitelist': $spbb9e77 = $sp524b16->cmd_update_full_whitelist($spa08947); break; case 'update_full_checklist': $spbb9e77 = $sp524b16->cmd_update_full_checklist($spa08947); break; case 'get_full_blacklist': $spbb9e77 = $sp524b16->cmd_get_full_blacklist($spa08947); break; case 'get_whitelist': $spbb9e77 = $sp524b16->cmd_get_whitelist($spa08947); break; case 'get_checklist': $spbb9e77 = $sp524b16->cmd_get_checklist($spa08947); break; case 'get_stats': $spbb9e77 = $sp524b16->cmd_get_stats($spa08947); break; case 'get_full_stats': $spbb9e77 = $sp524b16->cmd_get_full_stats($spa08947); break; case 'get_config': $spbb9e77 = $sp524b16->cmd_get_configs($spa08947); break; case 'set_config': $spbb9e77 = $sp524b16->cmd_set_configs($spa08947); break; case 'get_logs': $spbb9e77 = $sp524b16->cmd_get_logs(); break; default: $spbb9e77 = json_encode(array('version' => '', 'result' => 'cmd not found')); break; } $spbb9e77 = microtime_pack() . $spbb9e77; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); } else { $sp66981f = 'prepare file error: decrypt (waf)'; $spf2168c = 63; } } else { $sp66981f = 'prepare file error: content of file (waf)'; $spf2168c = 62; } } else { $sp66981f = 'KEY or AGENT does not exist (waf)'; $spf2168c = 61; wt_logs($sp184f26, 'waf_agent'); wt_logs($sp35cc94, 'waf_key'); if (!$sp184f26) { resetStorage($sp16f5bb); } } wt_logs($sp66981f, 'error_text'); die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = $sp66981f, $sp7c8f4f = $spf2168c), $sp556ed6)); } $spd30c46 = $sp16f5bb['av']['name']; $sp734c65 = $spff4c14['key']; if ($spf67387 === 'av') { $spf2168c = 70; if (file_exists($spd30c46) && $sp734c65) { $spe669e0 = prepare_agent_inc($spf67387, $spd30c46, $sp734c65, $sp556ed6); if ($spe669e0 !== false) { eval($spe669e0); if (class_exists('AV')) { $sp10cc99 = new AV(); $spa08947 = $spff4c14['params']; switch ($spb08065) { case 'ping': die(TOTEM_VERIFY_CODE); break; case 'init': $spbb9e77 = $sp10cc99->cmd_init($spa08947); break; case 'status': $spbb9e77 = $sp10cc99->cmd_status($spa08947); break; case 'get_tree': $sp7cea37 = microtime(true); if (isset($sp16f5bb[$sp006c27]['files_count'])) { $sp866079 = $sp16f5bb[$sp006c27]['files_count']; } else { $sp866079 = count_files(); $spd84dba = microtime(true); wt_logs($spd84dba - $sp7cea37, 'count_files secs'); $sp16f5bb[$sp006c27]['files_count'] = $sp866079; saveData($sp16f5bb, $sp2c28f4 = false); wt_logs($sp734c65, 'av_key'); } $sp5c5954 = dirname(__FILE__) . '/'; $sp184f26 = $sp16f5bb['waf']['name']; $spa852d0 = $sp5c5954 . $sp184f26; $sp67196d = $sp5c5954 . '_include_' . $sp184f26; $sp90e2d3 = wt_check_cache_dir_for_waf($sp184f26); $sp761e5d = $sp5c5954 . $spd30c46; $sp0a156d = array(__FILE__, AV_CACHE_DIR, $sp90e2d3, $spa852d0, $sp761e5d, $sp67196d); wt_logs($sp0a156d, 'white_filenames'); $spbb9e77 = $sp10cc99->cmd_get_tree($spa08947, $sp0a156d); $spbb9e77['result']->count = $sp866079; $spbb9e77 = json_encode($spbb9e77); $spc46e42 = microtime(true); wt_logs($spc46e42 - $sp7cea37, 'get_tree secs'); break; case 'get_changes': $sp8dbd0c = microtime(true); if (isset($sp16f5bb[$sp006c27]['files_count'])) { $sp866079 = $sp16f5bb[$sp006c27]['files_count']; } else { $sp866079 = count_files(); $spd84dba = microtime(true); wt_logs($spd84dba - $sp7cea37, 'count_files secs'); $sp16f5bb[$sp006c27]['files_count'] = $sp866079; saveData($sp16f5bb, $sp2c28f4 = false); } $sp5c5954 = dirname(__FILE__) . '/'; $sp184f26 = $sp16f5bb['waf']['name']; $spa852d0 = $sp5c5954 . $sp184f26; $sp67196d = $sp5c5954 . '_include_' . $sp184f26; $sp90e2d3 = wt_check_cache_dir_for_waf($sp184f26); $sp761e5d = $sp5c5954 . $spd30c46; $sp0a156d = array(__FILE__, AV_CACHE_DIR, $sp90e2d3, $spa852d0, $sp761e5d, $sp67196d); wt_logs($sp0a156d, 'white_filenames'); $spbb9e77 = $sp10cc99->cmd_get_changes(AV_CACHE_DIR, $sp866079, $spa08947, $sp0a156d); $spbb9e77['result']['count'] = $sp866079; $spbb9e77 = json_encode($spbb9e77); $spf05b08 = microtime(true); wt_logs($spf05b08 - $sp8dbd0c, 'get_changes secs'); break; case 'get_file': $spbb9e77 = $sp10cc99->cmd_get_file($spa08947); break; case 'to_quarantine': $sp8dad9e = microtime(true); $spbb9e77 = $sp10cc99->cmd_to_quarantine($spa08947); $sp493a54 = microtime(true); wt_logs($sp493a54 - $sp8dad9e, 'to_quarantine secs'); break; case 'from_quarantine': $sp094781 = microtime(true); $spbb9e77 = $sp10cc99->cmd_from_quarantine($spa08947); $sp9fb46f = microtime(true); wt_logs($sp9fb46f - $sp094781, 'from_quarantine secs'); break; } $spbb9e77 = microtime_pack() . $spbb9e77; $sp8ace1e = sendRequest($spbb9e77, $sp556ed6); die($sp8ace1e); } else { $sp66981f = 'prepare file error: decrypt (av)'; $spf2168c = 73; wt_logs($sp734c65, 'av_key'); } } else { $sp66981f = 'prepare file error: content of file (av)'; $spf2168c = 72; } } else { $sp66981f = 'KEY or AGENT does not exist (av)'; $spf2168c = 71; wt_logs($spd30c46, 'av_agent'); wt_logs($sp734c65, 'av_key'); if (!$spd30c46) { resetStorage($sp16f5bb); } } wt_logs($sp66981f, 'error_text'); die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = $sp66981f, $sp7c8f4f = $spf2168c), $sp556ed6)); } } else { die(sendRequest(microtime_pack() . wt_handle_error($sp540d85 = 'json is not correct', $sp7c8f4f = 40), $sp556ed6)); } break; } function postdelete($spf67387 = 'waf', $sp06bde3 = '') { if ($spf67387 === 'waf') { $spb36295 = false; $sp467018 = dirname(__FILE__) . '/'; wt_logs($sp467018, '$base_path'); $sp7acad4 = 'index.php'; wt_logs($sp7acad4, '$entrypoint'); $sp93f3af = $sp467018 . $sp7acad4; wt_logs($sp93f3af, '$target'); $sp624437 = wtam_substr($sp06bde3, 0, 9); if ($sp624437 !== '_include_') { $sp06bde3 = '_include_' . $sp06bde3; } wt_logs($sp06bde3, '$waf_name'); $spe2ec11 = '<?php $wtwaf = dirname(__FILE__) ."/' . $sp06bde3 . '"; if (file_exists($wtwaf)) { @include_once($wtwaf); } unset($wtwaf); ?>' . PHP_EOL; wt_logs($spe2ec11, '$include'); $sp0d4d54 = wtam_strlen($spe2ec11); wt_logs($sp0d4d54, '$include_len'); $sp9a452c = file_get_contents($sp93f3af); wt_logs($sp9a452c, 'target_content'); $spa0668e = wtam_stripos($sp9a452c, $spe2ec11); wt_logs($spa0668e, '$pos'); if ($spa0668e !== false) { $sp388635 = wtam_substr($sp9a452c, 0, $spa0668e) . wtam_substr($sp9a452c, $spa0668e + $sp0d4d54); wt_logs($sp388635, 'cutted'); $spb36295 = file_put_contents($sp93f3af, $sp388635, LOCK_EX); } if (file_exists($sp06bde3)) { unlink($sp06bde3); } wt_logs($spb36295, '$res'); return $spb36295; } } function update_agent($spf67387, $speed2a4, $sp6c22ad, $spe9f817, $spb7b541) { $spf5796f = dirname(__FILE__) . '/' . $speed2a4; $spa9b27b = file_put_contents($spf5796f, $sp6c22ad, LOCK_EX); if ($spa9b27b !== false) { $spcb1e2d = array($spf67387 => array('version' => $spb7b541, 'timestamp' => $spe9f817, 'name' => $speed2a4)); wt_logs($spcb1e2d, '$data_for_storage'); if ($spf67387 === 'am') { $sp960cd7 = hash('sha256', $sp6c22ad); $spcb1e2d['hash_am'] = $sp960cd7; wt_logs($spcb1e2d, '$data_for_storage [+ hash_am]'); } updateData($spcb1e2d, $sp2c28f4 = false); $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'update_' . $spf67387, 'install_status' => 100)); } else { $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => -1, 'cmd' => 'update_' . $spf67387, 'install_status' => -1, 'text' => 'agent was not updated (permissions)')); } wt_logs($spbbfff6, 'data'); return $spbbfff6; } function update_agent_inc($spf67387, $speed2a4, $sp6c22ad, $spe9f817, $spb7b541) { $spf5796f = dirname(__FILE__) . '/' . $speed2a4; $sp6c22ad = '<?php if (isset($_GET["ping"])) { die("' . USER_IDENTIFIER . '");} $agent_content = \'' . $sp6c22ad . '\'; ?>'; $spa9b27b = file_put_contents($spf5796f, $sp6c22ad, LOCK_EX); if ($spa9b27b !== false) { $spcb1e2d = array($spf67387 => array('version' => $spb7b541, 'timestamp' => $spe9f817, 'name' => $speed2a4)); updateData($spcb1e2d, $sp2c28f4 = false); $sp16f5bb = getData($sp2c28f4 = false, $sp4366b1 = true); $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => 100, 'cmd' => 'update_' . $spf67387, 'install_status' => 100)); } else { $spbbfff6 = array('version' => AM_VERSION, 'result' => array('status' => -1, 'cmd' => 'update_' . $spf67387, 'install_status' => -1, 'text' => 'agent was not updated (permissions)')); } wt_logs($spbbfff6, 'data'); return $spbbfff6; } function check_update_agent() { $sp25cb69 = __FILE__; $sp0c743b = $sp25cb69 . '_new'; if (!is_writable($sp25cb69)) { wt_logs('no', 'writable_01'); if (is_readable($sp25cb69)) { $sp6c22ad = file_get_contents($sp25cb69); $sp43a572 = file_put_contents($sp0c743b, $sp6c22ad); if ($sp43a572 !== false) { unlink($sp25cb69); wt_logs($sp0c743b . ' -> ' . $sp25cb69, 'rename'); rename($sp0c743b, $sp25cb69); } } } if (!is_writable($sp25cb69)) { wt_logs('no', 'writable_02'); chmod($sp25cb69, 438); } if (is_writable($sp25cb69)) { wt_logs('done', 'writable_03'); return true; } wt_logs('no', 'writable_03'); return false; } function prepare_agent_inc($spf67387 = 'waf', $speed2a4, $spad7c4b, $sp90a523 = '') { wt_logs($speed2a4, 'filename'); if (file_exists($speed2a4)) { include_once $speed2a4; if (isset($agent_content)) { $agent_content = base64_decode($agent_content); $spfe5171 = wtam_substr($agent_content, 0, 12); $spba073a = wtam_substr($agent_content, 12, 16); $spfefa23 = wtam_substr($agent_content, 28); if (!verify($spba073a, AGENT_KEY, $spfefa23)) { wt_logs('VERIFYED: hmac in agent is wrong (prepare_agent)', 'ERROR'); die(sendRequest(wt_handle_error($sp540d85 = 'hmac in agent is wrong', $sp7c8f4f = 99), $sp90a523)); } $spd679ee = decrypt_chacha20($spfefa23, $spad7c4b, $spfe5171); wt_logs(wtam_substr($spd679ee, 0, 400), 'agent_content_decrypted'); return $spd679ee; } else { wt_logs('not found', 'agent_content'); return false; } } else { wt_logs('not found', 'filename'); return false; } } function wt_check_dir($spc3ed07 = false, $speaa945 = false) { $sp0db9c5 = $spc3ed07 . '/' . $speaa945 . '/'; if (is_dir($sp0db9c5) && is_writeable($sp0db9c5)) { $spc3ed07 = $sp0db9c5; } elseif (mkdir($sp0db9c5, 493, true)) { $spc3ed07 = $sp0db9c5; } else { $spc3ed07 = $spc3ed07 . '/'; } return $spc3ed07; } function wt_check_cache_dir_for_waf($sp184f26 = false) { $spc3ed07 = ''; $speaa945 = '.wtotem_waf_' . substr($sp184f26, 0, 12); if (WTWPP === true) { $sp2dab6b = $_SERVER['DOCUMENT_ROOT'] . '/wp-content/uploads'; $spc3ed07 = wt_check_dir($sp2dab6b, $speaa945); } elseif (is_writeable(session_save_path())) { $sp1612ca = session_save_path(); $spc3ed07 = wt_check_dir($sp1612ca, $speaa945); } elseif (is_writeable($_SERVER['DOCUMENT_ROOT'])) { $sped446d = $_SERVER['DOCUMENT_ROOT']; $spc3ed07 = wt_check_dir($sped446d, $speaa945); } elseif (is_writeable(sys_get_temp_dir())) { $sp832596 = sys_get_temp_dir(); $spc3ed07 = wt_check_dir($sp832596, $speaa945); } else { $spc3ed07 = null; } return $spc3ed07; } function microtime_pack() { list($sp209e61, $sp95d23a) = explode(' ', microtime()); $sp0273ff = intval($sp95d23a . $sp209e61); $sp3d2810 = microtime(true) * 10000; $spe3c17f = microtime(true) * 10000; $spbbfff6 = pack('P', $spe3c17f); return $spbbfff6; } function count_files($spc3ed07 = false) { if ($spc3ed07 === false) { $spc3ed07 = dirname(__FILE__); } $sp2f4470 = scandir($spc3ed07); $sp043126 = 0; foreach ($sp2f4470 as $spbeed09) { if (!in_array($spbeed09, array('.', '..'))) { if (is_file($spc3ed07 . '/' . $spbeed09)) { $sp043126 = $sp043126 + 1; } if (is_dir($spc3ed07 . '/' . $spbeed09)) { $sp043126 += count_files($spc3ed07 . '/' . $spbeed09); } } } return $sp043126; } function daysBetween($sp778187, $spbdd60e) { return date_diff(date_create($spbdd60e), date_create($sp778187))->format('%a'); } function get_server_stats() { $spccb712 = array(); $spccb712['version'] = AM_VERSION; $spf4b862 = $sp571431 = 0; $spc316fb = $sp3a7e8f = 0; $sp8cae07 = 0; $spcce4cd = $sp45c75d = $spe0384b = 0; $sp21bf07 = stristr(PHP_OS, 'win'); wt_logs($sp21bf07, 'win'); $sp085574 = isEnabled('shell_exec'); $sp50682d = isEnabled('exec'); if ($sp21bf07) { $sp4801cd = array('C', 'D', 'E', 'F', 'G', 'H', 'I', 'M', 'X', 'Z'); $spe38eb5 = $sp997d86 = 0; foreach ($sp4801cd as $sp5d2b8c) { $sp3da250 = $sp5d2b8c . ':\\'; $sp997d86 += @disk_total_space($sp3da250); $spe38eb5 += @disk_free_space($sp3da250); } $spc316fb = round($sp997d86 / 1048576); $sp3a7e8f = round($spe38eb5 / 1048576); if ($sp50682d) { $spb08065 = 'wmic ComputerSystem get TotalPhysicalMemory'; @exec($spb08065, $spb0e16e); wt_logs($spb0e16e, 'outputTotalPhysicalMemory'); $spb08065 = 'wmic OS get FreePhysicalMemory'; @exec($spb08065, $sp79baa6); wt_logs($sp79baa6, 'outputFreePhysicalMemory'); if ($spb0e16e && $sp79baa6) { foreach ($spb0e16e as $sp93a853) { if ($sp93a853 && preg_match('/^[0-9]+$/', $sp93a853)) { $spf4b862 = $sp93a853; break; } } foreach ($sp79baa6 as $sp93a853) { if ($sp93a853 && preg_match('/^[0-9]+$/', $sp93a853)) { $spa475ee = $sp93a853; $spa475ee *= 1024; $sp571431 = $spf4b862 - $spa475ee; break; } } $spf4b862 = round($spf4b862 / 1048576); $sp571431 = round($sp571431 / 1048576); } } } else { $spc316fb = disk_total_space('/'); $sp3a7e8f = disk_free_space('/'); $spc316fb = round($spc316fb / 1048576); $sp3a7e8f = round($sp3a7e8f / 1048576); $spca5d39 = sys_getloadavg(); $spcddabe = 100; $spcce4cd = round($spca5d39[0] * $spcddabe); $sp45c75d = round($spca5d39[1] * $spcddabe); $spe0384b = round($spca5d39[2] * $spcddabe); $sp8cae07 = 0; if ($sp085574) { $spe38eb5 = shell_exec('free -m'); $spe38eb5 = (string) trim($spe38eb5); $spf47598 = explode('
', $spe38eb5); $sp09d8a7 = explode(' ', $spf47598[1]); $sp09d8a7 = array_filter($sp09d8a7); $sp09d8a7 = array_merge($sp09d8a7); $spf4b862 = (int) $sp09d8a7[1]; $sp571431 = (int) $sp09d8a7[2]; } else { wt_logs('shell_exec not enabled', 'INFO'); $spbeed09 = '/proc/meminfo'; if (file_exists($spbeed09)) { if (is_readable($spbeed09)) { $spc2fcf5 = getSystemInfo($spbeed09); $spf4b862 = (int) trim(substr($spc2fcf5['MemTotal'], 0, -3)); $spb1b649 = (int) trim(substr($spc2fcf5['MemAvailable'], 0, -3)); $spc4a030 = (int) trim(substr($spc2fcf5['MemFree'], 0, -3)); $sp571431 = $spf4b862 - $spb1b649 - $spc4a030; $spf4b862 = round($spf4b862 / 1024); $spb1b649 = round($spb1b649 / 1024); $spc4a030 = round($spc4a030 / 1024); $sp571431 = round($sp571431 / 1024); } } } } $sp850752 = getServerLoad(); wt_logs($sp850752, 'cpu_used_percent'); $sp8ace1e = array(); $sp8ace1e['space'] = array('total' => $spc316fb, 'free' => $sp3a7e8f); $sp8ace1e['memory'] = array('total' => $spf4b862, 'used' => $sp571431, 'use' => $sp571431); $sp8ace1e['cpu'] = array('used_percent' => $sp850752, 'loadavg_1' => $spcce4cd, 'loadavg_5' => $sp45c75d, 'loadavg_15' => $spe0384b); $sp8ace1e['shell_exec'] = $sp085574; $sp8ace1e['exec'] = $sp50682d; $sp8ace1e['win'] = $sp21bf07; $spccb712['result'] = $sp8ace1e; return json_encode($spccb712); } function get_server_info() { $spccb712 = array(); $spccb712['version'] = AM_VERSION; $sp4189d9 = array(); $sp4189d9['count'] = 0; $sp4189d9['model'] = ''; $sp4189d9['family'] = ''; $sp4189d9['lscpu'] = ''; $sp4189d9['frequency'] = 0; if (isEnabled('shell_exec')) { $sp4189d9['count'] = (int) trim(shell_exec('nproc')); $spfb39cc = shell_exec('lscpu'); $sp4189d9['lscpu'] = $spfb39cc; foreach (explode('
', $spfb39cc) as $sp5d8cfa) { $spe5e7bc = explode(':', $sp5d8cfa); if ($spe5e7bc[0] === 'Model name') { $sp4189d9['model'] = trim($spe5e7bc[1]); } if ($spe5e7bc[0] === 'CPU MHz') { $sp4189d9['frequency'] = (int) trim($spe5e7bc[1]); } if ($spe5e7bc[0] === 'CPU family') { $sp4189d9['family'] = trim($spe5e7bc[1]); } } } else { wt_logs('shell_exec not enabled', 'INFO'); $spbeed09 = '/proc/cpuinfo'; if (file_exists($spbeed09)) { if (is_readable($spbeed09)) { $sp32a4f7 = file_get_contents($spbeed09); $sp32a4f7 = str_replace(':', '', $sp32a4f7); if ($sp32a4f7 !== false) { $sp4189d9['count'] = (int) trim(substr(str_replace('cpu cores', '', $sp32a4f7[12]), 0, -1)); $sp4189d9['model'] = trim(substr(str_replace('model name', '', $sp32a4f7[4]), 0, -1)); $sp4189d9['family'] = trim(substr(str_replace('cpu family', '', $sp32a4f7[2]), 0, -1)); $sp4189d9['frequency'] = (int) trim(substr(str_replace('cpu MHz', '', $sp32a4f7[7]), 0, -1)); $sp4189d9['lscpu'] = $sp32a4f7; } } } } $sp4a59dc = function_exists('bccomp') ? 1 : 0; $sp4a59dc += function_exists('gmp_cmp') ? 2 : 0; $spe4ec3d = array_filter($_SERVER, function ($sp45eea6) { return in_array($sp45eea6, array('USER', 'SERVER_SOFTWARE', 'GATEWAY_INTERFACE', 'SERVER_PROTOCOL')); }, ARRAY_FILTER_USE_KEY); $spe4ec3d = array_change_key_case($spe4ec3d); $sp8ace1e = array(); $sp8ace1e['php_version'] = phpversion(); $sp8ace1e['php_server'] = $spe4ec3d; $sp8ace1e['os_info'] = php_uname(); $sp8ace1e['cpu'] = $sp4189d9; $sp8ace1e['max_execution_time'] = (int) ini_get('max_execution_time'); $sp8ace1e['math'] = $sp4a59dc; $spccb712['result'] = $sp8ace1e; return json_encode($spccb712); } function isEnabled($sp68e8f0) { return is_callable($sp68e8f0) && false === stripos(ini_get('disable_functions'), $sp68e8f0); } function getSystemInfo($spbeed09 = '/proc/meminfo') { $spbbfff6 = explode('
', file_get_contents($spbeed09)); $sp45c6b3 = array(); foreach ($spbbfff6 as $sp93a853) { list($spad7c4b, $spe5e7bc) = explode(':', $sp93a853); $sp45c6b3[$spad7c4b] = trim($spe5e7bc); } return $sp45c6b3; } function get_cpu_stat_unix() { if (is_readable('/proc/stat')) { $spca424b = @file_get_contents('/proc/stat'); if ($spca424b !== false) { wt_logs($spca424b, 'stats'); $spca424b = preg_replace('/[[:blank:]]+/', ' ', $spca424b); $spca424b = str_replace(array('
', '
', ''), '
', $spca424b); $spca424b = explode('
', $spca424b); foreach ($spca424b as $spf09608) { $spa2de2f = explode(' ', trim($spf09608)); if (count($spa2de2f) >= 5 && $spa2de2f[0] == 'cpu') { return array($spa2de2f[1], $spa2de2f[2], $spa2de2f[3], $spa2de2f[4]); } } } } return null; } function getServerLoad() { $spad45b0 = 0; if (stristr(PHP_OS, 'win')) { if (isEnabled('exec')) { wt_logs('enabled', 'exec'); $spb08065 = 'wmic cpu get loadpercentage /all'; @exec($spb08065, $spa3b275); wt_logs($spa3b275, 'output'); if ($spa3b275) { foreach ($spa3b275 as $sp93a853) { if ($sp93a853 && preg_match('/^[0-9]+$/', $sp93a853)) { $spad45b0 = $sp93a853; break; } } } } } else { if (is_readable('/proc/stat')) { $spac5a5d = get_cpu_stat_unix(); sleep(2); $sp598be7 = get_cpu_stat_unix(); if (!is_null($spac5a5d) && !is_null($sp598be7)) { wt_logs($spac5a5d, 'statData1'); wt_logs($sp598be7, 'statData2'); $sp598be7[0] -= $spac5a5d[0]; $sp598be7[1] -= $spac5a5d[1]; $sp598be7[2] -= $spac5a5d[2]; $sp598be7[3] -= $spac5a5d[3]; wt_logs($sp598be7, 'statData2'); $spefbf8e = $sp598be7[0] + $sp598be7[1] + $sp598be7[2] + $sp598be7[3]; wt_logs($spefbf8e, 'cpuTime'); $spad45b0 = round(100 - $sp598be7[3] * 100 / $spefbf8e); } } } return $spad45b0; } function cmd_enable_logs() { $spccb712 = array(); $spbbfff6 = FILESTUB . '1'; $sp8ace1e = file_put_contents(CONFIG_PATH, $spbbfff6); $spccb712['result'] = $sp8ace1e; return json_encode($spccb712); } function cmd_disable_logs() { $spccb712 = array(); unlink(CONFIG_PATH); $sp8ace1e = unlink(LOGS_FILE); $spccb712['result'] = $sp8ace1e; return json_encode($spccb712); } ?>
 
<?php 