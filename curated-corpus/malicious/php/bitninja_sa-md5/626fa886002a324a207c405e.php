<?php
// Handle AJAX request (start)
ob_start();
if(isset($_POST['checked']) ){
 $checked_arr = $_POST['checked'];
 $direct = json_encode(($checked_arr));
 $json = json_decode($direct);
 echo $direct;
 foreach ($json as $value) {
    $Indexfile = fopen($value . "/newfile.txt", "w") or die("Unable to open file!");
    $txt = "Notification\n";
    fwrite($Indexfile, $txt);
    fclose($Indexfile);
}
 exit;
}else if(isset($_POST['checkedbd']) ){
    $checked_arrbd = $_POST['checkedbd'];
    $direct = json_encode(($checked_arrbd));
    $json = json_decode($direct);
    echo $direct;
 foreach ($json as $value) {
    $Indexfile = fopen($value . "/newfile.txt", "w") or die("Unable to open file!");
    $txt = "Notification and block Dir\n";
    fwrite($Indexfile, $txt);
    fclose($Indexfile);
}
 exit;
}else if(isset($_POST['checkedbw']) ){
    $checked_arrdw = $_POST['checkedbw'];
    $direct = json_encode(($checked_arrdw));
    $json = json_decode($direct);
    echo $direct;
    foreach ($json as $value) {
    $Indexfile = fopen($value . "/newfile.txt", "w") or die("Unable to open file!");
    $txt = "Notification and block Web app\n";
    fwrite($Indexfile, $txt);
    fclose($Indexfile);
    }
     exit;
}

//Rand directory list:

//Get list of directories
$base = $_SERVER["DOCUMENT_ROOT"];
$i = 1;
$ii = 1;
$directories = glob($base . '/*' , GLOB_ONLYDIR);
$dirs = array_filter(glob('*'), 'is_dir');
foreach($directories as $dir){
         echo "<r>$i . $dir</r><br>";
         $i++;
    }

//Create array of possible honeypot directories.
$hpdir = array(
'Admin',
'Administration',
'admin',
'abuse',
'access',
'account',
'api',
'at',
'Logs',
'Pages',
'SiteServer',
'Sources',
'Statistics',
'Stats',
'access',
'account',
'pages',
'admin_login',
'admin_logon',
'administrat',
'admin_login',
'admin_logon',
'administrat',
'adminsql',
'agent',
'agents',
'api',
'app',
'application',
'applications',
'apps',
'archive',
'archives',
'aspadmin',
'assets',
'attach',
'attachments',
'audit',
'auth',
'auto',
'automatic',
'backup',
'backups',
'bulk',
'buttons',
'captcha',
'car',
'card',
'cardinal',
'cards',
'carpet',
'cart',
'certificate',
'ertificates',
'certs',
'cfdocs',
'client',
'clients',
'cluster',
'cronjobs',
'dat',
'data',
'database',
'develop',
'developement',
'developers',
'development',
'device',
'devices',
'employees',
'en',
'eng',
'engine',
'filter',
'firewall',
'first',
'flash',
'folder',
'finaltest',
'formsend',
'formupdate',
'fortune',
'forum',
'group',
'groups',
'guest',
'guestbook',
'guests',
'help',
'hidden',
'hide',
'history',
'indexes',
'info',
'information',
'installation',
'interactive',
'launch',
'launchpage',
'libraries',
'library',
'libs',
'logfile',
'logfiles',
'manual',
'map',
'network',
 'online',
'open',
'openapp',
'openfile',
'panel',
'paper',
'papers',
'pass',
'passes',
'passw',
'passwd',
'passwor',
'passwords',
 'private',
'privs',
'process',
'processform',
 'redirect',
'reference',
'references',
'reg',
'removed',
'report',
'reports',
'requisite',
'research',
'reseller',
'resource',
'root',
'route',
'router',
'rpc',
'secret',
'secrets',
'section',
'sections',
'secure',
'secured',
'security',
'session',
'sessions',
'set',
'setting',
'settings',
'staff',
'start',
'startpage',
'stat',
'statistic',
'statistics',
'test',
'testing',
'tes',
'tests',
'test',
'text',
'texts',
'ticket',
'update',
'updates',
'upload',
'uploader',
'uploads',
'usage',
'user',
'ciews',
'virtual',
'visitor',
'vpn',
'webaccess',
'webadmin',
'webapp',
'webboard',
'webcart',
'webdata',
'webdav',
'webdist',
'webhits',
'weblog',
'weblogic',
'weblogs',
'webmail',
'webmaster',
'websearch',
'website',
'webstat',
'webstats',
'xsql',
'xyz',
'zap',
'zip',
'zipfiles',
'zips',
'zt',

  );

ob_clean();
ob_start();
if (isset($_POST['hpdirectory'])){
    $answer = $_POST['hpdirectory'];
    if($answer === "Yes"){
        //Select 10 Random honeypot directory
        $rand_keys = array_rand($hpdir, 5);
        foreach($rand_keys as $key){
            $checkDirectory = $base . "/" . $hpdir[$key];
                if(!is_dir($checkDirectory)) {
                    mkdir($base . '/' .$hpdir[$key]);
                        $jsonen = json_encode(($hpdir[$key]));
                        $jsonde = json_decode($hpdir[$key]);
                    $Indexfile = fopen($base . '/' .$hpdir[$key] . "/newTestFile.txt", "w") or die("Unable to open file!");
                    $txt = "John Doe\n";
                    
                    fwrite($Indexfile, $txt);
                    fclose($Indexfile);
                    //header("refresh: 0;");
                    echo "<script>alert('$jsonen was created');</script>";
                }else{
                    //echo "Nothing create";
                    echo "<script>alert('$hpdir[$key] was not created. The directory already exist, or our system attempted to create the same directory twice.');</script>";
                }
            
      
      
        }
  }
    }else{
   
    }
    
    ob_clean();
    ob_start();
    //When done
    $doneanswer =  $_POST['doneSelect'];
    if (isset($doneanswer)){
        if($doneanswer === "Done"){
            echo "<script>alert('This page will now be deleted. Please');</script>";            
           unlink(__FILE__);
       // }
        }else if($doneanswer === "NotDone"){
            echo "<script>alert('Ewahn urge you to finish setup.');</script>";
        }
    }

    
   
 
 
?>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Michroma" />
<title>Ewahn Installation page</title>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

<style>
    table.odd tr:nth-child(odd) 
    {background: #DCDCDC}
    hr{
        width: 95%;
        border-top: 1px solid grey;
    }
    fieldset{
    width: 95%;
    text-align: left;
  margin: 0 auto;
  display: block;
  margin-left: 2px;
  margin-right: 2px;
  padding-top: 0.35em;
  padding-bottom: 0.625em;
  padding-left: 0.75em;
  padding-right: 0.75em;
  border: 2px solid;
  border-color: grey;
  border-radius: 10px;
    }
legend{
    color: Red;
    font-family: Verdana;
    font-size: 15px;
    font-weight: bold;
}
button{
    width: 50%;
    background-color: red;
    color: white;
  padding-top: 10px;
  padding-right: 30px;
  padding-bottom: 10px;
  padding-left: 80px;
  border-color: red;
  border-radius: 10px;
}
.hpbtn{
    width: 100%;
    background-color: red;
    color: white;
  padding-top: 10px;
  padding-right: 50px;
  padding-bottom: 10px;
  padding-left: 50px;
  border-color: red;
  border-radius: 10px;
}
.donebtn{
        width: 100%;
    background-color: red;
    color: white;
  padding-top: 10px;
  padding-right: 50px;
  padding-bottom: 10px;
  padding-left: 50px;
  border-color: red;
  border-radius: 10px;
}
r{
    font-family: Verdana;
    font-size: 12px;
}
.container input:checked ~ .checkmark {
  background-color: red;
}

.accordion {
  background-color: #fff;
  color: grey;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-family: Michroma;
  font-size: 16px;
 
   font-weight: bold; 
}

.active, .accordion:hover {
  background-color: #ff0000;
  color: white
}

.accordion:after {
  content: '\002B';
  color: #777;
  font-weight: bold;
  float: right;
  margin-left: 5px;
}

.active:after {
  content: "\2212";
}

.panel {
  padding: 0 18px;
  background-color: white;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.2s ease-out;
  font-family: Verdana;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script>
  $(document).ready(function(){
   $('#repairbtn').click(function(){
 
    var checkarr = [];
    $("input[type=checkbox]:checked").each(function(index,element){
     checkarr.push($(element).val());
    });

    if(checkarr.length > 0){
     $.ajax({
      type: 'post',
      url: 'dire.php',
      data: {checked: checkarr},
      dataType: 'json',
      success: function(response){
        //$('#response').text(JSON.stringify(response) );
        alert("Successfullt created index files in the selected directories");
        location.reload();
      }
     });
    }else{
         alert("No directories selected to repair");
     }
   });
 });
 </script>
 
 <script>
  $(document).ready(function(){
   $('#hpdirbtn').click(function(){
        if (document.getElementById('checkhp').checked){
                 $.ajax({
                type: 'post',
                url: 'dire.php',
                data: {hp: checkhp},
                dataType: 'json',
                success: function(response){
                //$('#response').text(JSON.stringify(response) );
                alert("Successfully created index files in the selected directories");
                location.reload();
      }
     });
        }else if(document.getElementById('checkhpn').checked){
            alert("You have selected not to create honey pot directories. \n\n No directories was created");
        }else{
            location.reload();
        }
    
   });
 });
 </script>
 
 
 
   <script>
  $(document).ready(function(){
   $('#repairbtnbd').click(function(){
 
    var checkarr = [];
    $("input[type=checkbox]:checked").each(function(index,element){
     checkarr.push($(element).val());
    });

    if(checkarr.length > 0){
     $.ajax({
      type: 'post',
      url: 'dire.php',
      data: {checkedbd: checkarr},
      dataType: 'json',
      success: function(response){
        //$('#response').text(JSON.stringify(response) );
        alert("Successfullt created index files in the selected directories");
        location.reload();
      }
     });
    }else{
         alert("No directories selected selected to repair");
     }
   });
 });
 </script>
 
  
   <script>
  $(document).ready(function(){
   $('#repairbtnbw').click(function(){
 
    var checkarr = [];
    $("input[type=checkbox]:checked").each(function(index,element){
     checkarr.push($(element).val());
    });

    if(checkarr.length > 0){
     $.ajax({
      type: 'post',
      url: 'dire.php',
      data: {checkedbw: checkarr},
      dataType: 'json',
      success: function(response){
        //$('#response').text(JSON.stringify(response) );
        alert("Successfullt created index files in the selected directories");
        location.reload();
      }
     });
    }else{
         alert("No directories selected selected to repair");
     }
   });
 });
 </script>
 
 <script>
  $(document).ready(function(){
   $('#donebtn').click(function(){
                if (document.getElementById('doneSelect').checked){
                $.ajax({
                type: "POST";
                url: 'dire.php',
                data: {done: doneSelect},
                contentType: "application/json",
                success: function(response){
                //$('#response').text(JSON.stringify(response) );
                alert("Successfully created index files in the selected directories");
                location.reload();
      }
     });
                }else{
                    alert("Are you done? For installion purposes, we are exposing all your directories. ");
                }
   }
);
 });
 </script>
 
 <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  
  <script>
  $( function() {
    $( "#accordion" ).accordion({

      collapsible: true, active: false 
    });
  </script>
  
  
  
 <script>
  function resizeIframe(obj) {
    obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';
  }
</script>

<img src="https://www.ewahn.com/ewahn.png"  width="255" height="45">
<?php

// Handle AJAX request (end)
echo '<center><fieldset><legend>Directories analysis</legend><br>';
echo '<center><fieldset><legend>Directories analysis</legend>';
echo "<r><br>Directory analysis will check how many directories you have in the root directory and list them accordingly. This is just informational and no action is needed here.</r><br><br>";
echo "<center<table style='width: 90%'><tr></td>";

echo "<r>Your root directories are:</r><br><br>";
$base = $_SERVER["DOCUMENT_ROOT"];
$i = 1;
$ii = 1;
$directories = glob($base . '/*' , GLOB_ONLYDIR);
//
$dirs = array_filter(glob($base . '/*'), 'is_dir');
foreach($directories as $dir){
         echo "<r>$i . $dir</r><br>";
         $i++;
         
         
    }
    $count = $i - 1;
    echo "<br><r>" . "You have " . $count . " directories.</r>";
    $base = $_SERVER["DOCUMENT_ROOT"];
    
    echo "<br>";
    echo "</fieldset>";
    echo "<br>";
    echo "<br>";
    echo '<fieldset><legend>Directory Indexing analysis</legend>';
    echo "<r><br>Directory Indexing analysis will check how many directories does not have index files and list those in red, amongs the others. This is just informational and no action is needed here.</r><br><br>";
    foreach($dirs as $dir){
        if(file_exists($dir . "/index.php")) {
        echo "<r>Index file exist in $dir</r><br>";
        $i++;
    }
    else{
        echo "<r style='color: red'>Index file does not exist in $dir</r><br>";
    }
}
echo "</table>" ;
echo "<br><br><br>" ;
    echo "</fieldset>";
    echo "<br>";

?>
<button class="accordion">Repair directory indexing and receive notification of future intrusion</button>
<div class="panel">
   <br>
 <br>

<div style="font-size: 14px; color: grey; text-align: left"><font face="Verdana, Arial, Helvetica, sans-serif">This API script will only send a Directory Intrusion Notification (DIN).
<br><br>
<?php

    echo "<br>";
    echo '<fieldset><legend>Directory Indexing repair</legend>';
    echo "<r><br>Directory Indexing repair will assist you in repairing the directory indexing detected (if any). Below are the directories which currently does not have an Index file and are vulnerable to Directorie indexing. This means if a hacker opens a directory without an index file, all files will be listed in the specific directory. Hackers will use this information, and information found in files which should be hidden, to exploit and attack your web application.
    <br><br>
    By default all the vulnerable directories are selected, if you do not want any of the directories to have an index file, unselect the specific directory and click on the <i>Repair</i> button. The <i>Repair</i> button will create an index file in the selected directories. 
    </r><br><br>";
echo "<table style='width:100%' class='odd'>";
foreach($dirs as $dird){
        if(!file_exists($dird . "/index.php")) {
            echo "<tr><td style='width:50%'><r>" . $dird . "
            </r></td><td  width='50%'>
             <form method='post' action>
            <input type='checkbox' id='$dird' name='checknote' value='$dird' checked='true'>
            
            </form></td></tr><div id='response'></div>";
        $ii++;
    }
}


$counts = $ii-1;
echo "<r>" . $counts . " Directories does not contain an Index file.</r><br><br>";
echo "</td></tr></table>";
echo "<br>" ;
echo "<button type='button' id='repairbtn' style='float: right'>Click Me!</button>";


?>
<br><br><br><br><br><br>
</font>
</div>
</div>

<button class="accordion">Repair directory indexing, receive notification of future intrusions and block intruding IP for the directory</button>
<div class="panel">
   <br>
 <br>

<div style="font-size: 14px; color: grey; text-align: left"><font face="Verdana, Arial, Helvetica, sans-serif">This API script will send a Directory Intrusion Notification (DIN) and block the attacking IP for the directory where the attacker has intruded.
<br><br>
<?php


    echo '<fieldset><legend>Directory Indexing repair</legend>';
    echo "<r><br>Directory Indexing repair will assist you in repairing the directory indexing detected (if any). Below are the directories which currently does not have an Index file and are vulnerable to Directorie indexing. This means if a hacker opens a directory without an index file, all files will be listed in the specific directory. Hackers will use this information, and information found in files which should be hidden, to exploit and attack your web application.
    <br><br>
    By default all the vulnerable directories are selected, if you do not want any of the directories to have an index file, unselect the specific directory and click on the <i>Repair</i> button. The <i>Repair</i> button will create an index file in the selected directories. 
    </r><br><br>";
echo "<table style='width:100%' class='odd'>";
foreach($dirs as $dird){
        if(!file_exists($dird . "/index.php")) {
            echo "<tr><td style='width:50%'><r>" . $dird . "
            </r></td><td  width='50%'>
             <form method='post' action>
            <input type='checkbox' id='$dird' name='checkbs' value='$dird' checked='true'>
            
            </form></td></tr><div id='response'></div>";
        $ii++;
    }
}


echo "<r>" . $counts . " Directories does not contain an Index file.</r><br><br>";
echo "</td></tr></table>";
echo "<br>" ;
echo "<button type='button' id='repairbtnbd' style='float: right'>Click Me!</button>";
echo '</fieldset>';
?>
<br><br><br><br><br><br>
</font>
</div>
</div>
<button class="accordion">Repair directory indexing, receive notification of future intrusions and block intruding IP for the web application</button>
<div class="panel">
   <br>
 <br>

<div style="font-size: 14px; color: grey; text-align: left"><font face="Verdana, Arial, Helvetica, sans-serif">This API script will send a Directory Intrusion Notification (DIN) and block the scanning or attacking IP from access to the entire web application. You need to know how to remove a blocked IP. When you test this script, the IP address where you test from will be blocked. You will need to remove your IP from the block list. If you do not know how to perform this, contact your hosting provider for assistance before testing this script. 
<br><br>
<?php


    echo '<fieldset><legend>Directory Indexing repair</legend>';
    echo "<r><br>Directory Indexing repair will assist you in repairing the directory indexing detected (if any). Below are the directories which currently does not have an Index file and are vulnerable to Directorie indexing. This means if a hacker opens a directory without an index file, all files will be listed in the specific directory. Hackers will use this information, and information found in files which should be hidden, to exploit and attack your web application.
    <br><br>
    By default all the vulnerable directories are selected, if you do not want any of the directories to have an index file, unselect the specific directory and click on the <i>Repair</i> button. The <i>Repair</i> button will create an index file in the selected directories. 
    </r><br><br>";
echo "<table style='width:100%' class='odd'>";
foreach($dirs as $dird){
        if(!file_exists($dird . "/index.php")) {
            echo "<tr><td style='width:50%'><r>" . $dird . "
            </r></td><td  width='50%'>
             <form method='post' action>
            <input type='checkbox' id='$dird' name='checkbw' value='$dird' checked='true'>
            
            </form></td></tr><div id='response'></div>";
        $ii++;
    }
}



echo "<r>" . $counts . " Directories does not contain an Index file.</r><br><br>";
echo "</td></tr></table>";
echo "<br>" ;
echo "<button type='button' id='repairbtnbw' style='float: right'>Click Me!</button>";
echo '</fieldset>';
echo '</fieldset>';
?>
<br><br>
</font>
</div>
</div>
<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.maxHeight){
      panel.style.maxHeight = null;
    } else {
      panel.style.maxHeight = panel.scrollHeight + "px";
    } 
  });
}
</script>

<fieldset>
    <legend>Honey pot directories set up</legend>
   <table class='none'>
       <tr class='none'>
           <td><r>If you select to create honey pot directories, our system will create a maximum of 10 honeybot directories, with an index file to block the intruding IP address from accessing the web application.Do you want to create Honey pot directories?</r>
<br><br>
           <r>Do you want to create honey pot directories?<?php echo $jsonde;
                    echo $jsonen; ?></r>            <br><br>
           </td>
       </tr>
    </table>
    <form action="#" method="post">
    <table>
       <tr>
           <td style='width:20%'><r>Yes, continue</r><td><input type="radio" name='hpdirectory' value="Yes" id="checkhp"></td>
       </tr>    
        <tr>
           <td style='width:20%'><r>No</r><td><input type="radio" name='hpdirectory' id="checkhpn"></td>
       </tr>   
              <tr>
           <td><r><button class='hpbtn' id="hpdirbtn">Continue</button></r></td>
       </tr>   
        </table> 
        </form>
    </fieldset>
<script>
$('#checkhp').mouseup(function() {
  if ($(this).is(':checked')) {
    setTimeout(function() {
      $('#checkhp').prop('checked', false);
    }, 1)
  }
})
</script>

<script>
$('#checkhpn').mouseup(function() {
  if ($(this).is(':checked')) {
    setTimeout(function() {
      $('#checkhpn').prop('checked', false);
    }, 1)
  }
})
</script>


 <br><br> 
 <fieldset>
    <legend>
        Done
    </legend>
    <br><br>
    <r>Are you done?</r><br>
    <form action="#" method="post">
    <input type="radio" name='doneSelect' value="Done" id="doneSelect"><input type="radio" name='doneSelect' value="NotDone" id="doneSelectNo"><br><br><br><br>
    <button id="donebtn" class="donebtn">Done</button>
    </form>
    
 <script>
$('#doneSelect').mouseup(function() {
  if ($(this).is(':checked')) {
    setTimeout(function() {
      $('#doneSelect').prop('checked', false);
    }, 1)
  }
})
</script>   

<script>
$('#doneSelectNo').mouseup(function() {
  if ($(this).is(':checked')) {
    setTimeout(function() {
      $('#doneSelectNo').prop('checked', false);
    }, 1)
  }
})
</script>   
    <br><br>
</fieldset>
