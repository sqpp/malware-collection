<!DOCTYPE html>
<html dir="ltr" lang="en-US">
<head>
    <meta charset="utf-8">
    <title>KeyWordSearch - Simple test-bed to check mk3xml</title>
	<meta name="viewport" content="initial-scale = 1.0, maximum-scale = 1.0, user-scalable = no, width = device-width">
<?php
$VeRsIoN = '1.0.4';
$AuThOr  = 'M.Aitchison@chch.planet.org.nz';
$DEBUG = 0;
?>

</head>
<body>
<table width="99%" bgcolor="#afefee">
<tr><td>
<font color="#67109" size="+9"> by Mark</br>
<form name="input" action="/cc1/mk3xmla.php" method="get">
<?php
                $Given = sanitize( $_GET['Given'] ); # need to think more about this process of cleaning out dangerous characters!
                $prompt= $Given;
                #if ($prompt == "") { $prompt = "Test text..."; };
                echo sprintf('
<p><input type="text" name="Given" value="%s" autofocus width="14" style="font-size: 32px;"></p>
',$prompt);
?>
<!-- <p style="margin-top: 5px"><a href="step1.php" class="art-button">Go</a></p> -->
<input type="submit" value="manual test" width="50%" style="font-size: 40px;">
</form>
</font>
</td></tr>
<tr><Font SIZE="7">
<?php
 $whatever =  preg_replace('/[^0-9A-Za-z]+/','', $Given); # Must not have anything like ../filename!!
 # a few more "special" characters are permitted in "$Given" than the filename, e.g. space and dot and slash 
 if ( file_exists($whatever) ) {
  // echo " DEBUG: $whatever dir already exixts so we presumably do not need to do any more work. Given=$Given whatever=$whatever <br> <p>\n";
  // already have $whatever dir and so can assume a ./whatever/source.xml file...
 } else {
  // will create directory $whatever and a ./whatever/source.xml file...
  mkdir ($whatever, 0777);
  $cmd = sprintf('perl ../hidden8.dir/mk3xml "%s" > "./%s/source.xml" ',$Given,$whatever);
  exec ($cmd);  # could consider passthru and '| tee' instead of '>' in the line above (I used that arrangement for debugging)
 };
 # now /cc1/whatever/source.xml should contain the output of mk3xml and "whatever" is the already-sanitized Given string with only alphanumerics!

?>
</font>
</td></tr>
</table>

<?php
function sanitize( $string) {
  $clean =  stripslashes($string);
  #  escapeshellcmd()
  // convert accented characters (might not be the most appropriate thing to do, but can improve upon in a later version after experimentation)
  // unfortunately it's no good using:  $clean = iconv('UTF-8', 'ASCII//TRANSLIT', $clean);
  $search  = explode(",","ç,á,é,í,ó,ú,à,è,ì,ò,ù,ä,ë,ï,ö,ü,ÿ,â,ê,î,ô,û,å,e,i,ø,u,À,Á,Â,Ã,Ä,Å,È,É,Ê,Ë,Ì,Í,Î,Ï,Ò,Ó,Ô,Õ,Ö,Ù,Ú,Û,Ü,Ð,Ñ,Ç,Ď,Ź,æ,œ,Æ");
  $replace = explode(",","c,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u,A,A,A,A,A,A,E,E,E,E,I,I,I,I,O,O,O,O,O,U,U,U,U,D,N,C,D,Z,ae,oe,AE");
  $clean = str_replace($search, $replace, $clean );
  // remove dangerous characters (that could let hackers do nasty things somehow)
  $clean = preg_replace('/\|/',' OR ',$clean );
  $clean = preg_replace('/[\&\+]/',' AND ',$clean ); # may as well do this too
  $clean = preg_replace('/[^a-z0-9\^\[\]\*\ \.\-]+/i',' ', $clean ); # here we permit space and dot (ok inside quotes, BUT not nice for filenames)
  return $clean;
}


?>
</div> 


</body></html>
