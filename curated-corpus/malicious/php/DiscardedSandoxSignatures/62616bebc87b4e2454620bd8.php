<?php

# cd C:\Program Files\xampp\1.7.1\php\
# php "C:\Documents and Settings\Administrator\My Documents\My Projects\Opi Web - Prowze\public_html\admin\em\sending.php"


/* ============================================================
| FUNCTION
============================================================ */
function logger($batch_id, $email, $sent=false){
	$filename = LOG_DIR . $batch_id . '.log';
	$C = date('Y-m-d His');
	if($sent===true){
		$C .= "\t" . 'PASS';
	} else {
		$C .= "\t" . 'FAIL';
	}
	$C .= "\t" . $email . "\r\n";

	#if (is_writable($filename)) {
		if (@!$handle = fopen($filename, 'a')) {
			# echo "Cannot open file ($filename)" . "\r\n";
		}

		// Write $somecontent to our opened file.
		if (@fwrite($handle, $C) === FALSE) {
			# echo "Cannot write to file ($filename)" . "\r\n";
		}
		fclose($handle);

	/*} else {
		echo "The file $filename is not writable" . "\r\n";
	}*/
}


/* ============================================================
| SETUP
============================================================ */
# Header
if(session_id()==''){session_start();}
if(!defined('findem.com_win')){define("findem.com_win", 1);}

# Base Directory and Authentication
if (defined('STDIN')){
	echo 'Mode: CLI' . "\r\n";
	define('BASE_DIR', dirname(dirname(dirname(__FILE__))) . '/');	# Special Pathing so this can run from cron
	require_once(BASE_DIR . "inselects/function.base_dir.php");
	require_once(BASE_DIR . "inselects/function.base_url.php");

	define('BATCH_LOOP', 10);	# Run batch for this many loops, 0 for unlimited
} else {
	require_once("../_auth.php");
	define('BATCH_LOOP', 10);	# Run batch for this many loops, 0 for unlimited
}

# Includes
require_once(base_dir() . "inselects/connect_db.php");
require_once(base_dir() . "inselects/_form_helpers.php");
require_once(base_dir() . "inselects/defined.php");
require_once(base_dir() . "inselects/class.html_mime_mail.php");
require_once(base_dir() . "inselects/class.settings.php");

$settings = new settings();
define('BASE_URL', $settings->fetch('admin', 'em', 'base_url'));

# Settings
define('BATCH_SIZE', 10);	# How many to send per loop
define('BATCH_HOLD', 60);	# Seconds to wait to before allowing another process to begin
define('BATCH_WAIT', 4);	# Time between loops (seconds)
define('EMAIL_WAIT', 4);	# Time between email (seconds)

define('ENGINE_DIR', base_dir() . 'admin/em/engines/');
define('LOG_DIR', base_dir() . 'logs/em/');
define('FROM_EMAIL', $settings->fetch('admin', 'em', 'default_from_email', 'no-reply@no-reply.com'));
define('FROM_NAME', $settings->fetch('admin', 'em', 'default_from_name', 'No-Reply'));
if($settings->fetch('admin', 'em', 'mode', '0')==0){
	define('TEST_MODE', 1);
	define('TEST_MODE_EMAIL', $settings->fetch('admin', 'em', 'mode_test_email', 'no-reply@no-reply.com'));
}

/* ============================================================
| AUTO BATCH CREATION
============================================================ */
/*
# Email Engine 1: Weekly Email Auto
require_once("engines/class.email_1.php");
$email_engine = new email_1();
$result = $email_engine->generate_mailing_list();

# Email Engine 2: Tri-Weekly Email Auto
require_once("engines/class.email_2.php");
$email_engine = new email_2();
$result = $email_engine->generate_mailing_list();
*/

# Email Engine 3: Weekly Email Auto
require_once("engines/class.email_3.php");
$email_engine = new email_3();
$result = $email_engine->generate_mailing_list();




/* ============================================================
| SENDING
============================================================ */
# BATCH LOOP (Careful)
$loop = 0;
set_time_limit(0);
ignore_user_abort(true);

# ------------------------------------------------------------
# Last Process was run (Prevent stacking)
$last_active = $settings->fetch('admin', 'em', 'last_active', '0');
if($last_active>(time()-BATCH_HOLD)){$loop = BATCH_LOOP;}

while($loop<BATCH_LOOP || BATCH_LOOP==0){
# ------------------------------------------------------------
# Get Batch
$sql = "SELECT * FROM em_batches WHERE (`status`=2 OR `status`=3) ORDER BY `status` DESC LIMIT 1";
$result = mysql_query($sql) or die (mysql_error());
if (mysql_num_rows($result) >= 1) {
	$data['batch'] = mysql_fetch_array($result, MYSQL_ASSOC);

	# Set Batch to sending
	if($data['batch']['status']==2){
		$sql = "UPDATE em_batches SET
			status=3,
			datetime_send_started=NOW()
		WHERE em_batch_id=" . (int)$data['batch']['em_batch_id'];
		mysql_query($sql) or die (mysql_error());
	}
}

# ------------------------------------------------------------
# Send some of the Batch
if(isset($data['batch']['em_batch_id']) && (int)$data['batch']['em_batch_id']>0){
	$sql = "SELECT * FROM em_batch_recipient_queue WHERE em_batch_id=" . (int)$data['batch']['em_batch_id'] . " LIMIT " . (int)BATCH_SIZE;
	$result = mysql_query($sql) or die (mysql_error());
	if (mysql_num_rows($result) >= 1) {
		$data['recipients'] = array();
		while($row = mysql_fetch_array($result, MYSQL_ASSOC)){$data['recipients'][] = $row;}

		# Content : With Engine
		$engine_file = ENGINE_DIR . "class.email_" . (int)$data['batch']['em_engine'] . ".php";
		if(file_exists($engine_file)){require_once($engine_file); $engine = true;}
		$sent = 0;
		foreach($data['recipients'] as $row){
			if(isset($engine) && $engine===true){
				$engine_classname = "email_" . (int)$data['batch']['em_engine'];
				$email_engine = new $engine_classname();
				$email_engine->set_data($data['batch'], $row);
				
				$subject	= $email_engine->fetch_subject();
				$html		= $email_engine->fetch_html();
				$text		= $email_engine->fetch_text();
			} else {
				# Add generic engine-less process here later
			}

			# Prevent process stacking
			set_time_limit(0);
			$settings->set('admin', 'em', 'last_active', time());

			# Send Mail
			$mailer = new html_mime_mail();
			$mailer->add_html($html, $text);
			$mailer->build_message();
			$vars = unserialize($row['vars']);
			$to_name = $vars['first_name'];
			if(defined('TEST_MODE') && TEST_MODE==1){
				$to_email = TEST_MODE_EMAIL;
			} else {
				$to_email = $row['email'];
			}
			
			if($mailer->send($to_name, $to_email, FROM_NAME, FROM_EMAIL, $subject)!==false){
				# Add Recipient to Log
				if(file_exists(LOG_DIR)){logger((int)$data['batch']['em_batch_id'], $row['email'], true);echo 'pass';} else {echo 'fail';}

				# Remove from Queue NOW!
				$sql = "DELETE FROM em_batch_recipient_queue WHERE email='" . mysql_real_escape_string($row['email']) . "' AND em_batch_id=" . (int)$data['batch']['em_batch_id'] . "";
				$result = mysql_query($sql) or die (mysql_error());
			} else {
				# Add Recipient to Log
				if(file_exists(LOG_DIR)){logger((int)$data['batch']['em_batch_id'], $row['email'], false);}
			}

			set_time_limit(0);
			if(EMAIL_WAIT>0){sleep(EMAIL_WAIT);}
			set_time_limit(0);
			$sent++;
		}
	}
}

# ------------------------------------------------------------
# Update Batch Stats
if(isset($data['batch']['em_batch_id']) && (int)$data['batch']['em_batch_id']>0){
	$sql = "SELECT COUNT(*) AS c FROM em_batch_recipient_queue WHERE em_batch_id='" . mysql_real_escape_string($data['batch']['em_batch_id']) . "'";
	$result = mysql_query($sql) or die (mysql_error());
	$row = mysql_fetch_array($result, MYSQL_ASSOC);

	$sql = "UPDATE em_batches SET";
	if((int)$row['c']==0){
		$sql .= " `status`=9, ";
		$sql .= " `datetime_send_completed`=NOW(), ";
	}
	$sql .= " recipient_sent =" . ($data['batch']['recipient_count'] - (int)$row['c']) . "
		WHERE em_batch_id='" . mysql_real_escape_string($data['batch']['em_batch_id']) . "'
	";
	mysql_query($sql) or die (mysql_error());
}

if (defined('STDIN')){
	echo 'Sent: ' . $sent . "\r\n";
	echo 'Progess: ' . ($data['batch']['recipient_count']-(int)$row['c']) . '/' . $data['batch']['recipient_count'] . "\r\n";
} else {
	#echo 'Sent: ' . $sent . "<br />";
	#echo 'Progess: ' . ($data['batch']['recipient_count']-(int)$row['c']) . '/' . $data['batch']['recipient_count'] . "<br />";
	#flush();
}


# ------------------------------------------------------------
# BATCH LOOP:END
	$loop++;
	set_time_limit(0);
	if(BATCH_WAIT>0){sleep(BATCH_WAIT);}
	set_time_limit(0);
}
# ------------------------------------------------------------
exit;