<?php
header('Content-Type: text/html; charset=UTF-8');
error_reporting(E_ALL | E_STRICT);
//ini_set('memory_limit', '256M');
set_time_limit(0);
ini_set("max_execution_time", 0);
ignore_user_abort(true);
if (extension_loaded('xdebug')) {
    echo "Xdebug detected - exitting...\n";
    exit();
}


$myversion='20171106_0924';
define('NESTED', 10);
define('WARN', 11);
define('CLEAR_THIS', 12);
define('CLEAR_COLUMN', '~^.*$~s');
$beforeVars = unserialize( base64_decode( 'YToxOTp7aTowO3M6NDoiX0dFVCI7aToxO3M6NToiX1BPU1QiO2k6MjtzOjc6Il9DT09LSUUiO2k6MztzOjY6Il9GSUxFUyI7aTo0O3M6NDoiYXJndiI7aTo1O3M6NDoiYXJnYyI7aTo2O3M6NzoiX1NFUlZFUiI7aTo3O3M6MTE6ImVuY29kaW5nS2V5IjtpOjg7czoxMzoiREFUQUJBU0VfU0lHUyI7aTo5O3M6MTI6IkVOQ09ERURfU0lHUyI7aToxMDtzOjY6InRva2VucyI7aToxMTtzOjEyOiJzaWdzX3N0YXJ0ZWQiO2k6MTI7czoxOiJpIjtpOjEzO3M6MTY6ImV4aXN0aW5nVHJpZ2dlcnMiO2k6MTQ7czo1OiJzdGFjayI7aToxNTtzOjEwOiJwcmV2U3RyaW5nIjtpOjE2O3M6NToidG9rZW4iO2k6MTc7czo3OiJ0cmlnZ2VyIjtpOjE4O3M6MTI6ImJlZm9yZUNvbnN0cyI7fQ==' ) );
$DB_SIGS_TEMPLATE = unserialize( base64_decode( 'YTozOntzOjk6InNwYW1fbGluayI7czo2NzoifjxhXHNbXjw+XSo/aHJlZlxzKj1ccypbIiddP1tePD4iJ10qPzxUUklHR0VSPltePD5dKz8+W148Pl0qPzwvYT5+aSI7czoxMDoic2NyaXB0X3NyYyI7czo3NjoifjxzY3JpcHRcc1tePD5dKj9zcmNccyo9XHMqWyInXT9bXjw+IiddKj88VFJJR0dFUj5bXjw+XSs/PltePD5dKj88L3NjcmlwdD5+aSI7czoxNDoic3BhbV9saW5rX3RleHQiO3M6NDU6In48W2FBXSBocmVmW14+XSs+W14+XSo8VFJJR0dFUj5bXj5dKjwuW2FBXT5+aSI7fQ==' ) );
$DB_ROWS_TO_DELETE = unserialize( base64_decode( 'YToyOntzOjk6IldvcmRQcmVzcyI7YTozOntzOjI3OiI8UFJFRklYPm9wdGlvbnMub3B0aW9uX25hbWUiO2E6Mzp7aTowO3M6MTc6IndwJF9kb29yZ2VuJF9jb2RlIjtpOjE7czoxOToid3AkX2Rvb3JnZW4kX2NvbmZpZyI7aToyO3M6MTI6IndwJF9vcHRpbWl6ZSI7fXM6MTY6IjxQUkVGSVg+dXNlcnMuSUQiO2E6MTp7aTowO3M6NzoiMTAwMTAwMSI7fXM6MjQ6IjxQUkVGSVg+dXNlcnMudXNlcl9sb2dpbiI7YTo3OntpOjA7czoxNDoid3B1cGRhdGVzdHJlYW0iO2k6MTtzOjExOiJzdXBlcnVzZXI3JSI7aToyO3M6MTE6InN1cGVydXNlcjglIjtpOjM7czoxMToic3VwZXJ1c2VyOSUiO2k6NDtzOjExOiJzdXBlcnVzZXIxJSI7aTo1O3M6MTE6InN1cGVydXNlcjQlIjtpOjY7czoxMToic3VwZXJ1c2VyMyUiO319czo2OiJKb29tbGEiO2E6MTp7czoyMjoiPFBSRUZJWD51c2Vycy51c2VybmFtZSI7YTo2OntpOjA7czoyMDoiam9vbWxhLnVzZXIuaGVscGVyLiUiO2k6MTtzOjExOiJzdXBlcnVzZXI4JSI7aToyO3M6MTE6InN1cGVydXNlcjklIjtpOjM7czoxMToic3VwZXJ1c2VyMSUiO2k6NDtzOjg6Im5ld2FkbWluIjtpOjU7czoxNzoid29yZHByZXNzX3N1cHBvcnQiO319fQ==' ) );
$DB_NOCLEAN_FOR_ROBOT = unserialize( base64_decode( 'YTo3OntzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwMSI7aToxO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDA3IjtpOjE7czoyNDoiaW5qZWN0ZWQuaGlkZGVuLXNwYW4uMDAxIjtpOjE7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwMyI7aToxO3M6MzM6ImluamVjdGVkLmpzX2RvY3VtZW50X2xvY2F0aW9uLjAwNyI7aToxO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDA3IjtpOjE7czoyODoiaW5qZWN0ZWQuanNfY2xpY2tfaGlqYWNrLjAwMSI7aToxO30=' ) );
$DB_SIGS = unserialize( base64_decode( 'YTo0Nzg6e3M6NjoiPnpwODQ5IjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwMyI7aToxO3M6NjY6In48ZGl2IHN0eWxlPSJkaXNwbGF5OlxzKj9ub25lIj48YSBocmVmPVtePl0rPz5bXjxdKz88XC9hPjxcL2Rpdj5+aSI7fXM6MzoiPnpwIjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwNCI7aToxO3M6Mjc6In48ZGl2W14+XSo/PnpwXGQrcnE8L2Rpdj5+aSI7fXM6MjA6IjxkaXYgc3R5bGU9ImRpc3BsYXk6IjthOjU6e2k6MDtpOjEwO3M6ODoiIj48L2Rpdj4iO2E6Mjp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDAxIjtpOjE7czo0MToifjxkaXYgc3R5bGU9ImRpc3BsYXk6XHMqbm9uZTs/Ij48XC9kaXY+fmkiO31zOjMwOiI8c3BhbiBzdHlsZT0iY29sb3I6ICNmZmZmZmU7Ij4iO2E6Mjp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDExIjtpOjE7czo3MDoifjxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmU7PyI+PHNwYW4gc3R5bGU9ImNvbG9yOiAjZmZmZmZlOyI+Lio/PC9kaXY+fiI7fXM6MTI0OiJ+aG93IHRvIHdpbiBiYWNrIHlvdXIgZXh8dG8tZ2V0LWV4LWJhY2sub3JnL3xmYXJtYWNpYTI0fHZpYWdyYXx0YWRhZmlsfGVzc2F5fGxldml0cmF8Y3JlZGl0IHNjb3JlfG1vcnRnYWdlfGNhc2lub3xwcm9wZWNpYX5pIjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwMiI7aToxO3M6MTczOiJ+PGRpdiBzdHlsZT0iZGlzcGxheTpccypub25lOz8iPi4qPyg/OmhvdyB0byB3aW4gYmFjayB5b3VyIGV4fHRvLWdldC1leC1iYWNrLm9yZy98ZmFybWFjaWEyNHx2aWFncmF8dGFkYWZpbHxlc3NheXxsZXZpdHJhfGNyZWRpdCBzY29yZXxtb3J0Z2FnZXxjYXNpbm98cHJvcGVjaWEpLio/PFwvZGl2Pn5pcyI7fXM6NDI6In48ZGl2IHN0eWxlPSJkaXNwbGF5OiA/bm9uZTs/Ij4uKj88L2Rpdj5+cyI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMzMiO319czoxOToicmtfY3p4VjFkdjFVVGZFcmRReSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQucmtfY29tbWVudC1kaXYuMDAxIjtpOjE7czo3NzoifjwhLS0gcmtfY3p4VjFkdjFVVGZFcmRReS5bMC05XSAtLT4uKj88IS0tIFwvcmtfY3p4VjFkdjFVVGZFcmRReS5bMC05XSAtLT5+aXMiO31zOjMyOiItLT48YSBzdHlsZT0iZGlzcGxheTpub25lOyIgaHJlZiI7YToyOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMDUiO2k6MTtzOjY5OiJ+PFwhLS0oXHd7MjN9KS0tPjxhIHN0eWxlPSJkaXNwbGF5Om5vbmU7IiBocmVmPSIuKz88XC9hPjxcIS0tXC9cMS0tPn4iO31zOjExOiI8L2E+PCEtLS81NSI7YToyOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMDYiO2k6MTtzOjgyOiJ+PFwhLS01NVx3ezE1LH0tLT48YVxzKnN0eWxlPS5kaXNwbGF5Om5vbmU7LlxzKmhyZWY9LltePF0rPC9hPjxcIS0tLjU1XHd7MTUsfS0tPn5zIjt9czo3NjoiPGRpdiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MCk7b3BhY2l0eTowLjAwMTt6LWluZGV4OiI7YToyOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMDciO2k6MTtzOjEwOToifjxkaXYgc3R5bGU9LnBvc2l0aW9uOmFic29sdXRlO2ZpbHRlcjphbHBoYVwob3BhY2l0eT0wXCk7b3BhY2l0eTowXC4wMDE7ei1pbmRleDpcZCs7Ij48YSBocmVmPS4rP2E+PFwvZGl2Pn5pcyI7fXM6Mzk6ImFXWWdLQ0ZqYkdGemMxOWxlR2x6ZEhNb0oxSmhkR1ZzSnlrcElIdCI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuYmFzZTY0X3dpZGdldC4wMDEiO2k6MTtpOjExO31zOjIyOiJHcWdTc2RNVk41OEJVZVE5ekhWRXJTIjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwOCI7aToxO3M6NzI6In48ZGl2IGlkPSJHcWdTc2RNVk41OEJVZVE5ekhWRXJTIiBzdHlsZT0icG9zaXRpb246IGFic29sdXRlOy4qPz48XC9kaXY+fiI7fXM6MjM6IjxkaXYgY2xhc3M9Il9hbGxfd3BsaW5rIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5hbGxfd3BsaW5rLWRpdi4wMDEiO2k6MTtzOjE1NToifjxkaXYgY2xhc3M9Ll9hbGxfd3BsaW5rX1tePl0rc3R5bGU9LnBvc2l0aW9uOmFic29sdXRlO29wYWNpdHk6MC4wMDE7W14+XSs+KFteXG5dKzxhIGhyZWZbXjxdK1x3KzwuYT4pKFteXD5dKzwuZGl2PnxbXlxuXStcblxzKjxhIGhyZWZbXjxdK1x3KzwuYT48LmRpdj4pfnMiO31zOjI3OiI8ZGl2IGNsYXNzPSJfYWxsX3dwbGlua19uRDgiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLmFsbF93cGxpbmstZGl2LjAwMiI7aToxO3M6Nzc6In48ZGl2IGNsYXNzPS5fYWxsX3dwbGlua19bXj5dKz4oPGFccypocmVmLi5odHRwLi4uXHcrW14+XSs+W148XSs8LmE+KSs8LmRpdj5+Ijt9czo0NToiIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IzY3NmM2YyI+IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5oaWRkZW5fYS1ocmVmLjAwMSI7aToxO3M6Nzg6In48YSBocmVmPSJodHRwOi4uW14iXSsiIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjojNjc2YzZjIj5bXjxdKz88LmE+fiI7fXM6NjoiPi48L2E+IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5oaWRkZW5fYS1ocmVmLjAwMiI7aToxO3M6NjU6In48YSBzdHlsZT0uPyJ0ZXh0LWRlY29yYXRpb246W1xzXSpub25lLj8iIGhyZWY9Lj8iXC9bXj5dKz5cLjwuYT5+Ijt9czo0NjoiPHAgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLTI1MDBweDsiPiI7YToyOntpOjA7aToxMDtzOjEwOiIvcCZndDs8L3A+IjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19oaWRkZW5fcC4wMDEiO2k6MTtpOjExO319czoyNDoiPCEtLSB+fnNwb25zb3J+fiAtLT48ZGl2IjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAwOSI7aToxO3M6NTQ6In48Li0tIC4uc3BvbnNvci4uIC0tPlteXH5dKjwuLS0gXH5cfnNwb25zb3JlZFx+XH4gLS0+fiI7fXM6MTA6Ij5qb3JkYW4gMTEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2pvcmRhbi4wMTgiO2k6MTtpOjExO31zOjM1OiJoYXZlIHVuY2FubnkgcG9rZW1vbiBnbyBoYWNrIG9ubGluZSI7YToyOntpOjA7czoyMToiaW5qZWN0ZWQuc3BhbS1zZW8uMDA4IjtpOjE7czoxNTQ6In48ZGl2XHMqY2xhc3M9IihcdyspIj5oYXZlXHMqdW5jYW5ueVxzKnBva2Vtb25ccypnb1xzKmhhY2tccypvbmxpbmVbXjxdKzxhXHMqaHJlZj0uaHR0cDouLnBva2Vtb25nby1oYWNrb25saW5lW14+XSs+cG9rZVtePF0rPC5hPlxzKm91dGxldHNccypbXjxdKzwuZGl2Pn4iO31zOjM4OiJ6NmVJUWZLRUZzMmlkL0IvcnVSVG5aWXVRSXY4Wmw1Q2lMdGhYMCI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMzkiO2k6MTtzOjc6In5eLiokfnMiO31zOjIxOiI8ZGl2IHN0eWxlPSJwb3NpdGlvbjoiO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmhpZGRlbi1zcGFuLjAwMSI7aToxO3M6MTkwOiJ+KD86PC9zcGFuPik/Kyg/OjxcL3A+XHMqKT8rKDxkaXYgc3R5bGU9InBvc2l0aW9uOlxzKmFic29sdXRlOyAoPzpib3R0b206IDBweDsgKT8oPzpsZWZ0fHRvcCk6XHMqLVswLTldezQsfXB4W148Pl0qPz4oPyE8aW5wdXQpKD8+W148XSooPzooPyE8XC9kaXY+KSg/ITxkaXYpPHwoPzEpfCkpKjxcL2Rpdj4pXHMqKD86PHA+KT8rfmlzIjt9czoxODoiPGRpdiBzdHlsZT0ibGVmdDotIjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAxMCI7aToxO2k6MTE7fXM6Mjk6InN0eWxlPSJkaXNwbGF5Om5vbmUiPjxhIGhyZWY9IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5oaWRkZW4tc3Bhbi4wMDIiO2k6MTtzOjYzOiJ+PChzcGFufGkpIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjxhIGhyZWY9Lio/dmlhZ3JhLio/PC9hPjwvXDE+fnMiO31zOjE5OiI8ZGl2IGlkPSdhbGl2aWxsZSc+IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5hbGl2aWxsZV9oaWRkZW4tZGl2LjAwMSI7aToxO3M6MzI6In48ZGl2IGlkPSdhbGl2aWxsZSc+Lio/PFwvZGl2Pn5zIjt9czoyMzoib25tb3VzZW92ZXI9ImV2YWwoYXRvYigiO2E6Mjp7aTowO3M6MTc6ImJhY2tkb29yLmV2YWwuMDAxIjtpOjE7czoxNjM6In5cW1w8YVxzKnRpdGxlXD1cIlxdXCJccypyZWxcPVwibm9mb2xsb3dcIlw+XDxcL2FcPlxbLlxzKlw8XCFcLVwtXHMqc3R5bGVcPVsoPzpcdytccypcLVw7XDpcJSldK1w9XCJldmFsXChhdG9iXCgnW14nXSsnXClcKVteXC1dK1wtXC1cPlxzKihcdytccyopKy5cPGFcPlw8XC9hXD5cXX4iO31zOjE3OiI6IklDQWdJQ0FnSUNBZ0lDQSI7YToyOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMzEiO2k6MTtpOjExO31zOjQzOiJbJ2F0b2InXShGW1hdLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJykpIjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5qc19yZWRpcmVjdC4wMDEiO2k6MTtzOjE2NzoiflxzKjxzY3JpcHRbXj5dKz52YXJbXlx7XStce1tePl0rPlwoMHgxQzQsW146XSs6XChcZCssXGQrLi4uXCZcJlteXCtdK1wrXHdbXjtdKztcdysub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uXChcKVx7aWZbXlwiXStcImZhbHNlXCJccypbXlw/XStcP3pvbmVpZD1bXjxdKzwuc2NyaXB0Pn4iO31zOjI0OiI8ZGl2IGNsYXNzPSJfYWxsX3dwbGlua18iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLmFsbF93cGxpbmstZGl2LjAwMyI7aToxO3M6MTA5OiJ+PGRpdiBjbGFzcz0uX2FsbF93cGxpbmtfW14+XStzdHlsZT0ucG9zaXRpb246YWJzb2x1dGU7b3BhY2l0eTowLjAwMTtbXj5dKz4oW15cbl0rPGEgaHJlZltePF0rXHcrPC5hPik8LmRpdj5+Ijt9czoyMDoiR2VudWluZSBQcm9kdWN0IEtleXMiO2E6Mjp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAwNiI7aToxO2k6MTE7fXM6MTY6IndyaXRlIGZvciBtZTwvYT4iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjA0NSI7aToxO2k6MTE7fXM6MTY6IldhdGNoIEZ1bGwgTW92aWUiO2E6Mjp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAwOSI7aToxO2k6MTE7fXM6MTY6IndhdGNoIGZ1bGwgbW92aWUiO2E6Mjp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAxMCI7aToxO2k6MTE7fXM6MTY6IldhdGNoIGZ1bGwgTW92aWUiO2E6Mjp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAxMSI7aToxO2k6MTE7fXM6MTY6IjxkaXYgaWQ9ImRpdl9pZF8iO2E6Mjp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDMyIjtpOjE7czoxMTk6In48ZGl2IGlkPSJkaXZfaWRfW1xkXSsiPltcc10qKFtePl0rPzxhIGhyZWZbXj5dKz8oW2pKXW9yZGFufFtqSl1lcnNleSl8W2NDXWVhcHxbc1NdYWxlfFtePl0rPz5bXjxdKz88LmE+KStbXj5dKz88LmRpdj5+Ijt9czoyMToieHZpZC1raWNrYXNzLXRvcnJlbnQvIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5oaWRkZW5fYS1ocmVmLjAwMyI7aToxO3M6MzY6In5odHRwOi4uW154XSt4dmlkLWtpY2thc3MtdG9ycmVudFwvfiI7fXM6MjM6Ilt1cmw9aHR0cDovL2Nhc2lub2dhbWVzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlby5jYXNpbm8uMDA2IjtpOjE7czo2MjoiflxbdXJsPWh0dHA6Li5jYXNpbm9nYW1lc1teXF1dK1xdY2FzaW5vXHMqZ2FtZXNbXlxbXStcWy51cmxcXX4iO31zOjU5OiJodHRwOi8vd3d3LmtsdXNrYXAuY29tLz9xPWNvbnRlbnQvY2FzaC1wYXlkYXktbG9hbnMtYXRsYW50YSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAyNiI7aToxO2k6MTI7fXM6Mjk6ImV2YWwoYmFzZTY0X2RlY29kZSgkYzU1Mzc1ZGJhIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5ldmFsX2Jhc2U2NC4wMTUiO2k6MTtzOjIxOToiflwvXCo8XCFET0NUWVBFXHMqaHRtbFtePl0rPlxzKjEwNTFiZWZlM2ZlNmI0MDVjNjlbXlwqXStcKlwvXHMqXCRjNTUzNzVkYmE5ZDJmMTg2N2Y0MDgzYWNjZTk1OTg4ZGQ9W147XSs7XCRlX1xzKj1ccyplcnJvcl9yZXBvcnRpbmdcKDBcKTtccypldmFsXChiYXNlNjRfZGVjb2RlXChcJGM1NTM3NWRiYVteXCldK1wpXCk7XHMqZXJyb3JfW15cKV0rXCk7XHMqcmV0dXJuXHMqdHJ1ZTt+Ijt9czo2OiJ2aWFncmEiO2E6MjE6e2k6MDtpOjEwO3M6NjoidmlhZ3JhIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEyOiIwLXZpYWdyYS5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImF2aWFncmFmb3JzYWxlLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToiY2hlYXB2aWFncmEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImUtdmlhZ3Jhb25saW5lLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAwNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiZS12aWFncmFvbmxpbmUubmV0IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDA3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJmZW1hbGV2aWFncmFidXlzYWxlLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAwOCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToib25saW5ldmlhZ3JhY2hlYXAuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDA5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJvbmxpbmV2aWFncmFjaGVhcC5uZXQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMTAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6InNvZnR2aWFncmFvbmxpbmUuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDExIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJzdmlhZ3JhcmJ1eS5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMTIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6InZpYWdyYS1vbmxpbmUtcHJpY2UuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDEzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJ2aWFncmEtb25saW5lLXByaWNlLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAxNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMzoidmlhZ3JhZW5saWduZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAxNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToidmlhZ3JhZXMuZXMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMTYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6InZpYWdyYWZvcnNhbGUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMTciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6InZpYWdyYW5vcHJlc2NyaXB0aW9uLTFzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb192aWFncmEuMDE4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJ3d3cudmlhZ3JhLW91dGxldC5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMTkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NjY6InN0eWxlPSJoZWlnaHQ6IDBwdDt3aWR0aDogMHB0O3Bvc2l0aW9uOiBhYnNvbHV0ZTtvdmVyZmxvdzogYXV0bzsiPiI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAyMCI7aToxO3M6OTA6In48cFxzc3R5bGU9ImhlaWdodDogMHB0O3dpZHRoOiAwcHQ7cG9zaXRpb246IGFic29sdXRlO292ZXJmbG93OiBhdXRvOyI+Lio/dmlhZ3JhLio/PFwvcD5+aSI7fXM6MTM6InZpYWdyYWtvcGVubmwiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX3ZpYWdyYS4wMjEiO2k6MTtzOjI5OiJ+dmlhZ3Jha29wZW5ubCo/dmlhZ3JhLnNvZnR+aSI7fX1zOjU6InhhbmF4IjthOjI6e2k6MDtpOjEwO3M6NDoiaHJlZiI7YToyOntpOjA7aToxMDtzOjg6InBoYXJtYWN5IjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb194YW5heC4wMDEiO2k6MTtzOjg0OiJ+PGFccypzdHlsZT0uZm9udC1zaXplOjA7LlxzKmhyZWY9Lmh0dHA6Li5bXi1dKy1waGFybWFjeVtePl0rPlteLl0rLlteeF0reGFuYXguPC5hPn4iO319fXM6NjoiY2lhbGlzIjthOjg2OntpOjA7aToxMDtzOjc6Ii1jaWFsaXMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6IjFnZW5lcmljLWNpYWxpcyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAwMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoiYWNpYWxpc2ZvcnNhbGUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTE6ImJidXktY2lhbGlzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJiZXN0LWNpYWxpcy1wcmljZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMzoiYmVzdGNoZWFwLWNpYWxpcy1vbmxpbmUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTA6ImJ1eSBjaWFsaXMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImJ1eS1jaGVhcHAtY2lhbGlzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDA4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJidXktY2lhbGlzLW9ubGluZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAwOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoiYnV5LWNpYWxpcy1vbmxpbmUtZWQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMTAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTE6ImJ1eS1jaWFsaXNzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDExIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJidXljaGVhcGNpYWxpc29ubGluZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAxMiI7aToxO3M6OToic3BhbV9saW5rIjt9czo5OiJidXljaWFsaXMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMTMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6ImJ1eXNvZnRjaWFsaXNvbmxpbmUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMTQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImNjaWFsaXMtcHJpY2Uub3JnIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDE1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJjY2lhbGlzMjBtZyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAxNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMzoiY2NpYWxpc29ubGluZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAxNyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoiLWNoZWFwZXN0LWNpYWxpcy0iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMTgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImNoZWFwLWNpYWxpc2UuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDE5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJjaGVhcC1jaWFsaXNzLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAyMCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToiY2hlYXBwY2lhbGlzLW9ubGluZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAyMSI7aToxO3M6OToic3BhbV9saW5rIjt9czo5OiJjaWFsaXMtMjAiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMjIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTE6ImNpYWxpcy1iZXN0IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDIzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJjaWFsaXMtY2FuYWRhLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAyNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiY2lhbGlzLWdlbmVyaWMtZWQuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDI1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJjaWFsaXMtZ2VuZXJpY3MuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDI2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJjaWFsaXMtb25saW5lLWl0YWxpYS5vcmciO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMjciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6ImNpYWxpcy1vbmxpbmUtcHJpY2UuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDI4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJjaWFsaXMtb25saW5lLXByaWNlLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAyOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiY2lhbGlzLW9ubGluZXNhbGVzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDMwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJjaWFsaXMtcGFzLWNoZXIiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMzEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImNpYWxpcy1waGFybS5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMzIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImNpYWxpcy1waWxsc3MuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDMzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJjaWFsaXMtcHJpY2VlIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDM0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJjaWFsaXMtcHJpY2VzcyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAzNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiY2lhbGlzLXMuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDM2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjMyOiJjaWFsaXMtd2l0aG91dC1wcmVzY3JpcHRpb25zLm9yZyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjAzNyI7aToxO3M6OToic3BhbV9saW5rIjt9czozMzoiY2lhbGlzLXdpdGhvdXR0LXByZXNjcmlwdGlvbnMuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDM4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjc6ImNpYWxpczEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wMzkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NzoiY2lhbGlzYSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA0MCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoiY2lhbGlzY2FuYWRhc3QiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImNpYWxpc29ubGluZWUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6ImNpYWxpc29ubGluZW5vd2Uub3JnIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDQzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJjaWFsaXNvbmxpbmVvbiI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA0NCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoiY2lhbGlzb29ubGluZS5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImNpYWxpc3ByaWNlYWEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6ImNpYWxpc3ByaWNlZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA0NyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiY2lhbGlzcy0yMG1nLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA0OCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiY2lhbGlzcy1vbmxpbmUub3JnIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDQ5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJjaWFsaXNzLXByaWNlIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDUwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjMyOiJjaWFsaXNzLXdpdGhvdXQtcHJlc2NyaXB0aW9uLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA1MSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoiY2lhbGlzc3VwZXJhY3RpdmVlLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA1MiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoiY29tcHJhcmUtY2lhbGlzLW9ubGluZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA1MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiZGNpYWxpc2ZvcnNhbGUuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDU0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJkY2lhbGlzZm9yc2FsZS5uZXQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNTUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImUtb25saW5lY2lhbGlzLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA1NiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiZS1vbmxpbmVjaWFsaXMubmV0IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDU3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJnZW5lcmljLWNpYWxpc3MiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNTgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImdlbmVyaWNjaWFsaXNmYXN0IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDU5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjM1OiJnZ2VuZXJpYy1jaWFsaXMtbm8tcHJlc2NyaXB0aW9uLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA2MCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNzoibm9uLXByZXNjcmlwdGlvbi1jaWFsaXMuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDYxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJvbmxpbmVjaWFsaXNjaGVhcC5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNjIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6Im9ubGluZWNpYWxpc2NoZWFwLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA2MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToib25saW5lb3JkZXJjaWFsaXN1ayI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA2NCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoib3JkZXItY2lhbGlzLW9ubGluZXEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNjUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6Im9yZGVyLWNpYWxpc3MiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNjYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6Im9yZGVyY2hlYXBjaWFsaXMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNjciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6Im9yZGVyci1jaWFsaXMub3JnIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDY4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI5OiJwaGFybWFjaWUtZW4tbGlnbmUtY2lhbGlzLm9yZyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA2OSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoicGlsbHMtY2lhbGlzLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA3MCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNzoicGxvY2lhLWNpYWxpcy10YWRhbGFmaWwuY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDcxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJzYnV5aW5nLWNpYWxpcy5jb20iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wNzIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6InNidXlpbmctY2lhbGlzLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA3MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToidGhlY2hlYXAtY2lhbGlzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDc0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJ2ZW5kaXRhLWNpYWxpcyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA3NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoidmljaWFsaXNhYnV5LmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA3NiI7aToxO3M6OToic3BhbV9saW5rIjt9czozMDoiY2lhbGlzLWNhbmFkaWFuLW5vLXByZXNjaXB0aW9uIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDc3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjg6ImNpYWxpcy0wIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jaWFsaXMuMDc4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjk6ImNpYWxpc21lZCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2lhbGlzLjA3OSI7aToxO3M6MjY6In5jaWFsaXNtZWQuKj9jaWFsaXNcczVtZ35pIjt9czo0MToid2FsbWFydC1wcmljaW5nLWZvci1zdWJsaW5ndWFsLWNpYWxpcy1wcm8iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2NpYWxpcy4wODEiO2k6MTtpOjExO31zOjc6ImdlbmVyaWMiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLnNwYW0tc2VvX2xpbmsuMDAxIjtpOjE7czoxNDoic3BhbV9saW5rX3RleHQiO31zOjU6InBpbGxzIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5zcGFtLXNlb19saW5rLjAwNiI7aToxO3M6MTQ6InNwYW1fbGlua190ZXh0Ijt9czo4OiIgY2lhbGlzICI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuc3BhbS1zZW9fbGluay4wMDciO2k6MTtzOjE0OiJzcGFtX2xpbmtfdGV4dCI7fXM6NzoiPmNpYWxpcyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuc3BhbS1zZW9fbGluay4wMDgiO2k6MTtzOjE0OiJzcGFtX2xpbmtfdGV4dCI7fXM6NzoiY2FuYWRhPCI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuc3BhbS1zZW9fbGluay4wMDkiO2k6MTtzOjE0OiJzcGFtX2xpbmtfdGV4dCI7fX1zOjc6Imxldml0cmEiO2E6MTE6e2k6MDtpOjEwO3M6NzoibGV2aXRyYSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGV2aXRyYS4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImRsZXZpdHJhb25saW5lLmNvbSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGV2aXRyYS4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjc6ImVub3ByZXNjcmlwdGlvbi1sZXZpdHJhLmNvbSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGV2aXRyYS4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjc6ImVub3ByZXNjcmlwdGlvbi1sZXZpdHJhLm5ldCI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGV2aXRyYS4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImdyZWF0LWxldml0cmEuY29tIjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb19sZXZpdHJhLjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoibGV2aXRyYS1vbmxpbmUtcHJpY2UuY29tIjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb19sZXZpdHJhLjAwNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoibGV2aXRyYS1vbmxpbmUtcHJpY2UubmV0IjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb19sZXZpdHJhLjAwNyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoib25saW5lbGV2aXRyYWNoZWFwLmNvbSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGV2aXRyYS4wMDgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6Im9ubGluZWxldml0cmFjaGVhcC5uZXQiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2xldml0cmEuMDA5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJ0b3BsZXZpdHJhZ3VpZGUiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2xldml0cmEuMDEwIjtpOjE7czo5OiJzcGFtX2xpbmsiO319czo3OiJwaGFybWFjIjthOjIxOntpOjA7aToxMDtzOjE0OiIxcGhhcm1hY3lzdG9yZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiMjQ3cGhhcm1hY2V1dGljYWwuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI1OiJjYW5hZGlhbi1waGFybWFjeS05MTEuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJjYW5hZGlhbi1waGFybWFjeS1zdG9yZXMiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6ImNhbmFkaWFucGhhcm1hY3l3ZWIiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjc6ImNoZWFwLWNhbmFkaWFuLXBoYXJtYWN5Lm5ldCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAwNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiZS1waGFybWFjeS1vbmxpbmUuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDA3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJnZW5lcmljLWVkLXBoYXJtYWN5IjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDA4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIyOiJvbmxpbmUtcGhhcm1hY3ktc3QuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDA5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJvbmxpbmVwaGFybWFjeSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAxMCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoib25saW5lcGhhcm1hY3ktZHJ1Z3MuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDExIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJwaGFybWFjaWUtLWVuLWxpZ25lIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDEyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJwaGFybWFjeS1jaGVhcHMiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMTMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6InBoYXJtYWN5LXBpbGwyNDciO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMTQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6InBoYXJtYWN5LXBpbGwzNjUuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDE1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJ1cy1jYWQtcGhhcm1hY3kuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDE2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIyOiJ4ZW5vcGhhcm1hY29waGlsaWEuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDE3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJwYXJ0bmVycGhhcm1hY3kyNC03LmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAxOCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoid3d3LnBoYXJtYWN5aW5jaXR5LmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAxOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiPmNhbmFkaWFuIHBoYXJtYWN5IjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDgyIjtpOjE7aToxMTt9fXM6MTA6ImFtcGljaWxsaW4iO2E6ODp7aTowO2k6MTA7czoyMDoiYW1waWNpbGxpbi1waGFybS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2FtcGljaWxsaW4uMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJhbXBpY2lsbGluLXBoYXJtLm5ldCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fYW1waWNpbGxpbi4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6ImFtcGljaWxsaW4tcGlsbHMuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19hbXBpY2lsbGluLjAwMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoiYW1waWNpbGxpbi1waWxscy5uZXQiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2FtcGljaWxsaW4uMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJhbXBpY2lsbGlucGlsbHMuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19hbXBpY2lsbGluLjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToiYW1waWNpbGxpbnBpbGxzLm5ldCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fYW1waWNpbGxpbi4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6InBlYW1waWNpbGxpbm9ubGluZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2FtcGljaWxsaW4uMDA3IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czo2OiJhbW94aWwiO2E6ODp7aTowO2k6MTA7czo2OiJhbW94aWwiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Ftb3hpbC4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImFtb3hpbC1jaGVhcC5uZXQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Ftb3hpbC4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImFtb3hpbC1waWxscy5uZXQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Ftb3hpbC4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6ImFtb3hpbGNoZWFwLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fYW1veGlsLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiYW1veGlscGhhcm0uY29tIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19hbW94aWwuMDA1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJhbW94aWxwaGFybS5uZXQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Ftb3hpbC4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6ImFtb3hpbHBpbGxzLm5ldCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fYW1veGlsLjAwNyI7aToxO3M6OToic3BhbV9saW5rIjt9fXM6ODoicHJvcGVjaWEiO2E6Njp7aTowO2k6MTA7czoyNDoiYnV5LXByb3BlY2lhLW9ubGluZWUuY29tIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19wcm9wZWNpYS4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImJ1eXlwcm9wZWNpYW9ubGluZSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJvcGVjaWEuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJzcHJvcGVjaWEtb25saW5lLmNvbSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJvcGVjaWEuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJzcHJvcGVjaWEtb25saW5lLm5ldCI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJvcGVjaWEuMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJ3cHJvcGVjaWFub25saW5lLmNvbSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJvcGVjaWEuMDA1IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czo4OiJkaWZsdWNhbiI7YTo0OntpOjA7aToxMDtzOjg6ImRpZmx1Y2FuIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19kaWZsdWNhbi4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6ImJ1eWRpZmx1Y2FuY2hlYXAuY29tIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19kaWZsdWNhbi4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImJ1eWRpZmx1Y2Fub25saW5lZSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fZGlmbHVjYW4uMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO319czoxMToiYW50aWJpb3RpY3MiO2E6NTp7aTowO2k6MTA7czoxNjoiYW50aWJpb3RpY3Mtc2hvcCI7YToyOntpOjA7czozMzoiaW5qZWN0ZWQuc3BhbS1zZW9fYW50aWJpb3RpY3MuMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJhbnRpYmlvdGljcy1zaG9wLmNvbSI7YToyOntpOjA7czozMzoiaW5qZWN0ZWQuc3BhbS1zZW9fYW50aWJpb3RpY3MuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJhbnRpYmlvdGljcy1zdG9yZS5jb20iO2E6Mjp7aTowO3M6MzM6ImluamVjdGVkLnNwYW0tc2VvX2FudGliaW90aWNzLjAwMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiYW50aWJpb3RpY3NvcmRyZXIuY29tIjthOjI6e2k6MDtzOjMzOiJpbmplY3RlZC5zcGFtLXNlb19hbnRpYmlvdGljcy4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fX1zOjc6ImNhbWFncmEiO2E6NTp7aTowO2k6MTA7czoxNzoiY2FtYWdyYS1waGFybS5jb20iO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2NhbWFncmEuMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJjYW1hZ3JhLXBoYXJtLm5ldCI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fY2FtYWdyYS4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImNhbWFncmFjaGVhcC5jb20iO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2NhbWFncmEuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJjYW1hZ3JhY2hlYXAubmV0IjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb19jYW1hZ3JhLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9fXM6ODoiYWNvbXBsaWEiO2E6Njp7aTowO2k6MTA7czoyNToiYWNvbXBsaWEtb25saW5lLXByaWNlLmNvbSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fYWNvbXBsaWEuMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI1OiJhY29tcGxpYS1vbmxpbmUtcHJpY2UubmV0IjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19hY29tcGxpYS4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImRhY29tcGxpYXNhbGUuY29tIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19hY29tcGxpYS4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6Im9ubGluZWFjb21wbGlhY2hlYXAuY29tIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19hY29tcGxpYS4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6Im9ubGluZWFjb21wbGlhY2hlYXAubmV0IjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19hY29tcGxpYS4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fX1zOjY6ImNsb21pZCI7YTo1OntpOjA7aToxMDtzOjE5OiJidXktY2xvbWlkLW9ubGluZTI0IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jbG9taWQuMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJjbG9taWRvbmxpbmVlIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jbG9taWQuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJzY2xvbWlkYnV5LmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2xvbWlkLjAwMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiY2hlYXAtY2xvbWlkIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jbG9taWQuMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czo1OiJsYXNpeCI7YTozOntpOjA7aToxMDtzOjU6Imxhc2l4IjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19sYXNpeC4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImJ1eWxhc2l4Y2hlYXAuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19sYXNpeC4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fX1zOjE3OiJidXlMYXNpeGNoZWFwLmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fbGFzaXguMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEyOiJwcmVzY3JpcHRpb24iO2E6ODp7aTowO2k6MTA7czoxNToiZW5vcHJlc2NyaXB0aW9uIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wcmVzY3JpcHRpb24uMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJub25wcmVzY3JpcHRpb25tZWQiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3ByZXNjcmlwdGlvbi4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTQ6Im5vcHJlc2NyaXB0aW9uIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wcmVzY3JpcHRpb24uMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI2OiJvbmxpbmUtcHJlc2NyaXB0aW9ubWVkLm5ldCI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJlc2NyaXB0aW9uLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoicGhhcm0tcHJlc2NyaXB0aW9uIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wcmVzY3JpcHRpb24uMDA1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjMwOiJDbG9uaWRpbmUgd2l0aG91dCBwcmVzY3JpcHRpb24iO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3ByZXNjcmlwdGlvbi4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6Im5vIHByZXNjcmlwdGlvbiI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcHJlc2NyaXB0aW9uLjAwNyI7aToxO3M6OToic3BhbV9saW5rIjt9fXM6NToicGlsbHMiO2E6MTA6e2k6MDtpOjEwO3M6NjoiLXBpbGxzIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19waWxscy4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTA6ImJhc2ljcGlsbHMiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3BpbGxzLjAwMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiY2hlYXBwaWxsc29ubGluZSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGlsbHMuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEwOiJnZXRyeHBpbGxzIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19waWxscy4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTQ6ImdldHJ4cGlsbHMuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19waWxscy4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6Im9ubGluZS1waWxscyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGlsbHMuMDA2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJvbmxpbmVwaWxsc3Nob3AuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19waWxscy4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTE6Ii1waWxscy5odG1sIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19waWxscy4wMDgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6InBpbGxzMjRob25saW5lLmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGlsbHMuMDA5IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czo5OiJjaGVhcC5jb20iO2E6NDp7aTowO2k6MTA7czoxODoiYnV5ZmxhZ3lsY2hlYXAuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjEyMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoiYnV5bGV2YXF1aW5jaGVhcC5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTI0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJidXlub2x2YWRleGNoZWFwLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMjUiO2k6MTtzOjk6InNwYW1fbGluayI7fX1zOjQ6InRhZGEiO2E6Njp7aTowO2k6MTA7czo3OiJ0YWRhY2lwIjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb190YWRhZmlsLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czo3OiJ0YWRhZmlsIjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb190YWRhZmlsLjAwMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoidGFkYWxhZmlsIDIwbWciO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX3RhZGFmaWwuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJ0YWRhbGFmaWwtMjBtZyI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fdGFkYWZpbC4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6OToidGFkYWxhZmlsIjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb190YWRhZmlsLjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9fXM6ODoiY2FyYWZhdGUiO2E6NTp7aTowO2k6MTA7czoxNToiYnV5aW5nLWNhcmFmYXRlIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19jYXJhZmF0ZS4wMDEiO2k6MTtpOjExO31zOjEyOiJidXktY2FyYWZhdGUiO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2NhcmFmYXRlLjAwMiI7aToxO2k6MTE7fXM6MTQ6Im9yZGVyLWNhcmFmYXRlIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19jYXJhZmF0ZS4wMDMiO2k6MTtpOjExO31zOjI4OiJ3YWxtYXJ0LXByaWNpbmctZm9yLWNhcmFmYXRlIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19jYXJhZmF0ZS4wMDQiO2k6MTtpOjExO319czo4OiJrbGFyaWNpZCI7YTo1OntpOjA7aToxMDtzOjEyOiJidXkta2xhcmljaWQiO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2tsYXJpY2lkLjAwMSI7aToxO2k6MTE7fXM6MTU6ImJ1eWluZy1rbGFyaWNpZCI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fa2xhcmljaWQuMDAyIjtpOjE7aToxMTt9czoxNDoib3JkZXIta2xhcmljaWQiO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2tsYXJpY2lkLjAwMyI7aToxO2k6MTE7fXM6Mjg6IndhbG1hcnQtcHJpY2luZy1mb3Ita2xhcmljaWQiO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2tsYXJpY2lkLjAwNCI7aToxO2k6MTE7fX1zOjc6Imxhbm94aW4iO2E6NTp7aTowO2k6MTA7czoxMToiYnV5LWxhbm94aW4iO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2xhbm94aW4uMDAxIjtpOjE7aToxMTt9czoxNDoiYnV5aW5nLWxhbm94aW4iO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2xhbm94aW4uMDAyIjtpOjE7aToxMTt9czoxMzoib3JkZXItbGFub3hpbiI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fbGFub3hpbi4wMDMiO2k6MTtpOjExO31zOjI3OiJ3YWxtYXJ0LXByaWNpbmctZm9yLWxhbm94aW4iO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX2xhbm94aW4uMDA0IjtpOjE7aToxMTt9fXM6MTA6InZhcmRlbmFmaWwiO2E6NTp7aTowO2k6MTA7czoxNDoiYnV5LXZhcmRlbmFmaWwiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX3ZhcmRlbmFmaWwuMDAxIjtpOjE7aToxMTt9czoxNzoiYnV5aW5nLXZhcmRlbmFmaWwiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX3ZhcmRlbmFmaWwuMDAyIjtpOjE7aToxMTt9czoxNjoib3JkZXItdmFyZGVuYWZpbCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fdmFyZGVuYWZpbC4wMDMiO2k6MTtpOjExO31zOjMwOiJ3YWxtYXJ0LXByaWNpbmctZm9yLXZhcmRlbmFmaWwiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX3ZhcmRlbmFmaWwuMDA0IjtpOjE7aToxMTt9fXM6MTA6InN1Ymxpbmd1YWwiO2E6NDp7aTowO2k6MTA7czoxNDoiYnV5LXN1Ymxpbmd1YWwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMjAiO2k6MTtpOjExO31zOjE3OiJidXlpbmctc3VibGluZ3VhbCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAyMSI7aToxO2k6MTE7fXM6MTY6Im9yZGVyLXN1Ymxpbmd1YWwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMjIiO2k6MTtpOjExO319czo4OiJzaWxkYWxpcyI7YTo2OntpOjA7aToxMDtzOjEyOiJzaWxkYWxpcyBidXkiO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX3NpbGRhbGlzLjAwMSI7aToxO2k6MTE7fXM6MjE6Im9yZGVyIHNpbGRhbGlzIG9ubGluZSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fc2lsZGFsaXMuMDAyIjtpOjE7aToxMTt9czoxODoiYnV5IGNoZWFwIHNpbGRhbGlzIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19zaWxkYWxpcy4wMDMiO2k6MTtpOjExO31zOjE0OiJzaWxkYWxpcyBvcmRlciI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fc2lsZGFsaXMuMDA0IjtpOjE7aToxMTt9czoxMzoic2FsZSBzaWxkYWxpcyI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fc2lsZGFsaXMuMDA1IjtpOjE7aToxMTt9fXM6MTE6ImJ1eS1wcmVjb3NlIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDIzIjtpOjE7aToxMTt9czoxNDoiYnV5aW5nLXByZWNvc2UiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMjQiO2k6MTtpOjExO31zOjEyOiJidXktY2VmaXhpbWUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMjUiO2k6MTtpOjExO31zOjE0OiJidXktb3JuaWRhem9sZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAyNiI7aToxO2k6MTE7fXM6MTQ6ImJ1eS10aXphbmlkaW5lIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDI3IjtpOjE7aToxMTt9czoxNToiYnV5aW5nLXRlbm9ybWluIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDI4IjtpOjE7aToxMTt9czo4OiJsZXZhcXVpbiI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAyOSI7aToxO2k6MTE7fXM6ODoiZXJlY3RpbGUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMzAiO2k6MTtpOjExO31zOjE0OiJnZW5lcmljIGNpYWxpcyI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA3OSI7aToxO2k6MTE7fXM6MTQ6ImNoZWFwIE9ybGlzdGF0IjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDgwIjtpOjE7aToxMTt9czoxNzoiYnV5IFhlbmljYWwgY2hlYXAiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wODEiO2k6MTtpOjExO31zOjc6ImF2b2RhcnQiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMzEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Njoic3VwcmF4IjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDMyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJhY2N1dGFuZWJ1eSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAzMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToiYWxiZW5kYXpvbGUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMzQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjQ6ImFyZS1tZWRzLWZyb20taW5kaWEtc2FmZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAzNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiYnV5LWRveHljeWNsaW5lLSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAzNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiYnV5bm9yeDEuY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDM3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEyOiJidXlub3J4eC5jb20iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wMzgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6ImJ1eXN0ZXJvaWRzcyI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjAzOSI7aToxO3M6OToic3BhbV9saW5rIjt9czo4OiJjaXBybzI0aCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0MCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMDoiY29sY2hpY2luZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0MSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMDoiZGFwb3hldGluZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0MiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMDoiRGlzdWxmaXJhbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0MyI7aToxO3M6OToic3BhbV9saW5rIjt9czo5OiJkcnVnc3RvcmUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6ImR6aXRocm9tYXhzYnV5LmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToiRmx1Y29uYXpvbGUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImhlYWx0aGNhcmV4eXouY29tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDQ3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjc6ImthbWFyZ2EiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNDgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6Im1ldGhvdHJleGF0ZSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA0OSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToibWlzb3Byb3N0b2wiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNTAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjU6Im5hc2FsLXBvbHlwLXRyZWF0bWVudC5jb20iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNTEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6OToiTmF0cmV4b25lIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDUyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJuZXRtZWR4LmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA1MyI7aToxO3M6OToic3BhbV9saW5rIjt9czo3OiJuaXpvcmFsIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDU0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJvcmRlcm5vcnh4LmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA1NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMzoiaHR0cDovL3BpbGxzZm9yZGljay5jb20iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNTYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NjoicGhhcm0tIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDU3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJwcm9wcmFub2xvbCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA1OCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoiUmV0aW5hIGRpc3BsYXkiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNTkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6InJ4c2hvcG5vdy5jb20iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNjAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6InNkb3h5Y3ljbGluZWJ1eS5jb20iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNjEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTA6InNpbGRlbmFmaWwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNjIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Nzoic292YWxkaSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA2MyI7aToxO3M6OToic3BhbV9saW5rIjt9czo3OiJzcGlyaXZhIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDY0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjk6InRhbW94aWZlbiI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA2NSI7aToxO3M6OToic3BhbV9saW5rIjt9czo2OiJ2YWxpdW0iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNjYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NjoiVmFsaXVtIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDY3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjY6InZlcm1veCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA2OCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoid2hlcmUtY2FuLWktYnV5LXBoZW5ncmVuIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDY5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJ3aGVyZXRvZ2V0c3Rlcm9pZHMiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNzAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6IndvbWVuLWhlYWx0aC1zaG9wLmNvbSI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA3MSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToieGVuaWNhbC1zaGlwcGVyIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDcyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjY6InpvbG9mdCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA3MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToiYW1veGljaWxsaW4iO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wODMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NjoiYWRhbGF0IjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDg0IjtpOjE7aToxMTt9czo4OiJiYWNsb2ZlbiI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA4NiI7aToxO3M6OToic3BhbV9saW5rIjt9czo5OiJlc3RyYWRpb2wiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wODciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTA6InByZWRuaXNvbmUiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wODgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6ImJ1eSBpc290cmV0aW5vaW4gb25saW5lIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDc0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEwOiJidXkgcHJvemFjIjthOjI6e2k6MDtzOjM3OiJpbmplY3RlZC5zcGFtLXNlb19waGFybWFjeS1vbmxpbmUuMDc1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJjaGVhcCBWZW50b2xpbiI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW9fcGhhcm1hY3ktb25saW5lLjA3NiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoibGV2b25vcmdlc3RyZWwgcHJpY2UiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNzciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6InB1cmNoYXNlIExhbWlzaWwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvX3BoYXJtYWN5LW9ubGluZS4wNzgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NToibG9hbnMiO2E6MTQ6e2k6MDtpOjEwO3M6MTU6IjFzdC1wYXlkYXlsb2FucyI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoiY2xhc3NpY3BheWRheWxvYW5zdWsiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6ImZhc3QtcGF5ZGF5LWxvYW5zLm9yZyI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAwMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoibG9hbnNzb25saW5lIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEyOiJwYXlkYXkgbG9hbnMiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6InBheSBkYXkgbG9hbnMiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6ImNhc2gtbG9hbnMtb25saW5lLWZhc3QiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMDciO2k6MTtpOjExO31zOjE0OiItcGF5ZGF5LWxvYW5zLSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAwOCI7aToxO2k6MTE7fXM6MjA6ImxvYW5zLXNhbHQtbGFrZS1jaXR5IjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDA5IjtpOjE7aToxMTt9czozMzoicGF5ZGF5LWxvYW5zLWNoZWFwLWludGVyZXN0LXJhdGVzIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDEwIjtpOjE7aToxMTt9czozMDoicGVyc29uYWwtbG9hbnMtYmFzZWQtb24taW5jb21lIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDExIjtpOjE7aToxMTt9czoyMDoicXVpY2stcGVyc29uYWwtbG9hbnMiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMTIiO2k6MTtpOjExO31zOjIwOiJ0cnVzdGVkLW9ubGluZS1sb2FucyI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAxMyI7aToxO2k6MTE7fX1zOjIxOiJhbWVyaWNhbmxhbmRvd25lci5jb20iO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMTQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6ImFtZXJpY2FubGFuZG93bmVycy5jb20iO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMTUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImFwcHJhaXNlZDR5b3UuY29tIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDE2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJjcmVkaXRub3Byb2JsZW1zLmNvbSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAxNyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiZGVidHNldHRsZW1lbnR0IjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDE4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJkb3dubW9ydGdhZ2VzIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDE5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJvbmxpbmVwYXlkYXlsb2FuLTI0aC5jb20iO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMjAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6InF1aWNrIHBheWRheSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAyMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToib25saW5lLWNhc2gtYWR2YW5jZSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAyMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiY2hlY2tjcmVkaXRzY29yZWZmcmVlIjthOjI6e2k6MDtzOjM0OiJpbmplY3RlZC5zcGFtLXNlb19wYXlkYXktbG9hbnMuMDIzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJwZXJzb25hbC1sb2FuLWNlbnRyZSI7YToyOntpOjA7czozNDoiaW5qZWN0ZWQuc3BhbS1zZW9fcGF5ZGF5LWxvYW5zLjAyNCI7aToxO2k6MTE7fXM6MjU6InF1aWNrLWxvYW4tbGVuZGVycy1vbmxpbmUiO2E6Mjp7aTowO3M6MzQ6ImluamVjdGVkLnNwYW0tc2VvX3BheWRheS1sb2Fucy4wMjUiO2k6MTtpOjExO31zOjU6ImVzc2F5IjthOjI5OntpOjA7aToxMDtzOjI0OiJhcmd1bWVudGF0aXZlZXNzYXlwYXBlcnMiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyODoiZXNzYXlwcm9mZXNzaW9uYWx3cml0aW5nLmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJlc3NheXdyaXRpbmdzc2VydmljZS5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAwMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiZXNzYXl3cml0aW5nc3NlcnZpY2VzIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6IndyaXRlYW5lc3NheWZvcm1lZS5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czozMToiYmVzdC1lc3NheS13cml0aW5nLXNlcnZpY2VzLmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDA2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI1OiJwYXlzb21lb25ldG9kb215ZXNzYXkuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjg6ImJlc3Rlc3NheXdyaXRpbmdzZXJ2aWNlZS5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAwOCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiYmVzdGVzc2F5c2ZvcnNhbGUubmV0IjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMDkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6ImJ1eWVzc2F5bm93Lm5ldCI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDEwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJidXllc3NheXNvbmxpbmVjaGVhcC5uZXQiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAxMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoiZXNzYXljYXN0bGUuY28udWsiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAxMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiZXNzYXlzd3JpdGVyLm5ldCI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDEzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJlc3NheXdoYWxlcy5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAxNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoiZXhjZWxsZW50ZXNzYXl3cml0ZXIuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMTUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6InN1Y2Nlc3Nlc3NheS5jby51ayI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDE2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJ0ZWVuZXNzYXlzLmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDE3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJ0dXJib2Vzc2F5cy5jby51ayI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDE4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJ3cml0ZW15ZXNzYXlvcmlnaW5hbC5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAxOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoid3JpdGluZy1oZWxwLWVzc2F5LmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDIwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJlc3NheSB3cml0aW5nIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMzYiO2k6MTtpOjExO31zOjE0OiJ3cml0ZSBteSBlc3NheSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDM3IjtpOjE7aToxMTt9czo4OiJlc3NheTRtZSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDM4IjtpOjE7aToxMTt9czoxOToiY2hlYXAgZXNzYXkgd3JpdGluZyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDM5IjtpOjE7aToxMTt9czoyOToiZXNzYXkgb24gY3VzdG9tZXIgc2VydmljZTwvYT4iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjA0MiI7aToxO2k6MTE7fXM6MjU6IndyaXRlIG15IHBhcGVyIGZvciBtZTwvYT4iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjA0MyI7aToxO2k6MTE7fXM6Mjg6Imh0bWwiPmVzc2F5Ymlzb24uY29tIHdyaXRpbmciO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyMSI7aToxO2k6MTE7fXM6MTk6ImhlbHAgd2l0aCBlc3NheTwvYT4iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjA0NCI7aToxO2k6MTE7fX1zOjIxOiJjb3Vyc2V3b3Jrc2VydmljZS5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyOToiY3VzdG9tcGFwZXJ3cml0aW5nc2VydmljZS5uZXQiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiZGlwbG9tYWZha2VzLmNvIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMjQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6InBhcGVyNGNvbGxlZ2UuY29tIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMjUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6InBhcGVyd3JpdGluZzEiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMzoicmVzZWFyY2hwYXBlcndyaXRlci5uZXQiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyNyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoidGVybXBhcGVyc3dyaXRlci5vcmciO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyOCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoidG9wdXNhdW5pdmVyc2l0eS5jb20iO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAyOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoid2Vkb2hvbWV3b3JrLm5ldCI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDMwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJ3cml0ZW15ZW5nbGlzaHBhcGVyLm9yZyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDMxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI5OiJ3cml0aW5nY2VudGVyLmZhcy5oYXJ2YXJkLmVkdSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDMyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJ3cml0aW5nc2VydmljZXM0eW91LmNvbSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDMzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJ3cml0ZW15cGFwZXI0bWUub3JnIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19lc3NheS4wMzQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6IndyaXRlbXllc3NheTRtZS5vcmciO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjA0MSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMDoiZXNzYXliZWFycyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDQ2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJzbWFydHllc3NheSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDQ3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJXcml0ZU15UGFwZXI0TWUiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX2Vzc2F5LjAzNSI7aToxO2k6MTE7fXM6MzA6ImRpc3NlcnRhdGlvbiBmcmVlbGFuY2Ugd3JpdGVycyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fZXNzYXkuMDQwIjtpOjE7aToxMTt9czo2OiJqb3JkYW4iO2E6MTg6e2k6MDtpOjEwO3M6MTM6ImFpciBqb3JkYW4gMTEiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2pvcmRhbi4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImNoZWFwIGpvcmRhbnMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2pvcmRhbi4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6OToiam9yZGFuIDExIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19qb3JkYW4uMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJqb3JkYW4gMTEgYnJlZCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiam9yZGFuIDExIGxvdyBicmVkIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19qb3JkYW4uMDA1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJqb3JkYW4gMTEgcGxheW9mZnMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2pvcmRhbi4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6OToiam9yZGFuIDEzIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19qb3JkYW4uMDA3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJqb3JkYW4gMTMgbG93IGJyZWQiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2pvcmRhbi4wMDgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6ImpvcmRhbiAxMyBsb3cgaG9ybmV0cyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAwOSI7aToxO3M6OToic3BhbV9saW5rIjt9czo4OiJqb3JkYW4gNSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxMCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoiam9yZGFuIDUgbWlkbmlnaHQgbmF2eSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxMSI7aToxO3M6OToic3BhbV9saW5rIjt9czo4OiJqb3JkYW4gNiI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxMiI7aToxO3M6OToic3BhbV9saW5rIjt9czo4OiJqb3JkYW4gNyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMzoiam9yZGFuIDcgaGFyZSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxNCI7aToxO3M6OToic3BhbV9saW5rIjt9czo4OiJqb3JkYW4gOCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiam9yZGFuIHJldHJvIDEyIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19qb3JkYW4uMDE2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJqb3JkYW4gcmV0cm8gNCI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fam9yZGFuLjAxNyI7aToxO3M6OToic3BhbV9saW5rIjt9fXM6MjI6ImFkaWRhcyBZZWV6eSA3NTAgQm9vc3QiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMzoiYWRpZGFzIFllZXp5cyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fc2hvZXMuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJjZW1lbnQgdG9uZ3VlIDVzYSI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fc2hvZXMuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjc6ImhhcmUgN3MiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoibG93IGJyZWQgMTFzIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19zaG9lcy4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6Im1pZG5pZ2h0IG5hdnkgNXMiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAwNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoicGxheW9mZnMgMTFzIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19zaG9lcy4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6Im11bGJlcnJ5IG91dGxldHMiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAwOCI7aToxO3M6OToic3BhbV9saW5rIjt9czozMDoiY2hhdXNzdXJlcyBjaHJpc3RpYW4gbG91Ym91dGluIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19zaG9lcy4wMDkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTQ6InByYWRhIHNob2VzIHVrIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19zaG9lcy4wMTAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6Im11bGJlcnJ5IGhhbmRiYWdzIHVrIjthOjI6e2k6MDtzOjI3OiJpbmplY3RlZC5zcGFtLXNlb19zaG9lcy4wMTEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjg6InZlbnRlIGRlIGNoYXVzc3VyZXMgZW4gbGlnbmUiO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAxMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMToibWNtIGhhbmRiYWciO2E6Mjp7aTowO3M6Mjc6ImluamVjdGVkLnNwYW0tc2VvX3Nob2VzLjAxMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToic2NhcnBlIGhvZ2FuIG91dGxldCI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fc2hvZXMuMDE0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJob2dhbiBzY2FycGUgdW9tbyI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQuc3BhbS1zZW9fc2hvZXMuMDE1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJyZXBsaWNhIHdhdGNoZXMiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX3dhdGNoZXMuMDAxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJidXlyb2xleHJlcGxpY2F3YXRjaGVzcyI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fd2F0Y2hlcy4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjU6IndvcmxkcHVsc2UuY29tL25vZGUvNjIyMjgiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX3dhdGNoZXMuMDA2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjcxOiJhcnRpY2xlcy1zdWJtaXNzaW9uLm91cnNjb21wYW55LmNvbS8/cHR5cGU9cHJldmlldyZhbXA7YWxvb2s9MSZhbXA7cGlkPSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fd2F0Y2hlcy4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6Ind3dy5icmFuZGlnLmNvLnVrIjthOjI6e2k6MDtzOjIxOiJpbmplY3RlZC5zcGFtLXNlby4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NzoiaGFuZ2JhZyI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQuc3BhbS1zZW9fd2F0Y2hlcy4wMDMiO2k6MTtpOjExO31zOjU6InJvbGV4IjthOjI6e2k6MDtzOjI5OiJpbmplY3RlZC5zcGFtLXNlb193YXRjaGVzLjAwNCI7aToxO2k6MTE7fXM6MTM6Ij5wcmFkYSBvdXRsZXQiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLnNwYW0tc2VvX3dhdGNoZXMuMDA1IjtpOjE7aToxMTt9czo4OiJ2b2x0YXJvbCI7YToyOntpOjA7czozNzoiaW5qZWN0ZWQuc3BhbS1zZW8ucGhhcm1hY3ktb25saW5lLjA4NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoibGFiZXRhbG9sIG9ubGluZTwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvLnBoYXJtYWN5LW9ubGluZS4wODYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjU6InB1cmNoYXNlIHBhcmxvZGVsIG9ubGluZTwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvLnBoYXJtYWN5LW9ubGluZS4wODciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6Ij5jYXB0b3ByaWwgY2Fwb3RlbjwiO2E6Mjp7aTowO3M6Mzc6ImluamVjdGVkLnNwYW0tc2VvLnBoYXJtYWN5LW9ubGluZS4wODgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjY6Im15LWFmZmlsaWF0ZXMtcHJvZ3JhbXMuY29tIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19nZXQtcmljaC4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6ImNhbmliZWFtaWxsaW9uYWlyZS5jb20iO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2dldC1yaWNoLjAwMiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoibWFrZW1vbmV5aW50ZXJuZXR0IjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19nZXQtcmljaC4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6Im1sbXN1Y2Nlc3Nmb3JtdWxhIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19nZXQtcmljaC4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6Im1sbXN1Y2Nlc3Nmb3JtdWxhLmNvbSI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuc3BhbS1zZW9fZ2V0LXJpY2guMDA1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJzdGFydC1zdWNjZXNzLXVwIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19nZXQtcmljaC4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6InRlYW1idWlsZG5ldHdvcmsub3JnIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5zcGFtLXNlb19nZXQtcmljaC4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6InlvdS1zdGFydC11cC5jb20iO2E6Mjp7aTowO3M6MzA6ImluamVjdGVkLnNwYW0tc2VvX2dldC1yaWNoLjAwOCI7aToxO3M6OToic3BhbV9saW5rIjt9czo2OiJjYXNpbm8iO2E6Nzp7aTowO2k6MTA7czoxMzoib25saW5lIGNhc2lubyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2FzaW5vLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoidGFzdHlvbmxpbmVjYXNpbm8iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Nhc2luby4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6InhtaWNyb2dhbWluZ2Nhc2lub3MiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Nhc2luby4wMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6Ind3dy5zdmVuc2trYXNpbm9uLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fY2FzaW5vLjAwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNzoiLXh4LmNvbV1jYXNpbm8gb25saW5lWy91cmxdIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5zcGFtLXNlb19jYXNpbm8uMDA3IjtpOjE7czo3OiJ+Xi4qJH5zIjt9czo2OiJjYXNpbm8iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLnNwYW0tc2VvX2Nhc2luby4wMDUiO2k6MTtpOjExO319czoxMjoid3AtaW5jbHVkZXMvIjthOjg6e2k6MDtpOjEwO3M6MzU6IndwLWluY2x1ZGVzL2NlcnRpZmljYXRlcy9tZW1iZXIucGhwIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci53cC1pbmNsdWRlcy4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MzM6IndwLWluY2x1ZGVzL2NlcnRpZmljYXRlcy9tZW51LnBocCI7YToyOntpOjA7czoyNDoiYmFja2Rvb3Iud3AtaW5jbHVkZXMuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjMyOiJ3cC1pbmNsdWRlcy9jZXJ0aWZpY2F0ZXMvYnV5LnBocCI7YToyOntpOjA7czoyNDoiYmFja2Rvb3Iud3AtaW5jbHVkZXMuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjMxOiJ3cC1pbmNsdWRlcy9jZXJ0aWZpY2F0ZXMvdXMucGhwIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci53cC1pbmNsdWRlcy4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6IndwLWluY2x1ZGVzL1RleHQvdXMucGhwIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci53cC1pbmNsdWRlcy4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6IndwLWluY2x1ZGVzL1RleHQvZG8ucGhwIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci53cC1pbmNsdWRlcy4wMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjY6IndwLWluY2x1ZGVzL2ZvbnRzL2Jlc3QucGhwIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci53cC1pbmNsdWRlcy4wMDciO2k6MTtzOjk6InNwYW1fbGluayI7fX1zOjExOiJvbmxpbmVlLmNvbSI7YTo5OntpOjA7aToxMDtzOjI5OiJidXljaGVhcGNpYWdyZXR0ZXNvbmxpbmVlLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6ImJ1eWN5dG90ZWNvbmxpbmVlLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMDIiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjg6ImJ1eWdlbmVyaWNwcmlsaWd5b25saW5lZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJidXlwcm9zY2Fyb25saW5lZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDA0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJidXl4ZW5pY2FvbmxpbmVlLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMDUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTc6ImZsYWd5bG9ubGluZWUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAwNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoiYnV5Y2lnYXJldHRlc29ubGluZWUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAwNyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoiY2FzaHF1aWNrb25saW5lZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDA4IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czoxMzoic29mdHdhcmVlLmNvbSI7YTo3OntpOjA7aToxMDtzOjIxOiJkb3dubG9hZHNvZnR3YXJlZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDA5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIyOiJpcGhvbmVzcHlzb2Z0d2FyZWUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAxMCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxODoiYWRvYmVzb2Z0d2FyZWUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAxMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNjoiYmxhY2tiZXJyeXNweXNvZnR3YXJlZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDEyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJlbGxwaG9uZXNweXNvZnR3YXJlZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDEzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIxOiJjb21wdXRlcnNvZnR3YXJlZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDE0IjtpOjE7czo5OiJzcGFtX2xpbmsiO319czozMDoiYWRvYmVjcmVhdGl2ZXN1aXRlZG93bmxvYWQuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAxNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNToiYWRvYmVhY3JvYmF0ZG93bmxvYWRkLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMTYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjQ6ImFkb2JlYWNyb2JhdHNvZnR3YXJlLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMTciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6ImNkbm91dGxldG9uc2FsZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDE4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIwOiJkb3dubG9hZGFkb2JlY3M2Lm9yZyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMTkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjU6Imdvb2RhbnRpdmlydXNzb2Z0d2FyZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDIwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI0OiJtb3ZpZWRvd25sb2FkbWFuYWdlci5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDIxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJzb2Z0d2FyZS1mb3IteHAiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDIyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI1OiJzcHktcGhvbmUtc29mdHdhcmUtb25saW5lIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAyMyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyODoidGhlYmVzdGFudGl2aXJ1c3NvZnR3YXJlLm5ldCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMjQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6ImJlc3RhbnRpdmlydXNzb2Z0d2FyZTEiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDI1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI3OiJ0aGViZXN0Y29tcHV0ZXJzb2Z0d2FyZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDI2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJ3d3cudGV4YXNnb2xkZW5naXJsLmNvbSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuc3BhbS1zZW9fdmlhZ3JhLjAwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMDoib25saW5lLmNvbSI7YTo4OntpOjA7aToxMDtzOjIzOiJidXl6aXRocm9tYXhvb25saW5lLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMjciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6ImN5dG90ZWNidXlvbmxpbmUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAyOCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoiZG9teWFzc2lnbm1lbnRvbmxpbmUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAyOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoiY2FuYWRhLWRydWdzb25saW5lLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMzAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjY6Im15ZmF2b3JpdGVkb2N0b3JvbmxpbmUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAzMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMzoid2luZG93czEwa2V5c29ubGluZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDMyIjtpOjE7aToxMTt9czoyMToib2ZmaWNpYWxrZXlvbmxpbmUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAzMyI7aToxO2k6MTE7fX1zOjI4OiI+bW9pc3Nhbml0ZSBlbmdhZ2VtZW50IHJpbmdzIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjAzNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToicGFyYXdhbmFvYm95YWguaW5mbyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMzUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6In07IHdwT3VycHVzaGVyKCJodHRwOiI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMzYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NToiMjQ3cGgiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDM3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJhYnNjYW5uaW5nLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wMzgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImFjdGl2aXRpZXN0YWJsZXMiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDM5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJhbGwtZm9ydW1zLmJpeiI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNDAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6ImFtZXJpY2FudHJhbnNwb3J0cGVydSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNDEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImFtZXJpbHlueC5uZXQiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDQyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJhcmF1am9hbHZhcmV6IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA0MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoiYXJlbHlzZnJhbmtlbi5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDQ0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE5OiJhcnRlcy1tYXJjaWFsZXMuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA0NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoiYXV0b3Jlc3BvbmRlci5tbS1wcm9qZWN0IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA0NiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNjoiYmVhdXRpZnVsc3VtbWVybW9ybmluZy5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDQ3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIyOiJiZXN0YWZmaWxpYXRlbGFuZG1pbmVzIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA0OCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiYmlrZWNvbGxlY3RpdmVzIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA0OSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoiYmlrZXJjaGlja3oud3MiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDUwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJjYWxsaW5zZWFyY2guY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1MSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiY2FuZGxlc3RvbmVzIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1MiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiY2FwZWNvLmVkdS5wIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiY2FwdGFpbmRzZ3VpZGVzZXJ2aWNlIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1NCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiY2FzZXlzY29ybmVyLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNTUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6NjoiY2VmdGluIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1NiI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToiY2xhcmlmeXRoZXRydXRoaW5jaGluIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA1NyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMzoiY2xpbmVzaXRlLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNTgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImNvbXVuaWNhci5vcmciO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDU5IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJjb25ncmVzc2ZheC5jbyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNjAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6ODoiY3BwbC5vcmciO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDYxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJjcmVlazJjb2FzdC5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDYyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjIzOiJjdXBpZG9pbnRlcm5hY2lvbmFsLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNjMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6OToiY3d0cmFuc2xsIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA2NCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxMjoiZGFsZW1hcmsuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA2NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiZGVsdGFzb25lb25saW5lIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA2NiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoiZG91Z2xhc21pc3F1aXRhLmMiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDY3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJlZHVhaWRndXJ1LmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNjgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6ImVsY2FycmV0ZS5jbCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNjkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6ImVtYmFsYWplc3BlcnUiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDcwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJlbnpvc3Jlc3RhdXJhbnQiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDcxIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJleHRyZW1ldmFsdWVob3N0IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA3MiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNToiZm9ybWF0aW9uc3R1ZGlvIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA3MyI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoiZnJlZS10cmFmZmljYm9vbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNzQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTI6ImhvdHNwaWxsLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNzUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTg6Imhvd3RvdXNlbXlpcGFkLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNzYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImNoYW1wYWduYXQzNy5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDc3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE0OiJjaGFubmVsa29sa2F0YSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wNzgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6ImNoZWFwd2VzdGNpZ2FyZXR0ZXMuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA3OSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyODoiY2hlc3RlcmZpZWxkY2lnYXJldHRlczR1Lm9yZyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wODAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTU6ImNoaWNrbmVnZ3N1cHBseSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wODEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6ImpvYW5iZWF1bGlldS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDgyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE4OiJqdXJpc3BydWRlbmNpYWNpdmkiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDgzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJsaWJlcnR5ZGluaW5nIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA4NCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoibGlmZTRzdWNjZXNzLm5ldCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wODUiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjg6Im1lZGljYWxjYXJlb250aGVpbnRlcm5ldC5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDg2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI3OiJtZWRpY2F0aW9uc29ubGluZWRvY3Rvci5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDg3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJtaXJhY2xlLXByZWduYW5jeSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wODgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6Im1vYmlsZWNvbnRlbnRzdG9yZS5tb2JpIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA4OSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyNDoib25lZG9sbGFyLm1tLXByb2plY3QuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA5MCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoib25lbmV0Y2VudGVyLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wOTEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTM6Im9ubGluZS1wcmVzY3IiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDkyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE3OiJwYXNzaW9ub2ZsaWZlLm5ldCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wOTMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTA6InFnYXMuY28udWsiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDk0IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjEzOiJyeC1wcmljZXMuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjA5NSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNDoic2VlYXZpc2lvbi5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDk2IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJzaGFyZS12aWRlby5pbmYiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDk3IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE1OiJzaWx2ZXJ3YXRlcmNhZmUiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMDk4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjk6InQ0aGIuaW5mbyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4wOTkiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTk6InRha2VhZnJlZWNydWlzZS5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTAwIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJ1Z2NzLmNhbHRlY2guZWR1IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjEwMSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNzoidW5pdGVkcmV0ZWsuY28udWsiO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjExOiJ3ZWJlbWVkLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMDMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjA6IndpY2hpdGFicm9hZGJhbmQuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjEwNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToid3d3LmFtcGhpLWZlc3RpdmFsLmRlIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjEwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoid3d3LnBvb2xkYXkuaW5mbyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMDYiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjQ6Ind3dy5zY29yZS1sb3Vpc3ZpbGxlLm9yZyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMDciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjI6Ind3dy51bHRyYWRhcmtyYWRpby5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTA4IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjE2OiJ3d3cueWFsZWFhc2Eub3JnIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjEwOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMToieW91cmRpc2NvdW50NGZyZWUuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjExMCI7aToxO3M6OToic3BhbV9saW5rIjt9czoxNjoicnVxYm5zbW9rZWJicS5nYSI7YToyOntpOjA7czoyMzoiaW5qZWN0ZWQuc3BhbV9saW5rcy4wMDEiO2k6MTtpOjExO31zOjY6ImN5YWxpcyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuc3BhbS1zZW9fbGluay4wMDIiO2k6MTtzOjE0OiJzcGFtX2xpbmtfdGV4dCI7fXM6MTc6ImNoZWFwIG5mbCBqZXJzZXlzIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5zcGFtLXNlb19saW5rLjAwMyI7aToxO3M6MTQ6InNwYW1fbGlua190ZXh0Ijt9czoxOToiY2hlYXAgamVyc2V5cyBjaGluYSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQuc3BhbS1zZW9fbGluay4wMDQiO2k6MTtzOjE0OiJzcGFtX2xpbmtfdGV4dCI7fXM6MTQ5OiJydGRvY2suY29tL2Jwby1yb2NrZXR0YWItanMvP3BpZD03MjY5NjM2ODcyNjk3NjY1NzI2ZDY1NjQ2OTYxNWY3MzY1NzI3MCZhbXA7ZWlkPWZhc3Rjb25uZWN0MSZhbXA7Ym5hbWU9RmFzdENvbm5lY3QmYW1wO3Byb2R1Y3Q9ZmMmYW1wO2FmZmlsaWF0ZWlkPTAxNyI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMTEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MzQ6Indlc3Rlcm51bmlvbi1jb3VudHJ5LWxvY2F0aW9ucy5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTEyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI2OiJ3ZXN0ZXJudW5pb24tbG9jYXRpb25zLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMTMiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjM6Im1vbmV5Z3JhbWxvY2F0aW9ucy5pbmZvIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjExNCI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMDoibXVzY2xlLXRyYWluaW5nLmluZm8iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTE1IjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI4OiJteS1iZWF1dHktaGVhbHRoLWZpdG5lc3MuY29tIjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjExNiI7aToxO3M6OToic3BhbV9saW5rIjt9czoxOToiYXJvbWF0ZXJhcGlhLmNvbS5wZSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMTciO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MjE6ImNob29zZWdyZWF0aGVhbHRoLmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMTgiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTE6Imxvc2Vld2VpZ2h0IjthOjI6e2k6MDtzOjMyOiJpbmplY3RlZC5zcGFtLXNlb19jaGVhcC1idXlzLjExOSI7aToxO3M6OToic3BhbV9saW5rIjt9czoyMjoib3ZlcjUwbG9zaW5nd2VpZ2h0LmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMjAiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjc6Ind3dy5oZWFsdGhmaXRuZXNzcmVtZWR5LmNvbSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuc3BhbS1zZW9fY2hlYXAtYnV5cy4xMjEiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6MTY6Ind3dy5nb3RvY2VydC5jb20iO2E6Mjp7aTowO3M6MzI6ImluamVjdGVkLnNwYW0tc2VvX2NoZWFwLWJ1eXMuMTIyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI5OiJjYW5hZGlhbnBoYXJtYWN5NGJlc3RsaWZlLmNvbSI7YToyOntpOjA7czoyNDoiaW5qZWN0aW9uLnNwYW1fbGlua3MuMDAyIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI2OiJwaGFybWFjeWNhbmFkYS1yeGVkdG9wLmNvbSI7YToyOntpOjA7czoyNDoiaW5qZWN0aW9uLnNwYW1fbGlua3MuMDAzIjtpOjE7czo5OiJzcGFtX2xpbmsiO31zOjI1OiJwaGFybWFjeW9ubGluZTRiZXR0ZXIuY29tIjthOjI6e2k6MDtzOjI0OiJpbmplY3Rpb24uc3BhbV9saW5rcy4wMDQiO2k6MTtzOjk6InNwYW1fbGluayI7fXM6Mjg6ImRpc2NvdW50cGhhcm1hY3ktcnhzdG9yZS5jb20iO2E6Mjp7aTowO3M6MjQ6ImluamVjdGlvbi5zcGFtX2xpbmtzLjAwNSI7aToxO3M6OToic3BhbV9saW5rIjt9czozMjoiIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0iO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDM0Ijt9czozNzoiIGhlaWdodD0iMCIgZnJhbWVib3JkZXI9IjAiPjwvaWZyYW1lPiI7YToxOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMTYiO31zOjM1OiJzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IyI7YToxOntpOjA7czoyNDoiaW5qZWN0aW9uLmhpZGRlbi1kaXYuMDM1Ijt9czo0ODoiY29sb3I6ICNmZmZmZmY7IGZvbnQtc2l6ZTogMC4xcHg7IGRpc3BsYXk6IG5vbmU7IjthOjE6e2k6MDtzOjI0OiJpbmplY3Rpb24uaGlkZGVuLWRpdi4wMzYiO31zOjM0OiJkaXNwbGF5OiBub25lOyB2aXNpYmlsaXR5OiBoaWRkZW47IjthOjE6e2k6MDtzOjI0OiJpbmplY3Rpb24uaGlkZGVuLWRpdi4wMzciO31zOjQwOiI8YSBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiIGhyZWY9Ii8vIjthOjE6e2k6MDtzOjI3OiJpbmplY3Rpb24uaGlkZGVuX2EtaHJlZi4wMDMiO31zOjQxOiI8YSBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lIiBocmVmPSIvLyI7YToxOntpOjA7czoyNzoiaW5qZWN0aW9uLmhpZGRlbl9hLWhyZWYuMDA0Ijt9czoxNDoiIj5sZXMgcHJvc3RpdHUiO2E6Mjp7aTowO3M6MjQ6ImluamVjdGlvbi5zcGFtX2xpbmtzLjAwNiI7aToxO2k6MTE7fXM6MTc6IiI+cmVuY29udHJlIGZlbW1lIjthOjI6e2k6MDtzOjI0OiJpbmplY3Rpb24uc3BhbV9saW5rcy4wMDciO2k6MTtpOjExO31zOjE4OiI+ZnJlZSBkYXRpbmcgc2l0ZXMiO2E6Mjp7aTowO3M6MjQ6ImluamVjdGlvbi5zcGFtX2xpbmtzLjAwOCI7aToxO2k6MTE7fXM6OTM6IjxhIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246IG5vbmU7IGNvbG9yOiBpbmhlcml0OyBjdXJzb3I6IGRlZmF1bHQ7IG91dGxpbmU6IG5vbmU7IiBocmVmPSJodHRwOiI7YToxOntpOjA7czoyNzoiaW5qZWN0aW9uLmhpZGRlbl9hLWhyZWYuMDA1Ijt9czo4Mzoic3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgb3BhY2l0eTogMC4wMDE7IHotaW5kZXg6IDEwOyBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7Ij4iO2E6MTp7aTowO3M6Mjc6ImluamVjdGlvbi5oaWRkZW5fYS1ocmVmLjAwNiI7fXM6NzU6InN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTtvcGFjaXR5OjAuMDAxO3otaW5kZXg6MTA7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MCkiPiI7YToxOntpOjA7czoyNzoiaW5qZWN0aW9uLmhpZGRlbl9hLWhyZWYuMDA3Ijt9czo3OiI8c2NyaXB0IjthOjE2Nzp7aTowO2k6MTA7czoyMToiaHR0cDovL2FlLmF3YXVlLmNvbS83IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAyMSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIyOiJodHRwOi8vaWUuZXJhY291LmNvbS8zIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAyMiI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIxOiJodHRwOi8vYW8uZXV1YXcuY29tLzkiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDIzIjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MjI6Imh0dHA6Ly91ZS5vZWFvdS5jb20vMzEiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDI0IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MjA6Imh0dHA6Ly9hZWFhZWEuY29tL291IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAyNSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIwOiJodHRwOi8vc2VjcmVlLmNvbS9yZSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMjYiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoyMDoiaHR0cDovL3VvYXVlci5jb20vc2kiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDI3IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MjA6Imh0dHA6Ly9vZW9vZWEuY29tL3ZlIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAyOCI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIxOiJodHRwOi8vc2Vjb25lby5jb20vb24iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDI5IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MjA6Imh0dHA6Ly9zZWNvd28uY29tL3dvIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAzMCI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIwOiJodHRwOi8vb3Vyb3VlLmNvbS9zZSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMzEiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czo0MjoiaHR0cDovL2pzLnRyYWZmaWNhbmFseXRpY3Mub25saW5lL2pzL2pzLmpzIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5qc19uZXV0cmluby4wMDEiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoxODoicmVzdHdwLm1vYmlkZWEuY29tIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA2NCI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIyOiJodHRwOi8vcm9zYS10ZW1hLmluZm8vIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAzMiI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjMyOiJodHRwOi8vYndpbnBva2VyMjQuY29tL2NsaWNrNy5qcyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMzMiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czo0NzoiaHR0cDovL3dlbGNvbWV0b3RoZWdsb2JhbGlzb3JnLmNvbS9qcy5waHA/a2s9MjYiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDM0IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6NDk6Imh0dHA6Ly9nbG9iYWxwb3dlcmluZ2dhdGhlcmluZ29uLmNvbS9sbC5waHA/a2s9MTYiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDM1IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6Mjk6Imh0dHA6Ly9pbmpqLmlnbm9yZWxpc3QuY29tLzE0IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAzNiI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjU2OiJodHRwOi8vY291bnRlcjUuYWxsZnJlZWNvdW50ZXIuY29tL3ByaXZhdGUvY291bnRlci5qcz9jPSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMzciO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czo0MzoiaHR0cDovL3N3ZWVwc3Rha2VzYW5kY29udGVzdHNkby5jb20vcG1nLnBocCI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMzgiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czo0NjoiaHR0cDovL3N3ZWVwc3Rha2VzYW5kY29udGVzdHNkby5jb20vbmwucGhwP3A9ZCI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMzkiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czozNDoiaHR0cDovL2FzYXVuaXJnLmNvbS5ici9qcy8wZGF5LnBocCI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNDAiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czozNjoiaHR0cDovL2Rlbnlib25mYW50ZS5jb20vYXBwL01lbnUucGhwIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA0MSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjMzOiJodHRwOi8vbGlnLWxpbXAuY29tLmJyL3JlYm90cy5waHAiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDQyIjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6Mjg6Imh0dHA6Ly9cJGRvbWFpbi9sbC5waHA/a2s9MTEiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDQzIjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6Mzc6Imh0dHA6Ly93b3JkcHJlc3MtdXBkYXRlLmNvbS9nb29nbGUuanMiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDQ0IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6NDM6Ii8vMDA1NWQ3Yi5uZXRzb2xob3N0LmNvbS9CbG9nL2xpYjIvanMvanMuanMiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDQ1IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6NDE6Imh0dHA6Ly9hZHMuZ29vZ2xlYWRzZXJ2aWNlcy5hdC9jb3VudGVyLmpzIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA0NiI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjMwOiJodHRwczovL2RhdGFpbmZvcm1lcnguZXUvZXUuanMiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDQ3IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MTM6ImFsZWludmVzdC54eXoiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDY3IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MTc6ImlkaW9tYXNlbnZpdm8uY29tIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA2OCI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjE4OiJyL3R1OFpJIj48L3NjcmlwdD4iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDY5IjtpOjE7aToxMTt9czoxOToiaHR0cDovL2FsZW1vbmV5Lnh5eiI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNzEiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoxOToiaHR0cDovL3Bhc3RlYmluLmNvbSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNDgiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoxOToiLy9nb2Z1cm5pdHVyZS5jby51ayI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNDkiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoxNjoiaHR0cDovL25pbm5pLm9yZyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNTAiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoxNzoidHJhZmZpY3RyYWRlLmxpZmUiO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDcyIjt9czoxODoidHJ5c29tZXRoaW5nbmV3LmV1IjthOjE6e2k6MDtzOjI5OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA3Mi4wMiI7fXM6MTc6InNvbWV0aW1lc2ZyZWUuYml6IjthOjE6e2k6MDtzOjI5OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA3Mi4wMyI7fXM6MTc6ImdpdmVtZWFsZXR0ZXIuYml6IjthOjE6e2k6MDtzOjI5OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA3Mi4wNCI7fXM6MTg6InNpbXBsZWZ1bnNpdGUuaW5mbyI7YToxOntpOjA7czoyOToiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNzIuMDUiO31zOjE1OiJkYW5jZXdpdGhtZS5iaXoiO2E6MTp7aTowO3M6Mjk6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDcyLjA2Ijt9czoxODoidHJ5bXluZXdzcGlyaXQuY29tIjthOjE6e2k6MDtzOjI5OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA3Mi4wNyI7fXM6MjM6Ii8vc3RhdGljLTQ2Nzcua3hjZG4uY29tIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA1MSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjM4OiJodHRwczovL3d3dy53ZWJzdGF0LmNjL21lZGlhL2Nvb2tpZS5qcyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNTIiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czozOToiaHR0cDovL3d3dy5ibG9nLnBhc2Fyc29yZS5jb20vd3AtYWRtaW4vIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA1MyI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjMyOiJodHRwOi8vd3d3LmdldC5zcGFjZS93cC1jb250ZW50LyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNTQiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czozMDoiaHR0cDovL3d3dy53ZWxkaW1wZXguaHUvbWVkaWEvIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA1NSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjM2OiJodHRwOi8vd3d3LmhjaWZ4LmNvbS90cm95ZW5nZWxoYXJkdC8iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDU2IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MTU6Imh0dHBzOi8vZ29vLmdsLyI7YToyOntpOjA7czoyMjoiYmFja2Rvb3IuanNfZ29vX2dsLjAwMSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjIwOiJodHRwOi8vZ29vLmdsL0J0RlZQZCI7YToyOntpOjA7czoyNToiYmFja2Rvb3IuanNfZ29vX2dsLjAwMS4wMiI7aToxO3M6MTA6InNjcmlwdF9zcmMiO31zOjUxOiIvL3d3dy5oZXJiYWxzaG9wcGUuY29tL2pzL3NjcmlwdGFjdWxvdXMvZWxlbWVudHMuanMiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDU3IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MTk6Imh0dHA6Ly9hLmMwNTk0LmNvbS8iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDYwIjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MjU6In19ZG9jdW1lbnQud3JpdGUobSk7Ly8tLT4iO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDQwIjtpOjE7czoxNjM6In48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5ccyo8XCEtLVxzKnZhclxzKihcdyk9XCI9XHcrW14iXSsiO1xzKihcdyk9IiI7XHMqW148XSs8XDEubGVuZ3RoO1teXChdK1woXDEuY2hhckNvZGVBdFteXHtdK1x7XHMqXDJcKz1ccyouJi47XH1bXjxdK1xzKjwuc2NyaXB0Pn4iO31zOjk6ImMwNTk0LmNvbSI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAwNCI7aToxO3M6NjU6In4mbHQ7c2NyaXB0XHMqc3JjPWh0dHA6Li4oXHcrLiljMDU5NC5jb20uLmpzPS4mZ3Q7Jmx0O1xzKi5zY3JpcHR+Ijt9czo2NzoiPHNjcmlwdD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gdW5lc2NhcGUoJycpOzwvc2NyaXB0PiI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAyNCI7aToxO2k6MTI7fXM6MzU6ImQoZS5mKGcuaCg2LDEsMCw3LDMsNCw4LGksaiw5LGssYSxhIjthOjI6e2k6MDtzOjIwOiJpbmplY3RlZC5qc19ldmFsLjAwMSI7aToxO3M6MTkzOiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSxyXClccypceyhcdyspPWZ1bmN0aW9uXCgoXHcrKVwpXHtyZXR1cm5ccyooXDIpW147XSs7aWZcKFwhW15cfF0rXHxcfChcMSlcKChcMilcKVteXHxdK1x8XGQrXHxcZCtcfFxkK1x8W15ce10rXHtcfVwpXClccyo8LnNjcmlwdD5+Ijt9czozNToiPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPiBlbmQiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDYxIjtpOjE7czo2MDoifjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuPiBlbmRcZCtfXChcKTtccyo8LnNjcmlwdD5+Ijt9czozNDoiKCkgeyByZXR1cm4gIm5vbmUiOyB9IGZ1bmN0aW9uIGVuZCI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMDQiO2k6MTtzOjEyOToifjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuPlxzKmZ1bmN0aW9uXHMqW15fXStfXEQrXGQrXHMqXChcKVxzKlx7XHMqW14iXSsibm9uZSI7XHMqW14nXSsnXHcrXGQrJ1wpLlteO10rO1xzKlx9XHM8LnNjcmlwdD5+Ijt9czozMDoic3JjPSJodHRwOi8veW91cmphdmFzY3JpcHQuY29tIjthOjI6e2k6MDtpOjEwO3M6NzoiL2kuanMiPiI7YToyOntpOjA7czoyNzoiaW5qZWN0ZWQueW91cmphdmFzY3JpcHQuMDAxIjtpOjE7aToxMTt9fXM6NDE6ImFkbmV0d29ya3BlcmZvcm1hbmNlLmNvbS9hL2Rpc3BsYXkucGhwP3I9IjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5qc191bndhbnRlZF9hZHMuMDA4IjtpOjE7czoxMDoic2NyaXB0X3NyYyI7fXM6MTc6Ii94eC5qcyI+PC9zY3JpcHQ+IjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5qc19kZWZhY2VtZW50LjAwMSI7aToxO2k6MTE7fXM6NTU6IiFmdW5jdGlvbihlLG4saSl7ZnVuY3Rpb24gdChlLG4saSl7Zm9yKHZhciB0PW4lZS5sZW5ndGgiO2E6Mjp7aTowO3M6MjM6ImluamVjdGVkLmpzX21hbHdhcmUuMDAyIjtpOjE7czoyMjM6In48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj4uZnVuY3Rpb24oXChlLG4saVwpKVx7ZnVuY3Rpb25ccy5cMVx7Zm9yXCh2YXJccyp0PW4lZS5sZW5ndGhbXlxbXStcW1x3Llx3K1xdXHdcLmRpbFteJl0rJiZ3aW5kb3cuRmlyZWJ1Zy5jaHJvbWVbXlx7XStce1x9cmV0dXJuIVxkW15fXStfLl9cdysuXHcrLC46ZWxuc21bXjxdKzxcZCtcfFx8W148XSs8XGRbXjxdKzwuc2NyaXB0Pn4iO31zOjM0OiJ7aWYoLyhhbmRyb2lkfGJiXGQrfG1lZWdvKS4rbW9iaWxlIjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5qc19yZWRpcmVjdC4wMTEiO2k6MTtzOjE1MzoifjxzY3JpcHRbXj5dKz5cKGZ1bmN0aW9uXChcdyxcd1wpXHMqXHtpZlwoLlwoYW5kcm9pZFx8YmIuZFwrLm1lZWdvXClcLlwrbW9iaWxlW14tXSstXGRbXlwuXSsuXHdcfFx3K1wpXHxcdytbXiciXSsuW2h0cHNdezQsfTpbXlw/XStcP1teJyJdKy5cKTs8LnNjcmlwdD5+Ijt9czoyODoiOmUocGFyc2VJbnQoYy9hKSkpKygoYz1jJWEpPiI7YToyOntpOjA7czoyMDoiaW5qZWN0ZWQuanNfZXZhbC4wMDMiO2k6MTtzOjIxMDoifjxzY3JpcHQ+ZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSxkXClceyhcdyk9W15cKF0rXCgoXHcpXClce3JldHVyblwoXDI8XHdcP1teOl0rOlwxW14+XSs+XGQrXD9TdHJpbmcuZnJvbUNoYXJDb2RlXChcMlwrXGQrXCk6W15cP10rXD9cfFx3K1x8XHcrXChcdytcfFx3K1wpW14nXSsnXHcrOi4uXHcrXC5cdytbXlwuXStcLnNwbGl0XCgnXHwnXCksXGQsXHtcfVwpXCl+Ijt9czo1OToiU3RyaW5nLmZyb21DaGFyQ29kZSAoNjAsIDEwNCwgMTE2LCAxMDksIDEwOCwgNjIsIDEwLCAzMiwgNjAiO2E6Mjp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAxMyI7aToxO3M6MTMyOiJ+PHNjcmlwdD5ccypkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MXHMqPVxzKlwoU3RyaW5nLmZyb21DaGFyQ29kZVxzKlwoNjAsIDEwNCwgMTE2LCAxMDksIDEwOCwgNjIsIDEwLCAzMiwgNjBbXjxdKzwuc2NyaXB0Pn4iO31zOjQ2OiJqUXVlcnkoJyNjby1iaWxsaW5nLWZvcm0nKS5jaGFuZ2UoZnVuY3Rpb24oKSB7IjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjA0MSI7aToxO3M6MzY0OiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqalF1ZXJ5XChkb2N1bWVudFwpLnJlYWR5W14nIl0rLigjY28tYmlsbGluZy1mb3JtKS5bXiciXSsuYmlsbGluZy4sW14nIl0rLlwxLlteJyJdKy4oI2NvLXBheW1lbnQtZm9ybSkuW14nIl0rLiNmaXJzdGRhdGFnbG9iYWxnYXRld2F5X2NjX251bWJlci5cKVwudmFsW14+XSs+XHMqXGQrXHMqJiZbXiciXSsuI2ZpcnN0ZGF0YWdsb2JhbGdhdGV3YXlfY2NfY2lkW14+XSs+XHMqXGQrXClccypce1teXHtdK1x7XHMqdXJsOlxzKi5baHRwc117NCx9OlteXC5dK1wuXHcrLmdhdGVcLnBocFw/dG9rZW49XHcrW15cKF0rXCguXDJbXjpdKzpccyouUE9TVC4sW148XSs8LnNjcmlwdD5+Ijt9czo1MzoiPnZhciBwbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOyBwby50eXBlID0iO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDQyIjtpOjE7czoyNTA6In48c2NyaXB0XHN0eXBlPS50ZXh0LmphdmFzY3JpcHQuPnZhclxzKihwbylccyo9XHMqZG9jdW1lbnQuY3JlYXRlRWxlbWVudFwoLnNjcmlwdC5cKTtccypcMS50eXBlXHMqPVxzW147XSs7XHMqXDEuYXN5bmNccyo9XHMqdHJ1ZTtccypcMS5zcmNccyo9Li4uLlx3K1wuY29tLi4uLi5cLmNzc1w/aWQ9XGQrLjtccyp2YXJccypzW15cW10rXFtcZFxdO1xzKlx3LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlXChcMSxccypcd1wpOzwuc2NyaXB0Pn4iO31zOjYzOiJ8c2NyaXB0fGRvY3VtZW50fGpzfGh0dHBzfHNyY3xjcmVhdGVFbGVtZW50fHZhcnx0cnlzb21ldGhpbmduZXciO2E6Mjp7aTowO3M6MjA6ImluamVjdGVkLmpzX2V2YWwuMDA0IjtpOjE7czoyNTU6In48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5ldmFsXChbXjtdKztpZlwoIS4uLnJlcGxhY2VbXlx7XSt7d2hpbGVcKChcdyktLVteXFtdK1xbXDEudG9TdHJpbmdbXlxbXStcW1wxXF1cfFx8XDEudG9TdHJpbmdbXlx7XSt7cmV0dXJuXHMqXHdbXlwrXStcKy5cfTtcMT1cZFx9W15cfF0rXHxzY3JpcHRcfGRvY3VtZW50XHxqc1x8aHR0cHNcfHNyY1x8XHcrXHxcdytcfHRyeXNvbWV0aGluZ25ld1teXHtdK1x7XH1cKVwpPC5zY3JpcHQ+fiI7fXM6Mjc6Ii54eXovanMvc3RhdC5qcyI+PC9zY3JpcHQ+PCI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuanNfbG9jYXRpb25fcmVwbGFjZS4wMDEiO2k6MTtzOjE4MjoifjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuXHMqc3JjPS5baHRwc117NCx9OlteXC5dK1wueHl6LmpzLnN0YXRcLmpzLj48LnNjcmlwdD48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5ccypsb2NhdGlvbi5yZXBsYWNlXCguW2h0cHNdezQsfTpbXlw/XStcP1teXCldK1wpO1xzKjwuc2NyaXB0Pn4iO31zOjQ0OiJyZWRpcmVjdF9iYXNlL3JlZGlyZWN0LmpzIiBpZD0iMTM3MTQ5OTE1NTU0NSI7YToyOntpOjA7czoyOToiaW5qZWN0ZWQubWFnZW50b19yZWRpcmVjdC4wMDEiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czo0NzoiZG9jdW1lbnQuY3VycmVudFNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSgiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLm1hZ2VudG9fcmVkaXJlY3QuMDAyIjtpOjE7czoyNzE6In48c2NyaXB0XHMqdHlwZT1bXj5dKz5ccyp2YXJccyhcdyk9ZG9jdW1lbnQ7dmFyXHMqKFx3KT1cMS5jcmVhdGVFbGVtZW50XCguc2NyaXB0LlwpO1xzKlwyLnNyYz1bXlw/XStcP1x3Kz1zY3JpcHRbXjtdKztccyppZlxzKlwoZG9jdW1lbnQuY3VycmVudFNjcmlwdFwpXHMqXHtccypkb2N1bWVudC5jdXJyZW50U2NyaXB0W15cKF0rXChcMixccypkb2N1bWVudC5jdXJyZW50U2NyaXB0XCk7W14nXSsnaGVhZCdcKVxbXGRcXVteXChdK1woXDJcKTtccypcfVxzKjwuc2NyaXB0Pn4iO31zOjQyOiI3MiwgOTcsIDk5LCAxMDcsIDEwMSwgMTAwLCAzMiwgNjYsIDEyMSwgMzIiO2E6Mjp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAxNCI7aToxO2k6MTE7fXM6MjU6Ij1yO2lbcl09aVtyXXx8ZnVuY3Rpb24oKXsiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9kb2N1bWVudC4wMjUiO2k6MTtzOjE4NjoifjxzY3JpcHQ+XHMqXChmdW5jdGlvblwoaSxzLG8sZyxyLGEsbVwpXHsoXHcpXFsuU3RhdHNPYmplY3QuXF09KFx3KTtcMVxbXDJcXT1cMVxbXDJcXVx8XHxbXlx9XStcfSxcMVxbXDJcXVteXH1dK1x9XClcKHdpbmRvdyxkb2N1bWVudCwuc2NyaXB0Li4uaHR0cFteO10rO1xzKlx3K1woLmNyZWF0ZS5cKTtccyo8LnNjcmlwdD5+Ijt9czo0NDoiXHg1Rlx4NkRceDYxXHg3NVx4NzRceDY4XHg3NFx4NkZceDZCXHg2NVx4NkUiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLm1hbHdhcmVfZ2VuZXJpYy4wMDEiO2k6MTtzOjI0NDoifjxzY3JpcHQ+dmFyXHMqXzB4KFx3Kyk9XFsuLng1Ri54NkQueDYxLng3NS54NzQueDY4Lng3NC54NkYueDZCLng2NS54NkVbXlxdXStcXTtpZlwoZG9jdW1lbnRcW18weFwxXFtbXlx8XStcfGJiW15cfF0rXHxtZWVnb1wpXC5cK21vYmlsZVx8YXZhbnRnb1tePl0rPnwoPHNjcmlwdD5cKGZ1bmN0aW9uXChhLGJcKVteXHxdK1x8YmJbXlwpXStcKVwuXCttb2JpbGVcfGF2YW50Z29cfFteJ10rJ2h0dHA6W148XSs8LnNjcmlwdD4pfiI7fXM6NzI6Int2YXIgcnMgPSB0aGlzLnJlYWR5U3RhdGU7IGlmIChycyAmJiBycyAhPSAnY29tcGxldGUnICYmIHJzICE9ICdsb2FkZWQnKSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuanNfdW53YW50ZWRfYWRzLjAxMCI7aToxO2k6MTE7fXM6MzA6Ilx1MDA3M1x1MDA3MFx1MDA2Y1x1MDA2OVx1MDA3NCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxNiI7aToxO3M6MjA5OiJ+PHNjcmlwdD5cKGZ1bmN0aW9uXChcKVx7ZnVuY3Rpb25ccyooXHcrKVwoKFx3KylcKVx7XDI9XDJcWyIudTAwNzMudTAwNzAudTAwNmMudTAwNjkudTAwNzQiXF1bXntdK3tpZlwoXHcrXFsiW15cXV0rXF09PVx3K1wpW15cfF0rXHxcfFteXHxdK1x8XHxcdys9PVx3K1tefV0rXH1cfVx9aWZcKChcdyspJiZcM1whPVwxW148XSs8XHcrXFtcMVtePF0rPC5zY3JpcHQ+fiI7fXM6NjA6ImlmJTI4JTI4biU2NSU3NyUyMFIlNjVnRXhwJTI4JTI3b24lNjVwYWclNjUlN0NjaCU2NWNrbyU3NSU3NCI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMzQiO2k6MTtzOjEyODoifjxzY3JpcHQ+dGhpc1xbLmV2YWwuXF1cKHRoaXNcWy51bmVzY2FwZS5cXVwoLmlmJTI4JTI4biU2NSU3NyUyMFIlNjVnRXhwJTI4JTI3b24lNjVwYWclNjUlN0NjaCU2NWNrbyU3NSU3NFteJyJdKy5cKVwpOzwuc2NyaXB0Pn4iO31zOjMwOiIuY2MvbWVkaWEvY29va2llLmpzIj48L3NjcmlwdD4iO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDM1IjtpOjE7aToxMTt9czoyNzoiJTY2JTc1JTZlJTYzJTc0JTY5JTZmJTZlJTIwIjthOjI6e2k6MDtzOjIwOiJpbmplY3RlZC5qc19ldmFsLjAwMiI7aToxO3M6MjEwOiJ+PGh0bWw+XHMqPGhlYWQ+XHMqPC5oZWFkPlxzKjxib2R5PlxzKjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuPlxzKjwhLS1ccypldmFsXCh1bmVzY2FwZVwoLiU2NiU3NSU2ZSU2MyU3NCU2OSU2ZiU2ZSUyMFteXD5dKz5ccyo8LnNjcmlwdD5ccyo8bm9zY3JpcHQ+PGk+SmF2YXNjcmlwdFxzKnJlcXVpcmVkPC5pPjwubm9zY3JpcHQ+XHMqXHMqPC5odG1sPn4iO31zOjM0OiI5NCUyNUYtJTAzNCUzQiFSdCUzQjglM0Y2WDYtJTI0Z3dWIjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAzNiI7aToxO3M6MjQwOiJ+PHNjcmlwdD5ccyp2YXJccyooXHcrKT1ce1x3OmZ1bmN0aW9uXCgoXHcpLChcdylcKVx7cmV0dXJuXHMqXDJcK1wzW14nXSsnZnVuY3Rpb24nXD9cMVteIl0rIjk0JTI1Ri0lMDM0JTNCIVJ0JTNCOCUzRjZYNi0lMjRnd1ZbXjxdKzxbXjxdKzxcd1xbXDFbXjxdKzxcKFxkKyxcZCtcKVw/W15cXV0rXF0sXDFbXjxdKzxbXjxdKzxcZCtcP1tePl0rPltefV0rXH1cfWNhdGNoXChcd1wpXHtcfVx9XH1bXjxdKzwuc2NyaXB0Pn4iO31zOjI3OiIuc3BsaXQoJ3wnKSwwLHt9KSk8L3NjcmlwdD4iO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmpzX3JlZGlyZWN0LjAxMCI7aToxO3M6MjYzOiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+ZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSxkXClceyhcdyk9ZnVuY3Rpb25cKChcdylcKVx7cmV0dXJuXHMqXDIudG9TdHJpbmdbXjtdKztpZlwoXCFbXlx7XStce3doaWxlXChcMlteXFtdK1xbXDJbXjtdKztcMVteO10rO1wyW15cKF0rXChcMlteXHxdK1x8ZG9jdW1lbnRcfHNcfGN1cnJlbnRTY3JpcHRcfHNjcmlwdFx8dmFyW14nXSsnLnNwbGl0XCguXHwuXClcLFxkLFx7XH1cKVwpPC5zY3JpcHQ+fiI7fXM6NjM6IihuZXcgRnVuY3Rpb24oU3RyaW5nLmZyb21DaGFyQ29kZSgxOSAtIDksIDEyNiAtIDgsIDEwMCAtIDMsIDEyMiI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxNyI7aToxO3M6MjExOiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+XChuZXdccypbRmZddW5jdGlvblwoU3RyaW5nLmZyb21DaGFyQ29kZVwoMTlccyotXHMqOSxccyoxMjZccyotXHMqOCxccyoxMDBccypcLVxzKjMsXHMqMTIyW15cKF0rXCguXHcrLi5zcGxpdFwoLi5cKS5yZXZlcnNlXChcKS5qb2luXCguLlwpXCkuc3R5bGUuZGlzcGxheVxzKlw9XHMubm9uZS48LnNjcmlwdD5+Ijt9czo0ODoiZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyg/Ol58OyApJytuYW1lIjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAzNyI7aToxO3M6MzA1OiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+Li5ccyooPFwhXFtDREFUQVxbXHMqKVxzKnZhclxzKihcd3syMCx9KT1ce1xzKnNuZDpudWxsLFxzKlx3ezIwLH06Lmh0dHBbXiciXSsnLFxzKm15aWRbXiciXSsuXChcPzpcXlx8O1xzKlwpW147XSs7XF1cKlwpJ1wpXCk7XHMqcmV0dXJuXHMqbWF0Y2hlc1teJyJdKydzZXRpZGRbXixdKyxccypjbGtcOmZ1bmN0aW9uXChcKVx7XHMqXDIuc25kPW51bGw7W14nXSsuLlwpXHtubWU9XHc7XH1ccypcMltePF0rPFtePF0rPFx3Ky5sZW5ndGhbXixdKy5cMltePF0rPC5zY3JpcHQ+fiI7fXM6NTE6Ilx4NzdceDZmXHg2ZVx4NDNceDczXHgzOFx4NGJceDcxJywnXHg0Y1x4NTdceDM4XHg1NiI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMzgiO2k6MTtzOjE0MjoifjxzY3JpcHQ+XHMqdmFyXHMqXF8weFx3K1w9XFsuLng3Ny54NmYueDZlLng0My54NzMueDM4Lng0Yi54NzEuLi4ueDRjLng1Ny54MzgueDU2W148XSs8W148XSs8XzB4XHcrO19bXjpdKzotLXRoaXNcW1tePF0rPF8weFtePF0rXHMqPC5zY3JpcHQ+fiI7fXM6MTU6ImVhc3lhY2Nlc3MubW9iaSI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNzAiO2k6MTtzOjg4OiJ+PHNjcmlwdFxzKmFzeW5jXHMqPVxzKi50cnVlLlxzKnNyY1xzKj0uaHR0cChzKT9cOi4uWyhlYXN5YWNlcy5tb2JpKV0rXC9bXj5dKz48LnNjcmlwdD5+Ijt9czoxMjc6Ii93cC1jb250ZW50Ly0tcGx1Z2lucy5vbGQvd3AtcG9wdXAtc2NoZWR1bGVyL2VkaXRvci9qc2NyaXB0cy90aW55X21jZS9wbHVnaW5zL2lubGluZXBvcHVwcy9za2lucy9jbGVhcmxvb2tzMi9hY3Rpb25fcmVxdWVzdC5waHAiO2E6Mjp7aTowO3M6MjI6ImJhY2tkb29yLndwLXBvcF91cC4wMDEiO2k6MTtzOjEwOiJzY3JpcHRfc3JjIjt9czoyMzoiYXNydi1hLmFrYW1haWhkLm5ldC5zZC8iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDU4IjtpOjE7czo3MToifjxzY3JpcHQgaWQ9Ilx3KyIgc3JjPSIuLmFzcnYtYS5ha2FtYWloZC5uZXQuc2QvXGQrL1xkK1wuanMiPjwvc2NyaXB0Pn4iO31zOjMyOiJ2YXIgY29va2llY29uc2VudF9pZCA9ICc5ZGY0Y2ZhNiI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuanNfdW53YW50ZWRfYWRzLjAwOSI7aToxO3M6MjA3OiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqd2luZG93LmNvb2tpZWNvbnNlbnRfb3B0aW9uc1xzKj1ccypcey5tZXNzYWdlLjouVGhpc1xzKndlYnNpdGVccyp1c2VzXHMqY29va2llc1teLF0rLC5kaXNtaXNzLjouR290XHMqaXRcIVteO10rO1xzKnZhclxzKmNvb2tpZWNvbnNlbnRfaWRccyo9XHMqJzlkZjRjZmE2W14nXSsnOzwuc2NyaXB0Pn4iO31zOjgyOiI8aDU+PHNjcmlwdCBzcmM9aHR0cDovL3B1cnBsZS5zbWFydGVuZXJneW1vZGVsLmNvbS9qcy9qcXVlcnkubWluLmpzPjwvc2NyaXB0PjwvaDU+IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDIiO2k6MTtpOjEyO31zOjc4OiI8aDU+PHNjcmlwdCBzcmM9aHR0cDovL2hnLnNtYXJ0ZW5lcmd5bW9kZWwuY29tL2pzL2pxdWVyeS5taW4uanM+PC9zY3JpcHQ+PC9oNT4iO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmZha2VfanF1ZXJ5LjAwMyI7aToxO2k6MTI7fXM6NzQ6IjxoNT48c2NyaXB0IHNyYz1odHRwOi8vYXF1YS5rYXJlbmVncmVuLmNvbS9qcy9qcXVlcnkubWluLmpzPjwvc2NyaXB0PjwvaDU+IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDQiO2k6MTtpOjEyO31zOjczOiI8aDU+PHNjcmlwdCBzcmM9aHR0cDovL2VxZS50b29sYmFyaW5jLmNvbS9qcy9qcXVlcnkubWluLmpzPjwvc2NyaXB0PjwvaDU+IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDUiO2k6MTtpOjEyO31zOjc4OiI8aDU+PHNjcmlwdCBzcmM9aHR0cDovL29vLnNtYXJ0ZW5lcmd5bW9kZWwuY29tL2pzL2pxdWVyeS5taW4uanM+PC9zY3JpcHQ+PC9oNT4iO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmZha2VfanF1ZXJ5LjAwNiI7aToxO2k6MTI7fXM6NzQ6IjxoNT48c2NyaXB0IHNyYz1odHRwOi8vbHg1Yi50b29sYmFyaW5jLmNvbS9qcy9qcXVlcnkubWluLmpzPjwvc2NyaXB0PjwvaDU+IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDciO2k6MTtpOjEyO31zOjI5OiItJTdCJTI1JTI0MiUyQjA2MiUzRiUzRWklM0QwOSI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMzMiO2k6MTtzOjI0MToifjxzY3JpcHQ+XHMqdmFyXHMqXHd7NCx9PVx7TjpmdW5jdGlvblwoeCx5XClce3JldHVyblxzKng+eTtcfSxbXlwmXStcJjB4ZmZmZjt2YXJccypcd3sxfT1bXiJdKyJcIVwlXGR7Mn1cLlxkezF9LSU3QiUyNSUyNDIlMkIwNjIlM0YlM0VpJTNEMDlbXiJdKyJcKTtmb3JcKHZhclxzKlg9MCxGPTA7WDxCXC5sZW5ndGg7WFwrXCssRlwrXCtbXiddKydcflx8XC4nXCk7cmV0dXJuW148XSs8W148XSs8WltePF0rPC5zY3JpcHQ+fiI7fXM6MTM6ImFuYWxpdGljb3NjZG4iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDY1IjtpOjE7czo2MzoifjxzY3JpcHRccypzcmNccyo9XHMqLmh0dHAocyk/Oi4uYW5hbGl0aWNvc2NkblwuW148XSs8LnNjcmlwdD5+Ijt9czoxMjU6ImZvcih2YXIgej0wLEk9MDt6PFMubGVuZ3RoO3orKyxJKyspe2lmKEk9PT1KLmxlbmd0aCl7ST0wO31mKz1TdHJpbmcuZnJvbUNoYXJDb2RlKFMuY2hhckNvZGVBdCh6KV5KLmNoYXJDb2RlQXQoSSkpO31mPWYuc3BsaXQoIjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZnVuY3Rpb24uMDE0IjtpOjE7czo2MjY6In48c2NyaXB0PlxzKnZhclxzKlx3K1xzKj1ccyp7XHcrXDpmdW5jdGlvblwoXCl7cmV0dXJue1x3K1w6ZnVuY3Rpb25cKFx3K1wpe3ZhclxzKlx3K1xzKj1ccyouLixcdytccyo9XHMqZGVjb2RlVVJJQ29tcG9uZW50XChcIlteXCJdK1wiXCk7Zm9yXCh2YXJccypcdys9MCxcdys9MDtcdys8XHcrXC5sZW5ndGg7XHcrXCtcKyxcdytcK1wrXCl7aWZcKFx3Kz09PVx3K1wubGVuZ3RoXClccyp7XHcrPTA7fVx3K1wrXHMqPVxzKlN0cmluZ1wuZnJvbUNoYXJDb2RlXChcdytcLmNoYXJDb2RlQXRcKFx3K1wpXF5cdytcLmNoYXJDb2RlQXRcKFx3K1wpXCk7fVx3Kz1cdytcLnNwbGl0XCguXH5cfFwuLlwpO3JldHVyblxzKmZ1bmN0aW9uXChcdytcKVx7cmV0dXJuXHMqW15ce10rXHtyZXR1cm5ccyp0eXBlb2ZbXlwrXStcK1x3KztcfVtefV0rfSxbXjtdKzt9fTtcKHR5cGVvZlxzKndpbmRvdz09PS5vYmplY3QuXD93aW5kb3c6Z2xvYmFsXClbXntdK3tzZXRUaW1lb3V0XChmdW5jdGlvblwoXCl7alF1ZXJ5XChmdW5jdGlvblwoXCRcdytcKVxzKlx7XCRcdytcKGRvY3VtZW50XClcLm9uW146XSs6W15cJF0rXCRcdytcLmFqYXhbXlwkXStcJFx3K1teXH1dK1x9XH1jYXRjaFwoXHcrXClbXlw8XSs8LnNjcmlwdD5+Ijt9czozODoiZXhvY2xpY2suY29tL3NwbGFzaC5waHA/aWR6b25lPTIzMzI5MTciO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLmpzX3Vud2FudGVkX2Fkcy4wMDUiO2k6MTtzOjIxMToifjxzY3JpcHRccyp0eXBlXHMqPVxzKi50ZXh0LmphdmFzY3JpcHQuc3JjXHMqPVxzKi5odHRwOi4ubmVlZGFsb2dvXC5uZXQudHJhY2tpbmdcLmpzLj48LnNjcmlwdD5ccyo8c2NyaXB0XHMqdHlwZVxzKj1ccyoudGV4dC5qYXZhc2NyaXB0LlxzKnNyY1xzKj1ccyouaHR0cDouLlsoPzpcdytcc1wuKV0rLnNwbGFzaFwucGhwXD9pZHpvbmU9MjMzMjkxNy4+PC5zY3JpcHQ+fiI7fXM6MjQ6ImlmICh4aHIuc3RhdHVzID09IDIwMCkgeyI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMDIiO2k6MTtzOjMyMzoifjxzY3JpcHRbXlwuXStcLmFkZEV2ZW50TGlzdGVuZXJcKCJET01Db250ZW50TG9hZGVkIixccypzdGFydFwpO1xzKmZ1bmN0aW9uXHMqc3RhcnQuLlx7XHMqdmFyXHMqeGhyW147XSs7XHMqeGhyXC5vcGVuXCguR0VULiwuLmh0dHBbXlwpXStcKTtccyp4aHJcLnNlbmRcKFwpO1xzKmlmXHMqXCh4aHJbXlwoXStcKC5kaXYuLjtccyplbGVtZW50LmlubmVySFRNTFxzKj1ccyouPGlmcmFtZVxzKnNyYz0uXCt4aHIuW148XSs8LmlmcmFtZVtePV0rPVxzKi5kaXZcdysuO1xzKlteXC5dKy5ib2R5W15cKF0rXChlbGVtZW50LjtccypcfVxzKn1ccypbXjxdKzwuc2NyaXB0Pn4iO31zOjQwOiJpZigobmV3IFJlZ0V4cCgnb25lcGFnZXxjaGVja291dHxvbmVzdGVwIjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAyOCI7aToxO3M6Nzc0OiJ+XDxzY3JpcHRccyp0eXBlXD0udGV4dFwvamF2YXNjcmlwdC5cPlxzKlw8XCFcLVwtXHMqdmFyXHMqXHcrXD1ce1xzKlx3K1w6bnVsbFwsXHMqXHcrXDouXGIoaHR0cHN8aHR0cClcYlw6XC9cL1x3K1wuXHcrXC9cdytbKD86XHdcL1x3XC9cd1wvXHdcLlx3KV0rLlwsXHMqbXlpZFw6XChmdW5jdGlvblwoXHcrXClce1xzKnZhclxzKm1hdGNoZXNcPWRvY3VtZW50XC5jb29raWVcLm1hdGNoW15cK10rXCtuYW1lXC5yZXBsYWNlXChbXj1dK1w9W14nXSsnXClcKVw7W15cfF0rXHxcfFwoZnVuY3Rpb25cKFwpXHtccyp2YXJccypcdytcPW5ld1xzKkRhdGVcKFwpXDtbXn1dK1x9XClcKFwpXCxccypjbGtcOmZ1bmN0aW9uXChcKVx7W15cOl0rXDpmdW5jdGlvblwoXClce1xzKnRyeVx7W15cfV0rXH1lbHNlXHtccypiXC5hdHRhY2hFdmVudFwoLm9uY2xpY2suXCxbXlx9XStcfVxzKlx9XHMqXH1ccyp2YXJccypcdytcPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGxbXlwhXStcIVw9bnVsbFwpXHtccyp2YXJccypcdytcPVteXDtdK1w7XHMqdmFyXHMqXHcrXD1idG9hW15cO10rXDtccyp2YXJccypodHRwXD1uZXdccypYTUxIdHRwUmVxdWVzdFwoXClcO1xzKmh0dHBcLm9wZW5cKC5QT1NULlteXDtdK1w7XHMqaHR0cFwuc2V0UmVxdWVzdEhlYWRlclwoW15cO10rXDtccypodHRwXC5zZW5kXChbXlw7XStcO1xzKlx9W15cfV0rXH1bXiddKy5vbmVwYWdlXHxjaGVja291dFx8b25lc3RlcC5cLC5naS5cKVwpW15cO10rXDtccypcfVxzKlwtXC1cPlxzKlw8XC9zY3JpcHRcPn4iO31zOjIxOiJmdW5jdGlvbiBwNmU5MGY1NDYwOTciO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9mdW5jdGlvbi4wMDMiO2k6MTtzOjQ5OiJ+PHNjcmlwdFtePF0qZnVuY3Rpb24gcDZlOTBmNTQ2MDk3W148XSo8LnNjcmlwdD5+Ijt9czo2MjoiPHNjcmlwdCBhc3luYz0iYXN5bmMiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvL2dvLm1vYmlzbGEiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9kb2N1bWVudC4wMDIiO2k6MTtzOjI3MDoifig8c2NyaXB0W1xzXSooYXN5bmNbXHNdKj1bXHNdKi5hc3luYy5bXHNdKik/dHlwZVtcc10qPVtcc10qWyciXXRleHQuamF2YXNjcmlwdFsnIl1bXHNdKnNyYz1bJyJdW14nIl0rKGFwdXxwdXNodXB8dGlkKVteJyJdK1snIl0+W1xzXSo8LnNjcmlwdD5bXHNdKil7Mix9PFtTc11jcmlwdCBbTGxdYW5ndWFnZVtcc10qPVtcc10qLltKal1hdmFzY3JpcHQuPltcc10qZG9jdW1lbnQud3JpdGUudW5lc2NhcGUuLlslMC05QS1GXXs1MCx9LlwpXCk7W1xzXSo8LltTc11jcmlwdD5+Ijt9czoxNzI6IjxzY3JpcHQ+YWxlcnQoJ2hhY2tlZCBieSBIbWVpNycpPC9zY3JpcHQ+PGgxPmhhY2tlZCBieSBIbWVpNzxiciAvPjwvaDE+PGRpdiBzdHlsZT1iYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOz48YnIgLz48aDE+PGZvbnQgY29sb3I9Y3lhbj5oYWNrZWQgYnkgSG1laTc8L2ZvbnQ+PC9oMT48YnIgLz48L2Rpdj4iO2E6Mjp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAxMiI7aToxO2k6MTI7fXM6NTA6IikuaW5kZXhPZihsb2NhdGlvbi5ob3N0KT09LTEpIHtsMVtpXS5zdHlsZS5kaXNwbGF5IjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZG9jdW1lbnQuMDAzIjtpOjE7czoxNTk6In48c2NyaXB0PnZhciBsMSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lLi5hLi47Zm9yLmk9MDsgaTxsMS5sZW5ndGg7W15cfTtdKz9ocmVmLi4uaW5kZXhPZi5sb2NhdGlvbi5ob3N0Lj09LTEuIC5sMS5pLi5zdHlsZS5kaXNwbGF5PSJub25lIjtcfVx9PC5zY3JpcHQ+fiI7fXM6NjI6IjxzY3JpcHQgbGFuZ3VhZ2U9ImphdmFzY3JpcHQiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+dmFyIF8wMTE9IjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAwMyI7aToxO3M6ODk6In48c2NyaXB0IGxhbmd1YWdlPSJqYXZhc2NyaXB0IiB0eXBlPSJ0ZXh0XC9qYXZhc2NyaXB0Ij52YXIgXzAxMS4qP18wMTFcKVwpXCk7PFwvc2NyaXB0Pn5pIjt9czoyMjoiOTEuMjM5LjE1LjYxL2dvb2dsZS5qcyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNTkiO2k6MTtzOjY1OiJ+PHNjcmlwdCB0eXBlPVsifCddLio5MVwuMjM5XC4xNVwuNjFcL2dvb2dsZVwuanNbXjxdKjxcL3NjcmlwdD5+aSI7fXM6NzoiZGdzZ3NkZyI7YToyOntpOjA7czoyMDoiYmFja2Rvb3IuanNfZXZhbC4wMDMiO2k6MTtzOjQxOiJ+PHNjcmlwdD4uKj9kZ3Nnc2RnLio/ZXZhbC4qPzxcL3NjcmlwdD5+aSI7fXM6MjI6ImRvY3VtZW50LndyaXRlKHVuZXNjYXAiO2E6Mjp7aTowO3M6MzM6ImluamVjdGVkLmpzX2RvY3VtZW50X2xvY2F0aW9uLjAwNCI7aToxO3M6NjE6In48c2NyaXB0Lio/ZG9jdW1lbnRcLndyaXRlXCh1bmVzY2FwZVwoLio/O2RGXCguKj88XC9zY3JpcHQ+fmkiO31zOjk6IjA5MTk2ODM3NiI7YToyOntpOjA7czozMzoiaW5qZWN0ZWQuanNfZG9jdW1lbnRfbG9jYXRpb24uMDAyIjtpOjE7czo5NjoifjxzY3JpcHQgbGFuZ3VhZ2UuKj85MDkxOTY4Mzc2Lio/U3RyaW5nLmZyb21DaGFyQ29kZS4qP2RvY3VtZW50LndyaXRlLio/ZG5uSW5pdFwoXCk7PFwvc2NyaXB0Pn5pIjt9czo5NDoiY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO2VsLmlubmVySFRNTD0iJiM4MjsmIzEwMTsmIzEwMjsmIzEwMTsmIzExNDsmIzEwMTsmIzExMDsmIzk5OyYjMTAxOyI7YToyOntpOjA7czozMDoiaW5qZWN0ZWQuanNfY3JlYXRlX2VsZW1lbnQuMDAxIjtpOjE7czo5MjoifjxzY3JpcHQ+ZWw9ZG8uKj9jdW1lbnQuY3JlYXRlRWxlbWVudC4uZGl2Li47ZWwuaW5uZXJIVE1MPSImIzgyOyYjMTAxOy4rP2VcKHNcKTs8XC9zY3JpcHQ+fnMiO31zOjE3OiI7fWRvY3VtZW50LndyaXRlKCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwMSI7aToxO3M6MTMxOiJ+PHNjcmlwdCBbXj5dKz52YXJccypbXj5dK2RvY3VtZW50LndyaXRlXHMqLi48LlxzKlwrXHMqW2Etel1cW1swLTldXF1cKy5ccyouXCtbYS16XVxbWzAtOV1cXVwrLj5bXj5dK1thLXpdXFtbMC05XVxdW147XSs7PC5zY3JpcHQ+fiI7fXM6MzI6IjoiIiwnY2VudGVyT25TY3JvbGwnOiBmYWxzZX0pO30pIjthOjI6e2k6MDtzOjI4OiJpbmplY3RlZC5qc19jbGlja19oaWphY2suMDAxIjtpOjE7czo2MDoifiIiLC5jZW50ZXJPblNjcm9sbC46IGZhbHNlLi47Li5ccyo8LnNjcmlwdD4uKz88c2NyaXB0PlwoXHt+Ijt9czozNzoiLy9zZXJ2ZXJhZHMubmV0LzU5OWI0NzI2MDM5NGRlYjJkOC5qcyI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuanNfdW53YW50ZWRfYWRzLjAwMSI7aToxO3M6MTc4OiJ+PHNjcmlwdCBzcmM9LlwvXC9zZXJ2ZXJhZHNcLm5ldFwvNTk5YjQ3MjYwMzk0ZGViMmQ4LmpzLj48LnNjcmlwdD48c2NyaXB0IHNyYz0uLi5wdWxzZWFkbmV0d29yay5jb1tePF0rPC5zY3JpcHQ+KD86XHM/PGlmcmFtZSBbXj5dKz48LmlmcmFtZT5ccz8pPyg/OjxzY3JpcHQgc3JjW14+XSs+PC5zY3JpcHQ+KSp+Ijt9czoyOToiaW5wPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDAxIjtpOjE7czoxNDg6In48c2NyaXB0PlxzKnZhciBzbmRccyo9XHMqbnVsbDtbXlx9XStSZWdFeHAuLihvbmVwYWdlfGNoZWNrb3V0KVteXF5dK2lucD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsW15cXl0rc25kXHMqPW51bGw7XHMqc2V0VGltZW91dC4uc2VuZFtePl0rc2NyaXB0Pn4iO31zOjE1OiJmdW5jdGlvbiBMQ1dFSEgiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9mdW5jdGlvbi4wMDEiO2k6MTtzOjc3OiJ+PHNjcmlwdD4uZnVuY3Rpb24uLlx7ZnVuY3Rpb25ccypMQ1dFSEhbXj5dK2RvY3VtZW50XFtMQ1dFSEhbXjxdKzs8LnNjcmlwdD5+cyI7fXM6MjQ6ImZ1bmN0aW9uKCl7TENXRUhIPUxDV0VISCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAwMiI7aToxO3M6NzY6In48c2NyaXB0Pi5mdW5jdGlvbi4uXHtccypMQ1dFSEg9TENXRUhIW14+XStkb2N1bWVudFxbTENXRUhIW148XSs7PC5zY3JpcHQ+fnMiO31zOjQyOiJsb2NhdGlvbi5yZXBsYWNlKCdodHRwOi8vY2xpY2snKygxODkrOTkpKyciO2E6Mjp7aTowO3M6MzM6ImluamVjdGVkLmpzX2RvY3VtZW50X2xvY2F0aW9uLjAwMyI7aToxO3M6ODg6In48c2NyaXB0W148XStsb2NhdGlvbi5yZXBsYWNlLi5odHRwOi4uY2xpY2suLi4xODkuOTlbXjxdK2RvY3VtZW50LndyaXRlW15cbl0rOzwuc2NyaXB0Pn4iO31zOjg6Im1haW4xLmpzIjthOjI6e2k6MDtzOjMwOiJpbmplY3RlZC5qc19jcmVhdGVfZWxlbWVudC4wMDIiO2k6MTtzOjE0NjoifjxzY3JpcHQ+W14+XStnY3NlXHMqPVxzKmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQuLnNjcmlwdC4uO1xzKmdjc2UudHlwZVtePl0rZ2NzZS5zcmNccypcPVxzKi5odHRwW147XSttYWluMS5qc1tePl0raW5zZXJ0QmVmb3JlLmdjc2VbXjxdKzwuc2NyaXB0Pn4iO31zOjI5OiJzcGxpdCgiIikucmV2ZXJzZSgpLmpvaW4oIiIpKSI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwNCI7aToxO3M6OTM6In48c2NyaXB0W148XStkb2N1bWVudC53cml0ZS4uPnRwaXJjcy48PltePl0rdHBpcmNzPC4uc3BsaXQuLi4uLnJldmVyc2UuLi5qb2luLltePl0rPC5zY3JpcHQ+fiI7fXM6MjA6InZhciBEU0VBNFc9ZG9jdW1lbnRbIjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZnVuY3Rpb24uMDA1IjtpOjE7czoxNTA6In48c2NyaXB0PlwoZnVuY3Rpb25cKFwpXHtmdW5jdGlvblxzKlx3Ky4oW0EtWjAtOV0rKS5ce1wxPVwxLi4udTAwNzMudTAwNzAudTAwNmMudTAwNjkudTAwNzRbXlxeXStzZXRUaW1lb3V0XCgoW0EtWjAtOV0rKSwxMDAuLlwyW14+XStcKFwpXCk7PC5zY3JpcHQ+fiI7fXM6MzY6Ijxicj48c2NyaXB0PndpbmRvdy5sb2NhdGlvbiA9ICJodHRwOiI7YToyOntpOjA7czozMzoiaW5qZWN0ZWQuanNfZG9jdW1lbnRfbG9jYXRpb24uMDA1IjtpOjE7czo1Njoifjxicj48c2NyaXB0PndpbmRvdy5sb2NhdGlvbiA9ICJodHRwOi4uW14iXSsiOzwuc2NyaXB0Pn4iO31zOjI5OiJnY3NlLnNyYyA9ICJodHRwOi8vbmlubmkub3JnLyI7YToyOntpOjA7czozMzoiaW5qZWN0ZWQuanNfZG9jdW1lbnRfbG9jYXRpb24uMDA2IjtpOjE7czo4MzoifjxzY3JpcHRbXn1dK3ZhciBnY3NlID0gZG9jdW1lbnRbXn1dK2djc2Uuc3JjID0gImh0dHBbXlx9XStuaW5uaS5vcmdbXj5dKzwuc2NyaXB0Pn4iO31zOjQ5OiI7IGlmKHBhdHJuLmV4ZWMoclVybCkpd2luZG93LmxvY2F0aW9uLmhyZWY9dG9Vcmw7IjthOjI6e2k6MDtzOjMzOiJpbmplY3RlZC5qc19kb2N1bWVudF9sb2NhdGlvbi4wMDciO2k6MTtzOjE1MDoifjxzY3JpcHQgdHlwZT0idGV4dC5qYXZhc2NyaXB0Ij4uLi48Li5DREFUQS5bXHNdKnZhciB0b1VybD0iaHR0cDpbXj5dK3ZhciBwYXRybj1bXj5dK3BhdHJuLmV4ZWMuclVybC4ud2luZG93LmxvY2F0aW9uLmhyZWY9dG9Vcmw7W1xzXSouLi4uLj48LnNjcmlwdD5+Ijt9czo4OiJncmVsb3NfdiI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMDUiO2k6MTtzOjEyNDoifjxzY3JpcHQgdHlwZT0idGV4dC5qYXZhc2NyaXB0W15AXSt2YXIgZ3JlbG9zX3ZbXkBdK2lmXChcKG5ldyBSZWdFeHBcKC5vbmVwYWdlXHxjaGVja291dFx8b25lc3RlcFteXH1dK1x9XHMqLS0+XHMqPC5zY3JpcHQ+fiI7fXM6MTY6IjxzY3JpcHQ+IHZhciBfMHgiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDA2IjtpOjE7czoxMjA6In48c2NyaXB0PiB2YXIgKF8weFx3Kyk9W1xbJyJceGEtZkEtRjAtOSxcXV0rO2Z1bmN0aW9uXHMqKFx3KylcKChfMHhcdyspXClccypce1tePF0rLFx3K1xbXDFcW1xkK1xdXF1cKFwpXH1cfVx9PC5zY3JpcHQ+fiI7fXM6MTk6ImZ1bmN0aW9uIFNob3dGb3JtKF8iO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDA3IjtpOjE7czoxNDc6In48c2NyaXB0PlxzKnZhclteXV0rXTtpZlwoXCgubmV3LlJlZ0V4cFtefV0rfVxzKjwuc2NyaXB0PjxzY3JpcHQ+dmFyW157XSt7aWZcKCFkb2N1bWVudFteO10rO2Z1bmN0aW9uIFNob3dGb3JtW147XSs7d2hpbGVbXjtdKzt2YXJbXn1dK319PC5zY3JpcHQ+fiI7fXM6MzQ6IihuZXcgRnVuY3Rpb24oU3RyaW5nLmZyb21DaGFyQ29kZSgiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDA4IjtpOjE7czoyNjY6In48IS0tW1xzXSouXCpbXHNdKltcd10rW1xzXSpcKi5bXHNdKi0tPltcc10qKDxzY3JpcHQgdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5bXHNdKi57Mn1bXHNdKjwhXFtDREFUQVxbW14oXSspPy5uZXcgRnVuY3Rpb24uU3RyaW5nLmZyb21DaGFyQ29kZS5bXGRdK1tcc10qLVtcc10qW1xkXSssW147XStcKVwpXClcKFwpOyhbXl1dK11dPltcc10qPC5zY3JpcHQ+W148XSopPyhbXHNdKjwhLS1bXHNdKiguXCpbXHNdKik/W1x3XStbXHNdKihcKi5bXHNdKik/LS0+KXsxLH1+Ijt9czo2NToiPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPihuZXcgRnVuY3Rpb24oU3RyaW5nLmZyb21DaGFyQ29kZSgiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDA5IjtpOjE7czoyMDk6In48IS0tW1xzXSouXCpbXHNdKltcd10rW1xzXSpcKi5bXHNdKi0tPjxzY3JpcHQgdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj4ubmV3IEZ1bmN0aW9uLlN0cmluZy5mcm9tQ2hhckNvZGUuW1xkXStbXHNdKi1bXHNdKltcZF0rLFteKV0rXClcKVwpXChcKTsuLnNjcmlwdC5ccyo8IS0tXHMqXHcrXHMqLS0+PCEtLVtcc10qLlwqW1xzXSpbXHddK1tcc10qXCouW1xzXSotLT5+Ijt9czo3OToiZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3BheW1lbnRbY2NfbnVtYmVyXScpKS5sZW5ndGgpe249clswXS52YWx1ZS5yZXBsYWNlKCI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMTAiO2k6MTtzOjIwNToifjxzY3JpcHQgdHlwZT0idGV4dC5qYXZhc2NyaXB0Li52YXIgc2U9ZmFsc2U7c2V0SW50ZXJ2YWwuZnVuY3Rpb24uLi5pZi4uLi4uLi4uLi4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUuLnBheW1lbnRcW2NjX251bWJlci4uLi4ubGVuZ3RoLi4uLi4uLi4udmFsdWUucmVwbGFjZVtePl0rcmV0dXJuIGZhbHNlXH19XCl9fX19LFtcZF0rXCk7PC5zY3JpcHQ+fiI7fXM6NDQ6InJldCArPSBzdHJpbmcuY2hhckF0KGkpO30gcmV0dXJuIHJldDsgfWV2YWwoIjthOjI6e2k6MDtzOjIwOiJiYWNrZG9vci5qc19ldmFsLjAwNCI7aToxO3M6MzA3OiJ+PHNjcmlwdCBsYW5ndWFnZT0uamF2YXNjcmlwdC4gdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj52YXJccypcdysuLj1vUUtwa3lKOGRDSzBsR2J3Tm5MbjQyYnBSWFlqOUdiRU5EZnQxMmJrQlteJ10rJztmdW5jdGlvblxzKlx3K1woZGF0YVwpXHt2YXJccypcdys9IkFCQ0RFRkdIXHcrXCsuLiI7dmFyW147XSs7ZG9ce2gxPVteXCldK1wpXCk7W15cKF0rXChkYXRhLmNoYXJBdFwoaVwrXCtcKVwpO1tePl0rXD5cPlx3KyYweGZmW148XSs8ZGF0YVtePl0rPltefV0rXH1ccypyZXR1cm5ccypyZXQ7XHMqXH1ldmFsXChbXjtdKzsuLnNjcmlwdD5+Ijt9czoxMjoiZnVuY3Rpb24oXzB4IjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAxMSI7aToxO3M6MjI1OiJ+PHNjcmlwdD5ccyp2YXJccypfMHhcdys9XFsiLng2My54NjgueDYxLng2RS54NjcueDY1W15cXV0rXF0rO3NldFRpbWVvdXRcKGZ1bmN0aW9uXChcKVx7alF1ZXJ5XChmdW5jdGlvblwoXzB4XHcrKFteO10rOykrW14sXSssZGF0YTpbXjpdKzpfMHhbXixdKyxkYXRhVHlwZTpfMHhbXlx9XStcfSxlcnJvcjpmdW5jdGlvbltefV0rXH1cfVwpXH1cfVteLF0rLFxkezAsMTB9XClccy4uc2NyaXB0Pn4iO31zOjM3OiJqYXZhc2NyaXB0IiBpZD0ibWFnX2dvb2dsZV9hbmFseXRpY3MiIjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAxMiI7aToxO3M6Mjc2OiJ+PHNjcmlwdFxzdHlwZS4udGV4dC5qYXZhc2NyaXB0LlxzaWQ9Lm1hZ19nb29nbGVfYW5hbHl0aWNzLj5pZlxzXChcKG5ld1xzUmVnRXhwLi5vbmVwYWdlLmNoZWNrb3V0Lm9uZXN0ZS5bXlx7XStce1xzKmRvY3VtZW50LndyaXRlXCguLngzQ3NjcmlwdFxzc3JjLi5odHRwW146XSs6Li5bXlwuXStcLlteXC5dK1wuanMiXHNhc3luYz1bXj5dKz4ueDNDLnNjcmlwdD4uXCk7XHMqXH1cc1woZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZFwoLm1hZ19nb29nbGVbXjtdKztcczwuc2NyaXB0Ln4iO31zOjU2OiJkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWxpdmlsbGUiKS5zdHlsZS5kaXNwbGF5PSJub25lIiI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwNSI7aToxO3M6OTg6In48c2NyaXB0IHR5cGU9InRleHRcL2phdmFzY3JpcHQiPmlmXChkb2N1bWVudFwuZ2V0RWxlbWVudEJ5SWRcKCJhbGl2aWxsZSJcKSE9bnVsbFwpLio/PFwvc2NyaXB0Pn5zIjt9czozNjoiaHRtbCgiJiMxMDQ7JiMxMTY7JiMxMTY7JiMxMTI7JiMxMTU7IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDgiO2k6MTtzOjEzOToifjxzY3JpcHQgdHlwZT0idGV4dC5qYXZhc2NyaXB0Lj5qUXVlcnkuZnVuY3Rpb25bXiZdK3dpbmRvdy5sb2NhdGlvbi5ocmVmLC4ubWF0Y2guLm9uZXBhZ2UuY2hlY2tvdXRbXj5dKz4uLi5odG1sLi4oJiNbXGRdKzspK1tePF0rPC5zY3JpcHQ+fiI7fXM6MTY6InNraW4vaXRlbXMuanMiPjwiO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDYyIjtpOjE7czo2MzoifjxzY3JpcHRccypzcmMuLmh0dHBzLi4udXBzYnJva2VyLmNvbS5za2luLml0ZW1zLmpzLj48LnNjcmlwdC5+Ijt9czozNDoiaHR0cHM6Ly9vcmRlci1zZWN1cml0eS5jb20vc2NyaXB0cyI7YToyOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wNjMiO2k6MTtzOjk0OiJ+LnNjcmlwdFxzKnR5cGUuLnRleHQuamF2YXNjcmlwdC5ccypzcmMuLmh0dHBzLi4ub3JkZXItc2VjdXJpdHkuY29tLnNjcmlwdHMuXHcrLmpzLi4uLnNjcmlwdC5+Ijt9czoxNDoiZG9jdW1lbnQud3JpdGUiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9kb2N1bWVudC4wMTgiO2k6MTtzOjgxOiJ+PHNjcmlwdCBsYW5ndWFnZT0iamF2YXNjcmlwdCI+XHNkb2N1bWVudFwud3JpdGVcKC4qPyUzQyUyMSU0NCU0Ri4qPzxcL3NjcmlwdD5+aXMiO31zOjIyMDoiPHNjcmlwdD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gdW5lc2NhcGUoJyU0OCU2MSU2MyU0YiU2NSU0NCUyMCU0MiU3OSUyMCU0NCU3MiUyZSU1MyU0OCU0MSUzNiU0OCUyMCU3YyUyMCU0NiU3NSU2MyU2YiUyMCU0MSU2YyU2YyUyMCU1MyU2OSU3NCU2NSUyMCUzZCUyOSUyMCU1YiUyMCU0NyUzMiUzYSUyMCU0YiUzMSU1NiUzMyU2ZSUyMCU1ZCcpOzwvc2NyaXB0PiI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxOSI7aToxO2k6MTI7fXM6MjAyOiI8c2NyaXB0PmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUwgPSB1bmVzY2FwZSgnJTQ4JTYxJTYzJTZiJTY1JTY0JTIwJTQyJTc5JTIwJTQyJTQxJTRjJTQxJTIwJTUzJTRlJTQ5JTUwJTQ1JTUyJTIwJTRiJTc1JTcyJTY0JTY5JTczJTY4JTIwJTQ4JTYxJTYzJTZiJTY1JTcyJTIwJTU3JTYxJTczJTIwJTQ4JTY1JTcyJTY1Jyk7PC9zY3JpcHQ+IjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZG9jdW1lbnQuMDIwIjtpOjE7aToxMjt9czo2NjoiJTBkJTBhJTBkJTBhJTBkJTBhJTNjJTIxJTQ0JTRmJTQzJTU0JTU5JTUwJTQ1JTIwJTY4JTc0JTZkJTZjJTNlJTBkIjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZG9jdW1lbnQuMDIxIjtpOjE7czoxNTc6In48c2NyaXB0PmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUxccyo9XHMqdW5lc2NhcGVcKFsnIl0lMGQlMGElMGQlMGElMGQlMGElM2MlMjElNDQlNGYlNDMlNTQlNTklNTAlNDUlMjAlNjglNzQlNmQlNmMlM2UlMGQlMGFbXiciXStbJyJdK1wpOzwuc2NyaXB0Pn4iO31zOjMwOiIlNDglNDElNDMlNmIlNjUlNDQlMjAlNDIlNzklMjAiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9kb2N1bWVudC4wMjIiO2k6MTtzOjExOToifjxzY3JpcHQ+ZG9jdW1lbnRcLmRvY3VtZW50RWxlbWVudFwuaW5uZXJIVE1MXHM9XHN1bmVzY2FwZVwoJyU0OCU0MSU0MyU2YiU2NSU0NCUyMCU0MiU3OSUyMCU2MSU0NCU3MlteJ10rJ1wpOzwuc2NyaXB0Pn4iO31zOjE4MjoiIlx4NzRceDY1XHg3M1x4NzQiLCJceDZGXHg2RVx4NjVceDcwXHg2MVx4NjdceDY1XHg3Q1x4NkZceDZFXHg2NVx4NzBceDYxXHg2N1x4NjVceDYzXHg2OFx4NjVceDYzXHg2Qlx4NkZceDc1XHg3NFx4N0NceDYzXHg2OFx4NjVceDYzXHg2Qlx4NkZceDc1XHg3NFx4N0NceDZGXHg2RVx4NjVceDczXHg3NFx4NjVceDcwIiwiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDEzIjtpOjE7czo2NzoifjxzY3JpcHQ+W1xzXSp2YXIgXzB4W1x3XSs9XFsiLnhbXGRdKy54W14+XSs+PltePF0rW15cJF0rPC5zY3JpcHQ+fiI7fXM6MTQ5OiIiXHg2Rlx4NkVceDY1XHg3MFx4NjFceDY3XHg2NVx4N0NceDYzXHg2OFx4NjVceDYzXHg2Qlx4NkZceDc1XHg3NFx4N0NceDZGXHg2RVx4NjVceDczXHg3NFx4NjVceDcwXHg3Q1x4NjZceDY5XHg3Mlx4NjVceDYzXHg2OFx4NjVceDYzXHg2Qlx4NkZceDc1XHg3NCI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMTQiO2k6MTtzOjExOToifjxzY3JpcHQ+XHMqdmFyIChfMHhcdyspPVxbKFt4MC05QS1GYS1mXCwiJ117MTAwfSlbXjtdKys7ICppZlwoXCggK25ldyArUmVnRXhwXChcMVteXHtdKytce2RvY3VtZW50XFtcMVtePF0rKzwuc2NyaXB0Pn4iO31zOjE3MzoiIlx4NjFceDY0XHg2NFx4NDVceDc2XHg2NVx4NkVceDc0XHg0Q1x4NjlceDczXHg3NFx4NjVceDZFXHg2NVx4NzIiLCJceDVCXHg2Rlx4NkVceDYzXHg2Q1x4NjlceDYzXHg2Qlx4M0RceDI3XHg2Mlx4NjlceDZDXHg2Q1x4NjlceDZFXHg2N1x4MkVceDczXHg2MVx4NzZceDY1XHgyOFx4MjlceDI3XHg1RCIiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDE1IjtpOjE7czo5MToifjxzY3JpcHQ+XHMqdmFyIChfMHhcdyspPVxbKFt4MC05QS1GYS1mXCwiJ117MTAwfSlbXjtdKys7W15cbl0rZG9jdW1lbnRcW1wxW148XSsrPC5zY3JpcHQ+fiI7fXM6NzU6Ilx4NzBceDYxXHg3OVx4NkRceDY1XHg2RVx4NzRceDVGXHg2Nlx4NkZceDcyXHg2RFx4NUZceDYzXHg2M1x4NzNceDYxXHg3Nlx4NiI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMTYiO2k6MTtzOjg1OiJ+PHNjcmlwdD5ccyp2YXIgKF8weFx3Kyk9XFsoW3gwLTlBLUZhLWZcLCInXXsxMDB9KVteO10rKzsgKndpbmRvd1xbXDFbXjxdKys8LnNjcmlwdD5+Ijt9czo5MjoiXHg2OFx4NzRceDc0XHg3MFx4M0FceDJGXHgyRlx4NzdceDc3XHg3N1x4MkVceDY3XHg2MVx4NzJceDY0XHg2NVx4NkVceDY5XHg2RVx4NjdceDYxXHg2RVx4NjQiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDE3IjtpOjE7czoxNTM6In48c2NyaXB0PlxzdmFyXHNfMHhcdys9XHMqXFsiLng2OC54NzQueDc0Lng3MC54M0EueDJGLngyRi54NzdbXlxdXStcXTt2YXJcc215QXJyYXk9XFtfMHhbXjtdKzt2YXJcc3JhbmQ9bXlBcnJheVxbTWF0aFteO10rO3dpbmRvd1tePV0rPVxzcmFuZFxzPC5zY3JpcHQ+fiI7fXM6NTI6Ilx4NjhceDc0XHg3NFx4NzBceDczXHgzQVx4MkZceDJGXHg2QVx4NzFceDc1XHg2NVx4NzIiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDE4IjtpOjE7czo5Mjoifi5zY3JpcHQuXHN2YXJcc18weGNcZCs9XHMqXFtcIi54NjgueDc0Lng3NC54NzAueDczLngzQVteXF5dK1xeXF1cKS5nLi4weGMoW148XSs8KSsuc2NyaXB0Pn4iO31zOjMyOiJceDZDXHg2Rlx4NjNceDYxXHg3NFx4NjlceDZGXHg2RSI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMTkiO2k6MTtzOjExNDoifi5zY3JpcHQuXHN2YXJccypfMHhcdys9XHMqXFtcIi54NkMueDZGLng2My54NjEueDc0Lng2OS54NkYueDZFW15cXV0rXF07aWZcKFwoLm5ldy5SZWdFeHAuLjB4NVteXH1dK1x9XHMuLnNjcmlwdD5+Ijt9czozMjoiXHg2OFx4NzRceDc0XHg3MFx4NzNceDNBXHgyRlx4MkYiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDIwIjtpOjE7czoxMTA6In4uc2NyaXB0LlxzdmFyXHNfMHhcdys9XHMqXFtcIi54NjgueDc0Lng3NC54NzAueDczLngzQVteXF5dK1xeXF1cKS5nLi4weFteXC5dKy5HbGluayx0cnVlXCk7W148XStccyo8LnNjcmlwdC5+Ijt9czozMjoiXHg2Nlx4NzVceDZFXHg2M1x4NzRceDY5XHg2Rlx4NkUiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9mdW5jdGlvbi4wMDYiO2k6MTtzOjIzNjoifjxzY3JpcHRcc3R5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqLi48LlxbQ0RBVEFcW1xzKnZhclxzKl8weFx3Kz1cWy4ueDY2Lng3NS54NkUueDYzLng3NC54NjkueDZGLng2RVteXF1dK1xdO2lmXChccyp0eXBlb2ZccypqUXVlcnk9PVxzKl8weFx3K1teXCZdK1wmXCZbXixdKyxbXixdKyxce2NvbnRlbnQ6SlNPTlxbXzB4XHcrXFtcdytcXVxdXChfMHhcdytcKVx9XClcfVx9XHMqLi5cXVxdPlxzKjwuc2NyaXB0Pn4iO31zOjI0OiJceDYzXHg2Rlx4NkZceDZCXHg2OVx4NjUiO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmpzX3JlZGlyZWN0LjAwNyI7aToxO3M6MTc2OiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqO3ZhclxzKl8weFxkKz0uLi54NjMueDZGLng2Ri54NkIueDY5Lng2NS4sW147XSs7ZnVuY3Rpb25ccypfW15cfF0rXHxMaW51eFx8R29vZ2xlYm90W15cK10rXCtccypcZCtcKlteLF0rLFxkK1teX10rX18weFxkK1woXCk7XHMqPC5zY3JpcHQ+fiI7fXM6Mzc6IjExNnwxMTV8MTExfDExMnwxMDF8NTd8MTA4fDYyfDEwNXwxMjEiO2E6Mjp7aTowO3M6MjA6ImJhY2tkb29yLmpzX2V2YWwuMDA1IjtpOjE7czoyMTM6In48c2NyaXB0IHR5cGU9LnRleHQuamF2YXNjcmlwdC4+XHMqZXZhbFwoZnVuY3Rpb25cKHAsYSxjLGssZSxkXClce1teO10rO2lmXChcIS4uLnJlcGxhY2VcKC5cXi4sU3RyaW5nXClcKVx7d2hpbGVbXjtdKztcdys9ZnVuY3Rpb25bXixdKyxbXlx9XStcfVx9cmV0dXJuW15cKV0rXClcKVwpOy4uXGQrW15cLl0rLnNwbGl0XCguXHwuLixcZCssXHtcfVwpXCkuPC5zY3JpcHQ+fiI7fXM6MzQ6ImZ1bmN0aW9uKGcsaCxpLGYpe2kuZ2V0RWxlbWVudEJ5SWQiO2E6Mjp7aTowO3M6MzE6ImluamVjdGVkLmpzX2NyZWF0ZV9mdW5jdGlvbi4wMDciO2k6MTtzOjEwOToifjxzY3JpcHQ+XChmdW5jdGlvblwoZyxoLGksZlwpXHtpLmdldEVsZW1lbnRCeUlkXChmXCkuc3R5bGUuLmRpcy4uZy49Lm4uLmg7XH1cKVwoLnBsYXkuLC5vbmUuW147XSs7PC5zY3JpcHQ+fiI7fXM6MzA6Int3aGlsZShjLS0pcltlKGMpXT1rW2NdfHxlKGMpOyI7YToyOntpOjA7czoyMDoiYmFja2Rvb3IuanNfZXZhbC4wMTIiO2k6MTtzOjE3NToifjxcIS0tXHcrLS0+PHNjcmlwdFxzKnR5cGU9LnRleHQuXHcrLj5ldmFsXChmdW5jdGlvblwoW15cfV0rXH1bXlx9XStcfVxdO2U9W15cLl0rXC5yZXBsYWNlXChuZXdbXiddKycuLmInXCtlLmMuW148XSs8NlxzKnA9InE6czt1OnYiW14+XSs+PC42Pi4uLlx9Li4uO1teXHtdK1x7XH1cKVwpPC5zY3JpcHQ+fiI7fXM6MTY6Ii9hcHUucGhwP3pvbmVpZD0iO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLmpzX3Vud2FudGVkX2Fkcy4wMDIiO2k6MTtzOjg0OiJ+PHNjcmlwdFxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC5ccypzcmM9Li4uKFx3Ky4pcHViMnNydi5jb20uYXB1LnBocFtePl0rPjwuc2NyaXB0Pn4iO31zOjUzOiJGdW5jdGlvbihTdHJpbmcuZnJvbUNoYXJDb2RlKDE5IC0gOSwgMTI2IC0gOCwgMTAwIC0gMyI7YToyOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMjciO2k6MTtzOjIxNzoifjxcIS0tXHMqLlwqXHMqXHcrXHMqXCouLi0tPjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuPlwobmV3XHMqRnVuY3Rpb25cKFN0cmluZy5mcm9tQ2hhckNvZGVcKDE5XHMqLVxzKjksXHMqMTI2XHMqLVxzKjgsXHMqMTAwXHMqXC1ccyozW15cKV0rXClcKVwpXChcKTs8LnNjcmlwdD5ccyo8XCEtLVxzKlx3K1xzKi0tPjxcIS0tXHMqLlwqXHMqXHcrXHMqXCouXHMqLS0+fiI7fXM6MzY6Ii5zcGxpdChUKS5yZXZlcnNlKCkuam9pbihUKSkreStEK3ksWCI7YToyOntpOjA7czoyNDoiaW5qZWN0ZWQuanNfcmVkaXJlY3QuMDA4IjtpOjE7czoyMDc6In48c2NyaXB0XHMqZGF0YS1jZmFzeW5jPS5cdysuXHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj52YXJccypcdys9d2luZG93O2ZvclwodmFyXHNcd1xzKmluXHNcdytcKVx7aWZcKFx3Lmxlbmd0aD09PVwoXGQrPlwoXGQrLDB4XHcrXClcP1teIl0rIlx3IjpbXl9dK19cdysuLFxbLj09XHcrLlxdW15cP10rXD96b25laWRbXlwoXStcKFwpOy4+XHMqPC5zY3JpcHQ+fiI7fXM6MzY6Iis9ICcmJzt9IGVsc2UgaWYgKHMuY2hhckNvZGVBdChpKSA9PSI7YToyOntpOjA7czoyODoiaW5qZWN0ZWQuanNfdW53YW50ZWRfYWRzLjAwNiI7aToxO3M6MjEzOiJ+PFwhLS1cdystLT48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5ccypcPFwhLS1ccyp2YXJccypcdz0iXCE9XHcrLlx3K1teIiddKy47XHMqXHc9Li47XHMqZm9yXHMqXChcdz0wO1xzXHc8XHcubGVuZ3RoO1xzXHdcK1wrXCkuXHtccyppZlteXCFdK1whLjtcfVxzKmVsc2Vccypce1xzKlx3XCs9U3RyaW5nLmZyb21DaGFyQ29kZVtePl0rPlxzKjwuc2NyaXB0Pn4iO31zOjM2OiJceDc0XHg2Rlx4NENceDZGXHg2M1x4NjFceDZDXHg2NVx4NEMiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDMyIjtpOjE7czoxNTk6In48c2NyaXB0PnZhclxzKlxfMHhbXj1dKz1cWy4ueDc0Lng2Ri54NEMueDZGLng2My54NjEueDZDLng2NS54NENbXlxdXStcXTtmdW5jdGlvblxzKmdvb2dsZUFuYWx5dGljc1N0YXRpc3RpY3NCdWlsZFwoXClce3ZhclxzKl8weFtePV0rPW5hdmlnYXRvcltePF0rPC5zY3JpcHQ+fiI7fXM6MTM6Im1pbmVyLnN0YXJ0KCkiO2E6Mjp7aTowO3M6MjM6Im1hbHdhcmUuY3J5cHRvbWluZXIuMDAxIjtpOjE7czoxNDE6In48c2NyaXB0XHMqc3JjXHMqPVxzKi5odHRwKHMpPzpcL1wvW14+XSs+PFwvc2NyaXB0PlxzKjxzY3JpcHQ+XHMqdmFyXHMqXHcrXHMqPVxzKm5ld1xzKkNvaW5IaXZlXC5Bbm9ueW1vdXNcKFteXCldK1wpXHMqO1xzKm1pbmVyXC5zdGFydFwoXCk7fiI7fXM6NToiZXZhbCgiO2E6Mjp7aTowO2k6MTA7czoyMzoiID0gU3RyaW5nLmZyb21DaGFyQ29kZSgiO2E6Mjp7aTowO3M6MjA6ImJhY2tkb29yLmpzX2V2YWwuMDA5IjtpOjE7czoyMDI6In48c2NyaXB0XHMqdHlwZT1cInRleHQuamF2YXNjcmlwdCI+XHMqdmFyXHMqXHcrXHMqPVxzKlN0cmluZy5mcm9tQ2hhckNvZGVcKFxkezEsM31cc3sxfS1cc3sxfVxkezEsM30sXHN7MX1cZHsxLDN9XHN7MX1cLVxzezF9XGR7MSwzfSxcc3sxfVxkezEsM31cc3sxfVwtXHN7MX1cZHsxLDN9W15cKV0rXCk7XHMqKGV2YWxcKFx3K1wpKVxzKjwuc2NyaXB0Pn4iO319czoxODoiOiI8L3NjcmlwdD48c2NyaXB0IjthOjI6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZG9jdW1lbnQuMDEyIjtpOjE7aToxMTt9czo0OToiamF2YXNjcmlwdCI+bG9jYXRpb24ucmVwbGFjZSgiaHR0cDovL2dldGhlcmUuaW5mbyI7YToyOntpOjA7czoyNDoiaW5qZWN0ZWQuanNfcmVkaXJlY3QuMDAyIjtpOjE7aToxMTt9czoxODoiL0J0RlZQZCc+PC9zY3JpcHQ+IjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5qc19yZWRpcmVjdC4wMDkiO2k6MTtpOjExO31zOjI4OiJ0cmFmZmljdHJhZGUubGlmZS9zY3JpcHRzLmpzIjthOjI6e2k6MDtzOjIzOiJpbmplY3RlZC5qc19tYWx3YXJlLjAwMSI7aToxO3M6MTA6InNjcmlwdF9zcmMiO319czozMToiO3ZhciBzbmQ9bnVsbDtmdW5jdGlvbiBzdGFydCgpeyI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAwOCI7aToxO3M6MTM0OiJ+dmFyXHMqXzB4XHcrPVxbW147XSsueDcxLng3NS54NjUueDcyLng3OS54NTMueDY1Lng2Qy54NjUueDYzLng3NC54NkYueDcyLng0MS54NkMueDZDW147XSs7dmFyXHNcdys9bnVsbFteXG5dK251bGw7c2V0VGltZW91dFteO10rO1x9fiI7fXM6NTQ6IlhLamhpYnZsR2RqNVdkbTFUWjdsQ1pzVUdMcnh5WXNFR0x3aGlidmxHZGo1V2RtaENiaFpYWiI7YToyOntpOjA7czoyMDoiYmFja2Rvb3IuanNfZXZhbC4wMDYiO2k6MTtzOjcwOiJ+dmFyIFtcd19dKz0uLlteO10rWlhaLi47ZnVuY3Rpb25bXj9dK2V2YWwuW1x3X10rXChbXHdfXStcKFtcd19dKy4uLjt+Ijt9czoxODA6ImRvY3VtZW50LndyaXRlKHVuZXNjYXBlKCclM0MlNzMlNjMlNzIlNjklNzAlNzQlMjAlNzMlNzIlNjMlM0QlMjIlNjglNzQlNzQlNzAlM0ElMkYlMkYlNkElNzMlMkQlNkYlMkQlNjQlNjYlNzklNzElNjclNzUlMkUlNjMlN0ElMkUlNjMlNjMlMkYlMzMlMzklMjIlM0UlM0MlMkYlNzMlNjMlNzIlNjklNzAlNzQlM0UnKSI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwOCI7aToxO2k6MTI7fXM6NDI6IiUyRiU2NyU2RiU2RiU2NyU2QyU2NSUyRSU2QSU3MyUyMiUyOSUwQSUyMCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAwOSI7aToxO3M6MjM5OiJ+ZG9jdW1lbnQud3JpdGVcKFxzKnVuZXNjYXBlXChccyouJyUzQyUyMSU0NCU0RiU0MyU1NCU1OS4qPyUyQyUyMCUyMiU2OCU3NCU3NCU3MCUzQSUyRiUyRltcdyVdKj8lMkYlNjclNkYlNkYlNjclNkMlNjUlMkUlNkElNzMlMjIlMjklMEElMjBbXlwpXSo/JTY4JTY1JTYxJTY0JTNFJTBBJTBBJTNDJTYyJTZGJTY0JTc5JTNFJTBBJTNDJTJGJTYyJTZGJTY0JTc5JTNFJTBBJTNDJTJGJTY4JTc0JTZEJTZDJTNFLlwpXCk7fiI7fXM6MTIyOiJkb2N1bWVudC53cml0ZSggdW5lc2NhcGUoICclM0MlMjElNDQlNEYlNDMlNTQlNTklNTAlNDUlMjAlNDglNTQlNEQlNEMlMjAlNTAlNTUlNDIlNEMlNDklNDMlMjAlMjIlMkQlMkYlMkYlNTclMzMlNDMlMkYlMkYlNCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxMCI7aToxO3M6MTAzOiJ+ZG9jdW1lbnQud3JpdGVcKFxzKnVuZXNjYXBlXChccyouJTNDJTIxJTQ0JTRGJTQzJTU0JTU5JTUwJTQ1JTIwW147XSs5JTNFJTBBJTNDJTJGJTY4JTc0JTZEJTZDJTMuXClcKTt+Ijt9czo3NjoiPHNjcmlwdD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gdW5lc2NhcGUoJyUzYyU3NCU2OSU3NCU2YyU2NSUzZSI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxNyI7aToxO3M6MTE5OiJ+PHNjcmlwdD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gdW5lc2NhcGVcKCclM2MlNzQlNjklNzQlNmMlNjUlM2UlNDglNjElNjMlNmIlNjUlNjQlMjAlNjIlW147XSs7PC5zY3JpcHQ+fiI7fXM6MzE6InNob3J0ZS5zdC9saW5rLWNvbnZlcnRlci5taW4uanMiO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLmpzX3Vud2FudGVkX2Fkcy4wMDQiO2k6MTtzOjMzNjoifig8c2NyaXB0XHMqdHlwZS4udGV4dC5qYXZhc2NyaXB0Lj4uLjxcIVxbQ0RBVEFcW1xzKlwoZnVuY3Rpb25bXjpdKzpccyoiXHcrIixccyoiZXhjbHVkZURvbWFpbnNcIjpccypcW1xzKiJbXlwpXStcKTtccypzY3JpcHQuYXN5bmNccyo9XHMqdHJ1ZTtccypzY3JpcHQuc3JjXHMqPVxzKi4uLi4uLi5zaG9ydGUuc3QubGluay1jb252ZXJ0ZXIubWluLmpzLjtbXn1dK1x9O1xzKnZhclxzKmVudHJ5XHMqPVxzKmRvY3VtZW50W15cW10rXFswXF07XHMqZW50cnkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmVcKHNjcmlwdCxccyplbnRyeVwpO1xzKn1cKVwoXCk7XHMqLi5cXVxdPjwuc2NyaXB0Pil+Ijt9czoxODoidGhpc1siZXZhbCJdKCIlOil7IjthOjI6e2k6MDtzOjIwOiJiYWNrZG9vci5qc19ldmFsLjAwNyI7aToxO3M6MTMwOiJ+PHNjcmlwdD5ccyp0aGlzXFsiZXZhbFwiXVwoIiU6XClce1woLTdce1xeLSZbXjxdKzwyOCwtbTFcKzR5b1teXDtdKztmb3JcKEs9MTtccypbXiJdKyIiLi5yZXZlcnNlLi4uam9pblteXH1dK1x9XClcKTtccyo8LnNjcmlwdD5+Ijt9czoyMjoiYmFzZTY0X2RlY29kZSgnUEhOamNtbCI7YToyOntpOjA7czoyMToiaW5qZWN0ZWQuanNfcG9wdXAuMDAxIjtpOjE7czoyOTU6In5pZlwocHJlZ19tYXRjaFwoIi5cKGFuZHJvaWRcfGF2YW50Z29bXiJdKyIsXHMqXCRfU0VSVkVSXFsiSFRUUF9VU0VSX0FHRU5UIlxdXClcKVxzKlx7XHMqXCRcdytccyo9XHMqc3RyX3JlcGxhY2VcKC48LmhlYWQuLixccypiYXNlNjRfZGVjb2RlXCgnUEhOamNtbFteJ10rJ1wpXHMqXC5ccypQSFBfRU9MW147XSs7XHMqXH1ccyplbHNlXHMqXHtccypcJFx3K1xzKj1ccypzdHJfcmVwbGFjZVwoLjwuaGVhZD4uLFxzKmJhc2U2NF9kZWNvZGVcKCdQSE5qY21sW14nXSsnXClccypcLlxzKlBIUF9FT0xbXjtdKztccypcfX4iO31zOjMzOiJKU09OLnBhcnNlKGQoJ2Fwb2hjZGkiYX1zaGlfeGRhImUiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLm1hZ2VudG9fc2hvcGxpZnQuMDAxIjtpOjE7czoyODg6In48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj4uLlxzKjxcIVxbQ0RBVEFcW1xzKlwhZnVuY3Rpb25cKG4sZSxpXClce2Z1bmN0aW9uXHMqLlwoblwpXHt2YXJccyplPXdpbmRvd1teIl0rImhjdGlucyJbXiJdKyJnamt0aXBbXjtdKztyZXR1cm5ccyplXCZcJltePF0rPFtePl0rPm5bXj5dKz5uO2lmXCh3aW5kb3cuRmlyZWJ1Z1teOl0rOmQ6YWdlYnBbXlwpXStcKVwpXCksYVwobCxKU09OW15cW10rXFtuLHBvZXRbXlwrXStcK0NROVpLTURbXlwpXStcKTtccyouLlxzKlxdXF0+PC5zY3JpcHQ+fiI7fXM6MjE6InAuaChsLm0oOCwxLDAsYyw0LDIsZCI7YToyOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxNSI7aToxO3M6MTcwOiJ+PHNjcmlwdD5ldmFsXChmdW5jdGlvblwocCxhLGMsayxlLHJcKVxzKlx7W147XSs7aWZcKCEnJy5yZXBsYWNlW147XSs7a1teJ10rJy4ud1wrLlx9O1xzKlteXF1dK1xdW15cXV0rXF1cKTtyZXR1cm5ccypwXH1cKCdwLmhcKGwubVwoOCwxLDAsYyw0LDIsZFteXHtdK1x7XH1cKVwpPC5zY3JpcHQ+fiI7fXM6MjI6ImV2YWx8d3JpdGV8MTIzfDExN3wxMjAiO2E6Mjp7aTowO3M6MjA6ImJhY2tkb29yLmpzX2V2YWwuMDA4IjtpOjE7czoyMTE6In48c2NyaXB0XHMqdHlwZS4udGV4dC5qYXZhc2NyaXB0Lj5ccypldmFsXChmdW5jdGlvblwocCxhLGMsayxlLGRcKVx7W147XSs7aWZcKFwhLi4ucmVwbGFjZVwoLlxeLixbXjtdKztbXlwuXSsucmVwbGFjZVwoW15cLl0rLmpcKGguZ1woYiwxLDAsOSw2LDQsNyxjW147XSs7Li4zMCwzMCwuMTE2W15cLl0rLnNwbGl0XCguXHwuXCksMCxce1x9XClcKVxzKjwuc2NyaXB0Pn4iO31zOjYxOiJpZigobmV3IFJlZ0V4cCgnb25lcGFnZXxjaGVja291dHxvbmVzdGVwJywnZ2knKSkudGVzdCh3aW5kb3cuIjthOjI6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAyNiI7aToxO3M6MjI0OiJ+PGRpdlxzKmlkPS53ZWJzdGF0X2FuYWx5dGljc19jb2RlLj48c2NyaXB0W14+XSs+XHMqPFwhLS1ccyp2YXJccypcdys9XHtccypzbmQ6bnVsbCxccypcdys6Lmh0dHBzW14sXSssXHMqbXlpZDouZnVuY3Rpb24ubmFtZS5ce1xzKlteXC5dKy5jb29raWUubWF0Y2hbXiJdKyItIlwrTWF0aFteLF0rLFxzKmNsazpbXlwmXStcJi47W148XSs8YnRuW14+XSs+XHMqPC5zY3JpcHQ+XHMqPC5kaXY+fiI7fXM6MTU6ImRvY3VtZW50LndyaXRlKCI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxMSI7fXM6MzA6InZhciBhU2l0ZXMgPSBuZXcgQXJyYXkoJ2dvb2dsZSI7YToxOntpOjA7czoyODoiaW5qZWN0ZWQuanNfdW53YW50ZWRfYWRzLjAwMyI7fXM6NTg6InRvVXJsKz0iIjsgaWYocGF0cm4uZXhlYyhyVXJsKSl3aW5kb3cubG9jYXRpb24uaHJlZj10b1VybDsiO2E6MTp7aTowO3M6MjQ6ImluamVjdGVkLmpzX3JlZGlyZWN0LjAwMyI7fXM6MzU6IiAoKSB7IHJldHVybiAibm9uZSI7IH0gZnVuY3Rpb24gZW5kIjthOjE6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZnVuY3Rpb24uMDA5Ijt9czoyMjoiZnVuY3Rpb24gY2xrKCl7dmFyIF8weCI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxMCI7fXM6MzA6Im5ldyBSZWdFeHAoImNoZWNrb3V0IikudGVzdChuKSI7YToxOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMjkiO31zOjQyOiJtKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHMuY2hhckNvZGVBdChpKS0xKTsiO2E6MTp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDMwIjt9czo2NDoiIjsgZG9jdW1lbnQud3JpdGUodW5lc2NhcGUoIiUzQ3NjcmlwdCBzcmM9JyIrbG9jYXRpb24ucHJvdG9jb2wrIiI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAyMyI7fXM6MzM6In1jPXVuZXNjYXBlKGIpO2RvY3VtZW50LndyaXRlKGMpOyI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxMyI7fXM6MjM6InNlbmQ6ZnVuY3Rpb24oKXt0cnl7dmFyIjthOjE6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZnVuY3Rpb24uMDExIjt9czoyNToiZnVuY3Rpb24oKXttKys7eigpfTtiWyJceCI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxMiI7fXM6NjA6ImRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBjaGVja2JveCI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxNCI7fXM6Mzk6Int0b3AubG9jYXRpb24gPSAnaHR0cHM6Ly91bHRyYWZpbGVzLmNvLyI7YToxOntpOjA7czoyNDoiaW5qZWN0ZWQuanNfcmVkaXJlY3QuMDA0Ijt9czo0ODoiZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IHVuZXNjYXBlKCclIjthOjE6e2k6MDtzOjMxOiJpbmplY3RlZC5qc19jcmVhdGVfZG9jdW1lbnQuMDE2Ijt9czoxMTk6InJ0PVsiXHg2Rlx4NkVceDZDXHg2Rlx4NjFceDY0IiwiXHg2Q1x4NkZceDYzXHg2MVx4NzRceDY5XHg2Rlx4NkUiLCJceDc0XHg2NVx4NzNceDc0IiwiXHg2M1x4NjhceDY1XHg2M1x4NkJceDZGXHg3NVx4NzQiIjthOjE6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAyMSI7fXM6MTY3OiJvbmVwYWdlfGNoZWNrb3V0L2dpKSYmKHQoImlucHV0LCBzZWxlY3QiKS5lYWNoKGZ1bmN0aW9uKCl7dCh0aGlzKS52YWwoKT9xKz0iJiIrdCh0aGlzKS5hdHRyKCJuYW1lIikrIj0iK3QodGhpcykudmFsKCk6IiJ9KSx0LnBvc3QodCgiPGRpdiAvPiIpLmh0bWwoIiYjMTA0OyYjMTE2OyYjMTE2OyI7YToxOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMjIiO31zOjEwMjoiLCJceDY4XHg3NFx4NzRceDcwXHgzQVx4MkZceDJGXHg2Q1x4NkZceDYxXHg2NFx4MkRceDZEXHg2NVx4MkVceDYzXHg2OFx4NjlceDYzXHg2Qlx4NjVceDZFXHg2Qlx4NjlceDZDIjthOjE6e2k6MDtzOjIzOiJoYWNrdG9vbC5jYy1zdGVhbGVyLjAyMyI7fXM6MTE2OiI8aW1nIHNyYz0iaW1hZ2UiIG9uZXJyb3I9ImEgPSBuZXcgRnVuY3Rpb24oU3RyaW5nLmZyb21DaGFyQ29kZSgxMCwgNDAsIDEwMiwgMTE3LCAxMTAsIDk5LCAxMTYsIDEwNSwgMTExLCAxMTAsIDQwLCA0MSI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxMyI7fXM6NDE2OiJceDJFXHg3MFx4NjhceDcwIiwiXHg1MFx4NEZceDUzXHg1NCIsIlx4NjZceDZGXHg3Mlx4NkQiLCJceDczXHg2NVx4NzJceDY5XHg2MVx4NkNceDY5XHg3QVx4NjUiLCJceDYxXHg2QVx4NjFceDc4IiwiXHg2MVx4NjRceDY0XHg0NVx4NzZceDY1XHg2RVx4NzRceDRDXHg2OVx4NzNceDc0XHg2NVx4NkVceDY1XHg3MiIsIlx4NUJceDZGXHg2RVx4NjNceDZDXHg2OVx4NjNceDZCXHgzRFx4MjdceDYyXHg2OVx4NkNceDZDXHg2OVx4NkVceDY3XHgyRVx4NzNceDYxXHg3Nlx4NjVceDI4XHgyOVx4MjdceDVEIiwiXHg2M1x4NjhceDY1XHg2M1x4NkJceDZGXHg3NVx4NzRceDJEXHg3M1x4NzRceDY1XHg3MFx4MkRceDYyXHg2OVx4NkNceDZDXHg2OVx4NkVceDY3IiwiXHg2N1x4NjVceDc0XHg0NVx4NkNceDY1XHg2RFx4NjVceDZFXHg3NCI7YToxOntpOjA7czoyMzoiaGFja3Rvb2wuY2Mtc3RlYWxlci4wMjQiO31zOjYwOiJceDc3XHg3OFx4NzlceDdhXHgzMFx4MzFceDMyXHgzM1x4MzRceDM1XHgzNlx4MzdceDM4XHgzOVx4MmIiO2E6MTp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDI1Ijt9czoyODoiPHNjcmlwdD5kb2N1bWVudC5sb2NhdGlvbj0oIiI7YToxOntpOjA7czozMToiaW5qZWN0ZWQuanNfY3JlYXRlX2RvY3VtZW50LjAxNSI7fXM6MjY6Iik7fTt9KShtNEZbb11bdl0sJ19va3pmanRpIjthOjI6e2k6MDtzOjI0OiJpbmplY3RlZC5qc19yZWRpcmVjdC4wMDUiO2k6MTtzOjE3MToifjxzY3JpcHRccypbXj5dKz52YXJccypcdys9d2luZG93O2ZvcltePl0rPj1cKFxkKy5cdyssXGQrLlx3K1wpXD9bXlwiXStcIkkiOlteXFtdK1xbb1xdW15cX10rX1x3KycsXFsnPT1cdysuLi51bDJkdTgyW147XSs7PC5zY3JpcHQ+PHNjcmlwdFteXF9dK1xfb2t6Zmp0aVteIl0rIj48LnNjcmlwdD5+Ijt9czo0MToiYW5kcm9pZHxiYlxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGEiO2E6Mjp7aTowO3M6MjQ6ImluamVjdGVkLmpzX3JlZGlyZWN0LjAwNiI7aToxO3M6MTk4OiJ+aWZcKGRvY3VtZW50LmNvb2tpZS5pbmRleE9mXCgiX21hdXRodG9rZW4iXCk9PS0xW14iXSsiZ29vZ2xlYm90IlteXHxdK1x8YmIuZFwrLm1lZWdvXClcLi5tb2JpbGVbXlw9XSs9XHMqbmV3XHMqRGF0ZVteO10rO1xzKmRvY3VtZW50LmNvb2tpZVteO10rO1xzKnBhdGg9Li5leHBpcmVzPSJbXiddKydodHRwOi4uW15cP10rXD9cdytcJidcKTtcfX4iO31zOjU0OiI8c2NyaXB0PiB2YXIgXzB4ZWM1NT1bIlx4NDdceDQ1XHg1NCIsIlx4NkZceDcwXHg2NVx4NkUiO2E6Mjp7aTowO3M6MjM6ImhhY2t0b29sLmNjLXN0ZWFsZXIuMDMxIjtpOjE7czoxMTc6In48c2NyaXB0PlxzKnZhclxzKl8weFtePV0rPVxbLi54NDcueDQ1Lng1NC4sLi54NkYueDcwLng2NVteXFtdK1xbXzB4W15cP10rXD9fMHhbXjpdKzpibF9yYXdcfXZhclxzKl8weFtePF0rPC5zY3JpcHQ+fiI7fXM6NDY6ImNsa3NpdGUuY29tL2FkU2VydmUvYmFubmVycz90aWQ9Nzk0NzlfMTI3NDgwXzciO2E6Mjp7aTowO3M6Mjg6ImluamVjdGVkLmpzX3Vud2FudGVkX2Fkcy4wMDciO2k6MTtzOjEzNzoifjxzY3JpcHRccypkYXRhLWNmYXN5bmM9LmZhbHNlLlxzKnR5cGU9LnRleHQuamF2YXNjcmlwdC5ccypzcmM9Li4uXHcrLmNsa3NpdGUuY29tLmFkU2VydmVccyouYmFubmVycy50aWQ9Nzk0NzlfMTI3NDgwXzdbXiInXSsuPjwuc2NyaXB0Pn4iO31zOjIyOiJtb2Jpc2xhLmNvbS9ub3RpY2UucGhwIjthOjI6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjA2NiI7aToxO3M6MTAzOiJ+PHNjcmlwdFxzKmFzeW5jPS5hc3luYy5ccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuXHMqc3JjPS4uLlx3Ky5tb2Jpc2xhLmNvbS5ub3RpY2UucGhwW14iJ10rLj48LnNjcmlwdD5+Ijt9czozMjoiPCEtLSBCZWdpbiBDb29raWUgQ29uc2VudCBzY3JpcHQiO2E6Mjp7aTowO3M6Mjk6ImluamVjdGVkLmpzX2Nvb2tpZV9oaWphY2suMDAxIjtpOjE7czozNTg6In48XCEtLVxzKkJlZ2luXHMqQ29va2llW14+XSs+XHMqPHNjcmlwdFtePl0rPlxzKndpbmRvdy5jb29raWVjb25zZW50W14iXSsibWVzc2FnZSI6IlRoaXNccyp3ZWJzaXRlXHMqdXNlc1xzKmNvb2tpZXNbXiddKydcdystXHcrLVx3K1teJ10rJzs8LnNjcmlwdD5ccyo8c2NyaXB0XHN0eXBlPS5bXiciXSsiXHMqc3JjPS4uLlteXC9dK1wvbGlic1wvY29va2llW14+XSs+PC5zY3JpcHQ+XHMqPG5vc2NyaXB0PjxhXHMqaHJlZj1bIiddW14+XSs+KEVVXHMqKT9bQ2Ndb29raWVccypbQ2Ndb25zZW50XHMqW1NzXWNyaXB0PC5hPjwubm9zY3JpcHQ+XHMqXDxcIS0tXHMqRW5kXHMqQ29va2llXHMqQ29uc2VudFxzKnNjcmlwdFxzKi0tPn4iO31zOjM1OiJ7IHJldHVybiAibm9uZSI7IH0gZnVuY3Rpb24gZW5kXyAoKSI7YToyOntpOjA7czozMjoiaW5qZWN0ZWQuanNfY3JlYXRlX2Z1bmN0aW9uLjAxNDUiO2k6MTtzOjIxNDoifjxzY3JpcHRccyp0eXBlPS50ZXh0LmphdmFzY3JpcHQuPlxzKmZ1bmN0aW9uXHMqZ2V0X3N0eWxlXHMqXChcKVxzKlx7XHMqcmV0dXJuXHMqLm5vbmUuO1xzKlx9XHMqZnVuY3Rpb25ccyplbmRfXHMqXChcKVxzKlx7W14nXSsnKFx3KyknXClbXjtdKztccypcfVxzKjwuc2NyaXB0PlxzKjxwXHMqaWQ9LlwxLj48YVxzKmhyZWY9LlteIl0rIj5Bemlcdys8LmE+W148XSs8LnA+fiI7fXM6MzI6ImF0b2IoJ2RtRnlJRUZEVUZGWldWaEJWRTRnUFNCVGRIIjthOjI6e2k6MDtzOjIwOiJiYWNrZG9vci5qc19ldmFsLjAxMSI7aToxO3M6MTI5OiJ+PHNjcmlwdFxzKnR5cGU9InRleHQuamF2YXNjcmlwdCI+XHMqdmFyXHMqKFx3ezUsMTV9KVxzKj1ccyphdG9iXCguZG1GeUlFRkRVRkZaV1ZoQlZFNGdQU0JUZEhbXiddKydcKTtccypldmFsXChcMVwpO1xzKjwuc2NyaXB0Pn4iO31zOjc6IjxpZnJhbWUiO2E6MTU6e2k6MDtpOjEwO3M6OTY6IjxpZnJhbWUgc3JjPSJodHRwOi8vZ29vZ2xlLXBpbmdpbmdzLmNvbS9pbi5jZ2k/ZGVmYXVsdCIgaGVpZ2h0PTEgd2lkdGg9MSBmcmFtZWJvcmRlcj0wPjwvaWZyYW1lPiI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMDEiO2k6MTtpOjEyO31zOjEwNzoiPGlmcmFtZSBzcmM9Imh0dHA6Ly9zMTY5MDcwODA1Lm9ubGluZWhvbWUudXMvMjAwOC8wMS9nby5waHA/c2lkPTYiIGhlaWdodD0xIHdpZHRoPTEgZnJhbWVib3JkZXI9MD48L2lmcmFtZT4iO2E6Mjp7aTowO3M6MjA6ImlmcmFtZS5pbmplY3Rpb24uMDAyIjtpOjE7aToxMjt9czoyODoiIHNyYz0iaHR0cDovLzEwOC4xNzkuMjUyLjcwLyI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMDMiO2k6MTtzOjYxOiJ+PGlmcmFtZVtePl0rP3NyYz0iaHR0cDouLjEwOFwuMTc5XC4yNTJcLjcwXC9bXj5dKz48LmlmcmFtZT5+Ijt9czo5MjoiPGlmcmFtZSBzcmM9aHR0cDovLzYxLjEzMi43NS43MS9pZnJhbWUvd3Atc3RhdHMucGhwIHdpZHRoPTEgaGVpZ2h0PTEgZnJhbWVib3JkZXI9MD48L2lmcmFtZT4iO2E6Mjp7aTowO3M6MjA6ImlmcmFtZS5pbmplY3Rpb24uMDA0IjtpOjE7aToxMjt9czoxMTA6IjxpZnJhbWUgc3JjPSJodHRwOi8vc2hhbmdhY3VwdW5jdHVyZS5vc2EucGwvc2hvd3RocmVhZC5waHA/dD01Nzg1MjQ2NCIgd2lkdGg9IjEiIGhlaWdodD0iMSIgZnJhbWVib3JkZXI9IjAiIC8+IjthOjI6e2k6MDtzOjIwOiJpZnJhbWUuaW5qZWN0aW9uLjAwNSI7aToxO2k6MTI7fXM6OTA6IjxkaXYgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMTAwMDsgdG9wOiAtMTAwMHB4OyBsZWZ0OiAtOTk5OXB4OyI+PGlmcmFtZSBzcmM9IiI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMDYiO2k6MTtzOjExODoifjxkaXYgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgei1pbmRleDogMTAwMDsgdG9wOiAtMTAwMHB4OyBsZWZ0OiAtOTk5OXB4OyI+PGlmcmFtZSBzcmM9Imh0dHBbXiJdKyI+PC5pZnJhbWU+PC5kaXY+fiI7fXM6MzY6IjxpZnJhbWUgc3JjPSJodHRwOi8vY2xvdWRmbGFyZXMuaW5mbyI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMDciO2k6MTtzOjg3OiJ+PGlmcmFtZSBzcmM9LlxIK2Nsb3VkZmxhcmVzXC5pbmZvW14+XSsod2lkdGh8aGVpZ2h0fGZyYW1lYm9yZGVyfFxzKykrPSJcZCsiPjwuaWZyYW1lPn4iO31zOjEyOiJzdGF0aWN3ZWIudGsiO2E6Mjp7aTowO3M6MjA6ImlmcmFtZS5pbmplY3Rpb24uMDA4IjtpOjE7czoxMjA6In48aWZyYW1lXHMqc3JjLi5odHRwOi4uKFx3KlwuKXN0YXRpY3dlYi50a1wvXHcrLlxzKlteO10rO1xzKmxlZnQ6XHMqLTEwMDBweDtccyp0b3A6XHMqLTEwMDBweDtccyp6LWluZGV4Oi0xOy4+PC5pZnJhbWU+fiI7fXM6NTA6ImZvcnR1bm9mZmRldi5nZW1maW5kd2ViZGVzaWduLmNvbS9nZW1maW5kL2luZm8ucGhwIjthOjI6e2k6MDtzOjIwOiJpZnJhbWUuaW5qZWN0aW9uLjAwOSI7aToxO3M6MTA3OiJ+PGRpdiBzdHlsZVtePF0rKzxpZnJhbWUgc3JjPS5bXj5dK2ZvcnR1bm9mZmRldi5nZW1maW5kd2ViZGVzaWduLmNvbS9nZW1maW5kL2luZm8ucGhwW14+XSs+PC5pZnJhbWU+PC5kaXY+fiI7fXM6MzA6Ind3dy52aXNpby1yeC5jb20vZG9jcy9pbmZvLnBocCI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMTAiO2k6MTtzOjg3OiJ+PGRpdiBzdHlsZVtePF0rKzxpZnJhbWUgc3JjPS5bXj5dK3d3dy52aXNpby1yeC5jb20vZG9jcy9pbmZvLnBocFtePl0rPjwuaWZyYW1lPjwuZGl2Pn4iO31zOjM0OiJzaXRlb25saW5lLmNsaWNrL3N0YXRpc3RpY3Nfb25saW5lIjthOjI6e2k6MDtzOjIwOiJpZnJhbWUuaW5qZWN0aW9uLjAxMSI7aToxO3M6OTQ6In48ZGl2IHN0eWxlW148XSsrPGlmcmFtZSBzcmM9LltePl0rc2l0ZW9ubGluZS5jbGljay9zdGF0aXN0aWNzX29ubGluZVtePl0rPjwuaWZyYW1lPlxzKjwuZGl2Pn4iO31zOjM3OiJzdHlsZT0idmlzaWJpbGl0eTogaGlkZGVuOyI+PC9pZnJhbWU+IjthOjM6e2k6MDtpOjEwO3M6Mjg6IjxpZnJhbWUgc3JjPSJodHRwczovL2dvby5nbC8iO2E6Mjp7aTowO3M6MjA6ImlmcmFtZS5pbmplY3Rpb24uMDE0IjtpOjE7czo4NzoifjxpZnJhbWVccypzcmM9Imh0dHBzOi4uZ29vLmdsLlx3KyJccypzdHlsZT0idmlzaWJpbGl0eTpccypoaWRkZW47Ij48LmlmcmFtZT4oPC5ib2R5Pil+Ijt9czoxNToiaHR0cDovL2Ftem4udG8vIjthOjI6e2k6MDtzOjIwOiJpZnJhbWUuaW5qZWN0aW9uLjAxMyI7aToxO3M6Nzg6In48aWZyYW1lXHMqc3JjPSJodHRwOi4uYW16bi50by5cdysiXHMqc3R5bGU9InZpc2liaWxpdHk6XHMqaGlkZGVuOyI+PC5pZnJhbWU+fiI7fX1zOjE4OiI6Ijwvc2NyaXB0PjxpZnJhbWUiO2E6Mjp7aTowO3M6MjA6ImlmcmFtZS5pbmplY3Rpb24uMDEyIjtpOjE7aToxMTt9czo1ODoiPGlmcmFtZSBmcmFtZWJvcmRlcj0iMCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogLSI7YToyOntpOjA7czoyMDoiaWZyYW1lLmluamVjdGlvbi4wMTUiO2k6MTtzOjEyMzoifjxpZnJhbWVccypmcmFtZWJvcmRlcj0uMC5ccypzdHlsZT0uW146XSs6XHMqYWJzb2x1dGU7XHMqbGVmdDpccyotXGR7NCx9cHg7XHMqdG9wOlxzKi1cZHs0LH1weFteXC5dKy5jbGlja1teIl0rIj48LmlmcmFtZT5+Ijt9fXM6MTcwOiJjaHIoNjQpLmNocigxMDEpLmNocigxMTgpLmNocig5NykuY2hyKDEwOCkuY2hyKDQwKS5jaHIoOTgpLmNocig5NykuY2hyKDExNSkuY2hyKDEwMSkuY2hyKDU0KS5jaHIoNTIpLmNocig5NSkuY2hyKDEwMCkuY2hyKDEwMSkuY2hyKDk5KS5jaHIoMTExKS5jaHIoMTAwKS5jaHIoMTAxKS5jaHIoNDApLiI7YToyOntpOjA7czoyMToiYmFja2Rvb3IuY2hyX2V2YWwuMDAxIjtpOjE7czoyMTM6In5ce1wkXHtcJFx3K1xzKj1bXjtdK2NoclwoNjRcKVwuY2hyXCgxMDFcKVwuY2hyXCgxMThcKVwuY2hyXCg5N1wpXC5jaHJcKDEwOFwpXC5jaHJcKDQwXClcLmNoclwoOThcKVwuY2hyXCg5N1wpXC5jaHJcKDExNVwpXC5jaHJcKDEwMVwpXC5jaHJcKDU0XClcLmNoclwoNTJcKVwuY2hyXCg5NVwpXC5jaHJcKDEwMFwpXC5jaHJcKDEwMVwpW147XStcfVx9KFx7XCRcdytcfSk/fiI7fXM6MzI6Ijg2ZTZhMmU3ODgwYTkyMjM0MzY0MzhiNDEyYWZkNjJkIjthOjI6e2k6MDtzOjE3OiJiYWNrZG9vci5tb2R4LjAwMSI7aToxO3M6Nzoifl4uKiR+cyI7fXM6MTI6Ij1AJF9DT09LSUVbIiI7YToyOntpOjA7czoyNDoiYmFja2Rvb3IuZXZhbF9DT09LSUUuMDAxIjtpOjE7czo2MjoiflwkXHcrPUBcJF9DT09LSUVcWy5cdysuLjtccyppZlteQF0rQFwkX0NPT0tJRVtePl0rcGhwaW5mby4uO34iO31zOjc6InN0cnRyKCQiO2E6Mjp7aTowO3M6MTk6ImJhY2tkb29yLnN1YnN0ci4wMDEiO2k6MTtzOjIwNjoiflwkXHd7MSwyfVxzKj1ccyonWzAtOWEtZl17MzJ9JztccypcJFx3ezIsOH1ccyo9XHMqJ1xTKyc7XHMqXCRcd3syLDh9XHMqPVxzKidcUysnO1xzKlwkXHd7Miw4fVxzKj1ccyonXFMrJztccypcJFx3ezEsOH1ccyo9XHMqJy4uLicuc3Vic3RyXChbXlwpXSs/XCk7XHMqXCRcd3syLDh9XHMqPVxzKnByZWdfcmVwbGFjZVwoXCRbXjtdKz9zdHJ0clwoW147XSs/O34iO31zOjEyOiI9PSIpLCIuIil9fXsiO2E6Mjp7aTowO3M6MTg6ImJhY2tkb29yLnNoZWxsLjAwNCI7aToxO3M6NTY6In5ce1wkXHtcJFx3Kz1bXixdKyxcJFx3K1woLlx3Kz09LlwpLC5cLi5cKVx9XH1ce1wkXHcrXH1+Ijt9czozODoiZXZhbChiYXNlNjRfZGVjb2RlKCdhV1lnS0hCeVpXZGZiV0YwWTIiO2E6Mjp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAwMSI7aToxO3M6NzM6In5ldmFsXChiYXNlNjRfZGVjb2RlXCgnYVdZZ0tIQnlaV2RmYldGMFkyZ29KeThvUjI5dloyeGxZW149XSs3ZlE9PSdcKVwpO34iO31zOjUxOiJAZXZhbChAZ3p1bmNvbXByZXNzKEBzdHJfcm90MTMoQGJhc2U2NF9kZWNvZGUoJ2E1emwiO2E6Mjp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAwMiI7aToxO3M6OTY6In5AZXZhbFwoQGd6dW5jb21wcmVzc1woQHN0cl9yb3QxM1woQGJhc2U2NF9kZWNvZGVcKC5hNXpsW147XStNYm1OcFlwQW9UN3lmL3cvTk13b1FBPT0uXClcKVwpXCk7fiI7fXM6NzI6Ij9waHAud2FyL21vYy5uaWJldHNhcC8vOnB0dGgiPWNycyB0cGlyY3M8Jy5zcGxpdCgiIikucmV2ZXJzZSgpLmpvaW4oIiIpKSI7YToyOntpOjA7czoyMDoiYmFja2Rvb3IuanNfZXZhbC4wMDEiO2k6MTtzOjExNjoifmRvY3VtZW50LndyaXRlLi4+dHBpcmNzXC88Pi5cdys9aVw/cGhwLndhclwvbW9jLm5pYmV0c2FwLi46cHR0aC49Y3JzIHRwaXJjczwuLnNwbGl0XCgiIlwpLnJldmVyc2VcKFwpLmpvaW5cKCIiXClcKX4iO31zOjI2OiJIYVRSayBGaWxlIE1hbmFnZXI8L3RpdGxlPiI7YToyOntpOjA7czoyNDoiaGFja3Rvb2wuZmlsZW1hbmFnZXIuMDAxIjtpOjE7czoxMDk6In48LnBocFxzKnNldF90aW1lX2xpbWl0LjAuO1tePF0rP2VjaG8gLjwuRE9DVFlQRSBIVE1MPlteXHtdKz9IYVRSayBGaWxlIE1hbmFnZXIuKz9yZXR1cm4gXCRpbmZvO1xzKlx9XHMqXD8+fnMiO31zOjI1OiIlJih7JHtldmFsKGJhc2U2NF9kZWNvZGUoIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5ldmFsX2Jhc2U2NC4wMDMiO2k6MTtzOjg0OiJ+XCVcJlwoXHtcJFx7ZXZhbFwoYmFzZTY0X2RlY29kZVwoXCRfKFNFUlZFUnxQT1NUfEdFVClcW1teXF1dK1xdXClcKVx9XH1cfFwuXCtcKSZcJX4iO31zOjU0OiJAZXZhbChAZ3p1bmNvbXByZXNzKEBzdHJfcm90MTMoQGJhc2U2NF9kZWNvZGUoJ2E1emxmWDEiO2E6Mjp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAwNCI7aToxO3M6NzI6In5AZXZhbFwoQGd6dW5jb21wcmVzc1woQHN0cl9yb3QxM1woQGJhc2U2NF9kZWNvZGVcKC57MTAyNH1bXjtdKztccypkaWU7fiI7fXM6MjQ6ImFkZCcpO2V4aXQ7fWVjaG8gJ3RydWUnOyI7YToyOntpOjA7czoxNzoiYmFja2Rvb3IuUE9TVC4wMDIiO2k6MTtzOjExNzoifmlmXChpc3NldFwoXCRfUE9TVFxbLlx3Ky5cXVwpXClce0BwcmVnX3JlcGxhY2VcKC4uLi5lLiwuZS4uLnZhbFwoXCRfUE9TVFxbLlx3Ky5cXVwpLixccy5hZGQuXCk7ZXhpdDtcfWVjaG8uLnRydWUuXDt+Ijt9czozNzoiZXZhbCgnXDE1NlwxNDVcMTY3XDQwXDEyMlwxNDVcMTQ3XDEwNSI7YToyOntpOjA7czoyNDoiYmFja2Rvb3IuZXZhbF9iYXNlNjQuMDA1IjtpOjE7czo0ODoifmV2YWxcKC4uMTU2LjE0NS4xNjcuNDAuMTIyLjE0NS4xNDcuMTA1W14nXSsnXCl+Ijt9czo0MDoiJF9TRVJWRVJbYmFzZTY0X2RlY29kZSgnU0ZSVVVGOVNSVVpGVWtWUyI7YToyOntpOjA7czoyNDoiYmFja2Rvb3IuZXZhbF9iYXNlNjQuMDA2IjtpOjE7czoxOTQ6In5cJFx3Kz1cJF9TRVJWRVJcW2Jhc2U2NF9kZWNvZGVcKFsnIl1TRlJVVUY5U1JVWkZVa1ZTWyciXVwpXF07XHMqXCRcdys9XCRfU0VSVkVSW147XSs7XHMqXCRcdys9YmFzZTY0X2RlY29kZVteO10rO1xzKlwkXHcrXHM9XHMqc3RycG9zXChcJFx3KyxccypcJFx3K1wpO1xzKmlmXChcKFwkXHcrPT09W15ce10rXHtlY2hvXHMqXCRcdys7XH1+Ijt9czo0NToiR1YyWVd3b1ltRnpaVFkwWDJSbFkyOWtaU2duV201V2RWa3pVbkJpTWpSbll6IjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5ldmFsX2Jhc2U2NC4wMDciO2k6MTtzOjExMToiflwkXHcrPS4uMTQyLi4uLjE0MS4uLi54NzMuLi4ueDY1Li4uLngzNi4uY2hyXCg1MlwpW14sXSssXCRcdytcKC5RR1YyWVd3b1ltRnpaVFkwWDJSbFkyOWtaU2duV21bXiJdKyJcKSwuLi5cKTt+Ijt9czozODoicldtZ3NKZzMyZnZsNkJzeEltUCtKTFo5MjdURU5acUJrZnkyUnciO2E6Mjp7aTowO3M6MTk6ImJhY2tkb29yLnN1YnN0ci4wMDIiO2k6MTtzOjEyOToiflwkXHcrPS5yV21nc0pnMzJmdmw2QnN4SW1QW149XSs9PS47XCR4Llx3K1xzKj1ccyouc3RyLi4uLnJvdFteXH1dK1x9XH1ccyppZlwoaXNzZXRcKFwkXHcrXClcKVxzKlx7XHMqXCRcdytccyo9XHMqdGVtcG5hbVtefV0rXH1+Ijt9czo0NToiYz0xfTt3aGlsZShjLS0paWYoa1tjXSlwPXAucmVwbGFjZShuZXcgUmVnRXhwIjthOjI6e2k6MDtzOjIwOiJiYWNrZG9vci5qc19ldmFsLjAwMiI7aToxO3M6MjQ1OiJ+PFwhLS1cdystLT48c2NyaXB0XHMqdHlwZT0udGV4dC5qYXZhc2NyaXB0Lj5ccypldmFsXChmdW5jdGlvblwocCxhLGNbXjtdKztpZlwoXCEuLi5yZXBsYWNlXCguXF4uW14nXSsnLi53XCsuXH07XHMqW14nXSsnLi5iLlwrZVwoYy5cK1teXCpdK1wqZlwpOzJbXlx9XStcfVwpXChcKTtccyouLDM1LDM1LC5zcmMuLnZhci5kb2N1bWVudC5yYXptdy5yYXptaFteXC5dKy5zcGxpdFwoLi4uLiwwLFx7XH1cKVwpXHMqPC5zY3JpcHQ+fiI7fXM6ODc6ImVEUm1YSGcwTWwgeDROREZjZURSaiBYSGcxTXlKOVd5IEpjZURjM1hIZzMgTVZ4NE5qZGNlRCBZellseDRObU1pIFhUMGlhMlY1SWogdG1iM0psWVdObyI7YToyOntpOjA7czoyMzoiYmFja2Rvb3Iub2JmdXNjYXRlZC4wMDEiO2k6MTtzOjE2MDoiflBEOXdhSEFnSkhbKD86XHdccyopXStlRFJtWEhnME1sXHMqeDROREZjZURSalxzKlhIZzFNeUo5V3lccypKY2VEYzNYSGczXHMqTVZ4NE5qZGNlRFxzKll6WWx4NE5tTWlccypYVDBpYTJWNUlqXHMqdG1iM0psWVdOb1soPzpcd1xzKildK1hIZzJOQ0pkS1Rccyp0OWZRMEtQejQ9fiI7fXM6OTg6IlNHVm1hbGRwTkcgcFhOSFZMZUhabCBRVFoxWkVKSmRsIE5KYzB0WmJtd3ggVlZwak0xQndaayB0TUwxaHRXbXBHIFJIY3ZVMGRuYVcgeG9aMEp4TkhwNSBaMGxJZVhCeFVVIjthOjI6e2k6MDtzOjIzOiJiYWNrZG9vci5vYmZ1c2NhdGVkLjAwMiI7aToxO3M6MjkxOiJ+UEQ5d2FIQWdKRVsoPzpcd1xzKildK1NHVm1hbGRwTkdccypwWE5IVkxlSFpsXHMqUVRaMVpFSkpkbFxzKk5KYzB0WmJtd3hccypWVnBqTTFCd1prXHMqdE1MMWh0V21wR1xzKlJIY3ZVMGRuYVdccyp4b1owSnhOSHA1XHMqWjBsSWVYQnhVVVsoPzpcd1xzKildK1owYkU4eVYyOWpccypRelpDZFVzMFNtXHMqeE1RVVJwWlRKeFxzKldFTTFZMVZGVXpccypneVQxbEpObGxQXHMqZUVreWJGTk5kelxzKlZxWTJaSlFYRlNccypOeXRwVDJSUWJsXHMqcDJMM1pXZG05R1soPzpcd1xzKildK0lqZzNNU0lwT3dccyo9PX4iO31zOjIzOiJ7aWYoaXNzZXQoJF9GSUxFU1snaW0nXSI7YToyOntpOjA7czoyNDoiaGFja3Rvb2wuZmlsZW1hbmFnZXIuMDAyIjtpOjE7czoxNTY6In48XD9waHBccyppZlwoaXNzZXRcKFwkX0dFVFxbLmdvb2QuXF1cKVwpW149XSs9Z2V0Y3dkLi4uW14sXSssXHMqW147XSs7ZWNoby5bZERdb25lW15cfV0rXH1lbHNlXHsuLi5mb3JtW14+XSs+PGlucHV0XHMqdHlwZT0uZmlsZS4ubmFtZS4uaW1bXlx9XStcfVx9XHMqXD8+fiI7fXM6MjM6ImV2YWwoJ2Z1bmN0aW9uIGZ1bmN0aW9uIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5ldmFsX2Jhc2U2NC4wMDgiO2k6MTtzOjE2MjoifmV2YWxcKC5mdW5jdGlvblxzKmZ1bmN0aW9uXHcrW149XSs9bWQ1W15cfV0rXH1lbHNlXHtbXjxdKzxzdHJsZW5cKFteXF5dK1xeb3JkW147XSs7XH1yZXR1cm5ccypcJFx3KztcfVteIl0rIlx3KyI7XHMqXEBldmFsXChmdW5jdGlvblx3K1woYmFzZTY0X2RlY29kZVteO10rOydcKTt+Ijt9czoyODoiJy5zcGxpdCgnfCcpLDAse30pKTwvc2NyaXB0PiI7YToyOntpOjA7czoxNzoiYmFja2Rvb3IuZXZhbC4wMDIiO2k6MTtzOjI2ODoifjxkaXZccypjbGFzcz0uY2hhbmdlLXRoaXMuPltePF0rPGFccypocmVmPSJodHRwW14iXSsiPltePF0rPC5hPltePF0rPC5kaXY+PHNjcmlwdD5ldmFsXChmdW5jdGlvblteO10rO2lmXChcIS4uLnJlcGxhY2VbXlx7XStce3doaWxlXChjLS1bXiddKycuLndcKydcfTtccypjPVxkK1x9O3doaWxlW147XSs7cmV0dXJuXHMqW14sXSssXGQsXGQsXHdbXjtdKzsuLlxkezIsfSxcZHsyLH0sJ1xkezMsfVteJ10rJy5zcGxpdFwoJ1x8J1wpLFxkLFx7XH1cKVwpPC5zY3JpcHQ+fiI7fXM6NDE6ImV2YWwoYXRvYignZG1GeUlIZ2dQU0JrYjJOMWJXVnVkQzVuWlhSRmJHIjthOjI6e2k6MDtzOjI0OiJiYWNrZG9vci5ldmFsX2Jhc2U2NC4wMDkiO2k6MTtzOjExNjoifjwhLS1ccypzdHlsZT0ucG9zaXRpb246Zml4ZWQ7dG9wOjBweFteIl0rImV2YWxcKGF0b2JcKC5kbUZ5SUhnZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBjMEpbXiJdKyJccypcJmd0O1xzKi0tPn4iO31zOjU0OiJldmFsKGd6aW5mbGF0ZShiYXNlNjRfZGVjb2RlKCdEWmZIRG9RNEdvVHY4eUl6SXc3a3BBMGoiO2E6Mjp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAxMCI7aToxO3M6MTE0OiJ+PD9waHBccypcL1wqXHMqb25saW5lXHMqZW5jb2RlW15lXStldmFsXChnemluZmxhdGVcKGJhc2U2NF9kZWNvZGVcKC5EWmZIRG9RNEdvVHY4eUl6SXc3a3BBMGpbXj1dKz0uXClcKVwpO1xzKlw/Pn4iO31zOjUwOiJldmFsKGd6aW5mbGF0ZShiYXNlNjRfZGVjb2RlKCc3YjFyZXhvNUVqRDYyZk04OHg4NiI7YToyOntpOjA7czoyNDoiYmFja2Rvb3IuZXZhbF9iYXNlNjQuMDExIjtpOjE7czoxNDc6In5pZlxzKlwoc3RycG9zXChcJF9TRVJWRVJcWy5QSFBfU0VMRi5cXSwucnNzcG9zdGVyLnBocC5cKVwpXHMqXHtccypldmFsXChnemluZmxhdGVcKGJhc2U2NF9kZWNvZGVcKC43YjFyZXhvNUVqRDYyZk04OHg4NlteJ10rJ1wpXClcKTtccypleGl0O1xzKlx9fiI7fXM6MzE6Il0pKXtAZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9TVFsiO2E6Mjp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAxNCI7aToxO3M6MTE0OiJ+PFw/cGhwXHMqW15AXStAZXZhbFwoYmFzZTY0X2RlY29kZVwoXCRfUE9TVFxbXHcrXF1cKVwpO2V4aXQ7XH1pZlwoaXNzZXRcKFwkX0dFVFxbXHcrXF1cKVwpXHtwaHBpbmZvXChcKTtcfVxzKlw/Pn4iO31zOjU6ImV2YWwoIjthOjE6e2k6MDtzOjE3OiJiYWNrZG9vci5ldmFsLjAwMyI7fXM6ODoic3lzdGVtKCciO2E6MTp7aTowO3M6MTk6ImJhY2tkb29yLnN5c3RlbS4wMDEiO31zOjc6ImFzc2VydCgiO2E6MTp7aTowO3M6MTk6ImJhY2tkb29yLmFzc2VydC4wMDEiO31zOjEzOiJwcmVnX3JlcGxhY2UoIjthOjE6e2k6MDtzOjI1OiJiYWNrZG9vci5wcmVnX3JlcGxhY2UuMDAxIjt9czo1MDoiPSBwcmVnX3JlcGxhY2UoJGFzLCBzdHJ0cigkdmJnLCAkeG1sLCAkeG1sMiksICdjc3MiO2E6MTp7aTowO3M6MjU6ImJhY2tkb29yLnByZWdfcmVwbGFjZS4wMDIiO31zOjI0OiI9cHJlZ19yZXBsYWNlKCRmLHN0cnRyKCQiO2E6MTp7aTowO3M6MjU6ImJhY2tkb29yLnByZWdfcmVwbGFjZS4wMDMiO31zOjU2OiIkY29udGVudCA9IHByZWdfcmVwbGFjZSgnITwvYm9keT4hc2knLCAkY29kZSAuICc8L2JvZHk+JyI7YToxOntpOjA7czoyNToiYmFja2Rvb3IucHJlZ19yZXBsYWNlLjAwNCI7fXM6MTk6IkBldmFsKEBnenVuY29tcHJlc3MiO2E6MTp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAxMyI7fXM6NDc6IiRkYXRhPU1PRHggQ2FjaGUgRGF0YSAoZG9udCBjaGFuZ2UpO3RleHQ7ZXlKdFpYIjthOjE6e2k6MDtzOjI0OiJoYWNrdG9vbC5maWxlbWFuYWdlci4wMDYiO31zOjIyOiJpZiAoc3RycG9zICgkcmVmLCAnZycuIjthOjE6e2k6MDtzOjE5OiJiYWNrZG9vci5zdHJwb3MuMDAyIjt9czo0ODoiQGVycm9yX3JlcG9ydGluZygwKTsgQHNldF90aW1lX2xpbWl0KDApOyAgICRjb2RlIjthOjE6e2k6MDtzOjE3OiJiYWNrZG9vci5ldmFsLjAwNCI7fXM6MzQ6ImlmKCAkX1BPU1RbJ191cGwnXSA9PSAiVXBsb2FkIiApIHsiO2E6MTp7aTowO3M6MjQ6ImhhY2t0b29sLmZpbGVtYW5hZ2VyLjAwNSI7fXM6MjI6IiRfUE9TVFsncGFzc3dvcmQnXSA9PSAiO2E6MTp7aTowO3M6MjQ6ImhhY2t0b29sLmZpbGVtYW5hZ2VyLjAwNCI7fXM6MjQ6ImZpbGVfZ2V0X2NvbnRlbnRzKCdodHRwOiI7YToxOntpOjA7czoyNDoiaGFja3Rvb2wuZmlsZW1hbmFnZXIuMDAzIjt9czo1MDoiaWYgKHN0cnBvcygkX1NFUlZFUlsnUEhQX1NFTEYnXSwnc3Vic2NyaXB0aW9ucy5waHAiO2E6MTp7aTowO3M6MTk6ImJhY2tkb29yLnN0cnBvcy4wMDEiO31zOjIzOiJpZihpc3NldCgkX1JFUVVFU1RbJ3gnXSI7YToxOntpOjA7czoyMDoiYmFja2Rvb3IuUkVRVUVTVC4wMDEiO31zOjI5OiJTRUxFQ1QgYGNvZGVgIEZST00gYHdwX2NvbmZpZyI7YToxOntpOjA7czoyNToiaGFja3Rvb2wud3BfY29uZmlnX2RiLjAwMSI7fXM6Mzc6ImJhc2U2NF9kZWNvZGUoZ2V0X29wdGlvbigiX3NpdGVfY2FjaGUiO2E6MTp7aTowO3M6MjQ6ImJhY2tkb29yLmV2YWxfYmFzZTY0LjAxMiI7fXM6NToiSG1laTciO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDEyIjt9czo2OiJhcmdhaXYiO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDEzIjt9czo2OiJzaWxhaWMiO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDE0Ijt9czo4OiJlbGl0Y2VyZSI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMTUiO31zOjk6ImVjbmV0b3BtaSI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMTYiO31zOjg6InljYW1yYWhwIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAxNyI7fXM6NjoieWFkeWFwIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAxOCI7fXM6MTQ6ImV0aXJ3LnRuZW11Y29kIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAxOSI7fXM6NjoiNDZlc2FiIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAyMCI7fXM6MTI6ImVjYWxwZXJfZ2VycCI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMjEiO31zOjk6ImV0YWxmbml6ZyI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMjIiO31zOjExOiJhbF9raV9zaGVsbCI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMjMiO31zOjY6IkxDV0VISCI7YToxOntpOjA7czoyMzoiaW5qZWN0ZWQuaGlkZGVuLWRpdi4wMjQiO31zOjE2OiJwdHRoIj1jcnMgdHBpcmNzIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAyNSI7fXM6NToidWdnYzoiO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDI2Ijt9czo0OiIuZWpsIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAyNyI7fXM6MTM6ImNoZWFwIHJheSBiYW4iO2E6MTp7aTowO3M6MjM6ImluamVjdGVkLmhpZGRlbi1kaXYuMDI4Ijt9czoxMjoibW9jLm5pYmV0c2FwIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAyOSI7fXM6Njg6IlRVVlVRU0JvZEhSd0xXVnhkV2wyUFNKeVpXWnlaWE5vSWlCamIyNTBaVzUwUFNJd08zdG1jbUZ0WlY5MWNteDlJajRLIjthOjE6e2k6MDtzOjIzOiJpbmplY3RlZC5oaWRkZW4tZGl2LjAzMCI7fXM6MTA6InBhc3N0aHJ1KCQiO2E6MTp7aTowO3M6MjE6ImhhY2t0b29sLnBhc3N0aHJ1LjAwMSI7fXM6MTY6Imh0dHAub3BlbigiUE9TVCIiO2E6MTp7aTowO3M6MTc6ImJhY2tkb29yLlBPU1QuMDAxIjt9czoyNToiZGVidWcoJ0hPT0sgLSBhZGRfcmVrbGFtYSI7YToxOntpOjA7czoxODoiYmFja2Rvb3Iuc2hlbGwuMDAxIjt9czo3OiJTSEVMTCc+IjthOjE6e2k6MDtzOjE4OiJiYWNrZG9vci5zaGVsbC4wMDIiO31zOjI4OiJQcm9kdWN0IEtleTwvYT4mbmJzcDsmbmJzcDt8IjthOjE6e2k6MDtzOjIxOiJpbmplY3RlZC5zcGFtLXNlby4wMDEiO31zOjIxOiJQcm9kdWN0IEtleSBHZW5lcmF0b3IiO2E6MTp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAwMiI7fXM6MTQ6Im1vYy5uaWJldHNhcC8vIjthOjE6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAwMSI7fXM6MzE6ImJkdi5iaWR2ZXJ0aXNlci5jb20vQmlkVmVydGlzZXIiO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDAyIjt9czo0MDoicCsnd3d3LndlYnV0YXRpb24ubmV0L2pzL2xvYWRfYmFkZ2UuanMnOyI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMDMiO31zOjE3OiJvbmxpbmUtc2FsZTI0LmNvbSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMDQiO31zOjEyOiJlY2xrc3Bibi5jb20iO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDA1Ijt9czoyNDoiYWRzaGV4YS5jb20vc2hvd19hZHMucGhwIjthOjE6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAwNiI7fXM6MTU6ImxvZ2lzdGljdXNhLmJpeiI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMDciO31zOjMwOiJha2FtYWloZC5uZXQvbG9hZGVycy8xMDMyL2wuanMiO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDA4Ijt9czoxNjoiLWJpbmFyeS1vcHRpb25zLSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMDkiO31zOjE2OiJzZW5kaW5nLW1vbmV5LXRvIjthOjE6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAxMCI7fXM6MTQ6ImFkU2VydmUvYmFubmVyIjthOjE6e2k6MDtzOjI2OiJpbmplY3RlZC5tYWxpY2lvdXNfVVJMLjAxMSI7fXM6MTU6InNyYz0nLy9lY2xrbXBzYSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTIiO31zOjE3OiJzcmM9Ii8vZ28ubW9iaXNsYSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTMiO31zOjE3OiJzcmM9Ii8vZ28ucHViMnNydiI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTQiO31zOjk6ImMwNTk0LmNvbSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTUiO31zOjIzOiJqcy9nb29nbGUtc2VydmljZXMucGhwPyI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTYiO31zOjI2OiJyZXN0d3AubW9iaWRlYS5jb20vanNyZWRpciI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWFsaWNpb3VzX1VSTC4wMTciO31zOjI0OiJ3ZWJkYXRhc291cmNldHJhZmZpYy54eXoiO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDE4Ijt9czoyNjoidGhlbWUtaW5kZXgucGhwIj48L3NjcmlwdD4iO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDE5Ijt9czozMjoibWFnZW50b19nb29naWVwbGF5LmpzIj48L3NjcmlwdD4iO2E6MTp7aTowO3M6MjY6ImluamVjdGVkLm1hbGljaW91c19VUkwuMDIwIjt9czo2MzoibWV0YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIwO1VSTD1odHRwOi8vbWlxaXoudm9sdXVtdHJrIjthOjE6e2k6MDtzOjIxOiJpbmplY3RlZC5tZXRhX3RhZy4wMDEiO31zOjE3OiJGUkVFIEdpZnQhPC9zcGFuPiI7YToxOntpOjA7czoyMToiaW5qZWN0ZWQuc3BhbS1zZW8uMDAzIjt9czozMzoic2NyaXB0IHNyYz0iaHR0cHM6Ly9qcXVlcnktY3NzLnN1IjthOjE6e2k6MDtzOjI0OiJpbmplY3RlZC5mYWtlX2pxdWVyeS4wMDEiO31zOjM3OiJkb2N1bWVudC5sb2NhdGlvbj0iaHR0cDovL2lsaGFiZWxlbnNlIjthOjE6e2k6MDtzOjMzOiJpbmplY3RlZC5qc19kb2N1bWVudF9sb2NhdGlvbi4wMDEiO31zOjIwOiJUb3JyZW50IERvd25sb2FkPGJyPiI7YToxOntpOjA7czoyMToiaW5qZWN0ZWQuc3BhbS1zZW8uMDA0Ijt9czoyMDoiZ2NjIC1vIC90bXAvYW5nZWxfYmMiO2E6MTp7aTowO3M6MTg6ImJhY2tkb29yLmFuZ2VsLjAwMSI7fXM6MTU6ImltYWdlcy93ZWxjb21lXyI7YToyOntpOjA7czoxODoiaW5qZWN0ZWQuaW1hZ2UuMDAxIjtpOjE7czozOToifiguLikuXHcrXC9pbWFnZXNcL3dlbGNvbWVfMjAxXGQrXC5wbmd+Ijt9czoyMToieG1sLnBocD9hPWlubmVyJmhvc3Q9IjthOjI6e2k6MDtzOjI1OiJiYWNrZG9vci5nZXRfY29udGVudHMuMDAxIjtpOjE7czoxNjk6In5cJGNvbmZpZ19cdytccz1cc2ZpbGVfZ2V0X2NvbnRlbnRzXCguaHR0cDouLlteXD9dK1w/YT1pbm5lclwmaG9zdD0uXHMuXHNcJF9TRVJWRVIuLlNFUlZFUl9OQU1FLi4uLi4uanMuXCk7XHNpZi5zdHJsZW4uLmNvbmZpZy5cdysuXHM+XHMwLlx7XHNldmFsXChcJGNvbmZpZ19cdytcKVw7XHNcfX4iO31zOjI0OiJ3ZW1vdmVkdG90aGlzYWRkcmVzcy5jb20iO2E6Mjp7aTowO3M6MjE6ImluamVjdGVkLnNwYW0tc2VvLjAwNSI7aToxO3M6MTcyOiJ+PGFccypocmVmPS5odHRwLi4ud2Vtb3ZlZHRvdGhpc2FkZHJlc3MuY29tLmNhdGFsb2cuW0JiXWVzdHNlbGxlcnMuW1Z2XWlhZ3JhLlx3Ky4+PGltZ1xzKlteOl0rLi4ud2Vtb3ZlZHRvdGhpc2FkZHJlc3NbXiJdKyJccyphbHRbXj5dKz48LmE+XHMqPGgyPjxzdHJvbmc+XHMqPC5zdHJvbmc+PC5oMj5+Ijt9czo0MDoiY29udGVudD0iMDtVUkw9aHR0cDovL3hnZW5jYXNsYW5uLmVzeS5lcyI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWV0YV9yZWRpcmVjdC4wMDEiO31zOjU2OiJtZXRhIGh0dHAtZXF1aXY9JnF1b3Q7cmVmcmVzaCZxdW90OyBjb250ZW50PSZxdW90OzA7VVJMPSI7YToxOntpOjA7czoyNjoiaW5qZWN0ZWQubWV0YV9yZWRpcmVjdC4wMDIiO31zOjI3OiJsZWFkcGxheS5tb2JpLz90cmFja2luZ19pZD0iO2E6Mjp7aTowO3M6MjY6ImluamVjdGVkLm1ldGFfcmVkaXJlY3QuMDAzIjtpOjE7czo5OToifjxtZXRhXHMqaHR0cC1lcXVpdj0ucmVmcmVzaC5ccypjb250ZW50PS4xO1VSTD1odHRwczouLih3d3cuKWxlYWRwbGF5Lm1vYmkuXD90cmFja2luZ19pZD1bXiJdKyIuLj5+Ijt9czoyMzoiL2ljLmpzIj48L3NjcmlwdD5IQUNLRUQiO2E6MTp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAwMSI7fXM6OToiSEFDS0VEIEJZIjthOjE6e2k6MDtzOjIxOiJkZWZhY2VkLmhhY2tlZF9ieS4wMDIiO31zOjk6IkhhY2tlZCBCeSI7YToxOntpOjA7czoyMToiZGVmYWNlZC5oYWNrZWRfYnkuMDAzIjt9czoxNzoiPHRpdGxlPkhhY2tlZD8gTXIiO2E6MTp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAwNCI7fXM6MTM6Ijx0aXRsZT5IYWNrZWQiO2E6MTp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAwNSI7fXM6MTM6Ijx0aXRsZT5IQUNLRUQiO2E6MTp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAwNiI7fXM6OToiSEFDS0VEIEJ5IjthOjE6e2k6MDtzOjIxOiJkZWZhY2VkLmhhY2tlZF9ieS4wMDciO31zOjIwOiJIYWNrZWQgQnkgTXVobWFkRW1hZCI7YToyOntpOjA7czoyMToiZGVmYWNlZC5oYWNrZWRfYnkuMDA4IjtpOjE7aToxMjt9czo5OiJIYUNrZUQgYnkiO2E6MTp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAwOSI7fXM6MTU6IiU2MSU2MyU2YiU2NSU2NCI7YToxOntpOjA7czoyMToiZGVmYWNlZC5oYWNrZWRfYnkuMDEwIjt9czo2NToiZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IHVuZXNjYXBlKCclNDglNjElNjMlNmIlNjUlNjQiO2E6Mjp7aTowO3M6MjE6ImRlZmFjZWQuaGFja2VkX2J5LjAxMSI7aToxO3M6MTA4OiJ+PHNjcmlwdD5kb2N1bWVudFwuZG9jdW1lbnRFbGVtZW50XC5pbm5lckhUTUxccypcPVxzKnVuZXNjYXBlXCguKCVcZCtccyopPyU2MSU2MyU2YiU2NSU2NFteXCldK1wpOzwuc2NyaXB0Pn4iO31zOjEwOiJSMDB0U0xheWVyIjthOjI6e2k6MDtzOjIxOiJkZWZhY2VkLmhhY2tlZF9ieS4wMTUiO2k6MTtzOjEwNDoiflswT29dd25bM0VlXWRccypbQmJdeVxzKiguKT9ccypSMDB0U0xheWVyXHMqKC4pP1xzKltQcF1yaXZhdGVoYWNrZXJzXC5jb20oXHMqIyspPyhccyo8aW1nIHNyYz1bXj5dKz4pP34iO319' ) );



define('CI_NAME', 0);
define('CI_ACTION', 1);
define('CI_WHITELIST', 2);

define('PCRE_DELIM', '~'); // Delimiter for PCRE regular expressions
define('POSIX_DELIM', '/'); // Delimiter for POSIX regular expressions


define('QUARANTINE_FOLDER', '.' . DIRECTORY_SEPARATOR . '.sucuriquarantine');
define('BACKUP_APPENDIX', '_sucuridbbackup.');
define('SUCURI_KEY', 'kduhgop32lkj');
define('BACKUP_COMMENT', "-- sucuri_backup");
define('RESUME_FILE_NAME', '.sucuridbresume.txt');

define('UPDATE_ERR_BACKUP_DIR', 1);
define('UPDATE_ERR_BACKUP_FILE', 2);
define('UPDATE_ERR_CHANGED', 3);
define('UPDATE_ERR_NO_PRI', 4);

$updateErrMessages = array(
    UPDATE_ERR_BACKUP_DIR => 'Create backup dir failed',
    UPDATE_ERR_BACKUP_FILE => 'Create backup file failed',
    UPDATE_ERR_CHANGED => 'The database column was simultaneously changed by another program. Please try again',
    UPDATE_ERR_NO_PRI => 'No primary key found',
);

// If running via terminal
if (isTerminal()) {
    parse_str(implode('&', array_slice($argv, 1)), $_GET);
}

// Auto remove sucuri scripts
if (!isset($_GET['srun'])) {
    @unlink('sucuri-cleanup.php');
    @unlink('sucuri-version-check.php');
    @unlink('sucuri-db-cleanup.php');
    @unlink('sucuri-db-clean.php');
    @unlink('sucuri_db_clean.php');
    @unlink('sucuri_listcleaned.php');
    @unlink(__FILE__);
    exit;
}

// Get file content and find the line with content
function findLineInFile($file, $content)
{
    $fh = @fopen($file, "r");
    if (!$fh) {
        echo "UNABLE TO CHECK\n";
        return 0;
    }
    while (($buffer = fgets($fh, 4096)) !== false) {
        if (strpos($buffer, $content) !== false) {
            fclose($fh);
            return $buffer;
        }
    }
    fclose($fh);
    return null;
}

if (!function_exists('file_get_contents')) { // below PHP 4.3
    function file_get_contents($fileName) {
        $fh = @fopen($fileName);
        if ($fh === false) {
            return false;
        }
        $res = fread($fh, 1048576);
        fclose($fh);
        return $res;
    }
}

define('OPT_TYPE_CONST',  1);
define('OPT_TYPE_VAR',    2);
define('OPT_TYPE_ASSOC',  4);
define('OPT_TYPE_ENV',    8);
define('OPT_TYPE_XML',   16);
define('OPT_TYPE_FIRST', 32);

function getOptMatch($m, $type)
{
    return ($type & OPT_TYPE_FIRST) ? $m[0] : $m[count($m) - 1];
}

function getOption($option, $config, $type)
{
    $option = preg_quote($option);

    // Constants (WordPress)
    if (($type & OPT_TYPE_CONST) &&
        preg_match_all('@^\s*define\(\s*([\'"])' . $option . '\1\s*,\s*([\'"])(.*)\2\s*\)\s*;@m', $config, $m)) {
            return stripslashes(getOptMatch($m[3], $type));
    }

    // wp-config.php trick, see
    // http://www.wpbeginner.com/wp-tutorials/useful-wordpress-configuration-tricks-that-you-may-not-know/
    if (($type & OPT_TYPE_ENV) && preg_match('@^\s*define\(\s*([\'"])' . $option . '\1\s*,\s*\$_ENV\s*[[{]\s*' .
        '([\'"]?)DATABASE_SERVER\2\s*[}\]]\s*\)\s*;@m', $config, $m)) {
            return $_ENV['DATABASE_SERVER'];
    }

    // Variables (Joomla, WordPress prefix)
    if (($type & OPT_TYPE_VAR) &&
        preg_match_all('@^\s*(?:public|var)?\s*' . $option . '\s*=\s*(?:([\'"])(.*)\1|([0-9]+))\s*;@m', $config, $m)) {
            $str = getOptMatch($m[2], $type); // Return the string m[2] or the number m[3] if the string was not found
            return $str ? stripslashes($str) : getOptMatch($m[3], $type);
    }
    
    // Associative arrays (Drupal)
    if (($type & OPT_TYPE_ASSOC) &&
        preg_match_all('@(?:^|,|\()\s*([\'"])' . $option . '\1\s*=>\s*([\'"])(.*?)\2\s*[,)]@m', $config, $m)) {
            return stripslashes(getOptMatch($m[3], $type));
    }
    
    // Magento XML config
    if (($type & OPT_TYPE_XML) && preg_match_all('@^\s*<' . $option . '>(?:<!\[CDATA\[|\{\{)(.*)(?:}}|\]\]>)</' .
        $option . '>\s*$@m', $config, $m)) {
            return getOptMatch($m[1], $type);
    }
    
    return '';
}


// Properly escape HTML content
function escapeHTML($string)
{
    global $isPlainText;
    
    if ($isPlainText) {
        return $string;
    }

    if (!defined('ENT_SUBSTITUTE')) {
        define('ENT_SUBSTITUTE', 0);
    }

    return htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
}


if (isset($_GET['tests'])) {
    include 'sucuri-db-tests.php';
    runTests();
    exit;
}

// Find the output format
$isPlainText = false;
if (isset($_GET['robot'])) {
    $isPlainText = true;
    if (!isset($_GET['dump'])) {
        header('Content-Type: text/plain');
    }
} elseif (isTerminal()) {
    $isPlainText = true;
}

if (!isset($_GET['dump'])) {
    if (!$isPlainText) {
        echo '<style><!--
.cleared {color: green}
.warn {color: red; font-weight: bold}
.hidden-copied {position: absolute; opacity: 0; z-index: -999}
.inserted::before {content: attr(data-content)}
textarea {font-family: monospace; font-size: 100%; overflow: auto}
--></style><pre style="white-space:pre-wrap">';
    }

    printMsg("Sucuri Database Cleanup");
    $version = ' v1.3.2 - build ' . $myversion;
    if ($isPlainText) {
        echo $version;
    } else {
        // Make the version selectable to allow easy copying to Jira
        echo '<input type="text" readonly name="version" style="border:none;font-family:monospace;font-size: 100%" '.
             'size="' . (strlen($version) + 10) . '" value="' . $version . '" onclick="this.setSelectionRange(1, ' .
             strlen($version) . ')">';
    }
    printMsg("\n\n");
}

// Create sucuri_db_clean.php
if (isset($_GET['dbconfig'])) {
    doDbConfig();
}

$config = getCMSConfig();

if (null === $config) {
    doDbConfig();
}

$driver = function_exists('mysqli_connect') ? new MySQLIDriver() : new MySQLDriver();
$errMsg = $driver->connect($config);
if ($errMsg !== true) {
    reportFatalError($errMsg);
}

if (!isset($_GET['dump'])) {
    printMsg("\nINFO: Connected to " . $driver->getName() . "\n");
}


// Show field/row content
if (isset($_GET['showcontent'])
    && isset($_GET['t'])
    && isset($_GET['c'])
    && isset($_GET['id_name'])
    && isset($_GET['id'])
) {
    showContent($driver, $_GET['t'], $_GET['c'], $_GET['id_name'], $_GET['id']);
}

// Restore database
if (isset($_GET['restore'])) {
    restore($driver, $_GET['restore']);
}

// Search all tables

$tablesColumns = $driver->getTablesColumns($config);

if (isset($_GET['list'])) {
    listTables($driver, $tablesColumns, $config);
}

if (isset($_GET['dump'])) {
    dumpTables($driver, $_GET['dump'], $tablesColumns, $config['db']);
}


readSkipTable($tablesColumns);

$foundMalware = false;

startResume();

if (isset($_GET['s'])) {
    $searchSignature = getSearchSignature();
    searchAndClear($driver, $tablesColumns, $searchSignature);
    replaceInTerminal($driver, $tablesColumns, $searchSignature);
} else {
    searchAndClear($driver, $tablesColumns, $DB_SIGS);

    deleteRows($driver, $tablesColumns, $config);

    checkWPDefaultUserRole($driver, $tablesColumns, $config);
}

checkSkippedTables();

$verdict = '';

if (!$foundMalware) {
    $verdict = '. No malware found';
} elseif (!isset($_GET['noclean'])) {
    // When using noclean, it reports "Found malware to clean", so we don't suggest to copy these lines
    $verdict = '. Press Ctrl+A, then Ctrl+C to copy the report';
}

printMsg("\n\nINFO: Scanning complete" . $verdict);

printMsg("\nTools: ");

$tools = array(
    'dbconfig',
    'list',
    's',
    'restore',
    'dump',
    '',
    'noclean',
    'noise',
    'skiptable=wp_comments,wp_commentmeta',
    'scantable=wp_posts,wp_options',
    'resume',
);

foreach ($tools as $tool) {
    if ($tool === '') {
        printMsg("\n");
        continue;
    }
    printInsertedLink($tool);
    printMsg("  ");
}

echo $isPlainText ? "\n" : '</pre>';
@flush();

finishResume(); // delete the resume file after all operations to ensure that we run to the end

$driver->disconnect();
exit;

// ======================================================
// DB abstraction layer

class MySQLCommon
{
    function escapeName($name)
    {
        // See https://dev.mysql.com/doc/refman/5.7/en/identifiers.html
        return '"' . str_replace('"', '""', $name) . '"';
    }
    
    function begin()
    {
        $this->query('SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;');
        $this->query('BEGIN;');
    }
    
    function commit()
    {
        $this->query('COMMIT;');
    }
    
    function rollback()
    {
        $this->query('ROLLBACK;');
    }
    
    function getTablesColumns($config)
    {
        $scannedTypes = array(
            'varchar' => 1, 'char' => 1,
            'tinytext' => 1, 'mediumtext' => 1, 'text' => 1, 'longtext' => 1,
            'binary' => 1, 'varbinary' => 1,
            'tinyblob' => 1, 'blob' => 1, 'mediumblob' => 1, 'longblob' => 1);
        
        // Get all tables
        $tablesResult = $this->query('SHOW TABLES;');

        $allTables = array();
        while ($tablesRow = $this->fetchRow($tablesResult)) {
            // Report tables that does not begin with the Wordpress prefix
            $table = $tablesRow[0];
            if (!empty($config['prefix']) && 0 !== strncmp($table, $config['prefix'], strlen($config['prefix'])) &&
                !isset($_GET['dump'])) {
                printMsg("\nWARN: Table " . $table . ' does not start with prefix ' .
                    $config['prefix'] . ';', ' whitelists and CMS-specific rules will not work for this table');
            }
            
            $allTables[$table] = array();
            
            // Get all columns
            $columnsResult = $this->query('SHOW COLUMNS FROM ' . $this->escapeName($table) . ';');
            $uniqueString = null;
            $compositePrimary = false;
            while ($columnsRow = $this->fetchAssoc($columnsResult)) {
                $type = $columnsRow['Type'];
                $pos = strpos($type, "(");
                if ($pos !== false) {
                    $type = substr($type, 0, $pos);
                }

                if (strtoupper($columnsRow['Key']) === 'PRI') {
                    if (isset($allTables[$table]['idname'])) {
                        $compositePrimary = true;
                    }
                    $allTables[$table]['idname'] = $columnsRow['Field'];
                }
                
                $type = strtolower(trim($type));
                if (!isset($scannedTypes[$type])) {
                    continue;
                }
                
                // Prefer unique string keys to display wp_options.option_name instead of the numeric ID
                if (strtoupper($columnsRow['Key']) === 'UNI') {
                    $uniqueString = $columnsRow['Field'];
                }
                
                $allTables[$table][] = $columnsRow['Field'];
            }
            
            if ($uniqueString !== null) {
                $allTables[$table]['idname'] = $uniqueString;
            } elseif ($compositePrimary) { // Disable the cleanup for composite primary keys and no primary key
                unset($allTables[$table]['idname']);
            }
        }
        return $allTables;
    }
    
    function getColumnNamesTypes($table)
    {
        $columnsResult = $this->query('SHOW COLUMNS FROM ' . $this->escapeName($table) . ';');
        
        $binaryTypes = array('binary' => 1, 'varbinary' => 1,
            'tinyblob' => 1, 'blob' => 1, 'mediumblob' => 1, 'longblob' => 1);
        
        $numericTypes = array('tinyint' => 1, 'smallint' => 1, 'mediumint' => 1,
            'int' => 1, 'integer' => 1, 'bigint' => 1,
            'decimal' => 1, 'dec' => 1, 'numeric' => 1, 'fixed' => 1,
            'float' => 1, 'real' => 1, 'double' => 1, 'double precision' => 1);
        
        $names = array();
        $types = array();
        
        while ($columnsRow = $this->fetchAssoc($columnsResult)) {
            $names[] = $columnsRow['Field'];
            
            $type = $columnsRow['Type'];
            $pos = strpos($type, "(");
            if ($pos !== false) {
                $type = substr($type, 0, $pos);
            }
            $type = strtolower(trim($type));
            
            if (isset($numericTypes[$type])) {
                $types[] = 'num';
            } elseif (isset($binaryTypes[$type])) {
                $types[] = 'bin';
            } elseif ($type === 'bit') {
                $types[] = 'bit';
            } else {
                $types[] = 'other';
            }
        }
        
        return array($names, $types);
    }
    
    function exportRow($row, $types)
    {
        for ($i = 0; $i < count($row); $i++) {
            if ($row[$i] === null) {
                $row[$i] = 'NULL';
            } elseif ($types[$i] === 'bin') {
                // Story binary data as hex to avoid encoding problems
                $row[$i] = 'UNHEX(' . $this->escapeStr(bin2hex($row[$i])) . ')';
            } elseif ($types[$i] === 'bit') {
                // TODO: tests under PHP 4
                // See https://stackoverflow.com/questions/15106985/
                $row[$i] = "b'" . decbin($row[$i]) . "'";
            } elseif ($types[$i] === 'num') {
                $row[$i] = (string)$row[$i];
            } else {
                $row[$i] = $this->escapeStr($row[$i]);
            }
        }
        return implode(', ', $row);
    }
    
    function getCreateTableSql($table)
    {
        $res = $this->query('SHOW CREATE TABLE ' . $this->escapeName($table) . ';');
        $row = $this->fetchRow($res);
        
        if (!$row) {
            exit('Unexpected empty result from SHOW CREATE TABLE');
        }
        
        return $row[1] . ";\n\n";
    }
    
    function getCreateDBSql($db)
    {
        $res = $this->query('SHOW CREATE DATABASE ' . $this->escapeName($db) . ';');
        $row = $this->fetchRow($res);
        
        if (!$row) {
            exit('Unexpected empty result from SHOW CREATE DATABASE');
        }
        
        return $row[1] . ";\nUSE " . $this->escapeName($db) . ";\n\n";
    }
    
    function getDumpHeader()
    {
        return
            "SET NAMES 'utf8';\n" .
            "SET sql_mode='NO_AUTO_VALUE_ON_ZERO,ANSI_QUOTES,STRICT_TRANS_TABLES';\n" .
            "SET foreign_key_checks=0;\n";
    }
    
    function setModes()
    {
        $this->query("SET NAMES 'utf8';");
        $this->query("SET sql_mode='PIPES_AS_CONCAT,IGNORE_SPACE," .
            "NO_AUTO_VALUE_ON_ZERO,ANSI_QUOTES,STRICT_TRANS_TABLES';");
    }
}

class MySQLDriver extends MySQLCommon
{
    var $link;
    
    function connect($config)
    {
        // Connect to DB
        $host = $config['host'];
        if (isset($config['port'])) {
            $host .= ':' . $config['port'];
        }
        $this->link = @mysql_connect($host, $config['user'], $config['pass']);
        if ($this->link === false) {
            return 'Could not connect to MySQL database: ' . mysql_error();
        }
        
        mysql_select_db($config['db'], $this->link);
        
        $this->setModes();
        return true;
    }
    
    function disconnect()
    {
        mysql_close($this->link);
    }
    
    function escapeStr($str)
    {
        return "'" . mysql_real_escape_string($str, $this->link) . "'";
    }
    
    function query($sql)
    {
        global $isPlainText;
        $res = mysql_query($sql, $this->link);
        if (!$res) {
            $error = mysql_error($this->link);
            if (!$isPlainText) {
                $error = '<b>' . escapeHtml($error) . '</b>';
            }
            echo "\n" . escapeHtml(substr($sql, 0, 100)) . ' -- ' . $error . "\n";
            exit(1);
        }
        return $res;
    }
    
    function fetchAssoc($res)
    {
        $row = mysql_fetch_assoc($res);
        if (false === $row) {
            mysql_free_result($res);
        }
        return $row;
    }
    
    function fetchRow($res)
    {
        $row = mysql_fetch_row($res);
        if (false === $row) {
            mysql_free_result($res);
        }
        return $row;
    }
    
    function getAffectedRows()
    {
        return mysql_affected_rows($this->link);
    }
    
    function getName()
    {
        return 'MySQL database';
    }
}

class MySQLIDriver extends MySQLCommon
{
    var $link;
    
    function connect($config)
    {
        // Connect to DB
        $port = isset($config['port']) ? $config['port'] : null;
        $this->link = @mysqli_connect($config['host'], $config['user'], $config['pass'], $config['db'], $port);
        if ($this->link === false) {
            return 'Could not connect to MySQLi database: ' . mysqli_connect_error();
        }

        $this->setModes();
        return true;
    }
    
    function disconnect()
    {
        mysqli_close($this->link);
    }
    
    function escapeStr($str)
    {
        return "'" . mysqli_real_escape_string($this->link, $str) . "'";
    }
    
    function query($sql)
    {
        global $isPlainText;
        $res = mysqli_query($this->link, $sql);
        if (!$res) {
            $error = mysqli_error($this->link);
            if (!$isPlainText) {
                $error = '<b>' . escapeHtml($error) . '</b>';
            }
            
            echo "\n" . escapeHtml(substr($sql, 0, 100)) . ' -- ' . $error . "\n";
            exit(1);
        }
        return $res;
    }
    
    function fetchAssoc($res)
    {
        $row = mysqli_fetch_assoc($res);
        if (false === $row) {
            mysqli_free_result($res);
        }
        return $row;
    }
    
    function fetchRow($res)
    {
        $row = mysqli_fetch_row($res);
        if (false === $row) {
            mysqli_free_result($res);
        }
        return $row;
    }
    
    function getAffectedRows()
    {
        return mysqli_affected_rows($this->link);
    }
    
    function getName()
    {
        return 'MySQLi database';
    }
}


// ======================================================
// Read CMS configuration

/**
 * Returns the credentials to connect to a WordPress database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readWordPressConfig($lines)
{
    return array(
        'host' => getOption('DB_HOST', $lines, OPT_TYPE_CONST | OPT_TYPE_ENV),
        'user' => getOption('DB_USER', $lines, OPT_TYPE_CONST),
        'pass' => getOption('DB_PASSWORD', $lines, OPT_TYPE_CONST),
        'db' => getOption('DB_NAME', $lines, OPT_TYPE_CONST),
        'prefix' => getOption('$table_prefix', $lines, OPT_TYPE_VAR),
    );
}

/**
 * Returns the credentials to connect to a Magento1 database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readMagento1Config($lines)
{
    return array(
        'host' => getOption('host', $lines, OPT_TYPE_XML),
        'user' => getOption('username', $lines, OPT_TYPE_XML),
        'pass' => getOption('password', $lines, OPT_TYPE_XML),
        'db' => getOption('dbname', $lines, OPT_TYPE_XML),
        'prefix' => getOption('table_prefix', $lines, OPT_TYPE_XML),
    );
}

/**
 * Returns the credentials to connect to a Magento2 database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readMagento2Config($lines)
{
    return array(
        'host' => getOption('host', $lines, OPT_TYPE_ASSOC),
        'user' => getOption('username', $lines, OPT_TYPE_ASSOC),
        'pass' => getOption('password', $lines, OPT_TYPE_ASSOC),
        'db' => getOption('dbname', $lines, OPT_TYPE_ASSOC),
        'prefix' => getOption('table_prefix', $lines, OPT_TYPE_ASSOC),
    );
}

/**
 * Returns the credentials to connect to a Drupal database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readDrupalConfig($lines)
{
    return array(
       'host' => getOption('host', $lines, OPT_TYPE_ASSOC | OPT_TYPE_FIRST),
       'user' => getOption('username', $lines, OPT_TYPE_ASSOC | OPT_TYPE_FIRST),
       'pass' => getOption('password', $lines, OPT_TYPE_ASSOC | OPT_TYPE_FIRST),
       'db' => getOption('database', $lines, OPT_TYPE_ASSOC | OPT_TYPE_FIRST),
       'prefix' => getOption('prefix', $lines, OPT_TYPE_ASSOC | OPT_TYPE_FIRST),
    );
}

/**
 * Returns the credentials to connect to a Joomla database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readJoomlaConfig($lines)
{
    return array(
        'host' => getOption('$host', $lines, OPT_TYPE_VAR),
        'user' => getOption('$user', $lines, OPT_TYPE_VAR),
        'pass' => getOption('$password', $lines, OPT_TYPE_VAR),
        'db' => getOption('$db', $lines, OPT_TYPE_VAR),
        'prefix' => getOption('$dbprefix', $lines, OPT_TYPE_VAR),
    );
}

/**
 * Returns the credentials to connect to a Vbulletin database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readVbulletinConfig($lines)
{
    // https://www.vbulletin.com/docs/html/main/install_core_config_php
    return array(
        'host' => getOption("\$config['MasterServer']['servername']", $lines, OPT_TYPE_VAR),
        'user' => getOption("\$config['MasterServer']['username']", $lines, OPT_TYPE_VAR),
        'pass' => getOption("\$config['MasterServer']['password']", $lines, OPT_TYPE_VAR),
        'db' => getOption("\$config['Database']['dbname']", $lines, OPT_TYPE_VAR),
        'port' => getOption("\$config['MasterServer']['port']", $lines, OPT_TYPE_VAR),
        'prefix' => getOption("\$config['Database']['tableprefix']", $lines, OPT_TYPE_VAR),
    );
}

/**
 * Returns the credentials to connect to a PrestaShop database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readPrestaShopConfig($lines)
{
    return array(
        'host' => getOption('_DB_SERVER_', $lines, OPT_TYPE_CONST | OPT_TYPE_ENV),
        'user' => getOption('_DB_USER_', $lines, OPT_TYPE_CONST),
        'pass' => getOption('_DB_PASSWD_', $lines, OPT_TYPE_CONST),
        'db' => getOption('_DB_NAME_', $lines, OPT_TYPE_CONST),
        'prefix' => getOption('_DB_PREFIX_', $lines, OPT_TYPE_CONST),
    );
}

/**
 * Returns the credentials to connect to a OsCommerce database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readOsCommerceConfig($lines)
{
    return array(
        'host' => getOption('DB_SERVER', $lines, OPT_TYPE_CONST | OPT_TYPE_ENV),
        'user' => getOption('DB_SERVER_USERNAME', $lines, OPT_TYPE_CONST),
        'pass' => getOption('DB_SERVER_PASSWORD', $lines, OPT_TYPE_CONST),
        'db' => getOption('DB_DATABASE', $lines, OPT_TYPE_CONST),
        'prefix' => getOption('DB_PREFIX', $lines, OPT_TYPE_CONST),
    );
}

/**
 * Returns the credentials to connect to a MODX database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readMODXConfig($lines)
{
    return array(
        'host' => getOption('$database_server', $lines, OPT_TYPE_VAR),
        'user' => getOption('$database_user', $lines, OPT_TYPE_VAR),
        'pass' => getOption('$database_password', $lines, OPT_TYPE_VAR),
        'db' => getOption('$dbase', $lines, OPT_TYPE_VAR),
        'prefix' => getOption('$table_prefix', $lines, OPT_TYPE_VAR),
    );
}

/**
 * Returns the credentials to connect to a OpenCart database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readOpenCartConfig($lines)
{
    return array(
        'host' => getOption('DB_HOSTNAME', $lines, OPT_TYPE_CONST | OPT_TYPE_ENV),
        'user' => getOption('DB_USERNAME', $lines, OPT_TYPE_CONST),
        'pass' => getOption('DB_PASSWORD', $lines, OPT_TYPE_CONST),
        'db' => getOption('DB_DATABASE', $lines, OPT_TYPE_CONST),
        'prefix' => getOption('DB_PREFIX', $lines, OPT_TYPE_CONST),
    );
}

/**
 * Returns the credentials to connect to a PhpBB database.
 *
 * @param  string $lines Content of the configuration file.
 * @return array         Credentials to connect to the database.
 */
function readPhpBBConfig($lines)
{
    return array(
        'host' => getOption('$dbhost', $lines, OPT_TYPE_VAR),
        'user' => getOption('$dbuser', $lines, OPT_TYPE_VAR),
        'pass' => getOption('$dbpasswd', $lines, OPT_TYPE_VAR),
        'db' => getOption('$dbname', $lines, OPT_TYPE_VAR),
        'prefix' => getOption('$table_prefix', $lines, OPT_TYPE_VAR),
    );
}

/**
 * Returns the website configuration.
 *
 * @param  string $dir Directory where the website is installed.
 * @return array|bool  Website configuration or false on failure.
 */
function getCMSConfigInDir($dir)
{
    $cmses = array(
        'sucuri_db_clean.php'        => array( 'sucuri_db_clean.php', 'readWordPressConfig' ),
        'wp-config.php'              => array( 'WordPress', 'readWordPressConfig' ),
        'configuration.php'          => array( 'Joomla', 'readJoomlaConfig' ),
        'sites/default/settings.php' => array( 'Drupal', 'readDrupalConfig' ),
        'app/etc/local.xml'          => array( 'Magento1', 'readMagento1Config' ),
        'app/etc/env.php'            => array( 'Magento2', 'readMagento2Config' ),
        'includes/config.php'        => array( 'vBulletin', 'readVbulletinConfig' ), // vBulletin 4
        'core/includes/config.php'   => array( 'vBulletin', 'readVbulletinConfig' ), // vBulletin 5 and higher
        'config/settings.inc.php'    => array( 'PrestaShop', 'readPrestaShopConfig' ),
        'includes/configure.php'     => array( 'osCommerce', 'readOsCommerceConfig' ),
        'core/config/config.inc.php' => array( 'MODX', 'readMODXConfig' ),
        'admin/config.php'           => array( 'OpenCart', 'readOpenCartConfig' ),
        'config.php'                 => array( 'phpBB', 'readPhpBBConfig' ),
    );

    if (isset($_GET['noise'])) {
        printMsg("Checking config in " . $dir . "\n");
        @flush();
    }

    // Detect the CMS
    foreach ($cmses as $filename => $cmsArray) {
        if (!is_readable($dir . $filename)) {
            continue;
        }

        list($cmsName, $configFunc) = $cmsArray;

        $config = call_user_func($configFunc, file_get_contents($dir . $filename));

        // At least these parameters must be present in the config file;
        // the prefix, the port number, and the password can be empty
        if ($config['host'] && $config['db'] && $config['user']) {
            $config['cms'] = $cmsName;

            if (preg_match('/:([0-9]+)$/', $config['host'], $matches)) {
                $config['host'] = substr($config['host'], 0, -strlen($matches[0]));
                $config['port'] = $matches[1];
            }

            if (!isset($_GET['dump'])) {
                printMsg($cmsName . " detected. Config file: $dir$filename\n");
            }

            printMsg("\n\nList of Administrator users:\n");

            switch ($cmsName) {
                case 'WordPress':
//                    listUsersFromWordpress($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'Joomla':
                    listUsersFromJoomla(
                        dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . 'defines.php',
                        dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . 'framework.php'
                    );
                    break;

                case 'Drupal':
                    listUsersFromDrupal($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'Magento1':
                case 'Magento2':
                    listUsersFromMagento(realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR . 'app' . DIRECTORY_SEPARATOR . 'Mage.php');
                    break;

                case 'vBulletin':
                    listUsersFromVbulletin($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'PrestaShop':
                    listUsersFromPrestashop($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'osCommerce':
                    listUsersFromOscommerce($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'MODX':
                    listUsersFromModx($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'OpenCart':
                    listUsersFromOpencart($dir . DIRECTORY_SEPARATOR . $filename);
                    break;

                case 'phpBB':
                    listUsersFromPhpbb($dir . DIRECTORY_SEPARATOR . $filename);
                    break;
            }

            return $config;
        } else {
            printMsg("INFO: not found DB config in $dir$filename\n");
        }
    }

    return false;
}

/**
 * Returns the website configuration.
 *
 * The function searches for the configuration file in the current directory,
 * then the parent directory, then in every directory that is under the current
 * location. Once it finds it, it immediately returns the information contained
 * in the file.
 *
 * @return array|bool|null Website configuration or false on failure.
 */
function getCMSConfig()
{
    // Check . and .. first because readdir() can return them after the other directories
    $config = getCMSConfigInDir('.' . DIRECTORY_SEPARATOR);
    if ($config) {
        return $config;
    }

    $config = getCMSConfigInDir('..' . DIRECTORY_SEPARATOR);
    if ($config) {
        return $config;
    }

    $dh = opendir('.');
    if (!$dh) {
        return null;
    }

    while (false !== ($fileName = @readdir($dh))) {
        if (!is_dir($fileName) || $fileName === '.' || $fileName === '..') {
            continue;
        }

        $config = getCMSConfigInDir($fileName . DIRECTORY_SEPARATOR);
        if ($config) {
            closedir($dh);
            return $config;
        }
    }
    closedir($dh);

    echo "ERROR: Unable to complete. Missing config file\n\n";
    return null;
}

/**
 * Creates a file with the website configuration.
 *
 * If the script is not able to find the file with the website configuration,
 * this function can be used to create a temporary file that will be used to
 * expose the necessary data in order to connect to the database and proceed
 * with the rest of the operations.
 *
 * @param  array $config Website configuration.
 * @return void
 */
function createConfigFile($config)
{
    $contents = "<?php

define( 'DB_NAME', '" . addslashes($config['dbname']) . "' );
define( 'DB_USER', '" . addslashes($config['dbuser']) . "' );
define( 'DB_PASSWORD', '" . addslashes($config['dbpass']) . "' );
define( 'DB_HOST', '" . addslashes($config['dbhost']) . "' );

\$table_prefix = '" . addslashes($config['prefix']) . "';
\$cms = '" . addslashes($config['cms']) . "';

";

    $fh = fopen('sucuri_db_clean.php', 'wb');
    if ($fh === false || false === fwrite($fh, $contents)) {
        reportFatalError('Unable to store file: sucuri_db_clean.php');
    }
    fclose($fh);

    echo "Successfully stored file: sucuri_db_clean.php\n";
}

/**
 * Prints a message into the command line and waits for user input.
 *
 * @param  string $prompt  Text to act as the command line prompt.
 * @param  string $default Default value in case of no user input.
 * @return string          User input.
 */
function askFromCmdLine($prompt, $default = '')
{
    if ($default) {
        echo $prompt . ' (press Enter for ' . $default . '): ';
    } else {
        echo $prompt . ': ';
    }

    $ret = trim(fgets(STDIN));

    if ($ret === '') {
        return $default;
    }

    return $ret;
}

/**
 * Displays a form to create a custom configuration file.
 *
 * If the script is executed over a web interface, the script will print a form
 * with fields asking for the information that will be used to connect with the
 * database associated to the website. However, if the script is being executed
 * over a command line interface, the script will ask for the same information
 * using command prompts.
 *
 * @return void
 */
function doDbConfig()
{
    if (isTerminal()) {
        $config = array();
        $config['dbname'] = askFromCmdLine('Database name');
        $config['dbuser'] = askFromCmdLine('Username', $config['dbname']);
        $config['dbpass'] = askFromCmdLine('Password');
        $config['dbhost'] = askFromCmdLine('Host', '127.0.0.1');

        $cmses = array('WordPress' => 1, 'Joomla' => 1, 'Magento' => 1, 'vBulletin' => 1, 'Drupal' => 1);
        do {
            $config['cms'] = askFromCmdLine('CMS (one of WordPress, Joomla, Magento, vBulletin, or Drupal)', 'WordPress');
        } while (!isset($cmses[$config['cms']]));

        if ($config['cms'] === 'WordPress') {
            $defaultPrefix = 'wp_';
        } elseif ($config['cms'] === 'Magento') {
            $defaultPrefix = 'mg_';
        } else {
            $defaultPrefix = '';
        }

        $config['prefix'] = askFromCmdLine('Prefix', $defaultPrefix);

        createConfigFile($config);
        return;
    }

    if (isset($_POST['createconfig'])) {
        if (!isset($_POST['dbname'])
            || !isset($_POST['dbuser'])
            || !isset($_POST['dbpass'])
            || !isset($_POST['dbhost'])
            || !isset($_POST['prefix'])
        ) {
            reportFatalError('No DB params');
        }

        if (get_magic_quotes_gpc()) {
            $_POST['dbname'] = stripslashes($_POST['dbname']);
            $_POST['dbuser'] = stripslashes($_POST['dbuser']);
            $_POST['dbpass'] = stripslashes($_POST['dbpass']);
            $_POST['dbhost'] = stripslashes($_POST['dbhost']);
            $_POST['prefix'] = stripslashes($_POST['prefix']);
        }

        createConfigFile($_POST);
        echo '<a href="?srun">Scan the database</a>';
        exit;
    }

    echo "Setup sucuri_db_clean.php with custom DB credentials (WARNING: THIS WILL OVERRIDE ANY CURRENT FILE):\n";
    echo '<form method="post" action="">';
    echo '<script type="text/javascript"><!--' . "\n";
    echo 'function onChangeCms() {' . "\n";
    echo 'var prefix = ["wp_", "", "mg_", "", ""];' . "\n";
    echo 'document.getElementById("prefix").value = prefix[document.getElementById("cms").selectedIndex];' . "\n";
    echo "}\n";
    echo '--></script>';

    echo '<input type="hidden" name="createconfig" value="myconfig" />';

    echo "Database:\t" . '<input type="text" name="dbname" value="">' . "\n";
    echo "Username:\t" . '<input type="text" name="dbuser" value="">' . "\n";
    echo "Password:\t" . '<input type="text" name="dbpass" value="">' . "\n";
    echo "Host:\t\t" . '<input type="text" name="dbhost" value="localhost">' . "\n";
    echo "CMS:\t\t" . '<select name="cms" id="cms" onchange="onChangeCms()">' .
        '<option selected>WordPress</option><option>Joomla</option>' .
        '<option>Magento</option><option>vBulletin</option><option>Drupal</option></select>' . "\n";
    echo "Prefix:\t\t" . '<input type="text" name="prefix" id="prefix" value="wp_">' . "\n";
    echo '<input type="submit" name="submit" value="Save file" />';

    echo '</form>';

    exit;
}

/**
 * Allows to edit a database column manually.
 *
 * This function renders a HTML form that allows to edit the content of one or
 * more rows in a specific table in the database. The form sends old_content and
 * row_content which are used to search and replace the content of a table.
 *
 * @param  mixed  $driver Database connection.
 * @param  string $table  Name of the table.
 * @param  string $column Name of the column.
 * @param  string $idName Name of the primary key column.
 * @param  string $id     Value for the primary key column.
 * @return void
 */
function showContent($driver, $table, $column, $idName, $id)
{
    $location = array('table' => $table, 'column' => $column, 'idname' => $idName, 'id' => $id);
    $updateRes = false;

    if (isset($_POST['row_content']) && isset($_POST['old_content'])) {
        if (get_magic_quotes_gpc()) {
            $_POST['row_content'] = stripslashes($_POST['row_content']);
        }

        $old_content = base64_decode($_POST['old_content']);
        $updateRes = updateDb($driver, $_POST['row_content'], $old_content, $location, 'manual');
    }

    $sqlContent = 'SELECT ' . $driver->escapeName($column) . ' FROM ' . $driver->escapeName($table) .
        ' WHERE ' . $driver->escapeName($idName) . ' = ' . $driver->escapeStr($id) . ';';

    $row = $driver->fetchRow($driver->query($sqlContent));

    // Exclude match_start/match_end from the link: after editing, there should be no selection
    $link = '?srun&showcontent&t=' . escapeHTML($table) . '&c=' . escapeHTML($column) .
            '&id_name=' . escapeHTML($idName) . '&id=' . escapeHTML($id);
    echo '<form method="post" action="' . $link . '">';
    echo '<input type="hidden" name="old_content" value="' . base64_encode($row[0]) . '">';

    echo getLocationHTML($location, 'plaintext');
    $compoundRe = '/^ (?:
          a : (?P<count> [0-9]+) : \\{
        | (?P<type> [OC]) : (?P<namelen> [0-9]+) : "(?P<name> [^"]+)" : (?P<clen> [0-9]+) : \\{
        ) /x';

    if (preg_match($compoundRe, $row[0])) {
        echo ' - THIS STRING IS SERIALIZED! Please use <a href="?srun&s"><b>search and replace</b></a> instead!';
    } else {
        echo ' - <input type="submit" name="submit" value="Update Content" />';
    }

    echo '<div style="float:right"><a href="?srun&s">Global search and replace</a></div>';

    showUpdateDbError($updateRes);
    if ($updateRes === true) {
        echo "\n" . '<span class="cleared">Updated</span>';
    }

    echo "\n\n" . '<textarea id="row_content" name="row_content" style="margin: 2px; height: 85%; width: 100%">';

    echo escapeHTML($row[0]);

    echo "</textarea></form>";

    if (isset($_GET['match_start']) && isset($_GET['match_end'])) {
        // Highlight the matching text
        $match_start = intval($_GET['match_start']);
        $match_end = intval($_GET['match_end']);

        echo '<script type="text/javascript"><!--' . "\n";
        echo 'document.getElementById("row_content").setSelectionRange(' . $match_start . ',' . $match_end . ');';
        echo 'document.getElementById("row_content").focus();';
        echo "\n--></script>";
    }

    $driver->disconnect();
    exit;
}

/**
 * Prints a list of admin users from a WordPress website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromWordpress($config)
{
    if (file_exists($config)) {
        include_once $config;
    }

    if (!function_exists('get_users')) {
        return false;
    }

    $users = get_users('blog_id=1&orderby=id&role=administrator');

    foreach ($users as $user) {
        printf(
            "%d,%s,%s,%s\n",
            $user->ID,
            $user->user_login,
            $user->user_email,
            $user->user_registered
        );
    }

    return true;
}

/**
 * Prints a list of admin users from a Joomla website.
 *
 * @param  string $config    Location of the configuration file.
 * @param  string $framework Location of the main CMS library.
 * @return void
 */
function listUsersFromJoomla($config, $framework)
{
    define('_JEXEC', 1);
    define('JPATH_BASE', dirname(__FILE__));
    define('DS', DIRECTORY_SEPARATOR);

    if (file_exists($config)) {
        include_once $config;
    }

    if (file_exists($framework)) {
        include_once $framework;
    }

    if (!class_exists('JFactory')) {
        return false;
    }

    $mainframe = &JFactory::getApplication('administrator');
    $mainframe->initialise();

    jimport('joomla.user.helper');

    $db = &JFactory::getDBO();
    $query = "SELECT u.id, u.username
        FROM `#__usergroups` us, `#__users` u, `#__user_usergroup_map` uum
        WHERE us.id = uum.group_id AND uum.user_id = u.id
        AND `title` IN ('Super Users', 'Administrator', 'Super Administrator')";

    if (version_compare(JVERSION, '1.6.0', 'lt')) {
        $query = "SELECT u.id, u.username FROM `#__users` u WHERE u.usertype = 'Super Administrator'";
    }

    $db->setQuery($query);
    $result = $db->loadObjectList();

    if (!$result) {
        /**
         * Return True no matter if this operation failed.
         *
         * This guarantees that the calls for other listUsers methods will stop
         * as at this point we already know that the website is built on top of
         * the Joomla CMS, considering that the framework library is available.
         */
        return true;
    }

    foreach ($result as $row) {
        printf("%d,%s\n", $row->id, $row->username);
    }

    return true;
}

/**
 * Prints a list of admin users from a Magento website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromMagento($config)
{
    define('MAGENTO', realpath(dirname(__FILE__)));

    if (file_exists($config)) {
        include_once $config;
    }

    if (!class_exists('Mage')) {
        return false;
    }

    Mage::app();
    $app = Mage::app();
    umask(0);

    Mage::app('default');
    Mage::getSingleton('core/session', array('name' => 'adminhtml'));

    $users = Mage::getResourceModel('admin/roles_user_collection');

    foreach ($users as $roleuser) {
        $user = Mage::getModel('admin/user')->load($roleuser->getUserId());
        printf("%d,%s\n", $roleuser->getUserId(), $user->getUsername());
    }

    return true;
}

/**
 * Prints a list of admin users from a Vbulletin website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromVbulletin($config)
{
    $vb_url = '';
    $login_url = '';

    if (file_exists($config)) {
        define('VB_ENTRY', 'sucuri');
        @chdir('core');
        include_once $config;
        @chdir('../');

        if (!class_exists('vB')) {
            return false;
        }

        $vb_options = vB::getDatastore()->getValue('options');
        $login_url = $vb_options['frontendurl_login'];
        $vb_url = VB_URL;
    }

    if (!isset($GLOBALS['vbulletin'])) {
        return false; /* not a vbulletin site */
    }

    if (!$login_url && is_array($GLOBALS['vbulletin']->options)) {
        $login_url = $GLOBALS['vbulletin']->options['bburl'];
    }

    if (!$vb_url && defined('VB_URL')) {
        $vb_url = VB_URL;
    }

    if ($vb_url && $login_url) {
        $parsed_vb_url = parse_url($vb_url);
        $parsed_login_url = parse_url($login_url);
        $new_url = array();

        foreach ($parsed_vb_url as $k => $v) {
            if ($k !== 'path' && isset($parsed_login_url[$k]) && $v !== $parsed_login_url[$k]) {
                $new_url[$k] = $parsed_login_url[$k];
            }
        }

        $new_url = array_merge($parsed_vb_url, $new_url);
        $redir_url = vbulletinBuildURL($new_url);

        if ($vb_url !== $redir_url) {
            header('Location: ' . $redir_url);
            exit(0);
        }
    }

    $users = $GLOBALS['vbulletin']->db->query_read(
        'SELECT * FROM ' . TABLE_PREFIX . 'user WHERE usertitle = "Administrator"'
    );

    while ($user = $GLOBALS['vbulletin']->db->fetch_array($users)) {
        printf("%d,%s\n", $user['userid'], $user['username']);
    }

    $GLOBALS['vbulletin']->db->free_result($user);

    return true;
}

/**
 * Takes most output from parse_url.
 *
 * @param  array $parsed_url Output from parse_url.
 * @return string            Formalize the output of parse_url.
 */
function vbulletinBuildURL($parsed_url)
{
    $scheme = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
    $host = isset($parsed_url['host']) ? $parsed_url['host'] : '';
    $path = isset($parsed_url['path']) ? $parsed_url['path'] : '';
    $query = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
    $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';

    return $scheme . $host . $path . $query . $fragment;
}

/**
 * Prints a list of admin users from a Drupal website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromDrupal($config)
{
    /* TODO: Implement function to print admin users from Drupal */
}

/**
 * Prints a list of admin users from a Prestashop website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromPrestashop($config)
{
    /* TODO: Implement function to print admin users from Prestashop */
}

/**
 * Prints a list of admin users from a Oscommerce website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromOscommerce($config)
{
    /* TODO: Implement function to print admin users from Oscommerce */
}

/**
 * Prints a list of admin users from a Modx website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromModx($config)
{
    /* TODO: Implement function to print admin users from Modx */
}

/**
 * Prints a list of admin users from a Opencart website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromOpencart($config)
{
    /* TODO: Implement function to print admin users from Opencart */
}

/**
 * Prints a list of admin users from a Phpbb website.
 *
 * @param  string $config Location of the configuration file.
 * @return void
 */
function listUsersFromPhpbb($config)
{
    /* TODO: Implement function to print admin users from Phpbb */
}

/**
 * Prints information about the database tables.
 *
 * The information includes the table structure and size.
 *
 * @param  mixed $driver        Database connection.
 * @param  array $tablesColumns List of tables with their columns.
 * @param  array $config        Application configuration.
 * @return void
 */
function listTables($driver, $tablesColumns, $config)
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if (empty($config['prefix'])) {
        echo "\nPrefix not detected\n\n";
    } else {
        echo "\nPrefix = " . escapeHTML($config['prefix']) . "\n\n";
    }

    echo "Scannned tables and columns:\n\n";

    $ntables = 0;
    $ncolumnsToScan = 0;
    $sizes = array();

    foreach ($tablesColumns as $table => $columns) {
        echo $GLOBALS['isPlainText'] ? ($table . ': ') : ('<b>' . escapeHTML($table) . ':</b> ');

        $ncolumnsInTable = 0;
        foreach ($columns as $i => $column) {
            if ($i === 'idname') {
                continue;
            }

            echo escapeHTML($column) . ', ';
            $ncolumnsInTable++;
        }

        echo "\n    ";

        if (isset($columns['idname'])) {
            if ($GLOBALS['isPlainText']) {
                echo 'id = ' . $columns['idname'];
            } else {
                echo '<i>id = ' . escapeHTML($columns['idname']) . "</i>";
            }
        } else {
            if ($GLOBALS['isPlainText']) {
                echo "NO PRIMARY KEY OR A COMPOSITE PRIMARY KEY";
            } else {
                echo "<b>NO PRIMARY KEY OR A COMPOSITE PRIMARY KEY</b>";
            }
        }

        $row = $driver->fetchRow($driver->query('SELECT COUNT(*) FROM ' . $driver->escapeName($table) . ';'));
        $ncolumns = $ncolumnsInTable * $row[0];
        echo ', ' . $row[0] . ($row[0] == 1 ? ' row' : ' rows') . ', ' . $ncolumns . ($ncolumns == 1 ? ' column to scan' : ' columns to scan') . "\n\n";

        $ntables++;
        $ncolumnsToScan += $ncolumns;
        $sizes[$table] = $ncolumns;
    }

    $footer = $ntables . ($ntables === 1 ? ' table, ' : ' tables, ');
    $footer .= $ncolumnsToScan . ($ncolumnsToScan === 1 ? ' text/blob column to scan.' : ' text/blob columns to scan.');

    arsort($sizes);
    $i = 0;
    $tables = array();
    $footer .= "\nThe largest tables: ";
    foreach ($sizes as $table => $ncolumns) {
        $tableName = escapeHtml($table);
        if (!$GLOBALS['isPlainText']) {
            $tables[] = $table;
            $tableName = '<a href="?srun&resume&noise&skiptable=' . implode(',', $tables) . '">' . $tableName . '</a>';
        }
        $footer .= sprintf('%s (%.2g%%)', $tableName, ($ncolumns * 100) / $ncolumnsToScan);
        $i++;
        if ($i == 5) {
            $footer .= '.';
            break;
        }
        $footer .= ', ';
    }

    echo "\n" . $footer . ($GLOBALS['isPlainText'] ? "\n" : '</pre>');

    exit;
}

/**
 * Searches and replaces content in a database table.
 *
 * This function only works if the script was called from a CLI.
 *
 * @param  mixed $driver          Database connection.
 * @param  array $tablesColumns   List of tables with their columns.
 * @param  array $searchSignature List of signatures to search.
 * @return void
 */
function replaceInTerminal($driver, $tablesColumns, $searchSignature)
{
    // Not run from terminal or a search signature specified on the command line
    if (!isTerminal() || $_GET['s'] !== '') {
        return;
    }

    foreach ($searchSignature as $trigger => $sigArray) {
        // No cleanup was requested; only search
        if ($sigArray[CI_ACTION] === WARN) {
            return;
        }
    }

    echo "\n";
    $reply = askFromCmdLine('Clean the malware (save the changes)? [Y / N]');
    if ($reply === 'y' || $reply === 'Y') {
        $_POST = array('clean' => '1');
        searchAndClear($driver, $tablesColumns, $searchSignature);
    } else {
        echo "Not cleaned";
    }
}

/**
 * Displays a form to search for signatures in the database.
 *
 * If the script is executed via a web server, it will render a HTML form with
 * fields to allow the user to search for a string that will be matched against
 * the content of the database. However, if the script is executed via the CLI
 * a simple command prompt will be used to receive the user input.
 *
 * @return array Information about the procedure.
 */
function getSearchSignature()
{
    $trigger = $_GET['s'];
    if (isset($_POST['s'])) {
        $trigger = $_POST['s'];
    }
    $action = isset($_POST['regex']) ? $_POST['regex'] : '';

    if (get_magic_quotes_gpc() && !isTerminal()) {
        $trigger = stripslashes($trigger);
        $action = stripslashes($action);
    }

    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if (!isset($GLOBALS['DB_SIGS_TEMPLATE'])) {
        $GLOBALS['DB_SIGS_TEMPLATE'] = array();
    }

    if (!$GLOBALS['isPlainText']) {
        // Print the form
        echo '<form action="" method="post">';

        printMsg("\nSearch for:\t\t");
        echo '<input type="text" name="s" value="' . escapeHTML($trigger) .
            '" placeholder="&lt;div id=&quot;coolhacker&quot;&gt;" style="width:30%">';

        printMsg("\n\nClean the regex:\t");
        echo '<input type="text" name="regex" value="' . escapeHTML($action) .
            '" placeholder="~&lt;div id=&quot;coolhacker&quot;&gt;[^&lt;&gt;]*?&lt;/div&gt;~" style="width:60%">';

        printMsg(
            "\n(You can also use the following pre-defined templates: "
            . implode(', ', array_keys($GLOBALS['DB_SIGS_TEMPLATE'])) . ")\n"
        );

        echo '<input type="checkbox" name="clean" value="1" id="clean">';
        echo '<label for="clean" class="inserted" data-content="' . "Clean the malware (save the changes)\n" . '"></label>';
        echo "\n" . '<input type="submit" value="Search">' . "\n";
        echo '</form>';
    }

    if ($trigger === '') {
        if (isTerminal()) {
            do {
                $trigger = askFromCmdLine('Search for');
            } while ($trigger === '');
            $action = askFromCmdLine('Clean the regex');
        } else {
            echo $GLOBALS['isPlainText'] ? "Please use\n" . "s=trigger\n" .
                "regex=~regex~\n" . "clean    to save the changes\n" : '</pre>';
            exit;
        }
    }

    $_GET['investigation'] = '1';
    if (!isset($_POST['clean'])) {
        $_GET['noclean'] = '1';
    } elseif (isset($_GET['noclean'])) {
        unset($_GET['noclean']);
    }

    if ($trigger[0] === PCRE_DELIM) {
        reportFatalError(PCRE_DELIM . ' is not alllowed as the first character of the trigger');
    }

    if ($action === '') {
        return array(
            $trigger => array('custom.db.search', WARN)
        );
    }

    if (!isset($GLOBALS['DB_SIGS_TEMPLATE'][$action])) {
        if (PCRE_DELIM !== $action[0]) {
            reportFatalError('Invalid regex, please use ' . PCRE_DELIM . ' as the delimiter');
        }

        if (preg_match($action, '') === false) {
            reportFatalError('Invalid regex');
        }
    }

    return array(
        $trigger => array('custom.db.search', $action)
    );
}

/**
 * Modifies a global variable DB_SKIPPED_TABLES
 *
 * Function skips the scan over any table specified in a GET request.
 *
 * @param  array $tablesColumns List of tables with their columns.
 * @return void
 */
function readSkipTable($tablesColumns)
{
    $GLOBALS['DB_SKIPPED_TABLES'] = array();

    if (isset($_GET['skiptable'])) {
        $tables = explode(',', $_GET['skiptable']);

        foreach ($tables as $table) {
            $GLOBALS['DB_SKIPPED_TABLES'][$table] = false;
        }
    }

    if (isset($_GET['scantable'])) {
        $tables = explode(',', $_GET['scantable']);
        $tablesToScan = array();

        // Convert the array to a set (hash table)
        foreach ($tables as $table) {
            if (!isset($tablesColumns[$table])) {
                printMsg("\nWARN: Not found the table to scan: ", $table);
                continue;
            }

            $tablesToScan[$table] = true;
            if (isset($GLOBALS['DB_SKIPPED_TABLES'][$table])) {
                printMsg("\nWARN: The same table in scantable and skiptable: ", $table);
            }
        }

        // Invert the set
        foreach ($tablesColumns as $table => $columns) {
            if (!isset($tablesToScan[$table])) {
                $GLOBALS['DB_SKIPPED_TABLES'][$table] = false;
            }
        }
    }
}

/**
 * Determines wheter a table must be skipped or not.
 *
 * The function checks the global DB_SKIPPED_TABLES variable, if the specified
 * table exists in this array then it returns a boolean True meaning that the
 * table must be skipped during the scan.
 *
 * @param  string $table Name of the table.
 * @return bool          True if the table must be skipped.
 */
function shouldSkipTable($table)
{
    if (!isset($GLOBALS['DB_SIGS_TEMPLATE'])) {
        $GLOBALS['DB_SIGS_TEMPLATE'] = array();
    }

    if (!isset($GLOBALS['DB_SKIPPED_TABLES'][$table])) {
        return false;
    }

    // Print the name of the skipped table once
    if ($GLOBALS['DB_SKIPPED_TABLES'][$table] === false) {
        printMsg("\nINFO: Skipped table ", $table);
        $GLOBALS['DB_SKIPPED_TABLES'][$table] = true;
    }

    return true;
}

/**
 * Prints the name of the skipped tables.
 *
 * @return void
 */
function checkSkippedTables()
{
    if (!isset($GLOBALS['DB_SIGS_TEMPLATE'])) {
        $GLOBALS['DB_SIGS_TEMPLATE'] = array();
    }

    foreach ($GLOBALS['DB_SKIPPED_TABLES'] as $table => $found) {
        if ($found === false) {
            printMsg("\nWARN: Not found the table to skip: ", $table);
        }
    }
}

/**
 * Continues with a previously started scan.
 *
 * The function reads a file located in the quarantine folder which contains a
 * list of associative names corresponding to the tables in the database that
 * were not read during the last scan.
 *
 * @return void
 */
function startResume()
{
    if (!isset($_GET['resume'])) {
        return;
    }

    $GLOBALS['g_lastTable'] = false;
    $GLOBALS['g_lastColumn'] = false;

    $f = @fopen(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . RESUME_FILE_NAME, 'r');

    if (false !== $f) {
        $info = fread($f, 65536);

        if ($info === false || $info === '') {
            fclose($f);
            @unlink(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . RESUME_FILE_NAME);

            if ($info === false) {
                reportFatalError('Reading sucuridbresume failed');
            } else {
                reportFatalError('Resume failed; please run with &list and skip the largest tables');
            }
        }

        fclose($f);

        list($a, $b) = explode("\n", $info, 2);
        $GLOBALS['g_lastTable'] = $a;
        $GLOBALS['g_lastTable'] = $b;
    }

    if (!createQuarantineFolder()) {
        reportFatalError('Create quarantine folder failed');
    }

    $GLOBALS['g_resumeHandle'] = @fopen(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . RESUME_FILE_NAME, 'w');

    if (false === $GLOBALS['g_resumeHandle']) {
        reportFatalError('Saving sucuridbresume failed; please check permissions');
    }
}

/**
 * Determine whether to skip or not a table.
 *
 * @param  string $table  Name of the table.
 * @param  string $column Name of the column.
 * @return bool           True if we need to skip the table.
 */
function shouldSkipForResume($table, $column)
{
    if (!isset($GLOBALS['g_lastTable'])) {
        $GLOBALS['g_lastTable'] = false;
    }

    if (!isset($GLOBALS['g_lastColumn'])) {
        $GLOBALS['g_lastColumn'] = '';
    }

    if (!isset($GLOBALS['g_resumeHandle'])) {
        $GLOBALS['g_resumeHandle'] = null;
    }

    if (!isset($_GET['resume'])) {
        return false;
    }

    if ($GLOBALS['g_lastTable'] === false) {
        // Save the table/column that we started the check
        if (false === ftruncate($GLOBALS['g_resumeHandle'], 0)
            || 0 !== fseek($GLOBALS['g_resumeHandle'], 0, SEEK_SET)
            || false === fwrite($GLOBALS['g_resumeHandle'], $table . "\n" . $column)
        ) {
            reportFatalError('Writing sucuri-sss-resume failed');
        }
        return false; // we are not resuming now
    }

    // Skip until the last table/column
    if ($table !== $GLOBALS['g_lastTable'] || $column !== $GLOBALS['g_lastColumn']) {
        return true;
    }

    printMsg("\nINFO: Resuming from " . $table . '.' . $column . '...');

    @flush();

    $GLOBALS['g_lastTable'] = false;
    $GLOBALS['g_lastColumn'] = false;

    return false; // Recheck this column again (some messages may be repeated from the previous run)
}

/**
 * Closes and deletes the resume file.
 *
 * The file that keeps tracks of the scanning process and is used to resume the
 * scan during a sudden stop, is closed with this function and then discarded
 * as a normal system resource.
 *
 * @return void
 */
function finishResume()
{
    if (!isset($GLOBALS['g_resumeHandle'])) {
        $GLOBALS['g_resumeHandle'] = null;
    }

    if (!isset($_GET['resume'])) {
        return false;
    }

    fclose($GLOBALS['g_resumeHandle']);

    if (!@unlink(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . RESUME_FILE_NAME)) {
        echo "ERROR: deleting resume failed\n";
    }
}

/**
 * Checks whether the script is executed in a Terminal or Web Browser.
 *
 * This function checks for the existence of the REMOTE_ADDR and SHELL keys in
 * the global SERVER variable, which can be used to detect if the file is being
 * loaded via a Terminal emulator or a Web Browser.
 *
 * @return bool True if the script is executed in a Terminal.
 */
function isTerminal()
{
    return !isset($_SERVER['REMOTE_ADDR']) && isset($_SERVER['SHELL']);
}

/**
 * Returns the HTML code with the information about the table.
 *
 * @param  array  $location Table information.
 * @param  string $type     Either plaintext, link or insertedlink.
 * @param  array  $matches  RegExp result following PHP standards.
 * @param  string $text     Content of the configuration file.
 * @return void
 */
function getLocationHTML($location, $type, $matches = null, $text = null)
{
    $ret = escapeHTML($location['table']);

    if (isset($location['column'])) {
        $ret .= '.' . escapeHTML($location['column']);
    }

    // If id is not set (a table without primary key or a composite primary key), then we cannot display the link.
    // Even if $type == 'link', return the plain text version with table.column.
    if (!isset($location['idname'])) {
        return $ret;
    }

    $ret .= ', ' . escapeHTML($location['idname']) . ' = ' . escapeHTML($location['id']);

    if ($type === 'plaintext') {
        return $ret;
    }

    $pos = '';
    if (isset($matches[0][1])) {
        $matches[0][0] = str_replace("\r\n", "\n", $matches[0][0]);
        $text = str_replace("\r\n", "\n", substr($text, 0, $matches[0][1]));
        if (function_exists('mb_strlen')) {
            // Locate the character index in UTF-8 encoding
            $match_start = mb_strlen($text, 'UTF-8');
            $match_end = $match_start + mb_strlen($matches[0][0], 'UTF-8');
        } else {
            // Calculate the byte offset
            $match_start = strlen($text);
            $match_end = $match_start + strlen($matches[0][0]);
        }
        $pos = '&match_start=' . $match_start . '&match_end=' . $match_end;
    }

    $link = '<a href="?srun&showcontent&t=' . escapeHTML($location['table']) .
            '&c=' . escapeHTML($location['column']) .
            '&id_name=' . escapeHTML($location['idname']) .
            '&id=' . escapeHTML($location['id']) . $pos . '" target="_blank"';
    if ($type === 'insertedlink') {
        return '"></span>' . $link . ' class="inserted" data-content="' . $ret . '"></a>' .
            '<span class="inserted warn" data-content="';
    } elseif ($type === 'link') {
        return $link . '>' . $ret . '</a>';
    } else {
        reportFatalError('Invalid type ' . $type);
    }
}

/**
 * Prints a message to the console or web page.
 *
 * If the script is being executed in a Terminal emulator then this function
 * will print the message and details associated to the message into the same
 * Terminal, otherwise it prints into whatever interface the script is running
 * on, which in most cases will be a web browser, in this case, the message will
 * be merged with some HTML code.
 *
 * @param  string $msg     Message to print.
 * @param  string $details Additional information for the message.
 * @return void
 */
function printMsg($msg, $details = '')
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if ($GLOBALS['isPlainText']) {
        echo $msg . $details;
        return;
    }

    if (strncmp($msg, "\nWARN:", 6) == 0) {
        echo '<span class="inserted warn" data-content="' . escapeHTML($msg) . '"></span>';
        $msg = '';
    }
    echo '<span class="inserted" data-content="' . escapeHTML($msg . $details) . '"></span>';
}

/**
 * Prints information about an error occurred during the scan.
 *
 * @param  string $msg Message to be printed into the console.
 * @return void
 */
function reportFatalError($msg)
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    $msg = 'ERROR: ' . $msg;

    if ($GLOBALS['isPlainText']) {
        echo "\n" . $msg;
    } else {
        echo '<span class="inserted warn" data-content="' . escapeHTML("\n" . $msg) . '"></span></pre>';
    }

    exit(1);
}

/**
 * Prints an inserted link into the console.
 *
 * @param  string $tool Name of the script with the insertion.
 * @return void
 */
function printInsertedLink($tool)
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if ($GLOBALS['isPlainText']) {
        echo $tool;
        return;
    }

    $url = '?srun&' . $tool;
    $msg = $tool === 's' ? 'search' : $tool;
    echo '<a href="' . $url . '" class="inserted" data-content="' . $msg . '"></a>';
}

/**
 * Prints the HTML code with the final status of the database scan.
 *
 * @param  string $status      Status of the database scan.
 * @param  string $afterStatus Message to complement the status information.
 * @return string              Status of the database scan in HTML code.
 */
function getStatusHtml($status, $afterStatus = '')
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if ($GLOBALS['isPlainText']) {
        return "\n" . $status . ': ' . $afterStatus;
    }

    if ($status === 'ERROR' || $status === 'WARN') {
        return "\n" . '<span class="inserted warn" data-content="' .
                $status . ': ' . escapeHTML($afterStatus) . '"></span>' .
                '<span class="hidden-copied">CLEARED: Cleared malware from database (manual review)</span>';
    }

    return "\n" . '<span class="cleared">' . $status . ':</span> ' . escapeHTML($afterStatus);
}

/**
 * Returns the text (or HTML) of the signature found in the database.
 *
 * @param  string $status        Name of the cleanup result in uppercase.
 * @param  string $signatureName Name of the signature found in the database.
 * @param  string $location      Info about the table where the malware is.
 * @param  string $matches       RegExp result following PHP standards.
 * @param  string $text          Text containing the signature.
 * @param  string $msg           Optional text to print in the result.
 * @return string                Text or HTML of the signature found in the database.
 */
function reportMalware($status, $signatureName, $location = null, $matches = null, $text = null, $msg = null)
{
    if (!isset($GLOBALS['foundMalware'])) {
        $GLOBALS['foundMalware'] = false;
    }

    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    // Output research messages only in the investigation mode
    if ($status === 'RESEARCH' && !isset($_GET['investigation'])) {
        return '';
    }

    // Get location and content matched by the regex
    if ($status === 'WARN' || $status === 'CLEARED' && isset($_GET['noclean'])) {
        $type = 'link';
    } elseif ($status === 'RESEARCH' || $status === 'ERROR') {
        $type = 'insertedlink';
    } else {
        $type = 'plaintext';
    }

    if ($GLOBALS['isPlainText']) {
        $type = 'plaintext';
    }

    $locationHTML = $location === null ? '' : ': ' . getLocationHTML($location, $type, $matches, $text);
    $msgHTML = $msg === null ? '' : ' - ' . escapeHTML($msg);
    $signatureHTML = '. Details: ' . escapeHTML($signatureName);
    $contentHTML = '';

    if ($matches !== null) {
        // Below PHP 4.3, PREG_OFFSET_CAPTURE is not supported and match text is returned in $matches[0]
        $matchText = is_array($matches[0]) ? $matches[0][0] : $matches[0];
        $maxLen = isset($_GET['s']) ? 500 : 50;

        $content = substr($matchText, 0, $maxLen);
        if (strlen($matchText) > $maxLen) {
            $content = substr($matchText, 0, $maxLen - 10) . '...' . substr($matchText, -7);
        }
        $contentHTML = '. Content: ' . escapeHTML(preg_replace('/[\x00-\x1F\x7F]/', '`', $content));
        if ($status !== 'RESEARCH' && $status !== 'ERROR' && !$GLOBALS['isPlainText']) {
            // Hide the content from user to avoid disclosing our signatures
            $contentHTML = '<span class="inserted" data-content="' . $contentHTML . '"></span>';
        }
    }

    if ($status === 'CLEARED' || $status === 'FOUND') {
        if (isset($_GET['noclean']) || $status === 'FOUND') {
            $statusHTML = getStatusHtml('FOUND', 'Found malware to clean');
        } elseif (!isset($location['idname'])) {
            $statusHTML = getStatusHtml('ERROR', 'Not cleaned (no primary key or a composite primary key)');
        } else {
            $statusHTML = getStatusHtml('CLEARED', 'Cleared malware from database');
        }
    } elseif ($status === 'OK') {
        // Omit the word "Details:"; print action message instead of the signature name
        $statusHTML = getStatusHtml('OK', $signatureName);
        $signatureHTML = '';
    } elseif ($status === 'WARN') {
        // Manual review is required
        $after = isset($location['idname']) ? 'Please review' : 'No primary key or a composite primary key';
        $statusHTML = getStatusHtml('WARN', $after);
    } elseif ($GLOBALS['isPlainText']) {
        $statusHTML = "\n" . $status; // RESEARCH, ERROR
    } else {
        // RESEARCH, ERROR - should not be sent to user
        $statusHTML = '<span class="inserted warn" data-content="' . "\n" . $status;
        $msgHTML .= '"></span>';
    }

    $GLOBALS['foundMalware'] = true;
    return $statusHTML . $locationHTML . $signatureHTML . $contentHTML . $msgHTML;
}

/**
 * Checks if the table or column is whitelisted.
 *
 * @param  array $location  Table information.
 * @param  array $whitelist List of whitelisted tables.
 * @return bool             True if the table or column is whitelisted.
 */
function checkWhitelist($location, $whitelist)
{
    if (!isset($GLOBALS['config'])) {
        $GLOBALS['config'] = array('prefix' => '');
    }

    // Prepare for comparison with the whitelist. WordPress/Joomla prefix is written as <PREFIX>;
    // column name can follow after a dot.
    $table = $location['table'];
    if (!empty($GLOBALS['config']['prefix']) && strncmp($table, $GLOBALS['config']['prefix'], strlen($GLOBALS['config']['prefix'])) === 0) {
        $table = '<PREFIX>' . substr($table, strlen($GLOBALS['config']['prefix']));
    }

    // Lookup in the whitelist
    return isset($whitelist[$table]) || isset($whitelist[$table . '.' . $location['column']]);
}

/**
 * Reverts the escaping applied to a string.
 *
 * @param  string $str    Text to remove the escaping.
 * @param  int    $nChars Number of characters to revert.
 * @return array          Array representation of the string.
 */
function unescapeString($str, $nChars)
{
    $inputLen = 0;
    $out = '';
    for ($i = 0; $i < $nChars; $i++) {
        if (!isset($str[$inputLen])) {
            return array(0, false); // Invalid string length
        }

        if ($str[$inputLen] !== '\\') {
            $out .= $str[$inputLen];
            $inputLen++;
            continue;
        }

        $hex = substr($str, $inputLen + 1, 2);
        if (!ctype_xdigit($hex)) {
            return array(0, false); // Invalid hex char
        }
        $out .= pack("H*", $hex);
        $inputLen += 3;
    }
    return array($inputLen, $out);
}

/**
 * Replaces content in a serialized object.
 *
 * Avoid the use of the built-in PHP unserialize function as it is vulnerable on
 * old PHP versions. Do a custom parsing function, replace inside the serialized
 * strings, and correct the string lengths.
 *
 * @param  string $pattern    Regular expression to change.
 * @param  string $serialized Serialized object as a string.
 * @param  bool   $isRegEx    True if pattern is a regexp, false for string.
 * @return array              Two-index length array with new serialized data.
 */
function replaceInSerialized($pattern, $serialized, $isRegEx)
{
    $valueToSkipRe = '/^(?:
        N; | b:[01];                     # null, Boolean
        | [rR] : [0-9]+;                 # references
        | [id] : [+-]? [0-9]+;           # an integer (as integer or double type)
        |   d  : [+-]? [0-9]* \\. [0-9]+ (?: [eE] [+-]? [0-9]+ )?;  # a floating point number (double)
        ) /x';
    $strRe = '/^ (?P<type> [sS]) : (?P<len> [0-9]+) : "/x';
    $compoundRe = '/^ (?:
          a : (?P<count> [0-9]+) : \\{
        | (?P<type> [OC]) : (?P<namelen> [0-9]+) : "(?P<name> [^"]+)" : (?P<clen> [0-9]+) : \\{
        ) /x';

    if (preg_match($valueToSkipRe, $serialized, $m)) {
        return array(strlen($m[0]), $m[0]);
    }

    if (preg_match($strRe, $serialized, $m)) {
        if ($m['type'] === 'S') {
            list($inputLen, $str) = unescapeString(substr($serialized, strlen($m[0])), $m['len']);
            if ($str === false) {
                return array(0, false);
            }
            $inputLen += strlen($m[0]);
        } else {
            $str = substr($serialized, strlen($m[0]), $m['len']);
            $inputLen = strlen($m[0]) + $m['len'];
        }

        if (substr($serialized, $inputLen, 2) !== '";') {
            return array(0, false);
        }

        $str = $isRegEx ? preg_replace($pattern, '', $str) : str_replace($pattern, '', $str);

        return array($inputLen + 2, 's:' . strlen($str) . ':"' . $str . '";');
    }

    if (preg_match($compoundRe, $serialized, $m)) {
        if (isset($m['namelen']) && intval($m['namelen']) !== strlen($m['name'])) {
            return array(0, false);
        }

        if (isset($m['type']) && $m['type'] === 'C') {
            // Custom serialization format, skip it (no search-and-replace)
            $inputLen = strlen($m[0]) + $m['clen'];
            if (substr($serialized, $inputLen, 1) !== '}') { // substr silently returns false if out of bounds
                return array(0, false);
            }
            return array($inputLen + 1, substr($serialized, 0, $inputLen + 1));
        }

        $out = $m[0];
        $inputPos = strlen($m[0]);
        $count = $m['count'] === '' ? $m['clen'] : $m['count'];

        for ($i = 0; $i < $count; $i++) {
            if ($m['count'] === '') { // Object - don't replace in the variable name
                list($len, $replaced) = replaceInSerialized('', substr($serialized, $inputPos), false);
            } else { // Array - replace in the index
                list($len, $replaced) = replaceInSerialized($pattern, substr($serialized, $inputPos), $isRegEx);
            }
            if ($replaced === false) {
                return array(0, false);
            }
            $inputPos += $len;
            $out .= $replaced;

            // Always replace in the value
            list($len, $replaced) = replaceInSerialized($pattern, substr($serialized, $inputPos), $isRegEx);
            if ($replaced === false) {
                return array(0, false);
            }
            $inputPos += $len;
            $out .= $replaced;
        }

        if (substr($serialized, $inputPos, 1) !== '}') {
            return array(0, false);
        }

        return array($inputPos + 1, $out . '}');
    }

    return array(0, false);
}

/**
 * Returns a clean version of a string.
 *
 * @param  string $pattern Expression to locate the malicious text.
 * @param  string $text    Text containing the malicious payload.
 * @param  bool   $isRegex Wether pattern is a regexp or a string.
 * @return string          Clean version of the text.
 */
function doCleanup($pattern, $text, $isRegex)
{
    // Quick check: if it's a serialized object/array/string
    if (isset($text[1]) && $text[1] !== ':') {
        return $isRegex ? preg_replace($pattern, '', $text) : str_replace($pattern, '', $text);
    }

    list($pos, $replaced) = replaceInSerialized($pattern, $text, $isRegex);

    if ($replaced === false || $pos !== strlen($text)) {
        // Not a valid serialized data; do a usual textual search-and-replace
        return $isRegex ? preg_replace($pattern, '', $text) : str_replace($pattern, '', $text);
    }

    return $replaced;
}

/**
 * Walks through all the signatures and removes the malicious payload.
 *
 * Look for the signatures in the text and remove the malware. Table and column
 * are used for whitelisting. Function returns NULL if no malware was cleaned.
 *
 * @param  string $text       Text containing the malicious payload.
 * @param  string $signatures Regular expressions to match the malicious code.
 * @param  array  $location   Information about the table.
 * @return string             Clean version of the text.
 */
function clearMalwareFromText($text, $signatures, $location)
{
    if (!isset($GLOBALS['DB_SIGS_TEMPLATE'])) {
        $GLOBALS['DB_SIGS_TEMPLATE'] = array();
    }

    if (!isset($GLOBALS['DB_NOCLEAN_FOR_ROBOT'])) {
        $GLOBALS['DB_NOCLEAN_FOR_ROBOT'] = array();
    }

    $out = '';
    $replaced = false;

    foreach ($signatures as $trigger => $sigArray) {
        if ($sigArray === NESTED) {
            continue;
        }

        // Check the trigger (regular expression or plain text search)
        $matches = null;
        if ($trigger[0] === PCRE_DELIM) {
            if (!preg_match($trigger, $text, $matches, PREG_OFFSET_CAPTURE)) {
                continue;
            }
        } elseif ($trigger[0] !== POSIX_DELIM || substr($trigger, -1) !== POSIX_DELIM) {
            $pos = strpos($text, $trigger);
            if ($pos === false) {
                continue;
            }
            $matches = array(array($trigger, $pos));
        }

        if ($sigArray[CI_NAME] === NESTED) {
            list($newText, $newOut) = clearMalwareFromText($text, $sigArray, $location);
            if ($newText !== null) {
                $text = $newText;
                $replaced = true;
            }
            $out .= $newOut;
            continue;
        }

        // Check the whitelist
        if (isset($sigArray[CI_WHITELIST]) && checkWhitelist($location, $sigArray[CI_WHITELIST])) {
            $out .= reportMalware('RESEARCH', $sigArray[CI_NAME], $location, $matches, $text, 'Whitelisted');
            continue;
        }

        // Do the action
        $action = isset($sigArray[CI_ACTION]) ? $sigArray[CI_ACTION] : WARN;
        if ($action === WARN) {
            $out .= reportMalware('WARN', $sigArray[CI_NAME], $location, $matches, $text);
        } elseif ($action === CLEAR_THIS) {
            $out .= reportMalware('CLEARED', $sigArray[CI_NAME], $location, $matches, $text);
            $text = doCleanup($trigger, $text, false);
            $replaced = true;
        } else {
            if (isset($GLOBALS['DB_SIGS_TEMPLATE'][$action])) {
                $action = str_replace('<TRIGGER>', preg_quote($trigger), $GLOBALS['DB_SIGS_TEMPLATE'][$action]);
            }
            if (!preg_match($action, $text, $matches, PREG_OFFSET_CAPTURE)) { // Fill the matches
                $msg = 'Trigger found; regex not found';
                $out .= reportMalware('RESEARCH', $sigArray[CI_NAME], $location, null, $text, $msg);
                continue;
            }

            $status = 'FOUND';
            if (!isset($_GET['robot']) || !isset($GLOBALS['DB_NOCLEAN_FOR_ROBOT'][$sigArray[CI_NAME]])) {
                $text = doCleanup($action, $text, true); // Do the actual cleanup
                $status = 'CLEARED';
                $replaced = true;
            }
            $out .= reportMalware($status, $sigArray[CI_NAME], $location, $matches, $text);
        }
    }

    return $replaced ? array($text, $out) : array(null, $out);
}

/**
 * Escapes the LIKE keyword in an SQL statement.
 *
 * @param  string $trigger SQL statement to be escaped.
 * @return string          Clean version of the SQL statement.
 */
function escapeLike($trigger)
{
    return str_replace(array('$', '%', '_'), array('$$', '$%', '$_'), $trigger);
}

/**
 * Prepares the WHERE conditions with triggers.
 *
 * Later we will insert table and column names there.
 *
 * @param  mixed $driver        Database connection.
 * @param  array $signatures    List of signatures to search.
 * @param  int   $maxConditions Maximum number of conditions.
 * @return array                List of WHERE SQL statements.
 */
function prepareConditions($driver, $signatures, $maxConditions)
{
    $i = 0;
    $j = 0;
    $conditionSets = array(array(' WHERE '));
    $signatureSet = array();

    foreach ($signatures as $trigger => $nested) {
        if ($j !== 0) {
            // Add OR to the previous condition
            $conditionSets[$i][$j] .= ' OR ';
        }

        if ($trigger[0] === POSIX_DELIM && substr($trigger, -1) === POSIX_DELIM) {
            array_push($conditionSets[$i], ' REGEXP ' . $driver->escapeStr(substr($trigger, 1, -1)));
        } else {
            array_push($conditionSets[$i], ' LIKE ' . $driver->escapeStr('%' . escapeLike($trigger) . '%') . " ESCAPE '$'");
        }
        $j++;
        $signatureSet[$trigger] = $nested;

        if ($j >= $maxConditions) {
            // End the WHERE statement here and start another one
            array_push($conditionSets[$i], $signatureSet);
            $signatureSet = array();

            array_push($conditionSets, array(' WHERE '));
            $i++;
            $j = 0;
        }
    }

    // Delete the extra WHERE statement
    if ($j === 0) {
        array_pop($conditionSets);
    } else {
        array_push($conditionSets[$i], $signatureSet);
        $signatureSet = array();
    }

    return $conditionSets;
}

/**
 * Locates the infected table entries and executes the cleaners.
 *
 * @param  mixed $driver        Database connection.
 * @param  array $tablesColumns List of tables with their columns.
 * @param  array $signatures    Regular expressions to match the malicious code.
 * @return void
 */
function searchAndClear($driver, $tablesColumns, $signatures)
{
    // Break signatures into sets (20 triggers in each set)
    $conditionSets = prepareConditions($driver, $signatures, 20);

    $location = array();
    $action = isset($_GET['s']) ? 'search' : 'cleanup';

    foreach ($tablesColumns as $table => $columns) {
        if (shouldSkipTable($table)) {
            continue;
        }

        // Remember location in the associative array
        $location['table'] = $table;
        $escapedId = '';
        if (isset($columns['idname'])) {
            $location['idname'] = $columns['idname'];
            $escapedId = ',' . $driver->escapeName($columns['idname']);
        } else {
            unset($location['idname']);
            unset($location['id']);
        }

        $escapedTable = $driver->escapeName($table);

        foreach ($columns as $i => $column) {
            if ($i === 'idname' || shouldSkipForResume($table, $column)) {
                continue;
            }

            $location['column'] = $column;
            $escapedColumn = $driver->escapeName($location['column']);

            // Run cleanup for each set
            foreach ($conditionSets as $conditions) {
                $signaturesSet = array_pop($conditions);

                // Search for the triggers using the previously prepared conditions
                $sql = 'SELECT ' . $escapedColumn . $escapedId . ' FROM ' . $escapedTable .
                    implode($escapedColumn, $conditions) . ';';

                clearMalwareFromDb($driver, $location, $sql, $signaturesSet, $action);
            }
        }
    }
}

/**
 * Searches a signature in the database and clears the malicious code.
 *
 * @param  mixed  $driver     Database connection.
 * @param  array  $location   Information about the table.
 * @param  string $sql        SQL statement to execute in the database.
 * @param  array  $signatures Malware identifiers to search and clear.
 * @param  string $action     Name of the action to be executed.
 * @return void
 */
function clearMalwareFromDb($driver, $location, $sql, $signatures, $action)
{
    if (isset($_GET['noise'])) {
        printMsg("\nSearching " . $location['table'] . '.' . $location['column'] . '...');
        @flush();
    }

    $result = $driver->query($sql);

    // If any trigger was found, try to find the triggers in the column text
    while ($row = $driver->fetchRow($result)) {
        if (isset($location['idname'])) {
            $location['id'] = $row[1];
        }
        list($cleared, $out) = clearMalwareFromText($row[0], $signatures, $location);

        if ($cleared !== null
            && !showUpdateDbError(updateDb($driver, $cleared, $row[0], $location, $action))
        ) {
            // Instead of CLEARED message, prepare the FOUND message
            list($cleared, $out) = clearMalwareFromText($row[0], $signatures, $location);
        }

        if ($out) {
            echo $out;
            @flush();
        }
    }
}

/**
 * Deletes entries from a database table.
 *
 * @param  mixed $driver        Database connection.
 * @param  array $tablesColumns List of tables with their columns.
 * @param  array $config        Application configuration.
 * @return void
 */
function deleteRows($driver, $tablesColumns, $config)
{
    if (!isset($GLOBALS['DB_ROWS_TO_DELETE'])) {
        $GLOBALS['DB_ROWS_TO_DELETE'] = array();
    }

    if (!isset($GLOBALS['DB_ROWS_TO_DELETE'][$config['cms']])) {
        return;
    }

    $rules = $GLOBALS['DB_ROWS_TO_DELETE'][$config['cms']];

    foreach ($rules as $tableColumn => $values) {
        list($table, $column) = explode('.', $tableColumn, 2);

        if (strncmp($table, '<PREFIX>', strlen('<PREFIX>')) === 0) {
            $table = $config['prefix'] . substr($table, strlen('<PREFIX>'));
        }

        if (!isset($tablesColumns[$table])) {
            printMsg(
                "\nINFO: Table " . $table . " not found for CMS " . $config['cms'] .
                ', prefix ' . (empty($config['prefix']) ? 'not detected' : $config['prefix'])
            );
            continue;
        }

        if (shouldSkipTable($table)) {
            continue;
        }

        $location = array('table' => $table, 'idname' => $column);

        $vals = array();
        $col = $driver->escapeName($column) . ' LIKE ';
        foreach ($values as $value) {
            $vals[] = $col . $driver->escapeStr($value) . " ESCAPE '$'";
        }
        $vals = implode(' OR ', $vals);

        list($err, $out) = deleteRowsFromDb($driver, $location, $vals);

        if (!showUpdateDbError($err)) {
            // Instead of the "Removed row" message, prepare the "Found malicious row" message
            list($err, $out) = deleteRowsFromDb($driver, $location, $vals);
        }

        if ($out) {
            echo $out;
            @flush();
        }
    }
}

/**
 * Checks the default role for new users in WordPress.
 *
 * If the website is based on WordPress, this function reads the options table
 * and checks whether the default role for new user accounts is different than
 * "subscriber" in which case will print a warning for the security analyze to
 * investigate.
 *
 * @param  mixed $driver        Database connection.
 * @param  array $tablesColumns List of tables with their columns.
 * @param  array $config        Application configuration.
 * @return void
 */
function checkWPDefaultUserRole($driver, $tablesColumns, $config)
{
    if ('WordPress' !== $config['cms']) {
        return;
    }

    $table = $config['prefix'] . 'options';

    if (!isset($tablesColumns[$table])) {
        printMsg("\nWARN: Table " . $table . " not found for WordPress");
        return;
    }

    if (shouldSkipTable($table)) {
        return;
    }

    $res = $driver->query(
        'SELECT "option_value" FROM ' . $driver->escapeName($table) .
        ' WHERE "option_name" = \'default_role\' AND "option_value" <> \'subscriber\';'
    );

    $row = $driver->fetchRow($res);
    if ($row) {
        printMsg(
            "\nWARN: Default WordPress user role set to '" . $row[0] . "'",
            " instead of 'subscriber' in table " . $table .
            ', please notify the client to change this for security reasons.'
        );
    }
}

/**
 * Determines if errors must be printed or not.
 *
 * @param  bool $updateRes Whether there are messages or not.
 * @return bool            Whether to print messages or not.
 */
function showUpdateDbError($updateRes)
{
    if (!isset($GLOBALS['updateErrMessages'])) {
        $GLOBALS['updateErrMessages'] = array();
    }

    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    if (!is_int($updateRes) || !isset($GLOBALS['updateErrMessages'][$updateRes])) {
        return true;
    }

    if ($GLOBALS['isPlainText']) {
        echo "\n" . $GLOBALS['updateErrMessages'][$updateRes];
    } else {
        echo "\n" . '<span class="warn">' . $GLOBALS['updateErrMessages'][$updateRes] . '</span>';
    }

    // If the DB update fails, continue looking for malware in read-only mode
    $_GET['noclean'] = 1;
    return false;
}

/**
 * Append a database backup into the same file.
 *
 * @param  string $backupFilename Location of the backup file.
 * @param  string $backup         Additional data to backup.
 * @return bool                   Whether the operation succeeded or not.
 */
function addToBackup($backupFilename, $backup)
{
    $fh = @fopen($backupFilename, "ab");
    if (false === $fh) {
        return false;
    }

    if (fseek($fh, 0, SEEK_END) !== 0) {
        return false;
    }

    $size = ftell($fh);
    if ($size === 0) {
        $backup = BACKUP_COMMENT . "\n" . $backup;
    }

    $res = false !== fwrite($fh, encrypt($backup, SUCURI_KEY, $size));

    fclose($fh);
    return $res;
}

/**
 * Changes the value in a table row in the database.
 *
 * This function also creates a backup of the original content.
 *
 * @param  mixed  $driver        Database connection.
 * @param  string $cleared       Clean version of the table row.
 * @param  string $previousValue Original content of the table row.
 * @param  array  $location      Information about the table.
 * @param  string $action        Name of the action to be executed.
 * @return bool                  Whether the operation succeeded or not.
 */
function updateDb($driver, $cleared, $previousValue, $location, $action)
{
    if (isset($_GET['noclean']) || !isset($location['idname'])) {
        return true;
    }

    $backupFilename = getBackupFilename($action, $location['table']);

    if ($backupFilename === false) {
        return UPDATE_ERR_BACKUP_DIR;
    }

    // Prepare the SQL statements
    $update = 'UPDATE ' . $driver->escapeName($location['table']) . ' SET ' .
        $driver->escapeName($location['column']) . ' = ';

    $where = ' WHERE ' . $driver->escapeName($location['idname']) . ' = ' .
        $driver->escapeStr($location['id']) . ' AND ' .
        $driver->escapeName($location['column']) . ' = ';

    // Encrypt the backup and save it in that folder
    $backup = $update . $driver->escapeStr($previousValue) . $where .
        $driver->escapeStr($cleared) . ";\n\n";

    if (!addToBackup($backupFilename, $backup)) {
        return UPDATE_ERR_BACKUP_FILE;
    }

    // Change the column value in the database only when we have the backup
    $driver->query($update . $driver->escapeStr($cleared) . $where . $driver->escapeStr($previousValue) . ';');

    if ($driver->getAffectedRows() !== 1) {
        return UPDATE_ERR_CHANGED;
    }

    return true;
}

/**
 * Starts a transaction to delete some entries in the database.
 *
 * @param  mixed  $driver   Database connection.
 * @param  array  $location Information about the table.
 * @param  string $where    Condition for the SQL statement.
 * @return array            Result of the operation.
 */
function deleteRowsFromDb($driver, $location, $where)
{
    $fromWhere = ' FROM ' . $driver->escapeName($location['table']) . ' WHERE ' . $where . ";\n\n";

    $driver->begin();

    // Select the malicious rows and backup them
    $res = $driver->query('SELECT * ' . $fromWhere);
    list($columns, $types) = $driver->getColumnNamesTypes($location['table']);
    $values = array();
    $out = '';

    while ($row = $driver->fetchRow($res)) {
        $values[] = '(' . $driver->exportRow($row, $types) . ')';

        $location['id'] = $row[array_search($location['idname'], $columns)];
        $out .= reportMalware('OK', isset($_GET['noclean']) ? 'Found malicious row' : 'Removed row', $location);
    }

    if (count($values) === 0 || isset($_GET['noclean'])) {
        // No malware was found or cleanup is disabled
        $driver->rollback();
        return array(true, $out);
    }

    $total = count($columns);
    for ($i = 0; $i < $total; $i++) {
        $columns[$i] = $driver->escapeName($columns[$i]);
    }

    $backup = '';
    foreach ($values as $value) {
        $backup .= 'INSERT INTO ' . $driver->escapeName($location['table']) . ' (' . implode(', ', $columns) . ') VALUES ' . $value . ";\n\n";
    }

    $backupFilename = getBackupFilename('deleterows', $location['table']);
    if ($backupFilename === false) {
        $driver->rollback();
        return array(UPDATE_ERR_BACKUP_DIR, $out);
    }

    // Save the backup
    if (!addToBackup($backupFilename, $backup)) {
        $driver->rollback();
        return array(UPDATE_ERR_BACKUP_FILE, $out);
    }

    // Delete the rows
    $driver->query('DELETE ' . $fromWhere);
    $driver->commit();
    return array(true, $out);
}

/**
 * Returns information about the table from an SQL statement.
 *
 * @param  string $sql SQL statement that will be parsed.
 * @return array|null  Information about the table.
 */
function getLocationFromSql($sql)
{
    // Escaped names and values are not handled correctly by these regular expressions;
    // we would need a full SQL lexer to handle them.
    $location = array();
    if (preg_match('@^UPDATE "([^"]+)" SET "([^"]+)" = @', $sql, $match)) {
        $location['table'] = $match[1];
        $location['column'] = $match[2];

        if (preg_match('@ WHERE "([^"]+)" = \'([^\']+)\' AND @', $sql, $match)) {
            $location['idname'] = $match[1];
            $location['id'] = $match[2];
            return $location;
        }
    } elseif (preg_match('@^INSERT INTO "([^"]+)" \("([^"]+)"@', $sql, $match)) {
        // We cannot determine the primary key from the INSERT statement,
        // so just take the first column for the message
        $location['table'] = $match[1];
        $location['idname'] = $match[2];

        if (preg_match('@\) VALUES \(\'([^\']+)\'@', $sql, $match)) {
            $location['id'] = $match[1];
            return $location;
        }
    }
    return null;
}

/**
 * Restores the content of a specific database.
 *
 * @param  mixed $driver   Database connection.
 * @param  array $sqlLines List of SQL statements to execute.
 * @return void
 */
function restoreBackup($driver, $sqlLines)
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    $sqlLines = explode("\n", $sqlLines);

    foreach ($sqlLines as $sql) {
        $sql = trim($sql);

        if ($sql === '' || $sql === BACKUP_COMMENT) {
            continue;
        }

        $driver->query($sql);

        $location = getLocationFromSql($sql);

        $naffected = $driver->getAffectedRows();

        if ($naffected === 0) {
            echo reportMalware('ERROR', 'The DB column was changed after backup. Please restore manually', $location);
        } elseif ($naffected !== 1) {
            echo reportMalware('ERROR', 'Unexpected naffected: ' . $naffected, $location);
        } else {
            echo reportMalware('OK', isset($location['column']) ? 'Restored DB column' : 'Restored DB row', $location);
        }

        @flush();
    }

    printMsg("\n\nINFO: Restore complete");

    echo $GLOBALS['isPlainText'] ? "\n" : '</pre>';
}

/**
 * Creates a new directory to store the infected data.
 *
 * @return bool True if the directory was created, false otherwise.
 */
function createQuarantineFolder()
{
    // Create the directory (race condition here)
    if (!is_dir(QUARANTINE_FOLDER)) {
        if (!mkdir(QUARANTINE_FOLDER, 0755, true)) {
            return false;
        }
    }

    // Harden the directory
    if (!touch(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . 'index.html')
        || !touch(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . 'index.php')
    ) {
        return false;
    }

    $fh = fopen(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . '.htaccess', 'w');
    if ($fh === false || false === fwrite($fh, 'deny from all')) {
        return false;
    }
    fclose($fh);
    return true;
}

/**
 * Returns the path to the requested database backup.
 *
 * @param  string $action Category associated to the backup.
 * @param  string $table  Name of the table.
 * @return string|bool    Path to the database backup or false.
 */
function getBackupFilename($action, $table)
{
    if (!isset($GLOBALS['backupFilename'])) {
        $GLOBALS['backupFilename'] = array();
    }

    // Sanitize table name
    $table = preg_replace('/[^a-zA-Z0-9_-]/', '-', $table);

    // If the current backup file is too large or does not exist, generate a new one
    clearstatcache();
    if (isset($GLOBALS['backupFilename'][$table]) && filesize($GLOBALS['backupFilename'][$table]) <= 500000) {
        return $GLOBALS['backupFilename'][$table];
    }

    if (!createQuarantineFolder()) {
        return false;
    }

    // Generate the file name. There is a race condition here, but it's mostly okay
    // because scan usually takes more than 1 sec. Ideally, we would use fopen(..., "xb"),
    // but it's not supported until PHP 4.3.2.
    $suffix = BACKUP_APPENDIX . time();
    $prefix = QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . $action . '-' . $table;
    $rand = '';

    while (file_exists($prefix . $rand . $suffix)) {
        $rand = mt_rand(0, 1000000000);
    }

    if (!$GLOBALS['backupFilename']) {
        $GLOBALS['backupFilename'] = array();
    }

    $GLOBALS['backupFilename'][$table] = $prefix . $rand . $suffix;

    return $GLOBALS['backupFilename'][$table];
}

/**
 * Encodes the passed content with certain key.
 *
 * @param  string $content Text to be encrypted.
 * @param  string $key     Password for the encryption.
 * @param  int    $shift   Number of encryption cycles.
 * @return string          New text already encrypted.
 */
function encrypt($content, $key, $shift)
{
    $result = '';

    $contentLength = strlen($content);
    $keyLength = strlen($key);

    // XOR the first 'shift' bytes
    $shift %= $keyLength;
    $processedLength = min($keyLength - $shift, $contentLength);
    // substr() returns false for an empty $content string, so we do an additional check
    $result = '';
    if ($processedLength > 0) {
        $result = substr($content, 0, $processedLength) ^ substr($key, $shift, $processedLength);
    }

    $restLength = ($contentLength - $processedLength) % $keyLength;
    $mainPartEnd = $contentLength - $restLength;

    for ($i = $processedLength; $i < $mainPartEnd; $i += $keyLength) {
        $result .= $key ^ substr($content, $i, $keyLength);
    }

    if ($restLength > 0) {
        $result .= substr($content, $mainPartEnd) ^ substr($key, 0, $restLength);
    }

    return $result;
}

/**
 * Prints the list of available backup files.
 *
 * @return void
 */
function listBackupFiles()
{
    if (!isset($GLOBALS['isPlainText'])) {
        $GLOBALS['isPlainText'] = false;
    }

    $dateLimit = null;

    if (isset($_GET['date'])) {
        $dateLimit = intval($_GET['date']);

        if ($dateLimit <= 0 || $dateLimit > time()) {
            $dateLimit = time();
        }
    }

    $backupFiles = array();

    $handle = @opendir(QUARANTINE_FOLDER);
    if (!$handle) {
        reportFatalError('Failed to open the quarantine folder');
    }

    while (false !== ($filename = @readdir($handle))) {
        $key = explode(BACKUP_APPENDIX, $filename, 2);
        if (is_dir($filename) || count($key) < 2) {
            continue;
        }

        $fileDate = intval($key[1]);

        if ($dateLimit !== null && ($fileDate > $dateLimit || $fileDate < $dateLimit - 24 * 60 * 60)) {
            continue;
        }

        $backupFiles[$filename] = $fileDate;
    }
    closedir($handle);

    arsort($backupFiles);

    foreach ($backupFiles as $filename => $fileDate) {
        $fileDate = @date('Y-m-d H:i:s', $fileDate);
        $restoreLink = '?srun&restore=' . base64_encode($filename);
        if ($GLOBALS['isPlainText']) {
            echo "\n" . $fileDate . ' - ' . $filename . ' - restore=' . base64_encode($filename);
        } else {
            echo "\n" . '<a href="' . $restoreLink . '" target="_blank">' . $fileDate . ' - ' .
                escapeHTML($filename) . "</a>";
        }
    }

    echo "\n\n" . count($backupFiles) . ' backup file' . (count($backupFiles) === 1 ? '' : 's') . ' found';
    echo $GLOBALS['isPlainText'] ? "\n" : '</pre>';
}

/**
 * Restores the selected database.
 *
 * @param  mixed  $driver   Database connection.
 * @param  string $filename Database backup.
 * @return void
 */
function restore($driver, $filename)
{
    if (empty($filename)) {
        listBackupFiles();
        $driver->disconnect();
        exit;
    }

    if (isset($_POST['file_content'])) {
        if (get_magic_quotes_gpc()) {
            $_POST['file_content'] = stripslashes($_POST['file_content']);
        }
        restoreBackup($driver, $_POST['file_content']);
        $driver->disconnect();
        exit;
    }

    $filename = base64_decode($filename);
    if (!preg_match('@^[A-Za-z0-9_-]+' . preg_quote(BACKUP_APPENDIX, '@') . '[0-9]+$@', $filename)) {
        reportFatalError('Invalid backup file name: ' . $filename);
    }

    $fh = fopen(QUARANTINE_FOLDER . DIRECTORY_SEPARATOR . $filename, 'rb');
    if ($fh === false || false === ($contents = fread($fh, 8 * 1048576))) {
        reportFatalError('Unable to read file: ' . $filename);
    }
    fclose($fh);

    // Decrypt the file
    $contents = encrypt($contents, SUCURI_KEY, 0);

    $valid = strncmp($contents, BACKUP_COMMENT, strlen(BACKUP_COMMENT)) === 0 ||
        strpos($contents, "\nWHERE ") !== false;
    if (isTerminal()) {
        echo "File: " . $filename;
        if (!$valid) {
            reportFatalError('Invalid backup file');
        }
        echo "\n" . $contents . "\n";
        $reply = askFromCmdLine('Restore this backup? [Y / N]');
        if ($reply === 'y' || $reply === 'Y') {
            restoreBackup($driver, $contents);
        }
    } else {
        echo '<form method="post" style="height:100%" action="">';
        echo "File: " . escapeHtml($filename);
        if ($valid) {
            echo ' - <input type="submit" name="submit" value="Restore" />';
        } else {
            echo ' - Invalid backup file';
        }
        echo '<textarea name="file_content" style="margin: 2px; height: 85%; width: 100%;">';
        echo escapeHtml($contents);
        echo '</textarea></form></pre>';
    }
    $driver->disconnect();
    exit;
}

/**
 * Prints the content of a specific table.
 *
 * @param  mixed  $driver Database connection.
 * @param  string $table  Name of the table.
 * @return void
 */
function dumpTableData($driver, $table)
{
    $res = $driver->query('SELECT * FROM ' . $driver->escapeName($table) . ';');
    list($columns, $types) = $driver->getColumnNamesTypes($table);

    // Prepare the header with column names
    $columnsEscaped = array();
    $total = count($columns);
    for ($i = 0; $i < $total; $i++) {
        $columnsEscaped[$i] = $driver->escapeName($columns[$i]);
    }
    $columnsEscaped = implode(', ', $columnsEscaped);
    $header = 'INSERT INTO ' . $driver->escapeName($table) . ' (' . $columnsEscaped . ') VALUES';

    // Print all rows
    $allValues = '';
    $count = 0;

    while ($row = $driver->fetchRow($res)) {
        $values = "\n(" . $driver->exportRow($row, $types) . ')';

        if (strlen($allValues) >= 500000) { // Split long SQL statements to avoid MySQL timeouts
            echo $header . $allValues . ";\n";
            $allValues = '';
        }

        if ($allValues) {
            $allValues .= ',';
        }
        $allValues .= $values;
        $count++;
    }

    if ($count === 0) {
        return;
    }

    echo $header . $allValues . ";\n\n";
}

/**
 * Triggers the download of the entire database.
 *
 * @param  mixed  $driver        Database connection.
 * @param  array  $tables        List of table names.
 * @param  array  $tablesColumns List of tables with their columns.
 * @param  string $db            Name of the database.
 * @return void
 */
function dumpTables($driver, $tables, $tablesColumns, $db)
{
    if (!isset($_SERVER['SERVER_NAME'])) {
        $serverName = date('ymd-His');
    } else {
        $serverName = preg_replace('/[^a-zA-Z0-9.-]/', '-', $_SERVER['SERVER_NAME']);
    }

    date_default_timezone_set("GMT");
    header('Content-Type: application/sql; charset=utf-8');
    header('Content-Disposition: attachment; filename=dump_' . $serverName . '.sql');

    echo "-- Sucuri DB dump\n\n";
    echo $driver->getDumpHeader() . "\n";
    echo $driver->getCreateDBSql($db);

    if ($tables) {
        $tablesColumns = array_flip(explode(',', $tables));
    }

    foreach ($tablesColumns as $table => $columns) {
        echo $driver->getCreateTableSql($table);
        dumpTableData($driver, $table);
    }

    echo "-- End of the dump\n";

    exit;
}