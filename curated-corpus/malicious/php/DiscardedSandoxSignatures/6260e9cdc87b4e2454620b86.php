<?php
//if (!defined('Inworkflowmax')) exit('Is it Access denied');
define('Inworkflowmax', 1);
//Comment this on server
include 'includes/common.inc.php';

include 'includes/dates.inc.php';
//include "sendcomms.php";


if (!isset($_SERVER['SCRIPT_NAME'])) $_SERVER['SCRIPT_NAME'] = 'callbackOAuth.php';

function openLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder, $logPath;

	$logFileHandle_cron_reminder = fopen($logPath . 'callbackOAuth.log', 'a');
}

function closeLogFile_cron_reminder()
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
		fclose ($logFileHandle_cron_reminder);
}

function printLog_cron_reminder($str)
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
	{
		if (substr($str, strlen($str) - 1, 1) != "\n")
			$str .= "\n";
		fwrite ($logFileHandle_cron_reminder, $str);
	}
}

function printLogL_cron_reminder($str, $level)
{
	for ($i = 1; $i <= $level; ++$i)
		$str = "\t" . $str;
	printLog_cron_reminder($str);
}

//----------------------------------------------LOGS FOR REFRESH TOKEN STARTS HERE--------------------------------------------------
function openLogFile_refreshToken()
{
	global $logFileHandle_cron_reminder, $logPath;

	$logFileHandle_cron_reminder = fopen($logPath . 'refreshTokencallbackOAuth.log', 'a');
}

function closeLogFile_refreshToken()
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
		fclose ($logFileHandle_cron_reminder);
}

function printLog_refreshToken($str)
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
	{
		if (substr($str, strlen($str) - 1, 1) != "\n")
			$str .= "\n";
		fwrite ($logFileHandle_cron_reminder, $str);
	}
}

function printLogL_refreshToken($str, $level)
{
	for ($i = 1; $i <= $level; ++$i)
		$str = "\t" . $str;
	printLog_refreshToken($str);
}
//-------------------------------------------------LOGS FOR REFRESH TOKEN ENDS  HERE-------------------------------------

//----------------------------------------------LOGS FOR CREATE TOKEN STARTS HERE--------------------------------------------------
function openLogFile_createToken()
{
	global $logFileHandle_cron_reminder, $logPath;

	$logFileHandle_cron_reminder = fopen($logPath . 'createTokencallbackOAuth.log', 'a');
}

function closeLogFile_createToken()
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
		fclose ($logFileHandle_cron_reminder);
}

function printLog_createToken($str)
{
	global $logFileHandle_cron_reminder;

	if ($logFileHandle_cron_reminder)
	{
		if (substr($str, strlen($str) - 1, 1) != "\n")
			$str .= "\n";
		fwrite ($logFileHandle_cron_reminder, $str);
	}
}

function printLogL_createToken($str, $level)
{
	for ($i = 1; $i <= $level; ++$i)
		$str = "\t" . $str;
	printLog_createToken($str);
}
//-------------------------------------------------LOGS FOR CREATE TOKEN ENDS  HERE-------------------------------------





//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ACTUAL WORKFLOWMAX FUNCTIONS STARTS HERE ************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************


function validatescriptInvocation($cognitoFormName, $AuthCode) 
{
	//Validation goes here
	//Return success or failure
}

function is_valid_name($file)
{
  return preg_match('/^([-\.\w]+)$/', $file) > 0;
}

function post_lead_to_workflow_max($lead_data, $access_token) 
{
		// Lead data must match the format required by WorkflowMax
		// currently accepts XML data
		// see: https://www.workflowmax.com/api/job-methods#POST%20add
		$xml = new SimpleXMLElement("<Lead></Lead>");
		$xml->addChild('Name', htmlspecialchars($lead_data[0]));
		$xml->addChild('Description', htmlspecialchars($lead_data[1]));
		$xml->addChild('ClientUUID', htmlspecialchars($lead_data[2]));
		$xml->addChild('OwnerUUID', htmlspecialchars($lead_data[3]));
		$xml->addChild('EstimatedValue', htmlspecialchars($lead_data[4]));
		$xml->addChild('ContactUUID', htmlspecialchars($lead_data[5]));
		$xml->addChild('CategoryUUID', htmlspecialchars($lead_data[6]));

		//echo('<br>ClientUUID: '. $lead_data[2].'<br>');
		//echo('<br>OwnerUUID: '. $lead_data[3].'<br>');
		//echo('<br>ContactUUID: '. $lead_data[5].'<br>');
		//echo('<br> ********* '.$xml->asXML('blog.xml').'************ <br>');
		printLog_cron_reminder ("##############################################################################################################");
		printLog_cron_reminder ("lead_data [0] Name: " . $lead_data[0]);
		printLog_cron_reminder ("lead_data [1] Description: " . $lead_data[1]);
		printLog_cron_reminder ("lead_data [2] ClientUUID: " . $lead_data[2]);
		printLog_cron_reminder ("lead_data [3] OwnerUUID: " . $lead_data[3]);
		printLog_cron_reminder ("lead_data [4] EstimatedValue: " . $lead_data[4]);
		printLog_cron_reminder ("lead_data [5] ContactUUID: " . $lead_data[5]);
		printLog_cron_reminder ("lead_data [6] CategoryUUID: " . $lead_data[6]);
		printLog_cron_reminder ("XML Input: ". $xml->asXML());
		
		//https://api.xero.com/workflowmax/3.0/lead.api/add
		$url = 'https://api.xero.com/workflowmax/3.0/lead.api/add';
		$data = array(
		);
		$data_string = json_encode($data);
		$ch=curl_init($url);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $xml->asXML());

		curl_setopt($ch, CURLOPT_HEADER, false);

		//Sending Customer Key and Customer Secret as Headers Username and Password
		curl_setopt($ch, CURLOPT_HTTPHEADER,
		   array(    "Accept: application/json",
								"Content-type: application/xml",
								"Authorization: Bearer " . $access_token . "",
								"Content-Length: " . strlen($xml->asXML()) . "",
								"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
							)
		);
		$result = curl_exec($ch);
		//print_r($result);
		curl_close($ch);
		printLog_cron_reminder (' ^^^^^ API RESPONSE XML - : ' . $result);


		$result = simplexml_load_string($result);
		
		printLog_cron_reminder ("Result Response : ". $result->asXML());
		printLog_cron_reminder ("##############################################################################################################");
		return $result;

}

function put_lead_customfields_to_workflow_max($leadID, $customid, $type, $customvalue, $access_token) {

		$defaultResponse = 'No Change Updated';
		if($customvalue != '')
		{

			// Lead data must match the format required by WorkflowMax
			// currently accepts XML data
			// see: https://api.workflowmax.com/lead.api/update/[id]/customfield
			$xml = '<?xml version="1.0" encoding="ISO-8859-1"?><CustomFields><CustomField><UUID>' . $customid . '</UUID><'. $type . '>'. $customvalue . '</'. $type. '></CustomField></CustomFields>';

			// configure our connection to the api
			//PUT https://api.xero.com/workflowmax/3.0/lead.api/update/[identifier]/customfield
			$url = 'https://api.xero.com/workflowmax/3.0/lead.api/update/' . $leadID . '/customfield';
			$data = array(
			);
			$data_string = json_encode($data);
			$ch=curl_init($url);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);

			curl_setopt($ch, CURLOPT_HEADER, false);

			//Sending Customer Key and Customer Secret as Headers Username and Password
			curl_setopt($ch, CURLOPT_HTTPHEADER,
			   array(    "Accept: application/json",
									"Content-type: application/xml",
									"Authorization: Bearer " . $access_token . "",
									"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
								)
			);
			$result = curl_exec($ch);
			//print_r($result);
			curl_close($ch);
			printLog_cron_reminder (' ^^^^^ API RESPONSE XML - : ' . $result);
			
			if(curl_errno($ch))
			{
					printLog_cron_reminder ("=========================== ERROR : " . DisplayDateTime(time()) . " -- " . curl_error($ch) . " \n");
					throw new Exception(curl_error($ch));
			}
			curl_close($ch);

			return $result = simplexml_load_string($result);
		}
		else
		{
			return $defaultResponse;
		}
}

function getBetween($string, $start = "", $end = ""){
	if (strpos($string, $start)) { // required if $start not exist in $string
		$startCharCount = strpos($string, $start) + strlen($start);
		$firstSubStr = substr($string, $startCharCount, strlen($string));
		$endCharCount = strpos($firstSubStr, $end);
		if ($endCharCount == 0) {
			$endCharCount = strlen($firstSubStr);
		}
		return substr($firstSubStr, 0, $endCharCount);
	} else {
		return '';
	}
}

function getRecursiveValueJsonArray($formdata_payload, $searchKey)
{
	$recursiveKeyValue = "";
	$array = json_decode ($formdata_payload ,true);
if(is_Array($array))
{
	foreach ($array as $item)
	{
		if(is_Array($item))
		{
			foreach($item as $key => $value)
			{
			if (strcasecmp($searchKey, $key) == 0)
				{
					$recursiveKeyValue = $value;
				}
				if(is_Array($value))
				{
					foreach($value as $valuekey => $valuevalue)
					{
					if (strcasecmp($searchKey, $valuekey) == 0)
						{
							$recursiveKeyValue = $valuevalue;
						}
						if(is_Array($valuevalue))
						{
							foreach($valuevalue as $valuevaluekey => $valuevaluevalue)
							{
							if (strcasecmp($searchKey, $valuevaluekey) == 0)
								{
									$recursiveKeyValue = $valuevaluevalue;
								}
							}
						}
					}
				}
			}
		}
	}
	return $recursiveKeyValue;
}
}

function getClientListValueArray($searchKey, $access_token)
{

	global $DBPrefix, $system, $emailBodySupportTeam;
	$url = 'https://api.xero.com/workflowmax/3.0/client.api/list';
	$data = array(
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	curl_setopt($ch, CURLOPT_HEADER, false);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
							"Content-type: application/xml",
							"Authorization: Bearer " . $access_token . "",
							"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
						)
	);
	$result = curl_exec($ch);
	//print_r($result);
	curl_close($ch);
	printLog_cron_reminder (' ^^^^^ API RESPONSE XML - : ' . $result);

	/******
	* IF REFRESH TOKEN FAILED THEN MANUAL ACCESS TOKEN NEEDS TO BE GENERATED
	* WE WILL CAPTURE AND SEND AN EMAIL FOR NOW
	*/
	$AccessDeniedTokenResult = '';
	$AccessDeniedTokenResultKey = '';
	$AccessDeniedTokenResultValue = '';

	$AccessDeniedTokenResult = json_decode($result, true);
	foreach ($AccessDeniedTokenResult as $k=>$v)
	{
		$AccessDeniedTokenResultKey = $k;
		$AccessDeniedTokenResultValue = $v;
		printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . 'KEY : ' . $k . ' - VALL ' . $v);

		if($AccessDeniedTokenResultKey == 'Title' && $AccessDeniedTokenResultValue == 'Unauthorized') 
		{
			$emailBodySupportTeam .= $emailBodySupportTeam . " <p>" . " : CALLING API SUBMITTING JOB - ACCESS TOKEN FAILED " . $result . "<p>";
					$emailBodySupportTeam .= " <p><p><p><b>" . "Support Staff Follow Below Steps <br><br> Click on Below link and Authorise Access <br>" . "</b><p><p><p>";
			$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : CALLING API SUBMITTING JOB - ACCESS TOKEN FAILED " . "')";
			$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

			printLog_cron_reminder('CALLING API SUBMITTING JOB - ACCESS TOKEN FAILED ' . $result);
			//echo('<br>Lead Create FAILED in WFMAX - FAILURE ' . $leadID);
			$manualAccessTokenLink = 'https://login.xero.com/identity/connect/authorize?response_type=code&client_id=E689C9A080304D28A06ADE330EA76778&redirect_uri=https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php&scope=offline_access%20openid%20profile email%20workflowmax&state=123456789&tokenaction=createnew';

			// send message to Support Team
			$emailNotificationSupportMethod = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';
			$emailer = new email_class();
			$emailer->assign_vars(array(
					'BODYEMAIL' => $emailBodySupportTeam,
					'ACCESSTOKENLINK' => $manualAccessTokenLink,
					'FORMNAME' => $emailFormname,
					'SITEURL' => $system->SETTINGS['siteurl'],
					'SITENAME' => $system->SETTINGS['sitename']
					));
			$emailer->email_sender($emailNotificationSupportMethod, 'emailNotificationSupportTeam.php', $system->SETTINGS['sitename'] . ' - ' . '******* FAILURE EMAIL ******** CALLING API SUBMITTING JOB - ACCESS TOKEN FAILED - Foodstuffs NZ Studio');
		}

	}

	$ClientListValueID = '';
	if ($Clients = new SimpleXmlElement($result))
	{
		printLog_cron_reminder (' ^^^^^ 1 - : ');
		foreach ($Clients->Clients->Client as $Client)
		{
			printLog_cron_reminder (' ^^^^^ 2 - : ' . $searchKey . ' || ' . $Client->Name);
		   if(strcasecmp($searchKey, $Client->Name) == 0)
			{
			   $ClientListValueID = $Client->UUID;
			   printLog_cron_reminder (' ^^^^^  OUTPUT RETURN : ' . $ClientListValueID);
			   return $ClientListValueID;
			}
		}
	}

}
function getAccountManagerListValueArray($searchKey, $access_token)
{
	// configure our connection to the api

	$url = 'https://api.xero.com/workflowmax/3.0/client.api/list';
	$data = array(
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	curl_setopt($ch, CURLOPT_HEADER, false);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
							"Content-type: application/xml",
							"Authorization: Bearer " . $access_token . "",
							"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
						)
	);
	$result = curl_exec($ch);
	curl_close($ch);

	$ClientListValueID = '';
	if ($Clients = new SimpleXmlElement($result))
	{
		foreach ($Clients->Clients->Client as $Client)
		{
		   if(strcasecmp($searchKey, $Client->Name) == 0)
			{
			   $ClientAccountManagerListValueID = $Client->AccountManager->ID;
			   return $ClientAccountManagerListValueID;
			}
		}
	}

}
function getJobManagerListValueArray($searchKey, $access_token)
{
	// configure our connection to the api
	$url = 'https://api.xero.com/workflowmax/3.0/client.api/list';
	$data = array(
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	curl_setopt($ch, CURLOPT_HEADER, false);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
							"Content-type: application/xml",
							"Authorization: Bearer " . $access_token . "",
							"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
						)
	);
	$result = curl_exec($ch);
	curl_close($ch);

	$ClientListValueID = '';
	if ($Clients = new SimpleXmlElement($result))
	{
		foreach ($Clients->Clients->Client as $Client)
		{
		   if(strcasecmp($searchKey, $Client->Name) == 0)
			{
			   $ClientJobManagerListValueID = $Client->JobManager->ID;
			   return $ClientJobManagerListValueID;
			}
		}
	}

}
function getContactListValueArray($searchKeyClientID, $searchKeyContactName, $access_token)
{
	printLog_cron_reminder ("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  START getContactListValueArray  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
	printLog_cron_reminder ('In getContactListValueArray searching Client: ' . $searchKeyClientID . ' || Contact Name: ' . $searchKeyContactName);
	//echo('In getContactListValueArray searching Client: ' . $searchKeyClientID . '<br>');

	//https://api.xero.com/workflowmax/3.0/client.api/get/c257b062-fbc9-4dc7-9132-f18ee956c4f9
	//$url = 'https://api.workflowmax.com/client.api/get/'.$searchKeyClientID.'?apiKey=' . $api_token . '&accountKey=' . $acc_key;
	$url = 'https://api.xero.com/workflowmax/3.0/client.api/get/'.$searchKeyClientID;
	$data = array(
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	curl_setopt($ch, CURLOPT_HEADER, false);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
							"Content-type: application/xml",
							"Authorization: Bearer " . $access_token . "",
							"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
						)
	);
	$result = curl_exec($ch);
	curl_close($ch);
	printLog_cron_reminder (' ^^^^^ API RESPONSE XML - : ' . $result);
	$xml = $result;
	if($xml != '')
	{
		$ClientListValueID = '';
		$ContactListValueID = '';
		if ($Client = new SimpleXmlElement($xml))
		{
			printLog_cron_reminder (' ^^^^^ 1 - : ');
			//printLog_cron_reminder ("Result Response : ". $Client->asXML());
			//echo $Client->asXML();
			//echo('xml yes : ' . $Client->Client->Name . '<br>');
			foreach ($Client->Client->Contacts->Contact as $Contact)
			{
				//echo($searchKeyContactName . ' |||| ' . $Contact->Name.'<br>');
				printLog_cron_reminder (" --->" . $searchKeyContactName . " |||| " . $Contact->Name);
			   if(strcasecmp($searchKeyContactName, $Contact->Name) == 0)
				{
				   $ContactListValueID = $Contact->UUID;
					printLog_cron_reminder (" Method getContactListValueArray - Found Contact ID " . $ContactListValueID);
				   //echo('In the function ContactID : ' . $ContactListValueID . '<br>');
				   return $ContactListValueID;
				}
			}
			if($ContactListValueID == '')
			{
				//Did not find the contact match so let us create a new contact
				//Logic goes here to create contact, call function get the value and return from here
				printLog_cron_reminder (" ERROR : ContactIDEmpty : " . $ContactListValueID);
				return 'ContactIDEmpty';
			}
		}
	}
	else
	{
		//API did not return valid result for mentioned client
		return '';
	}
	printLog_cron_reminder ("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  END getContactListValueArray  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");

}
function generateContactListID($ClientID, $ContactName, $ContactEmail, $access_token)
{

	// API must match the format required by WorkflowMax
	// currently accepts XML data
	// see: https://www.workflowmax.com/api/job-methods#POST%20add
	/*
	<Contact>
	  <Client>
		<ID>142</ID>
	  </Client>
	  <Name>Wyett E Coyote</Name>
	  <IsPrimary>yes</IsPrimary> <!-- If multiple contacts defined, method will interpret last primary client as Primary -->
	  <Salutation />
	  <Addressee />
	  <Mobile />
	  <Email />
	  <Phone />
	  <Position />
	</Contact>
	*/
	$xml = new SimpleXMLElement("<Contact></Contact>");
	$client = $xml->addChild('Client');
	$client->addChild('UUID', htmlspecialchars($ClientID));
	$xml->addChild('Name', htmlspecialchars($ContactName));
	$xml->addChild('Email', htmlspecialchars($ContactEmail));





	// configure our connection to the api
	//https://api.xero.com/workflowmax/3.0/client.api/contact
	$url = 'https://api.xero.com/workflowmax/3.0/client.api/contact';
	$data = array(
	);
	$data_string = json_encode($data);
	$ch=curl_init($url);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, $xml->asXML());

	curl_setopt($ch, CURLOPT_HEADER, false);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
							"Content-type: application/xml",
							"Authorization: Bearer " . $access_token . "",
							"Content-Length: " . strlen($xml->asXML()) . "",
							"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
						)
	);
	$result = curl_exec($ch);
	//print_r($result);
	curl_close($ch);
	printLog_cron_reminder (' ^^^^^ API RESPONSE XML - : ' . $result);
	$result = simplexml_load_string($result);
	printLog_cron_reminder ("Result Response : ". $result->asXML());
	printLog_cron_reminder ("##############################################################################################################");

	//Insert in database for the record newly created
	//Table Name: WORKFLOWMAX_CONTACT_CREATE

	//Now that insert of new record is complete. Let us iterate to get the ID

	$ContactListValueID = getContactListValueArray($ClientID, $ContactName, $access_token);
	//echo('In the Generate function ContactID : ' . $ContactListValueID . '<br>');
	printLog_cron_reminder ("In the Generate function ContactID : ". $ContactListValueID);
	return $ContactListValueID;

}

function downloadFileAttachments($url, $path, $fileNameAttachment)
{
	$newfname = $path . '/' . urldecode($fileNameAttachment);
	$file = fopen ($url, 'rb');
	if ($file) {
		$newf = fopen ($newfname, 'wb');
		if ($newf) {
			while(!feof($file)) {
				fwrite($newf, fread($file, 1024 * 8), 1024 * 8);
			}
			//echo('Writing File Complete : ' . $file);
		}
	}
	if ($file) {
		fclose($file);
	}
	if ($newf) {
		fclose($newf);
	}
}

function isValidURL($url)
{
	return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*
	(:[0-9]+)?(/.*)?$|i', $url);
}

/*
LET US HANDLE ATTACHMENTS HERE
Create a new folder on the server with lead ID, and subfolder (standard list of folders)
Get all the attachments one by one and start download the files on the server
Once all files are copied on the server
Then send an email with the new link to download
We need to add logging in file and DB for the following steps
1. All files start download
2. All files download complete
3. Email sent to studio@
We will have to create a new download php file which will go in the link the email/description
*/
function manageattachments($leadID, $lead_custom_attachment_fieldmappings_CognitoFormFieldName, $getValueAttachments, $fileNameAttachment)
{
	global $WFMAXUploadAttachmentPath;

	printLog_cron_reminder ("--------- Inside ManageAttachment Function Parameters Recieved : " . $leadID . ' | '. $lead_custom_attachment_fieldmappings_CognitoFormFieldName . ' | '. $getValueAttachments);
	$attachment_upload_path = $WFMAXUploadAttachmentPath . $leadID;
	//Let us create a folder if does not exist
	if (!file_exists($attachment_upload_path))
	{
		umask(0);
		mkdir($attachment_upload_path, 0777);
		chmod($attachment_upload_path, 0777); //incase mkdir fails

		printLog_cron_reminder (" Inside ManageAttachment Folder : " . $attachment_upload_path);
		printLog_cron_reminder (" Inside ManageAttachment Folder with Lead ID Created Successfully : " . $leadID);

		$attachment_upload_path_fieldmappings_CognitoFormFieldName = $attachment_upload_path . '/' .$lead_custom_attachment_fieldmappings_CognitoFormFieldName;
		//Lead ID upload folder exists
		if (!file_exists($attachment_upload_path_fieldmappings_CognitoFormFieldName))
		{
			umask(0);
			mkdir($attachment_upload_path_fieldmappings_CognitoFormFieldName, 0777);
			chmod($attachment_upload_path_fieldmappings_CognitoFormFieldName, 0777); //incase mkdir fails
			printLog_cron_reminder (" Inside ManageAttachment Folder : " . $attachment_upload_path_fieldmappings_CognitoFormFieldName);
			printLog_cron_reminder (" Inside ManageAttachment Sub Folder with Lead ID Created Successfully : " . $attachment_upload_path_fieldmappings_CognitoFormFieldName);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Begins .... ");
			downloadFileAttachments($getValueAttachments, $attachment_upload_path_fieldmappings_CognitoFormFieldName, $fileNameAttachment);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Ends .... ");
		}
		else
		{
			//Sub Folder for Each Type of attachment exists
			//Start download files to this folder here $attachment_upload_path_fieldmappings_CognitoFormFieldName
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Begins .... ");
			downloadFileAttachments($getValueAttachments, $attachment_upload_path_fieldmappings_CognitoFormFieldName, $fileNameAttachment);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Ends .... ");
		}
	}
	else
	{
		$attachment_upload_path_fieldmappings_CognitoFormFieldName = $attachment_upload_path . '/' .$lead_custom_attachment_fieldmappings_CognitoFormFieldName;
		//Lead ID upload folder exists
		if (!file_exists($attachment_upload_path_fieldmappings_CognitoFormFieldName))
		{
			umask(0);
			mkdir($attachment_upload_path_fieldmappings_CognitoFormFieldName, 0777);
			chmod($attachment_upload_path_fieldmappings_CognitoFormFieldName, 0777); //incase mkdir fails
			printLog_cron_reminder (" Inside ManageAttachment Sub Folder with Lead ID Created Successfully : " . $attachment_upload_path_fieldmappings_CognitoFormFieldName);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Begins .... ");
			downloadFileAttachments($getValueAttachments, $attachment_upload_path_fieldmappings_CognitoFormFieldName, $fileNameAttachment);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Ends .... ");
		}
		else
		{
			//Sub Folder for Each Type of attachment exists
			//Start download files to this folder here $attachment_upload_path_fieldmappings_CognitoFormFieldName
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Begins .... ");
			downloadFileAttachments($getValueAttachments, $attachment_upload_path_fieldmappings_CognitoFormFieldName, $fileNameAttachment);
			printLog_cron_reminder (" Inside ManageAttachment Calling Download Files Ends .... ");
		}
	}
}//end manageattachments

function iterateArrayAttachment($getValueAttachments)
{
}//End of function


//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ACTUAL WORKFLOWMAX FUNCTIONS ENDS HERE **********************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************
//****************************** ***************************** *******************************************************

//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ OAUTH2 RELATED XERO FUNCTIONS START HERE ----------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------

function createbearertoken()
{
	$clientId = 'E689C9A080304D28A06ADE330EA76778';
	$clientSecret = 'cotu8OSsZ4f2ApRL2aFQJ6keeDBwrj7bXqEtWLs1Eha23BWt';
	$redirectUri = 'https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php';

	//https://login.xero.com/identity/connect/authorize?response_type=code&client_id=YOURCLIENTID&redirect_uri=YOURREDIRECTURI&scope=openid profile email accounting.transactions&state=123
	$urlAuthorize = 'https://login.xero.com/identity/connect/authorize' . '?response_type=code&client_id=' . $clientId . '&redirect_uri=' . $redirectUri . '&scope=offline_access openid profile email workflowmax&state=123456789';
	$urlAccessToken = 'https://identity.xero.com/connect/token';
	$urlResourceOwnerDetails = 'https://api.xero.com/api.xro/2.0/Organisation';

	$data = array(
		
	);
	//print_r($urlAuthorize);
	$data_string = json_encode($data);
	$ch=curl_init($urlAuthorize);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

	//curl_setopt($ch, CURLOPT_HEADER, true);

	//Sending Customer Key and Customer Secret as Headers Username and Password
	/*curl_setopt($ch, CURLOPT_HTTPHEADER,
	   array(    "Accept: application/json",
						 "Content-Type: application/x-www-form-urlencoded",
						 "Authorization: Basic ". base64_encode("qSN6s9y1CiLDAkjmdFyKUnaj5gklJeXO:XNp1KV4BhgOGnHTM")
						)
	);*/

	$result = curl_exec($ch);
	//print_r ($result);

	curl_close($ch);

	return $result;
}
function createbearertokenURL()
{
	$clientId = 'E689C9A080304D28A06ADE330EA76778';
	$clientSecret = 'cotu8OSsZ4f2ApRL2aFQJ6keeDBwrj7bXqEtWLs1Eha23BWt';
	$redirectUri = 'https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php';

	//https://login.xero.com/identity/connect/authorize?response_type=code&client_id=YOURCLIENTID&redirect_uri=YOURREDIRECTURI&scope=openid profile email accounting.transactions&state=123
	$urlAuthorize = 'https://login.xero.com/identity/connect/authorize' . '?response_type=code&client_id=' . $clientId . '&redirect_uri=' . $redirectUri . '&scope=offline_access openid profile email workflowmax&state=123456789&tokenaction=createnew';
	$urlAccessToken = 'https://identity.xero.com/connect/token';
	$urlResourceOwnerDetails = 'https://api.xero.com/api.xro/2.0/Organisation';

	$data = array(
		
	);
	//print_r($urlAuthorize);
	return $urlAuthorize;
}
//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ OAUTH2 RELATED XERO FUNCTIONS ENDS HERE ----------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------
//------------------------------ ***************************** -------------------------------------------------------

//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
//----- BODY OF BUSINESS LOGIC
//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------


//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
//----- BODY OF OAUTH2.0 LOGIC
//----- STARTS HERE
//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------



// Check given state against previously stored one to mitigate CSRF attack
if (empty($_GET['code']) && empty($_GET['postwfmax']))
{
	// initialize cron script
	openLogFile_createToken();
	printLog_createToken('=============== STARTING SCRIPT: ' . DisplayDateTime(time()));

	printLog_createToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
	printLog_createToken('Start Time is : ' . DisplayDateTime(time()));

	$bearertoken = createbearertokenURL();
	printLog_createToken(DisplayDateTime(time()) . '  | ' . '*************** CALLING PHP URL VALUE ' . $bearertoken);
	// create a new cURL resource
	$ch = curl_init();

	// set URL and other appropriate options
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);
	curl_setopt($ch, CURLOPT_URL, $bearertoken);
	
	curl_setopt($ch, CURLOPT_HEADER, false);

	// grab URL and pass it to the browser
	$output = curl_exec($ch);
	print_r($output);
	printLog_createToken(DisplayDateTime(time()) . '  | ' . '*************** CALLING PHP URL OUTPUT ' . $output);
	
	// close cURL resource, and free up system resources
	curl_close($ch);

	printLog_createToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
	printLog_createToken('End Time is : ' . DisplayDateTime(time()));

	// finish cron script
	printLog_createToken ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
	closeLogFile_createToken();
/*
	$json = json_decode($bearertoken, true);
	print_r($json);
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== BEARER TOKEN JSON RESULT : ' . $json);

	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== BEARER TOKEN API RESULT : ' . $bearertoken);

	$xml = file_get_contents($bearertoken);
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== FILE_GET_CONTENTS API RESULT : ' . $xml);

	$Clients = new SimpleXmlElement($xml);
	printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== SIMPLEXML API RESULT : ' . $Clients);

	if($bearertoken == '')
	{
		printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token EMPTY ');
	}
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token JSON ' .  $bearertoken);

	$arrayBearerToken = json_decode ($bearertoken ,true);

	$BearerTokenkey = $arrayBearerToken[$searchBearerTokenkey];
	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Bearer Token Key ' .  $BearerTokenkey);

	printLog_cron_reminder(DisplayDateTime(time()) . ' ' . ' Creating Session with Token ');
*/

} 
else 
{
	/*
		************ if tokenaction = createnew then allow manual new create token and then with a pop up
		************ authenticate and then update the DB
		************ if tokenaction = refresh then call different API and refresh token and 
		************ update the DB
		*/
	if(empty($_GET['postwfmax']) && empty($_GET['tokenaction']))
	{


		// initialize cron script
		openLogFile_createToken();
		printLog_createToken('=============== CONTINUED SCRIPT: ' . DisplayDateTime(time()));

		printLog_createToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
		printLog_createToken('Start Time is : ' . DisplayDateTime(time()));

		//https://login.xero.com/identity/connect/authorize' . '?response_type=code&client_id=' . $clientId . '&redirect_uri=' . $redirectUri . '&scope=offline_access openid profile email workflowmax&state=123456789&tokenaction=createnew
		//https://login.xero.com/identity/connect/authorize?response_type=code&client_id=E689C9A080304D28A06ADE330EA76778&redirect_uri=https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php&scope=offline_access openid profile email workflowmax&state=123456789&tokenaction=createnew

		//code=2329031633f585022ad57603f45cb22d2a172418ff60c58696a849342ec29bb1
		$codeRecieved = $_GET['code'];

		//state=123456789&
		$stateRecieved = $_GET['state'];

		//session_state=1dUVJJKih2NVb9du7I21haMsXZnC8N2z_AUt-fqOH2g.d58ba0c591c536de05672e461d8a08c8
		$session_stateRecieved = $_GET['session_state'];
		printLog_createToken(DisplayDateTime(time()) . '  | ' . '== VALUES RECIEVED FROM CALLBACK ... : ' . $codeRecieved . ' |||| ' . $stateRecieved . ' |||| ' .  $session_stateRecieved);


		if(!empty($codeRecieved) && !empty($stateRecieved) && !empty($session_stateRecieved))
		{
				
				//I have the state and code
				//You can now exchange the verification code for an access token
				$url = 'https://identity.xero.com/connect/token';
				$data = array(
					"grant_type" => "authorization_code",
					"code" => $codeRecieved,
					"redirect_uri" => "https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php"
				);
				$data_string = json_encode($data);
				$ch=curl_init($url);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

				curl_setopt($ch, CURLOPT_HEADER, false);

				//Sending Customer Key and Customer Secret as Headers Username and Password
				curl_setopt($ch, CURLOPT_HTTPHEADER,
				   array(    "Content-Type: application/x-www-form-urlencoded",
									 "authorization: Basic ". base64_encode("E689C9A080304D28A06ADE330EA76778:cotu8OSsZ4f2ApRL2aFQJ6keeDBwrj7bXqEtWLs1Eha23BWt")
									)
				);

				$result = curl_exec($ch);
				print_r ($result);

				curl_close($ch);
				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== INSIDE CODE GET AUTHORISATION SECTION: ' . $result);

				/*
				//return $result;
				
				{"id_token":"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFDQUY4RTY2NzcyRDZEQzAyOEQ2NzI2RkQwMjYxNTgxNTcwRUZDMTkiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJISy1PWm5jdGJjQW8xbkp2MENZVmdWY09fQmsifQ.eyJuYmYiOjE2MDQ0NDQxNzAsImV4cCI6MTYwNDQ0NDQ3MCwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS54ZXJvLmNvbSIsImF1ZCI6IkU2ODlDOUEwODAzMDREMjhBMDZBREUzMzBFQTc2Nzc4IiwiaWF0IjoxNjA0NDQ0MTcwLCJhdF9oYXNoIjoiZ3N0NFBvbHI0dHJwbjRvT1JMdWJLUSIsInNpZCI6IjI4YWNkNjg5OWRlMDQzNjZhODNhYTkxYjI2NGVhOTJkIiwic3ViIjoiY2UxZTFiMWViYWIzNTU4NGE4Njk5ZjU4MmQ4MGFmZmUiLCJhdXRoX3RpbWUiOjE2MDQ0NDI0NzAsInhlcm9fdXNlcmlkIjoiZTBjN2UzNTMtYzNlMS00NzM1LWI4NGYtYjczYTFmYTIyNGI3IiwiZ2xvYmFsX3Nlc3Npb25faWQiOiIyOGFjZDY4OTlkZTA0MzY2YTgzYWE5MWIyNjRlYTkyZCIsInByZWZlcnJlZF91c2VybmFtZSI6ImFtaXRAbnp3ZWJzb2Z0LmNvLm56IiwiZW1haWwiOiJhbWl0QG56d2Vic29mdC5jby5ueiIsImdpdmVuX25hbWUiOiJBbWl0IiwiZmFtaWx5X25hbWUiOiJQb2RkYXIifQ.hFV7Hzm21mCOuxFY39x-yBf1hcFn7HZ_YzhBomGKcyiO3MZAqEM4E8U9lbxn60jUmdk3BTVxPJpJVrymXnXnxGX5KKyAQbmt73A2RC1M8zZy_ZyqSm60CS0CY6GtkIiQ-3iJJM3-G3Hz6PfQvCB2fq2zXDZV7m_L-7jQWvJrJUzNkDg-D-ESes6C5rJfWE5hvEZd7N9WFzqhpH6l744kkiSawPPucjSXQiGOtqUaIdJUxKcXZW6Jax7QUiY-lrUceFX9rPmTDsgTBeE51hBsLy--QSaBTCIOcWE_LvKnQdT9VnEUVReiSyP4pUm1YX0ilO0l5IlYErURLip98-S6rA","access_token":"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFDQUY4RTY2NzcyRDZEQzAyOEQ2NzI2RkQwMjYxNTgxNTcwRUZDMTkiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJISy1PWm5jdGJjQW8xbkp2MENZVmdWY09fQmsifQ.eyJuYmYiOjE2MDQ0NDQxNzAsImV4cCI6MTYwNDQ0NTk3MCwiaXNzIjoiaHR0cHM6Ly9pZGVudGl0eS54ZXJvLmNvbSIsImF1ZCI6Imh0dHBzOi8vaWRlbnRpdHkueGVyby5jb20vcmVzb3VyY2VzIiwiY2xpZW50X2lkIjoiRTY4OUM5QTA4MDMwNEQyOEEwNkFERTMzMEVBNzY3NzgiLCJzdWIiOiJjZTFlMWIxZWJhYjM1NTg0YTg2OTlmNTgyZDgwYWZmZSIsImF1dGhfdGltZSI6MTYwNDQ0MjQ3MCwieGVyb191c2VyaWQiOiJlMGM3ZTM1My1jM2UxLTQ3MzUtYjg0Zi1iNzNhMWZhMjI0YjciLCJnbG9iYWxfc2Vzc2lvbl9pZCI6IjI4YWNkNjg5OWRlMDQzNjZhODNhYTkxYjI2NGVhOTJkIiwianRpIjoiYzQ3MDNjZDM0YWVmODFhZGU4YTYwNTExYWNiOWRiYmEiLCJhdXRoZW50aWNhdGlvbl9ldmVudF9pZCI6IjYxYTIyMTE0LTRiYWItNGVlMy05Yzc3LTIxMTNmNjBlZWU3OCIsInNjb3BlIjpbImVtYWlsIiwicHJvZmlsZSIsIm9wZW5pZCIsIndvcmtmbG93bWF4Il19.nUdnN7FwqZzqRnkRs42gd1lvgLKztqIZNc_CJcHsCPUGyHmoFn_JWnKTHSeVuz2P_2XePPy2N4fsA-pXaIG3UheNnek0XAxRmVXJoaojRP5-q3K4s6ldbu5-K1m-HvacywinNGfiG-y_ZOU6fzgf1KY-ZPRiwp--O_vdBGJ79uv6l8XT3s4bvx38TozZa3I9cyOJA9FYHP2x7OCe4RurmrUoCdY_FqBWpLgmJQlPyHxswsHSQhz2uxjIORSLpOVe98Ui7IdLOVuhTKPe1pxHlrr7QYWNaQAUCXFuwPOwUyCLPy2XHO3gt90ZL7r6yvzQvPMT4Pklcj9JJpiixDIKbw","expires_in":1800,"token_type":"Bearer","scope":"openid profile email workflowmax"}
				*/
				$json_formdata_payload_AccessToken = "";

				$json_formdata_payload_AccessToken = json_decode($result, true);
				

				foreach ($json_formdata_payload_AccessToken as $k=>$v)
				{
					printLog_createToken(DisplayDateTime(time()) . '  | ' . 'KEY : ' . $k . ' - VALL ' . $v);
				}

				//$access_token = getRecursiveValueJsonArray($json_formdata_payload_AccessToken, 'access_token');
				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== ACCESS TOKEN: ' . $json_formdata_payload_AccessToken['access_token'] . ' <------');

				$access_token = $json_formdata_payload_AccessToken['access_token'];
				$refresh_token = $json_formdata_payload_AccessToken['refresh_token'];
				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== ACCESS TOKEN: ' . $access_token . ' <------');
				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== REFRESH TOKEN: ' . $refresh_token . ' <------');

				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== GOT THE ACCESS TOKEN UPDATING IN DB........... : ');
				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== GOT THE REFRESH TOKEN UPDATING IN DB........... : ');
				//Let us store the refresh_token and access_token in DB
				$queryupdatecronlogging_1 = "UPDATE " . $DBPrefix . "oauth2 SET refresh_token = '" . $refresh_token . "', access_token = '" . $access_token . "', datetime = '" . time() . "' where id = 1";
				$resupdatecronlogging_1 = mysqli_query($dbconnect, $queryupdatecronlogging_1);
				$system->check_mysql($resupdatecronlogging_1, $queryupdatecronlogging_1, __LINE__, __FILE__);
				printLog_createToken(DisplayDateTime(time()) . '  | ' . ' DB UPDATE COMPLETE!!! ........... : ');
				

				/*
					[
						{
							"id": "25b72a61-7b5e-49c4-bff0-056f9f7fa3ca",
							"authEventId": "7466e735-937b-4888-a081-28bb2e67b8d9",
							"tenantId": "72488eb3-d79f-4ad8-8348-a0460e31367a",
							"tenantType": "WORKFLOWMAX",
							"tenantName": "FSNZ Studio",
							"createdDateUtc": "2020-11-02T07:34:58.5941980",
							"updatedDateUtc": "2020-11-07T08:20:57.2673950"
						}
					]

				*/

				//CHECK THE TENANTS YOU'RE AUTHORIZED TO ACCESS
				//I have the ACCESS TOKEN
				//You can now get Tenant ID
				/*$url = 'https://api.xero.com/connections';
				$data = array();
				$data_string = json_encode($data);
				$ch=curl_init($url);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

				curl_setopt($ch, CURLOPT_HEADER, true);

				//Sending Customer Key and Customer Secret as Headers Username and Password
				curl_setopt($ch, CURLOPT_HTTPHEADER,
				   array(    "Content-Type: application/json",
										"Authorization: Bearer " . $access_token . ""
									)
				);

				$result = curl_exec($ch);
				print_r ($result);
				$jsonTenantID = $result;
				curl_close($ch);

				printLog_createToken(DisplayDateTime(time()) . '  | ' . '== TENANT RESULT CURL : ' . $result);
				$json_formdata_payload_TenantID = "";
				$json_formdata_payload_TenantID = json_decode($jsonTenantID, true);
				printLog_createToken(DisplayDateTime(time()) . '  1| ' . '== ');

				foreach ($json_formdata_payload_TenantID as $k=>$v)
				{
					printLog_createToken(DisplayDateTime(time()) . '  2| ' . '== ');
					printLog_createToken(DisplayDateTime(time()) . '  | ' . 'KEY : ' . $k . ' - VALL ' . $v);
				}

				//printLog_createToken(DisplayDateTime(time()) . '  | ' . '== TENANT ID: ' . $json_formdata_payload_TenantID['tenantId'] . ' <------');
				*/
				
				//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
				//----- BODY OF OAUTH2.0 LOGIC
				//----- ENDS HERE
				//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------



				printLog_createToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
				printLog_createToken('End Time is : ' . DisplayDateTime(time()));

				// finish cron script
				printLog_createToken ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
				closeLogFile_createToken();


			}// END if(!empty($codeRecieved) && !empty($stateRecieved) && !empty($session_stateRecieved))

		}// END IF if(!empty($_GET['tokenaction']) && $_GET['tokenaction'] == 'createnew')
		else if(!empty($_GET['tokenaction']) && $_GET['tokenaction'] == 'refresh')
		{
			
			
			// initialize cron script
			openLogFile_refreshToken();
			printLog_refreshToken('=============== REFRESH TOKEN SCRIPT: ' . DisplayDateTime(time()));

			printLog_refreshToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
			printLog_refreshToken('Start Time is : ' . DisplayDateTime(time()));
			
			printLog_refreshToken(DisplayDateTime(time()) . ' Inside tokenaction = refresh ');
			//GET the current refresh token from DB
			$refresh_token = "";
			$access_token = "";

			$queryselectoauth_settings = "SELECT * from " . $DBPrefix . "oauth2";
			$resselectoauth_settings = mysqli_query($dbconnect, $queryselectoauth_settings);
			$system->check_mysql($resselectoauth_settings, $queryselectoauth_settings, __LINE__, __FILE__);
			$selectoauth_settings_count = mysqli_num_rows($resselectoauth_settings);
			printLog_refreshToken(DisplayDateTime(time()) . 'select cognito_oauth_count : ' . $selectoauth_settings_count);

			if($selectoauth_settings_count > 0)
			{
				//Let us get all the details
				while($rowselectoauth_settings = mysqli_fetch_assoc($resselectoauth_settings))
				{
					$refresh_token = $rowselectoauth_settings['refresh_token'];
					$access_token = $rowselectoauth_settings['access_token'];
				}
			}
			printLog_refreshToken(DisplayDateTime(time()) . ' CURRENT IN DB REFRESH TOKEN : ' . $refresh_token);
			printLog_refreshToken(DisplayDateTime(time()) . ' CURRENT IN DB ACCESS TOKEN : ' . $access_token);

			printLog_refreshToken(DisplayDateTime(time()) . ' CALLING REFRESH TOKEN API ...........  ');
			//I have the state and code
			//You can now exchange the verification code for an access token
			$url = 'https://identity.xero.com/connect/token';
			$data = array(
				"grant_type" => "refresh_token",
				"refresh_token" => $refresh_token
			);
			$data_string = json_encode($data);
			$ch=curl_init($url);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

			curl_setopt($ch, CURLOPT_HEADER, false);

			//Sending Customer Key and Customer Secret as Headers Username and Password
			curl_setopt($ch, CURLOPT_HTTPHEADER,
			   array(    "Content-Type: application/x-www-form-urlencoded",
								 "authorization: Basic ". base64_encode("E689C9A080304D28A06ADE330EA76778:cotu8OSsZ4f2ApRL2aFQJ6keeDBwrj7bXqEtWLs1Eha23BWt")
								)
			);

			$result = curl_exec($ch);
			//print_r ($result);

			curl_close($ch);
			printLog_refreshToken(DisplayDateTime(time()) . '  | ' . '== INSIDE CODE GET AUTHORISATION SECTION: ' . $result);
			
			$json_formdata_payload_AccessToken = "";

			$json_formdata_payload_AccessToken = json_decode($result, true);
			

			foreach ($json_formdata_payload_AccessToken as $k=>$v)
			{
				printLog_refreshToken(DisplayDateTime(time()) . '  | ' . 'KEY : ' . $k . ' - VALL ' . $v);
			}

			$access_token = $json_formdata_payload_AccessToken['access_token'];
			$refresh_token = $json_formdata_payload_AccessToken['refresh_token'];

			/******
			* IF REFRESH TOKEN FAILED THEN MANUAL ACCESS TOKEN NEEDS TO BE GENERATED
			* WE WILL CAPTURE AND SEND AN EMAIL FOR NOW
			*/
			if($access_token == '')
			{
				$emailBodySupportTeam .= $emailBodySupportTeam . " <p>" . " : CREATING REFRESH ACCESS TOKEN FAILED " . $result . "<p>";
				$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : CREATING REFRESH ACCESS TOKEN FAILED " . $result . "')";
				$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

				printLog_refreshToken('CREATING REFRESH ACCESS TOKEN FAILED ' . $result);
				//echo('<br>Lead Create FAILED in WFMAX - FAILURE ' . $leadID);
				$manualAccessTokenLink = 'https://login.xero.com/identity/connect/authorize?response_type=code&client_id=E689C9A080304D28A06ADE330EA76778&redirect_uri=https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php&scope=offline_access%20openid%20profile%20email%20workflowmax&state=123456789&tokenaction=createnew';

				// send message to Support Team
				$emailNotificationSupportMethod = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';
				$emailer = new email_class();
				$emailer->assign_vars(array(
						'BODYEMAIL' => $emailBodySupportTeam,
						'ACCESSTOKENLINK' => $manualAccessTokenLink,
						'FORMNAME' => $emailFormname,
						'SITEURL' => $system->SETTINGS['siteurl'],
						'SITENAME' => $system->SETTINGS['sitename']
						));
				$emailer->email_sender($emailNotificationSupportMethod, 'emailNotificationSupportTeam.php', $system->SETTINGS['sitename'] . ' - ' . '******* FAILURE EMAIL ******** CREATING REFRESH ACCESS TOKEN FAILED - Foodstuffs NZ Studio');
			}

			//Let us store the refresh_token and access_token in DB
			$queryupdatecronlogging_1 = "UPDATE " . $DBPrefix . "oauth2 SET refresh_token = '" . $refresh_token . "', access_token = '" . $access_token . "', datetime = '" . time() . "' where id = 1";
			$resupdatecronlogging_1 = mysqli_query($dbconnect, $queryupdatecronlogging_1);
			$system->check_mysql($resupdatecronlogging_1, $queryupdatecronlogging_1, __LINE__, __FILE__);
			printLog_refreshToken(DisplayDateTime(time()) . ' DB UPDATE Complete!!!! ...........  ');


			printLog_refreshToken('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
			printLog_refreshToken('End Time is : ' . DisplayDateTime(time()));

			// finish cron script
			printLog_refreshToken ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
			closeLogFile_refreshToken();

		}
		else if(!empty($_GET['postwfmax']) && $_GET['postwfmax'] == 'newrecord')
		{

			// initialize cron script
			openLogFile_cron_reminder();
			printLog_cron_reminder('=============== STARTING SCRIPT: ' . DisplayDateTime(time()));

			printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
			printLog_cron_reminder('Start Time is : ' . DisplayDateTime(time()));

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== STATE: ' . $_GET['state']);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== SESSION-oauth2state: ' . $_SESSION['oauth2state']);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== CODE: ' . $_GET['code']);


			 //THE ELSE BLOCK FOR BUSINESS LOGIC FOR LOADING DATA in WFMAX
			$access_token = "";
			printLog_cron_reminder(DisplayDateTime(time()) . ' ******************* BODY OF THE BUSINESS LOGIC ************************* ');
			//GET the current access token from DB
			$refresh_token = "";
			$access_token = "";

			$queryselectoauth_settings = "SELECT * from " . $DBPrefix . "oauth2";
			$resselectoauth_settings = mysqli_query($dbconnect, $queryselectoauth_settings);
			$system->check_mysql($resselectoauth_settings, $queryselectoauth_settings, __LINE__, __FILE__);
			$selectoauth_settings_count = mysqli_num_rows($resselectoauth_settings);
			printLog_cron_reminder(DisplayDateTime(time()) . 'select cognito_oauth_count : ' . $selectoauth_settings_count);

			if($selectoauth_settings_count > 0)
			{
				//Let us get all the details
				while($rowselectoauth_settings = mysqli_fetch_assoc($resselectoauth_settings))
				{
					$access_token = $rowselectoauth_settings['access_token'];
				}
			}
			printLog_cron_reminder(DisplayDateTime(time()) . ' CURRENT IN DB ACCESS TOKEN FOR BUSINESS LOGIC EXECUTION : ' . $access_token);


			$tenantId = '72488eb3-d79f-4ad8-8348-a0460e31367a';//$json_formdata_payload_TenantID['tenantId'];
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== TENANT ID : ' . $tenantId);


			//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
			//----- BODY OF OAUTH2.0 LOGIC
			//----- TEST API CALL STARTS HERE
			//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL CLIENT STARTS HERE  ***************************** ');
			//Call the API
			$url = 'https://api.xero.com/workflowmax/3.0/client.api/list';

			$data = array(
			);
			$data_string = json_encode($data);
			$ch=curl_init($url);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

			curl_setopt($ch, CURLOPT_HEADER, false);

			//Sending Customer Key and Customer Secret as Headers Username and Password
			curl_setopt($ch, CURLOPT_HTTPHEADER,
			   array(    "Accept: application/json",
									"Authorization: Bearer " . $access_token . "",
									"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
								)
			);

			$result = curl_exec($ch);
			//print_r ($result);
			
			curl_close($ch);

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== USING ACCESS TOKEN FOR API CALL : ' . $access_token);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== API RESULT : ' . $result);

			/******
			* IF REFRESH TOKEN FAILED THEN MANUAL ACCESS TOKEN NEEDS TO BE GENERATED
			* WE WILL CAPTURE AND SEND AN EMAIL FOR NOW
			*/
			$AccessDeniedTokenResult = '';
			$AccessDeniedTokenResultKey = '';
			$AccessDeniedTokenResultValue = '';

			$AccessDeniedTokenResult = json_decode($result, true);
			foreach ($AccessDeniedTokenResult as $k=>$v)
			{
				$AccessDeniedTokenResultKey = $k;
				$AccessDeniedTokenResultValue = $v;
				printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . 'KEY : ' . $k . ' - VALL ' . $v);

				if($AccessDeniedTokenResultKey == 'Title' && $AccessDeniedTokenResultValue == 'Unauthorized') 
				{
					$emailBodySupportTeam .= $emailBodySupportTeam . " <p>" . " : TEST API CALL - ACCESS TOKEN FAILED " . $result . "<p>";
					$emailBodySupportTeam .= " <p><p><p><b>" . "Support Staff Follow Below Steps <br><br> Click on Below link and Authorise Access <br>" . "</b><p><p><p>";
					$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : TEST API CALL - ACCESS TOKEN FAILED " . $result . "')";
					$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

					printLog_cron_reminder('TEST API CALL - ACCESS TOKEN FAILED ' . $result);
					//echo('<br>Lead Create FAILED in WFMAX - FAILURE ' . $leadID);
					$manualAccessTokenLink = 'https://login.xero.com/identity/connect/authorize?response_type=code&client_id=E689C9A080304D28A06ADE330EA76778&redirect_uri=https://nzwebsoft.co.nz/workflowmax/callbackOAuth.php&scope=offline_access%20openid%20profile%20email%20workflowmax&state=123456789&tokenaction=createnew';

					// send message to Support Team
					$emailNotificationSupportMethod = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';

					$emailer = new email_class();
					$emailer->assign_vars(array(
							'BODYEMAIL' => $emailBodySupportTeam,
							'ACCESSTOKENLINK' => $manualAccessTokenLink,
							'FORMNAME' => $emailFormname,
							'SITEURL' => $system->SETTINGS['siteurl'],
							'SITENAME' => $system->SETTINGS['sitename']
							));
					$emailer->email_sender($emailNotificationSupportMethod, 'emailNotificationSupportTeam.php', $system->SETTINGS['sitename'] . ' - ' . '******* FAILURE EMAIL ******** TEST API CALL - ACCESS TOKEN FAILED - Foodstuffs NZ Studio');
				}

			}

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL  CLIENT ENDS HERE  ***************************** ');



			//PRINTING CATEGORIES
			//https://api.xero.com/workflowmax/3.0/category.api/list
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL LEAD API CATEGORY STARTS HERE  ***************************** ');
			//Call the API
			$url = 'https://api.xero.com/workflowmax/3.0/lead.api/categories';

			$data = array(
			);
			$data_string = json_encode($data);
			$ch=curl_init($url);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

			curl_setopt($ch, CURLOPT_HEADER, false);

			//Sending Customer Key and Customer Secret as Headers Username and Password
			curl_setopt($ch, CURLOPT_HTTPHEADER,
			   array(    "Accept: application/json",
									"Authorization: Bearer " . $access_token . "",
									"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
								)
			);

			$result = curl_exec($ch);
			//print_r ($result);
			
			curl_close($ch);

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== USING ACCESS TOKEN FOR API CALL : ' . $access_token);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== API RESULT : ' . $result);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL LEAD API  CATEGORY ENDS HERE  ***************************** ');


			//PRINTING CUSTOM FIELDS
			//https://api.xero.com/workflowmax/3.0/customfield.api/definition
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL CUSTOM FIELDS STARTS HERE  ***************************** ');
			//Call the API
			$url = 'https://api.xero.com/workflowmax/3.0/customfield.api/definition?uuidMode=transition';

			$data = array(
			);
			$data_string = json_encode($data);
			$ch=curl_init($url);
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));

			curl_setopt($ch, CURLOPT_HEADER, false);

			//Sending Customer Key and Customer Secret as Headers Username and Password
			curl_setopt($ch, CURLOPT_HTTPHEADER,
			   array(    "Accept: application/json",
									"Authorization: Bearer " . $access_token . "",
									"Xero-tenant-id: 72488eb3-d79f-4ad8-8348-a0460e31367a "
								)
			);

			$result = curl_exec($ch);
			//print_r ($result);
			
			curl_close($ch);

			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== USING ACCESS TOKEN FOR API CALL : ' . $access_token);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . '== API RESULT : ' . $result);
			printLog_cron_reminder(DisplayDateTime(time()) . '  | ' . ' *************************** BODY OF OAUTH2.0 LOGIC - TEST API CALL CUSTOM FIELDS ENDS HERE  ***************************** ');




	//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------
	//----- BODY OF OAUTH2.0 LOGIC
	//----- TEST API CALL ENDS HERE
	//------------------------------ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ----------------------------------


			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ACTUAL WORKFLOWMAX LOGIC STARTS HERE ************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			printLog_cron_reminder('**************************************** --------- ACTUAL WORKFLOWMAX LOGIC STARTS HERE --------- ***************************************');

			/*
			* This program is for creating Lead and then all custom fields for Lead
			* In Workflow Max
			* This program will read all the data in Collection table
			* and look for all mappng details
			*/

			$NOW = time();
			$NOWB = gmdate('Ymd');
			/*
			STATIC VARIABLES DECLARATION
			*/
			$SUCCESS = '';
			$cognito_settingsID = '';
			$cognito_formusageID = '';
			$emailBodyDetails = '';
			$emailBodySupportTeam = '';
			$HTMLStaticEmailBodyPart1 = '<p><span class="">';
			$HTMLStaticEmailBodyPart2 = ' : </span> <span class="">';
			$HTMLStaticEmailBodyPart3 = '</span></p>';
			$downloadCompleteFlag = false;
			$emailFormname = '';
			$emailSubjectPrefixName = '';
			$emailSubjectPrefixBrand = '';
			$emailNotificationSubmitter = '';
			$bodyemailsubmitter = 'Your request has been sent successfully<br> Please use the below as reference for your further enquiry';


			$emailNotificationReciepients = 'studio@foodstuffs.co.nz'; //COMMENTEDLOCAL for testing
			$emailNotificationSupport = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';
			$emailNotificationReciepientsBCC = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';

			/*
			Testing Purpose
			*/
			//$emailNotificationReciepients = 'Amit Poddar <amit@nzwebsoft.co.nz>';
			//$emailNotificationReciepients = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>;Brett Ashmore <Brett.Ashmore@foodstuffs.co.nz>';
			//$emailNotificationReciepients = 'amit@localhost.co.nz';

			printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
			printLog_cron_reminder('Start Time is : ' . DisplayDateTime(time()));
			$emailBodySupportTeam .= $HTMLStaticEmailBodyPart1 . 'Start Time is : ' . $HTMLStaticEmailBodyPart2 . DisplayDateTime(time()) . $HTMLStaticEmailBodyPart3;

			/*
				DOCUMENTATION OF TABLES
				workflowmax_api_settings
				workflowmax_cognito_settings
				workflowmax_cognito_formusage
				workflowmax_lead_fieldmappings
				workflowmax_lead_custom_fieldmappings
				workflowmax_cognito_formdatadetails
			*/

			/*
			* Let us insert the cron notification table of the start of this script
			* Any changes of this cron job will be update to this same record
			* Table: workflowmax_cron_logging
			*/
			$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : Lead Starts')";
			$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

			//Let us get the insert id and use this for all the updates
			$queryinsertcronlogging_1 = "SELECT LAST_INSERT_ID() as id";
			$resinsertcronlogging_1 = mysqli_query($dbconnect, $queryinsertcronlogging_1);
			$system->check_mysql($resinsertcronlogging_1, $queryinsertcronlogging_1, __LINE__, __FILE__);
			$loggingIDresult = mysqli_fetch_array($resinsertcronlogging_1);
			$loggingID = $loggingIDresult['id'];

			printLog_cron_reminder('First Insert in logging table complete. Logging ID : ' . $loggingID);
			$emailBodySupportTeam .= $HTMLStaticEmailBodyPart1 . 'Logging ID: ' . $HTMLStaticEmailBodyPart2 . $loggingID . $HTMLStaticEmailBodyPart3;

			$timelowerband = time() - 6600;
			$timeupperband = $timelowerband + 82200;
			printLog_cron_reminder('timelowerband : ' . $timelowerband . " || timeupperband : " . $timeupperband);
			printLog_cron_reminder('timelowerband NZT : ' . DisplayDateTime($timelowerband) . " || timeupperband NZT : " . DisplayDateTime($timeupperband));

			/*Let us validate the script and if the form is enabled to proceed
			* Check the get parameters of formname, authcode
			* Validate if all good then check for is it ENABLED
			* If not return die else proceed
			* Call the validate function
			*/
			//validatescriptInvocation($cognitoFormName, $AuthCode)
			/*
			* MASTER VARIABLES
			*
			*/

			$validateFormName = isset($_GET['form'])?$_GET['form']:'';// COMMENTEDLOCAL - 'ContentServicesDigitalBriefForm';
			$validateAuthCode = isset($_GET['auth'])?$_GET['auth']:'';// COMMENTEDLOCAL - 'cnnjasdijSADSbaks7t34lknfd398saksjkas487';
			if($validateFormName == '')
			{
				printLog_cron_reminder('validatescriptInvocation : FAILED - Form Name from Cognito Empty');
				$SUCCESS = 'FAILED';
				exit;
			}
			else
			{
				if($validateAuthCode == '')
				{
					printLog_cron_reminder('validatescriptInvocation : FAILED - Auth Code from Cognito Empty');
					$SUCCESS = 'FAILED';
					exit;
				}
				else
				{
					//Get the details from DB and compare
					$queryselectcognito_settings = "SELECT * from " . $DBPrefix . "cognito_settings where InternalName = '" . $validateFormName . "'";
					$resselectcognito_settings = mysqli_query($dbconnect, $queryselectcognito_settings);
					$system->check_mysql($resselectcognito_settings, $queryselectcognito_settings, __LINE__, __FILE__);
					$selectcognito_settings_count = mysqli_num_rows($resselectcognito_settings);

					printLog_cron_reminder('select cognito_settings_count : ' . $selectcognito_settings_count);

					//Let us update the cron logging table
					$queryupdatecronlogging_1 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br>" . DisplayDateTime(time()) . " : Validate Form Settings Count of Records : " . $selectcognito_settings_count . "') where id = " . $loggingID;
					$resupdatecronlogging_1 = mysqli_query($dbconnect, $queryupdatecronlogging_1);
					$system->check_mysql($resupdatecronlogging_1, $queryupdatecronlogging_1, __LINE__, __FILE__);

					if($selectcognito_settings_count > 0)
					{
					//Let us get all the details
					$InternalName = "";
					$nzwsslAUTHKEY = "";
					$isactive = "";
					while($rowselectcognito_settings = mysqli_fetch_assoc($resselectcognito_settings))
					{
						$InternalName = $rowselectcognito_settings['InternalName'];
						$nzwsslAUTHKEY = $rowselectcognito_settings['nzwsslAUTHKEY'];
							$emailFormname = $rowselectcognito_settings['NameDescription'];
						//echo('<br>');
						//echo($validateAuthCode.'<br>');
						//echo($nzwsslAUTHKEY .'<br>');
						//echo($nzwsslAUTHKEY == $validateAuthCode);
						$isactive = $rowselectcognito_settings['active'];
						$cognito_settingsID = $rowselectcognito_settings['id'];
						if($validateFormName == $InternalName)
						{
							if($validateAuthCode == $nzwsslAUTHKEY)
							{
								if($isactive == '1') //1=TRUE
								{
									//All Good and can proceed
									//Do nothing
									$SUCCESS = 'SUCCESS';
									//Let us update the cron logging table
									$queryupdatecronlogging_1 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br>" . DisplayDateTime(time()) . " : Validate Form Settings FORM NAME SUCCESS : " . $validateFormName . "') where id = " . $loggingID;
									$resupdatecronlogging_1 = mysqli_query($dbconnect, $queryupdatecronlogging_1);
									$system->check_mysql($resupdatecronlogging_1, $queryupdatecronlogging_1, __LINE__, __FILE__);
									printLog_cron_reminder('validatescriptInvocation : Success');
								}
								else
								{
									$SUCCESS = 'FAILED';
									printLog_cron_reminder('validatescriptInvocation : FAILED - ACTIVE FLAG FALSE');
									exit;
								}
							}
							else
							{
								$SUCCESS = 'FAILED';
								printLog_cron_reminder('validatescriptInvocation : FAILED - AUTH CODE DID NOT MATCH');
								exit;
							}
						}
						else
						{
							$SUCCESS = 'FAILED';
							printLog_cron_reminder('validatescriptInvocation : FAILED - FORM NAME DID NOT MATCH');
							exit;
						}
					}
						printLog_cron_reminder('validatescriptInvocation : SUCCESS STATUS: ' . $SUCCESS);
					}
					else
					{
						$SUCCESS = 'FAILED';
						printLog_cron_reminder('validatescriptInvocation : FAILED - NO FORM FOUND COUNT=0');
						exit;
					}
				}
			}


			if($SUCCESS == 'SUCCESS')
			{
				//Get all API Details
				//workflowmax.workflowmax_api_settings
				$queryAPIDetails = "SELECT * from " . $DBPrefix . "cognito_settings";
				$resAPIDetails = mysqli_query($dbconnect, $queryAPIDetails);
				$system->check_mysql($resAPIDetails, $queryAPIDetails, __LINE__, __FILE__);

				//Let us get all the details
				$api_token = "";
				$acc_key = "";
				$apiurl = "";
				while($rowAPIDetails = mysqli_fetch_assoc($resAPIDetails))
				{
					$api_token = $rowselectcognito_settings['api_token'];
					$acc_key = $rowselectcognito_settings['acc_key'];
					$apiurl = $rowselectcognito_settings['url']; //Contains trailing backslash
					//echo('Got the Settings');
				}

				printLog_cron_reminder('Business Logic Starts here : SUCCESS STATUS: ' . $SUCCESS);

				/*****
				*** 21.11.2020
				*** CREATING ABILITY TO POST FAILED WEBHOOKS CALLS AND MANUALLY CREATE POST WFMAX
				*** WHEN CALLING PLEASE PASS ADDITIONAL PARAMETER |||| &nzwsslpostmanual=true&nzwsslwfmaxid=?
				*** YOU CAN USE THIS FOR TESTING COMMENTEDLOCAL
				*** nzwsslwfmaxid = cognito_formdatadetails - id
				*** IN cognito_formdatadetails table in API V1.0 wfmaxID if not null then posted to WorkFlowMAX successfully
				*** IN cognito_formdatadetails table in API V1.0 wfmaxID is null and custom1 not null then posted to WorkFlowMAX successfully
				*/
				//Let us get all the details
				$json_formdata_payload = "";
				$formdata_payload = "";
				$json = "";
				if(!empty($_GET['nzwsslpostmanual']) && $_GET['nzwsslpostmanual'] == 'true')
				{ 
					$nzwsslWFMAXID = $_GET['nzwsslwfmaxid'];
					if($nzwsslWFMAXID != '')
					{
						$queryselectformdata = "SELECT * from " . $DBPrefix . "cognito_formdatadetails where id = " . $nzwsslWFMAXID ;//. $formdatadetailsID ;
						$resselectformdata = mysqli_query($dbconnect, $queryselectformdata);
						$system->check_mysql($resselectformdata, $queryselectformdata, __LINE__, __FILE__);
						$selectformdata_count = mysqli_num_rows($resselectformdata);

						while($rowselectformdata = mysqli_fetch_assoc($resselectformdata))
						{
							$formdata_id = $rowselectformdata['id'];
							$json = $rowselectformdata['payload'];
							printLog_cron_reminder('---------------->: ' . $json);
							//echo($json.'<br><br>');
							//LET US DECODE THE JSON OBJECT
							$json_formdata_payload = json_decode($json);
							$formdata_payload = json_decode($json);

						}

						$decodedText = html_entity_decode($formdata_payload);
						$myArray = json_decode($decodedText, true);
						
					}
				}
				else
				{
					//CAPTURE DATA FROM POST RECIEVEING
					//Commented for local testing
					//COMMENTEDLOCAL 
					$json = file_get_contents("php://input"); 
					//COMMENTEDLOCAL 
					printLog_cron_reminder('---------------->: ' . $json);

					//LET US GET THE DATA FROM DB TO POPULATE WFMAX
					
				}

				
				
				


				if (empty($json))
				{
					printLog_cron_reminder("No data payload <br><br><br><br><br>");
					$queryinsertformdatadetails = "INSERT into " . $DBPrefix . "cognito_formdatadetails (payload, decoded_payload, custom1, custom2, datetime, message) VALUES (' No data payload', ' No data DECODED payload', '' , '', " . time() . ", '" . DisplayDateTime(time()) . " : JSON Lead Details Data')";
					$system->check_mysql(mysqli_query($dbconnect, $queryinsertformdatadetails), $queryinsertformdatadetails, __LINE__, __FILE__);

					//Let us get the insert id and use this for all the updates
					$queryinsertformdatadetails_1 = "SELECT LAST_INSERT_ID() as id";
					$resinsertformdatadetails_1 = mysqli_query($dbconnect, $queryinsertformdatadetails_1);
					$system->check_mysql($resinsertformdatadetails_1, $queryinsertformdatadetails_1, __LINE__, __FILE__);
					$formdatadetailsIDresult = mysqli_fetch_array($resinsertformdatadetails_1);
					$formdatadetailsID = $formdatadetailsIDresult['id'];

					printLog_cron_reminder('Insert in form data details table with NO Payload complete - FAILED. Logging ID : ' . $formdatadetailsID);

					//Do nothing die as we did not recieve data from cognito form
				}
				else
				{
					//Insert into formdetails
					//workflowmax_cognito_formdatadetails
					$decoded_payload = json_decode($json, TRUE);
					printLog_cron_reminder('json data here --- <br>'.$json);
					printLog_cron_reminder('**********************************************************************<br><br><br><br>');
					printLog_cron_reminder('json decoded data here --- <br>'.$decoded_payload);
					printLog_cron_reminder('**********************************************************************');
					if ($decoded_payload == null && json_last_error() !== JSON_ERROR_NONE) {
						printLog_cron_reminder("<br><br><br><br>Error reading JSON: " . json_last_error());
						printLog_cron_reminder('Insert in form data details table with NO Payload Error reading JSON - FAILED. Logging ID : ' . $formdatadetailsID);
					}

					$queryinsertformdatadetails = "INSERT into " . $DBPrefix . "cognito_formdatadetails (payload, decoded_payload, custom1, custom2, datetime, message) VALUES ('" . addslashes($json) . "', '" . addslashes($decoded_payload) . "', '' , '', " . time() . ", '" . DisplayDateTime(time()) . " : JSON Lead Details Data')";
					$system->check_mysql(mysqli_query($dbconnect, $queryinsertformdatadetails), $queryinsertformdatadetails, __LINE__, __FILE__);

					//Let us get the insert id and use this for all the updates
					$queryinsertformdatadetails_1 = "SELECT LAST_INSERT_ID() as id";
					$resinsertformdatadetails_1 = mysqli_query($dbconnect, $queryinsertformdatadetails_1);
					$system->check_mysql($resinsertformdatadetails_1, $queryinsertformdatadetails_1, __LINE__, __FILE__);
					$formdatadetailsIDresult = mysqli_fetch_array($resinsertformdatadetails_1);
					$formdatadetailsID = $formdatadetailsIDresult['id'];

					printLog_cron_reminder('First Insert in form data details table complete - SUCCESS. Logging ID : ' . $formdatadetailsID);
					$emailBodySupportTeam .= $HTMLStaticEmailBodyPart1 . 'Form data details ID: ' . $HTMLStaticEmailBodyPart2 . $formdatadetailsID . $HTMLStaticEmailBodyPart3;
					$emailBodySupportTeam .= $HTMLStaticEmailBodyPart1 . 'JSON: ' . $HTMLStaticEmailBodyPart2 . $json . $HTMLStaticEmailBodyPart3;

					//LET US GET THE DATA FROM DB TO POPULATE WFMAX
					$queryselectformdata = "SELECT * from " . $DBPrefix . "cognito_formdatadetails where id = ". $formdatadetailsID ;
					$resselectformdata = mysqli_query($dbconnect, $queryselectformdata);
					$system->check_mysql($resselectformdata, $queryselectformdata, __LINE__, __FILE__);
					$selectformdata_count = mysqli_num_rows($resselectformdata);

					printLog_cron_reminder('selectformdata_count : ' . $selectformdata_count);

					//Let us update the cron logging table
					$queryupdatecronlogging_1 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br>" . DisplayDateTime(time()) . " : Count of Records : " . $selectformdata_count . "') where id = " . $loggingID;
					$resupdatecronlogging_1 = mysqli_query($dbconnect, $queryupdatecronlogging_1);
					$system->check_mysql($resupdatecronlogging_1, $queryupdatecronlogging_1, __LINE__, __FILE__);


					//Let us get all the details
					$json_formdata_payload = "";
					$formdata_payload = "";
					while($rowselectformdata = mysqli_fetch_assoc($resselectformdata))
					{
						$formdata_id = $rowselectformdata['id'];
						$formdata_payload = $rowselectformdata['payload'];

						//LET US DECODE THE JSON OBJECT
						$json_formdata_payload = $formdata_payload;
					}
					printLog_cron_reminder('**********************************************************************<br><br><br><br>');
					printLog_cron_reminder('json decoded data from database here --- <br>'.$json_formdata_payload);
					printLog_cron_reminder('**********************************************************************');


					/*
					* Here we start calling the function with key
					* Get the values and start using
					*/
					//getRecursiveValueJsonArray
					/*	Let us first start updating our DB with the cognito settings table data
					*	First we need to insert in workflowmax_cognito_formusage table with cognito_settingsID
					*	This will generate form usage id which we can update in forms data details table
					*/
					$AdminLink = getRecursiveValueJsonArray($json_formdata_payload, 'AdminLink');
					$CustomerCard = getRecursiveValueJsonArray($json_formdata_payload, 'CustomerCard');
					$DateCreated = getRecursiveValueJsonArray($json_formdata_payload, 'DateCreated');
					$DateSubmitted = getRecursiveValueJsonArray($json_formdata_payload, 'DateSubmitted');
					$DateUpdated = getRecursiveValueJsonArray($json_formdata_payload, 'DateUpdated');
					$EditLink = getRecursiveValueJsonArray($json_formdata_payload, 'EditLink');
					$queryinsertcognito_formusage = "INSERT into " . $DBPrefix . "cognito_formusage (cognito_settingsid, AdminLink, CustomerCard, DateCreated, DateSubmitted, DateUpdated, EditLink, formdatadetailsid) VALUES (". $cognito_settingsID . ",'". $AdminLink . "', '". $CustomerCard . "','". $DateCreated . "', '". $DateSubmitted . "', '" . $DateUpdated . "', '" . $EditLink . "', " . $formdatadetailsID . " )";
					$system->check_mysql(mysqli_query($dbconnect, $queryinsertcognito_formusage), $queryinsertcognito_formusage, __LINE__, __FILE__);

					//Let us get the insert id and use this for all the updates
					$queryinsertcognito_formusage_1 = "SELECT LAST_INSERT_ID() as id";
					$resinsertcognito_formusage_1 = mysqli_query($dbconnect, $queryinsertcognito_formusage_1);
					$system->check_mysql($resinsertcognito_formusage_1, $queryinsertcognito_formusage_1, __LINE__, __FILE__);
					$cognito_formusageIDresult = mysqli_fetch_array($resinsertcognito_formusage_1);
					$cognito_formusageID = $cognito_formusageIDresult['id'];

					printLog_cron_reminder('First Insert in form Usage details table complete - SUCCESS. Logging ID : ' . $cognito_formusageID);


					/*
					*	Let us now get the Keys for creating the lead
					*	The key  mapping is in the DB workflowmax_lead_fieldmappings table
					*	Once we have the keys, use that to recursively search and get the valye
					*	for now some will be hardcoded but hence commented
					*/
					//LET US GET THE DATA FROM DB TO POPULATE WFMAX
					$queryselectlead_fieldmappings = "SELECT * from " . $DBPrefix . "lead_fieldmappings";
					$resselectlead_fieldmappings = mysqli_query($dbconnect, $queryselectlead_fieldmappings);
					$system->check_mysql($resselectlead_fieldmappings, $queryselectlead_fieldmappings, __LINE__, __FILE__);
					$selectlead_fieldmappings_count = mysqli_num_rows($resselectlead_fieldmappings);

					printLog_cron_reminder('selectlead_fieldmappings_count : ' . $selectlead_fieldmappings_count);

					//Let us get all the details
					$lead_array = array();
					$arrcount = 0;
					$searchClientKey = '';
					$clientID = '';
					$emailDescriptionValues = '';
					while($rowselectlead_fieldmappings = mysqli_fetch_assoc($resselectlead_fieldmappings))
					{
						$lead_fieldmappingsID = $rowselectlead_fieldmappings['id'];
						$lead_fieldmappings_WFMAXFieldID = $rowselectlead_fieldmappings['WFMAXFieldID'];
						$lead_fieldmappings_WFMAXFieldName = $rowselectlead_fieldmappings['WFMAXFieldName'];
						$lead_fieldmappings_WFMAXFieldType = $rowselectlead_fieldmappings['WFMAXFieldType'];
						$lead_fieldmappings_CognitoFormFieldName = $rowselectlead_fieldmappings['CognitoFormFieldName'];
						$lead_fieldmappings_append = $rowselectlead_fieldmappings['append'];
						$lead_fieldmappings_custom1 = $rowselectlead_fieldmappings['custom1'];

						if($lead_fieldmappings_custom1 == 'Dynamic' && $lead_fieldmappings_WFMAXFieldName == 'ClientID')
						{
							//Let us get the STR Value from JSON
							$searchKey = getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappings_CognitoFormFieldName);

							//Set it once
							$searchClientKey = $searchKey;
							printLog_cron_reminder('### NEW API CALL getClientListValueArray : ' . $access_token);
							printLog_cron_reminder('### $searchKey : ' . $searchKey);
							$searchIDWFMAX = getClientListValueArray(iconv("UTF-8", "CP1256", $searchKey), $access_token);
							printLog_cron_reminder('### NEW API CALL getClientListValueArray VALUE : ' . $searchIDWFMAX);
							$clientID = $searchIDWFMAX;
							array_push($lead_array, $searchIDWFMAX);
							printLog_cron_reminder('Lead Key Parameters Dynamic Value | ClientID | : ' . iconv("UTF-8", "CP1256", $searchKey) . ' | ' . $searchIDWFMAX);
						}
						else if($lead_fieldmappings_custom1 == 'Dynamic' && $lead_fieldmappings_WFMAXFieldName == 'OwnerID')
						{
							//echo('<br>-----1----->'.$searchClientKey);
							//Let us get the STR Value from JSON
							printLog_cron_reminder('### NEW API CALL getAccountManagerListValueArray : ' . $access_token);
							$searchIDWFMAX = getAccountManagerListValueArray(iconv("UTF-8", "CP1256", $searchClientKey), $access_token);
							printLog_cron_reminder('### NEW API CALL getAccountManagerListValueArray VALUE : ' . $searchIDWFMAX);

							array_push($lead_array, $searchIDWFMAX);
							printLog_cron_reminder('Lead Key Parameters Dynamic Value | OwnerID | : ' . iconv("UTF-8", "CP1256", $searchKey) . ' | ' . $searchIDWFMAX);
						}
						else if($lead_fieldmappings_custom1 == 'Dynamic' && $lead_fieldmappings_WFMAXFieldName == 'ContactID')
						{

							printLog_cron_reminder("Custom logic for Mapping Contact Name to Contact ID Begins");
							//Custom logic for Mapping Contact Name to Contact ID
							//echo('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>');

							//Let us get the STR Value from JSON
							//Depending on Cognito Form Field Name Contact Name can be YourName2 or ContactName. It is mandatory field so null check should work
							$searchContactName = getRecursiveValueJsonArray($json_formdata_payload, 'YourName2');
							if($searchContactName == '')
							{
								$searchContactName = getRecursiveValueJsonArray($json_formdata_payload, 'ContactName');
							}
							$searchContactEmail = getRecursiveValueJsonArray($json_formdata_payload, 'Email');
							if($searchContactEmail == '')
							{
								$searchContactEmail = getRecursiveValueJsonArray($json_formdata_payload, 'ContactEmail');
							}

							printLog_cron_reminder("Contact Name Input: " . $searchContactName);
							printLog_cron_reminder("Contact Email Input: " . $searchContactEmail);
							//echo('Your Name: '. $searchContactName. '<br>');
							//echo('Your Email: '. $searchContactEmail. '<br>');
							//echo('Searching for Client Name: ' . iconv("UTF-8", "CP1256", $searchKey) . ' || ' . ' Contact Name: ' . $searchContactName . '<br>');
							printLog_cron_reminder("Searching for Client Name: " . $searchKey . " || " . " Contact Name: " . $searchContactName);

							//Let us get the STR Value from JSON
							$searchContactIDWFMAX = getContactListValueArray($clientID, iconv("UTF-8", "CP1256", $searchContactName), $access_token);
							//echo('Attempt to locate Contact ID: '. $searchContactIDWFMAX . '<br>');
							printLog_cron_reminder("Contact ID Found Based on Client ID: ". $clientID . " Contact ID: " . $searchContactIDWFMAX);
							if($searchContactIDWFMAX != '')
							{
								if($searchContactIDWFMAX != 'ContactIDEmpty')
								{
									//Got the Contact ID let us proceed with creating lead with parameter
									//Do nothing
									//echo('ContactID != ContactIDEmpty : '. $searchContactIDWFMAX . '<br>');

								}
								else
								{

									printLog_cron_reminder("Contact ID Not FOUND, will Add entry and Get a new ID: ". $clientID . " Contact ID: " . $searchContactIDWFMAX);

									$searchContactIDWFMAX = generateContactListID($clientID, $searchContactName, $searchContactEmail, $access_token);
									printLog_cron_reminder("Generated Contact new ID: ". $clientID . " Contact ID: " . $searchContactIDWFMAX);

									// COMMENTEDLOCAL
									// REPLACED TEMP CONTACT ID WITH custom2
									// REPLACED clientID WITH custom3
									//(ff353caf-5bb6-4c64-bc64-62c2a1fab65f, 317eba46-0948-4197-b906-63a9ae4f1e90, 'Amit', 'amit.poddar@nzwebsoft.co.nz',  '14-Nov-2020 11:47:12 pm')
									$queryinsertcontactcreate = "INSERT into " . $DBPrefix . "contact_create (custom3, custom2, ContactName, ContactEmail, DateCreated) VALUES ('"  . $clientID . "', '" . $searchContactIDWFMAX . "', '" .  $searchContactName . "', '" . $searchContactEmail . "',  '" . DisplayDateTime(time()) . "')";
									$system->check_mysql(mysqli_query($dbconnect, $queryinsertcontactcreate), $queryinsertcontactcreate, __LINE__, __FILE__);
							
								}
								//echo('Found the ID: '. $searchContactIDWFMAX . '<br>');
								array_push($lead_array, $searchContactIDWFMAX);
								printLog_cron_reminder("Lead Key Parameters Dynamic Value | Contact ID | : " . $searchKey . " | " . $searchContactIDWFMAX);

							}
							else
							{
								printLog_cron_reminder("Lead Key Parameters Dynamic Value | Contact ID | : " . " BLANK | ERROR");
							}

							//echo('<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'. '<br>');
							printLog_cron_reminder("Custom logic for Mapping Contact Name to Contact ID Ends");
						}
						else if($lead_fieldmappings_CognitoFormFieldName == '')
						{
							// COMMENTEDLOCAL
							if($lead_fieldmappings_custom1 == '315567')
							{
								$lead_fieldmappings_custom1 = '86a12a25-a032-41e3-b7c6-31d82fb7822f';
							}
							if($lead_fieldmappings_custom1 == '26470')
							{
								$lead_fieldmappings_custom1 = 'b8a62de3-bc3d-44e9-a7cd-f6bc5f72af10';
							}
							array_push($lead_array, $lead_fieldmappings_custom1);


							printLog_cron_reminder('Lead Key Parameters Hardcoded Value ' . $lead_fieldmappings_WFMAXFieldName . ' : ' . $lead_fieldmappings_custom1);
						}
						else
						{
							//If description then lets check for Previous Job also
							if($lead_fieldmappings_WFMAXFieldName == 'Description')
							{

								//Let us get all the values for which append value = 1
								//LET US GET THE DATA FROM DB TO POPULATE WFMAX
								$queryselectlead_fieldmappingsappend = "SELECT * from " . $DBPrefix . "lead_fieldmappings where append in (1)";
								$resselectlead_fieldmappingsappend = mysqli_query($dbconnect, $queryselectlead_fieldmappingsappend);
								$system->check_mysql($resselectlead_fieldmappingsappend, $queryselectlead_fieldmappingsappend, __LINE__, __FILE__);
								$selectlead_fieldmappingsappend_count = mysqli_num_rows($resselectlead_fieldmappingsappend);

								printLog_cron_reminder('selectlead_fieldmappingsappend_count : ' . $selectlead_fieldmappingsappend_count);

								//Let us concatenate all description fields in the lead one at a time
								//Let us get all the details
								$arrleadDesccount = 0;
								$lead_fieldmappingsappend_WFMAXFieldName = "";
								$lead_fieldmappingsappend_CognitoFormFieldName = "";
								$lead_fieldmappingsappend_custom1 = "";
								$lead_fieldmappingsappend_KeyParams_jsonValues = "";
								while($rowselectlead_fieldmappingsappend = mysqli_fetch_assoc($resselectlead_fieldmappingsappend))
								{
									$lead_fieldmappingsappendID = $rowselectlead_fieldmappingsappend['id'];
									$lead_fieldmappingsappend_WFMAXFieldID = $rowselectlead_fieldmappingsappend['WFMAXFieldID'];
									$lead_fieldmappingsappend_WFMAXFieldName = $rowselectlead_fieldmappingsappend['WFMAXFieldName'];
									$lead_fieldmappingsappend_WFMAXFieldType = $rowselectlead_fieldmappingsappend['WFMAXFieldType'];
									$lead_fieldmappingsappend_CognitoFormFieldName = $rowselectlead_fieldmappingsappend['CognitoFormFieldName'];
									$lead_fieldmappingsappend_append = $rowselectlead_fieldmappingsappend['append'];
									$lead_fieldmappingsappend_custom1 = $rowselectlead_fieldmappingsappend['custom1'];
									$lead_fieldmappingsappend_CognitoFormFieldDescription = $rowselectlead_fieldmappingsappend['CognitoFormFieldDescription'];

									if($lead_fieldmappingsappend_WFMAXFieldType == 'Date')
									{
										$lead_fieldmappingsappend_KeyParams_jsonValues .= date("Ymd", strtotime(getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappingsappend_CognitoFormFieldName))) . ' | ';
									}
									else
									{
										$lead_fieldmappingsappend_valueOutput = getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappingsappend_CognitoFormFieldName);
										if(!empty($lead_fieldmappingsappend_valueOutput))
										{
											if (is_array($lead_fieldmappingsappend_valueOutput))
											{
												//Lets add header for Array Values
												$lead_fieldmappingsappend_KeyParams_jsonValues .= ' | ' . $lead_fieldmappingsappend_CognitoFormFieldDescription. ' | ';
												foreach($lead_fieldmappingsappend_valueOutput as $value)
												{
													$lead_fieldmappingsappend_KeyParams_jsonValues .=  $value . ' | ';
												}
											}
											else
											{
												if($lead_fieldmappingsappend_CognitoFormFieldDescription != '')
												{
													$lead_fieldmappingsappend_KeyParams_jsonValues .= $lead_fieldmappingsappend_CognitoFormFieldDescription . getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappingsappend_CognitoFormFieldName) . ' | ';
												}
												else
												{
													$lead_fieldmappingsappend_KeyParams_jsonValues .= getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappingsappend_CognitoFormFieldName) . ' | ';
												}
											}
											//Let us get the JobName/Name of the Form for Email Subject Bug ID: Bug #1822 - Changes to Email Subject as per request
											if($lead_fieldmappingsappend_WFMAXFieldName == 'Description' && $lead_fieldmappingsappend_CognitoFormFieldName == 'Brand')
											{
												$emailSubjectPrefixBrand = $lead_fieldmappingsappend_KeyParams_jsonValues;
											}
										}
									}
									$arrleadDesccount++;
								}
								//Let us push description to Array
								array_push($lead_array, $lead_fieldmappingsappend_KeyParams_jsonValues);

								printLog_cron_reminder('Lead Key Description Parameters JSON Values : '. $lead_fieldmappings_CognitoFormFieldName. ' | ' . $lead_fieldmappingsappend_KeyParams_jsonValues);
								//end of description Append = 1
							}
							else
							{
								$lead_KeyParams_jsonValues = getRecursiveValueJsonArray($json_formdata_payload, $lead_fieldmappings_CognitoFormFieldName);
								array_push($lead_array, $lead_KeyParams_jsonValues);
								$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_fieldmappings_CognitoFormFieldName . $HTMLStaticEmailBodyPart2 . $lead_KeyParams_jsonValues . $HTMLStaticEmailBodyPart3;

								//Let us get the JobName/Name of the Form for Email Subject Bug ID: Bug #1822 - Changes to Email Subject as per request
								if($lead_fieldmappings_WFMAXFieldName == 'Name')
								{
									$emailSubjectPrefixName = $lead_KeyParams_jsonValues;
								}
								//Let us get the Contact Email of the Form for Email Acknowledgement
								printLog_cron_reminder('Lead Key Parameters JSON Values : '. $lead_fieldmappings_CognitoFormFieldName. ' | ' . $lead_KeyParams_jsonValues);
							}
						}
						$arrcount++;

					}
					//print_r(array_values($lead_array));

					//Bug #1830 - Foodstuffs Brief Form ï¿½ Confirmation Email Body All Details required
					$emailDescriptionValues = $lead_fieldmappingsappend_KeyParams_jsonValues;

					//LET US CREATE THE LEAD NOW
					$outresponse = post_lead_to_workflow_max($lead_array, $access_token);
					//echo('<br> Attempting to get Lead ID: ' . $outresponse . '<br>');


					$leadID = '';

					// HERE WE GET THE ID CREATED FOR THIS LEAD
					foreach($outresponse->Lead as $k => $v)
					{
						$leadID = $v->UUID;
					}


					if ($leadID == '')
					{
						$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : Lead Create FAILED in WFMAX " . $leadID . "')";
						$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

						printLog_cron_reminder('Lead Create FAILED in WFMAX - FAILURE ' . $leadID);
						//echo('<br>Lead Create FAILED in WFMAX - FAILURE ' . $leadID);

						// send message to Support Team
						$emailNotificationSupportMethod = 'Amit Poddar <amit@nzwebsoft.co.nz>;Kamna Poddar <kamna@nzwebsoft.co.nz>';

						$emailer = new email_class();
						$emailer->assign_vars(array(
								'BODYEMAIL' => $emailBodySupportTeam,
								'FORMNAME' => $emailFormname,
								'SITEURL' => $system->SETTINGS['siteurl'],
								'SITENAME' => $system->SETTINGS['sitename']
								));
						$emailer->email_sender($emailNotificationSupportMethod, 'emailNotificationSupportTeam.php', $system->SETTINGS['sitename'] . ' - ' . '******* FAILURE EMAIL ******** Failed to Create WorkFlowMax Lead - Foodstuffs NZ Studio');

					}
					else
					{
						//Bug #1830 - Foodstuffs Brief Form ï¿½ Confirmation Email Body All Details required
						$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . 'Description' . $HTMLStaticEmailBodyPart2 . $emailDescriptionValues . $HTMLStaticEmailBodyPart3;

						//echo('<br>Lead Create SUCCESS in WFMAX ' . $leadID);
						//Update cognito_formdatadetails Table with the Lead ID
						// COMMENTEDLOCAL
						// We need to do a DB change to make sure we can store UUID instead of WFMAXID. See below
						//$queryupdateWFMAXID = "UPDATE " . $DBPrefix . "cognito_formdatadetails SET wfmaxID = " . $leadID . " where id = " . $formdatadetailsID;
						$queryupdateWFMAXID = "UPDATE " . $DBPrefix . "cognito_formdatadetails SET custom1 = '" . $leadID . "' where id = " . $formdatadetailsID;
						$resupdateWFMAXID = mysqli_query($dbconnect, $queryupdateWFMAXID);
						$system->check_mysql($resupdateWFMAXID, $queryupdateWFMAXID, __LINE__, __FILE__);
						printLog_cron_reminder('Updated Database cognito_formdatadetails Table with WFMAX ID : '. $leadID);

						$queryinsertcronlogging = "INSERT into " . $DBPrefix . "cron_logging (datetime, message) VALUES (" . time() . ", '" . DisplayDateTime(time()) . " : Lead Created Successfully in WFMAX " . $leadID . "')";
						$system->check_mysql(mysqli_query($dbconnect, $queryinsertcronlogging), $queryinsertcronlogging, __LINE__, __FILE__);

						printLog_cron_reminder('Lead Created Successfully in WFMAX - SUCCESS. Lead ID : ' . $leadID);
						{
							//LET US GET THE DATA FROM DB TO POPULATE WFMAX
							$queryselectlead_customfieldmappings = "SELECT * from " . $DBPrefix . "lead_custom_fieldmappings where append is null";
							$resselectlead_customfieldmappings = mysqli_query($dbconnect, $queryselectlead_customfieldmappings);
							$system->check_mysql($resselectlead_customfieldmappings, $queryselectlead_customfieldmappings, __LINE__, __FILE__);
							$selectlead_customfieldmappings_count = mysqli_num_rows($resselectlead_customfieldmappings);

							printLog_cron_reminder('selectlead_customfieldmappings_count : ' . $selectlead_customfieldmappings_count);

							//Let us update all custom fields in the lead one at a time
							//Let us get all the details
							$arrcustomcount = 0;
							while($rowselectlead_customfieldmappings = mysqli_fetch_assoc($resselectlead_customfieldmappings))
							{
								$lead_custom_fieldmappingsID = $rowselectlead_customfieldmappings['id'];
								$lead_custom_fieldmappings_WFMAXFieldID = $rowselectlead_customfieldmappings['WFMAXFieldID'];
								$lead_custom_fieldmappings_WFMAXFieldName = $rowselectlead_customfieldmappings['WFMAXFieldName'];
								$lead_custom_fieldmappings_WFMAXFieldType = $rowselectlead_customfieldmappings['WFMAXFieldType'];
								$lead_custom_fieldmappings_CognitoFormFieldName = $rowselectlead_customfieldmappings['CognitoFormFieldName'];
								$lead_custom_fieldmappings_append = $rowselectlead_customfieldmappings['append'];
								$lead_custom_fieldmappings_custom1 = $rowselectlead_customfieldmappings['custom1'];
								$lead_custom_fieldmappings_custom2 = $rowselectlead_customfieldmappings['custom2'];

								if($lead_custom_fieldmappings_WFMAXFieldType == 'Date')
								{
									$lead_custom_KeyParams_jsonValues = date("Ymd", strtotime(getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName)));
									if(date("d-m-Y", strtotime(getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName))) != date("d-m-Y", strtotime('01-01-1970')))
									{
									$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_custom_fieldmappings_WFMAXFieldName . $HTMLStaticEmailBodyPart2 . date("d-m-Y", strtotime(getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName))) . $HTMLStaticEmailBodyPart3;
								}
								}
								else
								{
									$lead_custom_KeyParams_jsonValues = getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName);
									if(!empty($lead_custom_KeyParams_jsonValues))
									{
										$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_custom_fieldmappings_WFMAXFieldName . $HTMLStaticEmailBodyPart2 . $lead_custom_KeyParams_jsonValues . $HTMLStaticEmailBodyPart3;
										if($lead_custom_fieldmappings_WFMAXFieldName == 'Contact Email')
										{
											$emailNotificationSubmitter = $lead_custom_KeyParams_jsonValues;
											printLog_cron_reminder('Submitter Email Contact : '. $emailNotificationSubmitter);
										}

									}
								}

								//Let us call one by one to push to WFMAX
								//echo($leadID . ' ~ ' . $lead_custom_fieldmappings_WFMAXFieldID . ' ~ ' .  $lead_custom_fieldmappings_WFMAXFieldType . ' ~ ' . $lead_custom_KeyParams_jsonValues . '<br>');

								// COMMENTEDLOCAL
								// We have created temp mapping of ID to UUID. This need to be changed. Weare using TEMP custom 2 field
								// REPLACED below $lead_custom_fieldmappings_WFMAXFieldID with $lead_custom_fieldmappings_custom2
								$outrespcustomput = put_lead_customfields_to_workflow_max($leadID, $lead_custom_fieldmappings_custom2, $lead_custom_fieldmappings_WFMAXFieldType, $lead_custom_KeyParams_jsonValues, $access_token);

								printLog_cron_reminder('Lead Custom Key Parameters JSON Values : '. $leadID . ' - ' . $lead_custom_fieldmappings_custom2 . ' - ' . $lead_custom_fieldmappings_WFMAXFieldType . ' - ' . $lead_custom_KeyParams_jsonValues);
								$arrcustomcount++;
							}
							printLog_cron_reminder('Lead Custom Key Parameters Total Count : '. $arrcustomcount);
						}
						{
							//APPEND BASED VALUES
							//LET US GET THE DATA FROM DB TO POPULATE WFMAX
							$queryselectlead_customfieldmappings = "SELECT * from " . $DBPrefix . "lead_custom_fieldmappings where append in (1)";
							$resselectlead_customfieldmappings = mysqli_query($dbconnect, $queryselectlead_customfieldmappings);
							$system->check_mysql($resselectlead_customfieldmappings, $queryselectlead_customfieldmappings, __LINE__, __FILE__);
							$selectlead_customfieldmappings_count = mysqli_num_rows($resselectlead_customfieldmappings);

							printLog_cron_reminder('selectlead_customfieldmappings_count : ' . $selectlead_customfieldmappings_count);

							//Let us update all custom fields in the lead one at a time
							//Let us get all the details
							$arrcustomcount = 0;
							$lead_custom_fieldmappings_WFMAXFieldName = "";
							$lead_custom_fieldmappings_CognitoFormFieldName = "";
							$lead_custom_fieldmappings_custom1 = "";
							$lead_custom_KeyParams_jsonValues = "";
							while($rowselectlead_customfieldmappings = mysqli_fetch_assoc($resselectlead_customfieldmappings))
							{
								$lead_custom_fieldmappingsID = $rowselectlead_customfieldmappings['id'];
								$lead_custom_fieldmappings_WFMAXFieldID = $rowselectlead_customfieldmappings['WFMAXFieldID'];
								$lead_custom_fieldmappings_WFMAXFieldName = $rowselectlead_customfieldmappings['WFMAXFieldName'];
								$lead_custom_fieldmappings_WFMAXFieldType = $rowselectlead_customfieldmappings['WFMAXFieldType'];
								$lead_custom_fieldmappings_CognitoFormFieldName = $rowselectlead_customfieldmappings['CognitoFormFieldName'];
								$lead_custom_fieldmappings_append = $rowselectlead_customfieldmappings['append'];
								$lead_custom_fieldmappings_custom1 = $rowselectlead_customfieldmappings['custom1'];
								$lead_custom_fieldmappings_custom2 = $rowselectlead_customfieldmappings['custom2'];
								$lead_custom_fieldmappings_CognitoFormFieldDescription = $rowselectlead_customfieldmappings['CognitoFormFieldDescription'];

								if($lead_custom_fieldmappings_WFMAXFieldType == 'Date')
								{
									$lead_custom_KeyParams_jsonValues .= date("Ymd", strtotime(getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName))) . ' | ';
								}
								else
								{
									if($lead_custom_fieldmappings_CognitoFormFieldName == 'TakeDownDateIfRequired')
									{
										$getValueTakeDownDateIfRequired = getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName);
										if(!empty($getValueTakeDownDateIfRequired))
										{
											$lead_custom_KeyParams_jsonValues .= $lead_custom_fieldmappings_CognitoFormFieldDescription . ' ' . date("d-m-Y", strtotime($getValueTakeDownDateIfRequired)) . ' &#13;&#10; ';
											$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_custom_fieldmappings_CognitoFormFieldDescription . $HTMLStaticEmailBodyPart2 . $lead_custom_KeyParams_jsonValues . $HTMLStaticEmailBodyPart3;
										}
									}
									else
									{
										$valueOutput = getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName);
										if(!empty($valueOutput))
										{
											if (is_array($valueOutput))
											{
												//Lets add header for Array Values
												$lead_custom_KeyParams_jsonValues .= ' &#13;&#10; ' . $lead_custom_fieldmappings_CognitoFormFieldDescription. ' &#13;&#10; ';
												foreach($valueOutput as $value)
												{
													$lead_custom_KeyParams_jsonValues .=  $value . ' &#13;&#10; ';
													$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_custom_fieldmappings_CognitoFormFieldName . $HTMLStaticEmailBodyPart2 . $lead_custom_KeyParams_jsonValues . $HTMLStaticEmailBodyPart3;
												}
											}
											else
											{
												$lead_custom_KeyParams_jsonValues .= getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_fieldmappings_CognitoFormFieldName) . ' &#13;&#10; ';
												$emailBodyDetails .= $HTMLStaticEmailBodyPart1 . $lead_custom_fieldmappings_CognitoFormFieldName . $HTMLStaticEmailBodyPart2 . $lead_custom_KeyParams_jsonValues . $HTMLStaticEmailBodyPart3;
											}
										}
									}
								}
								$arrcustomcount++;
							}
							//Let us call one by one to push to WFMAX
							//echo($leadID . ' ~ ' . $lead_custom_fieldmappings_WFMAXFieldID . ' ~ ' .  $lead_custom_fieldmappings_WFMAXFieldType . ' ~ ' . $lead_custom_KeyParams_jsonValues . '<br>');
							// COMMENTEDLOCAL
							// We have created temp mapping of ID to UUID. This need to be changed. Weare using TEMP custom 2 field
							// REPLACED below $lead_custom_fieldmappings_WFMAXFieldID with $lead_custom_fieldmappings_custom2
							$outrespcustomput = put_lead_customfields_to_workflow_max($leadID, $lead_custom_fieldmappings_custom2, $lead_custom_fieldmappings_WFMAXFieldType, $lead_custom_KeyParams_jsonValues, $access_token);


							printLog_cron_reminder('Lead Custom Key Parameters JSON Values : '. $leadID . ' - ' . $lead_custom_fieldmappings_custom2 . ' - ' . $lead_custom_fieldmappings_WFMAXFieldType . ' - ' . $lead_custom_KeyParams_jsonValues);

							printLog_cron_reminder('Lead Custom Key Parameters Total Count : '. $arrcustomcount);
						}
						/*
							LET US HANDLE ATTACHMENTS HERE
							Create a new folder on the server with lead ID, and subfolder (standard list of folders)
							Get all the attachments one by one and start download the files on the server
							Once all files are copied on the server
							Then send an email with the new link to download
							We need to add logging in file and DB for the following steps
							1. All files start download
							2. All files download complete
							3. Email sent to studio@
							We will have to create a new download php file which will go in the link the email/description
						*/
						{
							//Call function with Lead ID, json fields, attachment field to download files
							$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Processing Attachments Started ........... ') where id = " . $loggingID;
							$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
							$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);
							printLog_cron_reminder('Lead Attachments Key Parameters JSON Values : '. $leadID . ' - Start of attachment Management - ');

							$queryselectlead_attachmentmapping = "SELECT * from " . $DBPrefix . "lead_custom_fieldmappings where append in (2)";
							$resselectlead_attachmentmapping = mysqli_query($dbconnect, $queryselectlead_attachmentmapping);
							$system->check_mysql($resselectlead_attachmentmapping, $queryselectlead_attachmentmapping, __LINE__, __FILE__);
							$selectlead_attachmentmapping_count = mysqli_num_rows($resselectlead_attachmentmapping);

							printLog_cron_reminder('selectlead_attachmentmapping_count : ' . $selectlead_attachmentmapping_count);

							$lead_custom_attachmentmapping_WFMAXFieldName = "";
							$lead_custom_attachmentmapping_CognitoFormFieldName = "";
							$lead_custom_attachmentmapping_custom1 = "";
							$lead_custom_attachmentmapping_jsonValues = "";
							while($rowselectlead_attachmentmapping = mysqli_fetch_assoc($resselectlead_attachmentmapping))
							{
								$lead_custom_attachment_fieldmappingsID = $rowselectlead_attachmentmapping['id'];
								$lead_custom_attachment_fieldmappings_WFMAXFieldID = $rowselectlead_attachmentmapping['WFMAXFieldID'];
								$lead_custom_attachment_fieldmappings_WFMAXFieldName = $rowselectlead_attachmentmapping['WFMAXFieldName'];
								$lead_custom_attachment_fieldmappings_WFMAXFieldType = $rowselectlead_attachmentmapping['WFMAXFieldType'];
								$lead_custom_attachment_fieldmappings_CognitoFormFieldName = $rowselectlead_attachmentmapping['CognitoFormFieldName'];
								$lead_custom_attachment_fieldmappings_append = $rowselectlead_attachmentmapping['append'];
								$lead_custom_attachment_fieldmappings_custom1 = $rowselectlead_attachmentmapping['custom1'];
								$lead_custom_attachment_fieldmappings_CognitoFormFieldDescription = $rowselectlead_attachmentmapping['CognitoFormFieldDescription'];

								printLog_cron_reminder('<br> Lead Attachments Key Parameters JSON Values Processing .. : '. $lead_custom_attachment_fieldmappings_CognitoFormFieldName . ' <br> ');
								//echo('<br> Lead Attachments Key Parameters JSON Values Processing .. : '. $lead_custom_attachment_fieldmappings_CognitoFormFieldName . ' <br> ');
								$getValueAttachments = getRecursiveValueJsonArray($json_formdata_payload, $lead_custom_attachment_fieldmappings_CognitoFormFieldName);

								printLog_cron_reminder(' Lead Attachments - Value Attachments check  : '. $getValueAttachments);
								$downloadCompleteFlag = false;
								if(!empty($getValueAttachments))
								{
									//Call the iterateFunction and get the value
									//$valueFilePath = iterateArrayAttachment($getValueAttachments);
									$getAttachmentsvalue = '';
									if(is_array($getValueAttachments))
									{
										foreach($getValueAttachments as $getAttachmentsvalue)
										{
											printLog_cron_reminder('1 : ' . ' - ' . $getAttachmentsvalue);
											//echo('1 : ' . ' - ' . $getAttachmentsvalue);
											$getAttachmentsvaluesValue = '';
											$fileNameAttachmentValue = '';
											if (is_array($getAttachmentsvalue))
											{
												foreach($getAttachmentsvalue as $getAttachmentsvaluesValuekey => $getAttachmentsvaluesValue)
												{
													printLog_cron_reminder('2 : ' . $getAttachmentsvaluesValuekey . ' - ' . $getAttachmentsvaluesValue);
													//echo('2 : ' . $getAttachmentsvaluesValuekey . ' - ' . $getAttachmentsvaluesValue);
													if($getAttachmentsvaluesValuekey == 'Name')
													{
														$fileNameAttachmentValue = $getAttachmentsvaluesValue;
													}
													if ($getAttachmentsvaluesValuekey == 'File')
													{
														$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Processing Attachments : " . $leadID . ' -- ' .  $getAttachmentsvaluesValue . " ') where id = " . $loggingID;
														$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
														$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);

														printLog_cron_reminder('Lead Attachments Key Parameters JSON Values Details : '. $leadID . ' - ' . $getAttachmentsvaluesValue);
														//echo('Lead Attachments Key Parameters JSON Values Details : '. $leadID . ' - ' . $getAttachmentsvaluesValue);
														printLog_cron_reminder('Calling ManageAttachment Step 1: ' . $leadID . ' | ' .  $lead_custom_attachment_fieldmappings_CognitoFormFieldName . ' | ' .  $getAttachmentsvaluesValue . ' | ' .  $fileNameAttachmentValue);

														$responsestatusAttachments = manageattachments($leadID, $lead_custom_attachment_fieldmappings_CognitoFormFieldName, $getAttachmentsvaluesValue, $fileNameAttachmentValue);

														$downloadCompleteFlag = true;
													}
													$getAttachmentsvaluesValueValue = '';
													if (is_array($getAttachmentsvaluesValue))
													{
														foreach($getAttachmentsvaluesValue as $getAttachmentsvaluesValueValue)
														{
															printLog_cron_reminder('3 : ' . ' - ' . $getAttachmentsvalue);
															//echo('3 : ' . ' - ' . $getAttachmentsvalue);
															$getAttachmentsvaluesValueValueValue = '';
															$fileNameAttachment = '';
															if (is_array($getAttachmentsvaluesValueValue))
															{
																foreach($getAttachmentsvaluesValueValue as $getAttachmentsvaluesValueValueValuekey => $getAttachmentsvaluesValueValueValue)
																{
																	printLog_cron_reminder('4 : ' . $getAttachmentsvaluesValueValueValuekey . ' - ' . $getAttachmentsvaluesValueValueValue);
																	//echo('4 : ' . $getAttachmentsvaluesValueValueValuekey . ' - ' . $getAttachmentsvaluesValueValueValue);
																	if($getAttachmentsvaluesValueValueValuekey == 'Name')
																	{
																		$fileNameAttachment = $getAttachmentsvaluesValueValueValue;
																	}
																	if ($getAttachmentsvaluesValueValueValuekey == 'File')
																	{
																		$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Processing Attachments : " . $leadID . ' -- ' .  $getAttachmentsvaluesValueValueValue . " ') where id = " . $loggingID;
																		$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
																		$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);

																		printLog_cron_reminder('Lead Attachments Key Parameters JSON Values Details : '. $leadID . ' - ' . $getAttachmentsvaluesValueValueValue);
																		//echo('Lead Attachments Key Parameters JSON Values Details : '. $leadID . ' - ' . $getAttachmentsvaluesValueValueValue);
																		printLog_cron_reminder('Calling ManageAttachment Step 2: '. $leadID . ' | '. $lead_custom_attachment_fieldmappings_CognitoFormFieldName . ' | ' . $getAttachmentsvaluesValueValueValue . ' | ' . $fileNameAttachment);
																		$responsestatusAttachments = manageattachments($leadID, $lead_custom_attachment_fieldmappings_CognitoFormFieldName, $getAttachmentsvaluesValueValueValue, $fileNameAttachment);

																		$downloadCompleteFlag = true;
																	}
																}
															}
														}
													}
												}
											}
										}
									}

								}
							}
							if($downloadCompleteFlag == true)
							{
								//Download is complete
								//Let us send an email with the link
								$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Sending Email for Attachments : " . $leadID . ' -- ' .  $getValueAttachments . " ') where id = " . $loggingID;
								$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
								$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);

								printLog_cron_reminder('Lead Attachments Sending Email for Details : '. $leadID . ' - ' . $getValueAttachments);
								//echo('Lead Attachments Sending Email for Details : '. $leadID . ' - ' . $getValueAttachments);

								//Let us build the dynamic URL for download link
								//WFMAXDownloadFiles.php?form=ContentServicesDigitalBriefForm&auth=cnnjasdijSADSbaks7t34lknfd398saksjkas487&leadID=2678842
								$downloadAttachmentsURLLink = $system->SETTINGS['siteurl'] . "V3WFMAXDownloadFiles.php?form=" . $validateFormName . "&auth=" . $validateAuthCode . "&leadID=" . $leadID;
								// send message with Download details
								$emailer = new email_class();
								$emailer->assign_vars(array(
										'BODYEMAIL' => $emailBodyDetails,
										'BODYEMAILSUBMITTER' => $bodyemailsubmitter,
										'FORMNAME' => $emailFormname,
										'WFMAXLEADLINK' => 'https://my.workflowmax.com/lead/view.aspx?id='.$leadID,
										'LEADID' => $leadID,
										'DOWNLOADLINK' => '<p class="">Download Attachments: <a target="_blank" href="'.$downloadAttachmentsURLLink.'">Click here</a></p>',
										'SITEURL' => $system->SETTINGS['siteurl'],
										'SITENAME' => $system->SETTINGS['sitename']
										));

								//Send email to Studio Team
								$emailer->email_sender($emailNotificationReciepients, 'emailNotificationConfirmation.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
								printLog_cron_reminder('Lead Attachments Sending Email to Foodstuffs for Details - Sent Success: '. $leadID . ' - ' . $getValueAttachments);

								//Send a copy to NZWSSL Team BCC
								$emailer->email_sender($emailNotificationReciepientsBCC, 'emailNotificationConfirmation.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
								printLog_cron_reminder('Lead Attachments Sending Email to Foodstuffs for Details - Sent Success: '. $leadID . ' - ' . $getValueAttachments);

								//Send email to submitter
								// COMMENTEDLOCAL
								$emailer->email_sender($emailNotificationSubmitter, 'emailNotificationSubmitter.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
								printLog_cron_reminder('Lead Attachments Sending Email to Submitter for Details - Sent Success: '. $leadID . ' - ' . $getValueAttachments);
								

								$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Sending Email for Attachments - Sent Success : " . $leadID . ' -- ' .  $getValueAttachments . " ') where id = " . $loggingID;
								$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
								$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);

								//echo('Lead Attachments Sending Email for Details - Sent Success : '. $leadID . ' - ' . $getValueAttachments);
							}


							printLog_cron_reminder('Lead Attachments Key Parameters JSON Values : '. $leadID . ' - End of attachment Management - ');
							$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Processing Attachments Complete ') where id = " . $loggingID;
							$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
							$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);
						}
						//If there are no attachments then send confirmation notification without attachment 
						if($downloadCompleteFlag == false)
						{
							// send message with Download details
							$emailer = new email_class();
							$emailer->assign_vars(array(
									'BODYEMAIL' => $emailBodyDetails,
									'FORMNAME' => $emailFormname,
									'WFMAXLEADLINK' => 'https://my.workflowmax.com/lead/view.aspx?id='.$leadID,
									'BODYEMAILSUBMITTER' => $bodyemailsubmitter,
									'LEADID' => $leadID,
									'DOWNLOADLINK' => '<p class="">Download Attachments: None Supplied</p>',
									'SITEURL' => $system->SETTINGS['siteurl'],
									'SITENAME' => $system->SETTINGS['sitename']
									));
							$emailer->email_sender($emailNotificationReciepients, 'emailNotificationConfirmation.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
							printLog_cron_reminder('Lead Sending Email to Foodstuffs for Details - Sent Success: '. $leadID . ' - ' . $emailNotificationReciepients);

							//Send a copy to NZWSSL Team BCC
							$emailer->email_sender($emailNotificationReciepientsBCC, 'emailNotificationConfirmation.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
							printLog_cron_reminder('Lead Sending Email to Foodstuffs for Details - Sent Success: '. $leadID . ' - ' . $emailNotificationReciepients);

							//Send email to submitter
							//COMMENTEDLOCAL
							$emailer->email_sender($emailNotificationSubmitter, 'emailNotificationSubmitter.php', 'JobBrief' . ' - ' . $emailSubjectPrefixName . ' | ' . $emailSubjectPrefixBrand .  ' | ' . ' Lead has been submitted - Lead ID#' . $leadID );
							printLog_cron_reminder('Lead Sending Email to Submitter for Details - Sent Success: '. $leadID . ' - ' . $emailNotificationSubmitter);
							
						}
					}

				}


			}//END OF ALL THE LOGIC BASED ON SUCCESS FLAG

			$queryupdatecronlogging_8 = "UPDATE " . $DBPrefix . "cron_logging SET message = concat(message, ' <br> " . DisplayDateTime(time()) . " : Cron Completed Successfully ') where id = " . $loggingID;
			$resupdatecronlogging_8 = mysqli_query($dbconnect, $queryupdatecronlogging_8);
			$system->check_mysql($resupdatecronlogging_8, $queryupdatecronlogging_8, __LINE__, __FILE__);


			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ACTUAL WORKFLOWMAX LOGIC ENDS HERE ************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			//****************************** ***************************** *******************************************************
			printLog_cron_reminder('**************************************** --------- ACTUAL WORKFLOWMAX LOGIC ENDS HERE --------- ***************************************');

			printLog_cron_reminder('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');
			printLog_cron_reminder('End Time is : ' . DisplayDateTime(time()));

			// finish cron script
			printLog_cron_reminder ("=========================== ENDING CRON: " . DisplayDateTime(time()) . "\n");
			closeLogFile_cron_reminder();

		}// END OF THE ELSE BLOCK FOR BUSINESS LOGIC FOR LOADING DATA in WFMAX

}// END OF ELSE Check given state against previously stored one to mitigate CSRF attack //if (empty($_GET['code'])) 



?>