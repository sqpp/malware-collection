<?php
/**
* @package yrno2
* @author Robert Went
* @website http://www.robertwent.com
* @email i@robertwent.com
* @copyright 2012 All rights reserved
* @license GPL 2.0
**/

// no direct access
defined('_JEXEC') or die('Restricted access');

class modyrno2Helper
{

}
//allow for checking post requests
$jinput = JFactory::getApplication()->input;
//*****************************************
// CONFIG START

// Units
$useC = $params->get('degrees');  // Use Celsius, else F
$tUnit = ($params->get('degrees') == '1') ? '&deg;C' : '&deg;F';        // Temp units
$speed = $params->get('speed'); // Use Mph, if both KMH and MPH is zero is default m/s used
if ($speed == '0'){
$useKMH = 0;
$useMPH = 0;
$wUnit = 'm/s';
}else if ($speed == '1'){
$useKMH = 0;
$useMPH = 1;
$wUnit = 'mph';
}elseif ($speed == '2'){
$useKMH = 1;
$useMPH = 0;
$wUnit = 'kmh';
}
$useHPA = $params->get('pressure');;        // Use hPa, else inHg
if ($useHPA == 1){
$pUnit = 'hPa';
}else{
$pUnit = 'inHg';
}
$useMM= $params->get('depth');        // Use mm, else in
if ($useMM == 1){
$dUnit = 'mm';
}else{
$dUnit = 'in';
}
$moduleclass_sfx = $params->get('moduleclass_sfx','');
// Timesettings, normal PHP/date-tags used
$datestyle = $params->get('date'); // "d.m.Y"  // Style of short date
$timestyle = $params->get('time'); //"H:i";        // Style of time
$longdate = $params->get('longdate'); //"d.m.Y H:i";    // Style of long time + date
$deftz = $params->get('timezone');   //default timezone
$fixedloc = $params->get('fixedloc'); //1 location
$loctype = $params->get('loctype');   //location type
$qarefetchSeconds = $params->get('cache'); //cache time
$geonameusr = $params->get('geoname'); // IMPORTANT! You need to signup at geonames.org (FREE), put username here
//info settings
$showlast = $params->get('showlast'); // last update
$shownext = $params->get('shownext'); // next update
$showlatlon = $params->get('showlatlon'); // show lat/lon
$showalt = $params->get('showalt'); // show altitude
// Cachesettings etc. settings
$qarefetchSeconds = $params->get('cache');    // How often it refresh the cache, 3600 recommended
$imgdir = "modules/mod_yrno2/images/";    // Icons-folder
$jsfolder = "modules/mod_yrno2/js/";
$cssfolder = "modules/mod_yrno2/css/";
$cachefolder = JPATH_BASE."/cache/yrno2/";
if (!class_exists('JFolder')){
jimport('joomla.filesystem.folder');
}
if (!JFolder::exists($cachefolder)){
mkdir("$cachefolder");
}
//end config

//language strings
define('YRDESC',JText::_('Intro Text'));
define('YRSEA',JText::_('Choose place'));
define('TEMPERA',JText::_('Temperature'));
define('PRESSUR',JText::_('Pressure'));
define('PRECIPA',JText::_('Precipitation'));
define('RAINA',JText::_('Precipitation'));
define('WINDA',JText::_('Wind'));
define('HUMIDA',JText::_('Humidity'));
define('CLOUDS',JText::_('Clouds'));
define('SMOG',JText::_('Fog'));
define('FORECAST_FOR',JText::_('Forecast for'));
define('NEARBYCAMS',JText::_('Nearby webcams'));
define('LASTUPD',JText::_('Last update'));
define('NEXTUPD',JText::_('Next update'));
define('HTMLLOC',JText::_('Click for your location'));
define('CAMSBY',JText::_('Webcams provided by'));
define('SAVEFAVO',JText::_('Save as favorite'));
define('TODAY',JText::_('Today'));
define('TOMORROW',JText::_('Tomorrow'));
define('SOLAR',JText::_('Solar Radiation'));
define('THUNDER',JText::_('Probability of Thunder'));
define('SNOW',JText::_('Snow Depth'));
define('RAINSHO',JText::_('Rain/Showers'));
define('DEW',JText::_('Dew Point'));
define('SUN',JText::_("Sunday"));
define('MON',JText::_("Monday"));
define('TUE',JText::_("Tuesday"));
define('WED',JText::_("Wednesday"));
define('THU',JText::_("Thursday"));
define('FRI',JText::_("Friday"));
define('SAT',JText::_("Saturday"));
//end language
//define date formats for use in functions
define('DATE',$datestyle);


$days = array(SUN,MON,TUE,WED,THU,FRI,SAT);

//build select boxes/lists
if ($fixedloc == 0){
if ($loctype == 0){
//locations for list
$listlocs = $params->get('listlocs');
$listlocs = explode(',',$listlocs);
//create locations select list
$loc_select = '<form name="locations_list" action="javascript:codeAddress()">
<label for="yr-city">' . YRSEA . ' </label>
<select name="yr-city" id="yr-address">';
//count how many places
$manyloc = count($listlocs);
//create a select for each
for ($i = 0; $i < $manyloc; $i++) {
$loc_select .= '<option value="' . $listlocs[$i] . '">' . $listlocs[$i] . '</option>'."\n";
}
$loc_select .= '</select>';

$loc_select .= '<input type="submit" value="submit" style="width:80px"/>
';
$loc_select .= '</form><p>&nbsp;</p>';
//end of locations list
}

//google lookup
if ($loctype == 1){
$loc_select = '
<form action="javascript:codeAddress()">
<label for="yr-address">' . YRSEA . ' </label>
    <input id="yr-address" type="textbox" value=""><br />
    <input type="submit" value="Submit" style="width:80px">
    </form>
    <!--<p id="list"></p>-->';
}

//geonames.org
if ($loctype == 2){
$loc_select ='
<label for="yr-country">' . YRSEA . ' </label>
<select id="yr-country" name="country" style="width: 150px;"><option> -- Choose -- </option><option value="AD">Andorra</option><option value="AE">United Arab Emirates</option><option value="AF">Afghanistan</option><option value="AG">Antigua and Barbuda</option><option value="AI">Anguilla</option><option value="AL">Albania</option><option value="AM">Armenia</option><option value="AN">Netherlands Antilles</option><option value="AO">Angola</option><option value="AQ">Antarctica</option><option value="AR">Argentina</option><option value="AS">American Samoa</option><option value="AT">Austria</option><option value="AU">Australia</option><option value="AW">Aruba</option><option value="AX">Aland Islands</option><option value="AZ">Azerbaijan</option><option value="BA">Bosnia and Herzegovina</option><option value="BB">Barbados</option><option value="BD">Bangladesh</option><option value="BE">Belgium</option><option value="BF">Burkina Faso</option><option value="BG">Bulgaria</option><option value="BH">Bahrain</option><option value="BI">Burundi</option><option value="BJ">Benin</option><option value="BM">Bermuda</option><option value="BN">Brunei</option><option value="BO">Bolivia</option><option value="BR">Brazil</option><option value="BS">Bahamas</option><option value="BT">Bhutan</option><option value="BV">Bouvet Island</option><option value="BW">Botswana</option><option value="BY">Belarus</option><option value="BZ">Belize</option><option value="CA">Canada</option><option value="CC">Cocos Islands</option><option value="CD">The Democratic Republic Of Congo</option><option value="CF">Central African Republic</option><option value="CG">Congo</option><option value="CH">Switzerland</option><option value="CI">C&ocirc;te d\'Ivoire</option><option value="CK">Cook Islands</option><option value="CL">Chile</option><option value="CM">Cameroon</option><option value="CN">China</option><option value="CO">Colombia</option><option value="CR">Costa Rica</option><option value="CS">Serbia and Montenegro</option><option value="CU">Cuba</option><option value="CV">Cape Verde</option><option value="CX">Christmas Island</option><option value="CY">Cyprus</option><option value="CZ">Czech Republic</option><option value="DE">Germany</option><option value="DJ">Djibouti</option><option value="DK">Denmark</option><option value="DM">Dominica</option><option value="DO">Dominican Republic</option><option value="DZ">Algeria</option><option value="EC">Ecuador</option><option value="EE">Estonia</option><option value="EG">Egypt</option><option value="EH">Western Sahara</option><option value="ER">Eritrea</option><option value="ES">Spain</option><option value="ET">Ethiopia</option><option value="FI">Finland</option><option value="FJ">Fiji</option><option value="FK">Falkland Islands</option><option value="FM">Micronesia</option><option value="FO">Faroe Islands</option><option value="FR">France</option><option value="GA">Gabon</option><option value="GB">United Kingdom</option><option value="GD">Grenada</option><option value="GE">Georgia</option><option value="GF">French Guiana</option><option value="GH">Ghana</option><option value="GI">Gibraltar</option><option value="GL">Greenland</option><option value="GM">Gambia</option><option value="GN">Guinea</option><option value="GP">Guadeloupe</option><option value="GQ">Equatorial Guinea</option><option value="GR">Greece</option><option value="GS">South Georgia And The South Sandwich Islands</option><option value="GT">Guatemala</option><option value="GU">Guam</option><option value="GW">Guinea-Bissau</option><option value="GY">Guyana</option><option value="HK">Hong Kong</option><option value="HM">Heard Island And McDonald Islands</option><option value="HN">Honduras</option><option value="HR">Croatia</option><option value="HT">Haiti</option><option value="HU">Hungary</option><option value="ID">Indonesia</option><option value="IE">Ireland</option><option value="IL">Israel</option><option value="IN">India</option><option value="IO">British Indian Ocean Territory</option><option value="IQ">Iraq</option><option value="IR">Iran</option><option value="IS">Iceland</option><option value="IT">Italy</option><option value="JM">Jamaica</option><option value="JO">Jordan</option><option value="JP">Japan</option><option value="KE">Kenya</option><option value="KG">Kyrgyzstan</option><option value="KH">Cambodia</option><option value="KI">Kiribati</option><option value="KM">Comoros</option><option value="KN">Saint Kitts And Nevis</option><option value="KP">North Korea</option><option value="KR">South Korea</option><option value="KW">Kuwait</option><option value="KY">Cayman Islands</option><option value="KZ">Kazakhstan</option><option value="LA">Laos</option><option value="LB">Lebanon</option><option value="LC">Saint Lucia</option><option value="LI">Liechtenstein</option><option value="LK">Sri Lanka</option><option value="LR">Liberia</option><option value="LS">Lesotho</option><option value="LT">Lithuania</option><option value="LU">Luxembourg</option><option value="LV">Latvia</option><option value="LY">Libya</option><option value="MA">Morocco</option><option value="MC">Monaco</option><option value="MD">Moldova</option><option value="MG">Madagascar</option><option value="MH">Marshall Islands</option><option value="MK">Macedonia</option><option value="ML">Mali</option><option value="MM">Myanmar</option><option value="MN">Mongolia</option><option value="MO">Macao</option><option value="MP">Northern Mariana Islands</option><option value="MQ">Martinique</option><option value="MR">Mauritania</option><option value="MS">Montserrat</option><option value="MT">Malta</option><option value="MU">Mauritius</option><option value="MV">Maldives</option><option value="MW">Malawi</option><option value="MX">Mexico</option><option value="MY">Malaysia</option><option value="MZ">Mozambique</option><option value="NA">Namibia</option><option value="NC">New Caledonia</option><option value="NE">Niger</option><option value="NF">Norfolk Island</option><option value="NG">Nigeria</option><option value="NI">Nicaragua</option><option value="NL">Netherlands</option><option value="NO">Norway</option><option value="NP">Nepal</option><option value="NR">Nauru</option><option value="NU">Niue</option><option value="NZ">New Zealand</option><option value="OM">Oman</option><option value="PA">Panama</option><option value="PE">Peru</option><option value="PF">French Polynesia</option><option value="PG">Papua New Guinea</option><option value="PH">Philippines</option><option value="PK">Pakistan</option><option value="PL">Poland</option><option value="PM">Saint Pierre And Miquelon</option><option value="PN">Pitcairn</option><option value="PR">Puerto Rico</option><option value="PS">Palestine</option><option value="PT">Portugal</option><option value="PW">Palau</option><option value="PY">Paraguay</option><option value="QA">Qatar</option><option value="RE">Reunion</option><option value="RO">Romania</option><option value="RU">Russia</option><option value="RW">Rwanda</option><option value="SA">Saudi Arabia</option><option value="SB">Solomon Islands</option><option value="SC">Seychelles</option><option value="SD">Sudan</option><option value="SE">Sweden</option><option value="SG">Singapore</option><option value="SH">Saint Helena</option><option value="SI">Slovenia</option><option value="SJ">Svalbard And Jan Mayen</option><option value="SK">Slovakia</option><option value="SL">Sierra Leone</option><option value="SM">San Marino</option><option value="SN">Senegal</option><option value="SO">Somalia</option><option value="SR">Suriname</option><option value="ST">Sao Tome And Principe</option><option value="SV">El Salvador</option><option value="SY">Syria</option><option value="SZ">Swaziland</option><option value="TC">Turks And Caicos Islands</option><option value="TD">Chad</option><option value="TF">French Southern Territories</option><option value="TG">Togo</option><option value="TH">Thailand</option><option value="TJ">Tajikistan</option><option value="TK">Tokelau</option><option value="TL">Timor-Leste</option><option value="TM">Turkmenistan</option><option value="TN">Tunisia</option><option value="TO">Tonga</option><option value="TR">Turkey</option><option value="TT">Trinidad and Tobago</option><option value="TV">Tuvalu</option><option value="TW">Taiwan</option><option value="TZ">Tanzania</option><option value="UA">Ukraine</option><option value="UG">Uganda</option><option value="UM">United States Minor Outlying Islands</option><option value="US">United States</option><option value="UY">Uruguay</option><option value="UZ">Uzbekistan</option><option value="VA">Vatican</option><option value="VC">Saint Vincent And The Grenadines</option><option value="VE">Venezuela</option><option value="VG">British Virgin Islands</option><option value="VI">U.S. Virgin Islands</option><option value="VN">Vietnam</option><option value="VU">Vanuatu</option><option value="WF">Wallis And Futuna</option><option value="WS">Samoa</option><option value="YE">Yemen</option><option value="YT">Mayotte</option><option value="ZA">South Africa</option><option value="ZM">Zambia</option><option value="ZW">Zimbabwe</option></select>
<input id="yr-city" />
';
}
}

//calculate number of columns
$colCount = (2 + $params->get('showicon') + $params->get('showtemp') + $params->get('showprec') + $params->get('showpres') + $params->get('showwind') + $params->get('showhumi') + $params->get('showclou') + $params->get('showsmog'));

//check for cookie
if ($params->get('cookie') == 1){
$mc = parse_url($_SERVER['HTTP_REFERER']);
$MH = $mc['host'];
if (($params->get('cookie') == 1)&&($loctype != 0)){
$frcid = false;
if(isset($_COOKIE["yrfav-fi"]) && !is_numeric($lat)){
$q = explode("|",$_COOKIE["yrfav-fi"]);
$lat = $q[0];
$lon = $q[1];
$cit = $q[2];
$cou = $q[3];
$cod = $q[4];
$frcid = $lat.'|'.$lon.'|'.$cit.'|'.$cou.'|'.$cod;
}
}
}
//check for geolocation
if ($params->get('geoloc') == 1){
$lat = $q[1];
$lon = $q[2];
}
//check for previous query string - already been to other pages so don't want cookie or default
$currentp = (parse_url($_SERVER["REQUEST_URI"], PHP_URL_QUERY));
if (isset($currentp)){
$q = $_SERVER["QUERY_STRING"];
$q = explode("|",$q);
$lat = $q[1];
$lon = $q[2];
$tz = $q[3];
$cit = $q[4];
$cou = $q[5];
$cod = $q[6];
}
else{
// Default place
$cod = $params->get('code');      //default country code
$cou = $params->get('country');   //default country
$cit = $params->get('city');      //default city
$lat = $params->get('lat');       //default lattitude
$lon = $params->get('lon');       //default lonitude
}

date_default_timezone_set($tz);
$qacacheName = $cachefolder.md5($lat.$lon).'.xml';
$URLS = "http://api.yr.no/weatherapi/locationforecast/1.8/?lat=$lat&lon=$lon";    // URL to the ENGLISH page on yr.no where location is
//$URLS = "http://api.yr.no/weatherapi/locationforecast/1.8/?lat=52.95477&lon=-1.158086";    // URL to the ENGLISH page on yr.no where location is

// refresh cached copy of page if needed
// fetch/cache code by Tom at carterlake.org

if ($useC) { $uomtemp = "&deg;C"; } else { $uomtemp = "&deg;F"; }
if ($useKMH) { $uomwind = " km/h"; } else if ($useMPH) { $uomwind = " mph"; } else { $uomwind = " m/s";}
if ($useHPA) { $uombaro = " hPa"; } else { $uombaro = " inHg"; }
if ($useMM) { $uomrain = " mm"; } else { $uomrain = " in"; }

//echo 'urls='.$URLS;
function fetchqaUrlWithoutHanging($url) // thanks to Tom at Carterlake.org for this script fragment
   {

		//$url = str_replace('?', CHR(146), $url);

		$postdata = http_build_query(
		    array('Amount' => '1')
		);

        //replace fopen
 $curl_handler = curl_init($url);

        curl_setopt($curl_handler, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($curl_handler, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($curl_handler, CURLOPT_POST, TRUE);
        curl_setopt($curl_handler, CURLOPT_POSTFIELDS, $postdata);

        curl_setopt($curl_handler, CURLOPT_FOLLOWLOCATION, TRUE);
        curl_setopt($curl_handler, CURLOPT_HEADER, FALSE);
        curl_setopt($curl_handler, CURLOPT_RETURNTRANSFER, TRUE);
        $output = curl_exec($curl_handler);
        curl_close($curl_handler);
        return $output;

   }    // end function

if (file_exists($qacacheName) and filemtime($qacacheName) + $qarefetchSeconds > time()) {
      $html = implode('', file($qacacheName));
      echo "<!-- using cached file $qacacheName-->\n";
    } else {
      $html = fetchqaUrlWithoutHanging($URLS);
      $fp = file_put_contents($qacacheName, $html);
      chmod($qacacheName, 0666);
      echo "<!-- using fresh file -->\n";
     }

$xml=xml2ary($html);
$xml = $xml['weatherdata'][_c];
$forecasts = $xml[product][_c][time];

//echo '<pre>'.print_r($xml).'</pre>';
if(isset($xml[meta][_c][model][0][_a])){
$meta = $xml[meta][_c][model][0][_a];
}else{
$meta = $xml[meta][_c][model][_a];
}
$lupd = $meta[runended];
$lupd = date($longdate, parse_time($lupd));
$nupd = $meta[nextrun];
$nupd = date($longdate, parse_time($nupd));

$howmany = count($forecasts);

$a = 0;
$last = 0;
$offset = date('Z');
$e = 0;
$prea = 0;
$nordic = false;
for ($i = 0; $i < $howmany; $i++) {

if(isset($forecasts[$i][_c][location][_c][temperature][_a][value])){
    //convert windspeed
if ($useKMH) {
$forecasts[$i][_c][location][_c][windSpeed][_a][mps] = MStoKMH($forecasts[$i][_c][location][_c][windSpeed][_a][mps]);
$forecasts[$i][_c][location][_c][windSpeed][_a][name] = "km/h";
}else if ($useMPH) {
$forecasts[$i][_c][location][_c][windSpeed][_a][mps] = MStoMPH($forecasts[$i][_c][location][_c][windSpeed][_a][mps]);
$forecasts[$i][_c][location][_c][windSpeed][_a][name] = "mph";
}
    //convert temps
if ($useC == 0){
    //convert degrees c to degrees F
     $forecasts[$i][_c][location][_c][temperature][_a][value] = CtoF($forecasts[$i][_c][location][_c][temperature][_a][value]);
}
    //convert pressure
if ($useHPA == 0){
    //convert hPa to inHg
    $forecasts[$i][_c][location][_c][pressure][_a][value] = HPAtoIN($forecasts[$i][_c][location][_c][pressure][_a][value]);
}
    //convert precip
if ($useMM == 0){
    //convert in inches
    $forecasts[$i+$pr][_c][location][_c][precipitation][_a][value] = mmToin($forecasts[$i+$pr][_c][location][_c][precipitation][_a][value]);
}
$now = $i;
$diff = $now - $last;
$validfr = $forecasts[$i][_a][from];
$jstime = ((strtotime($validfr)+$offset)*1000);

$everysec = false;
if(($diff == 5||$a == 0) && isset($forecasts[$i+3][_c][location][_c][precipitation][_a][value])){
$pr = 2;
$nordic = true;
$rbar = "3200000";
$prec = $forecasts[$i+1][_c][location][_c][precipitation][_a][minvalue];
$mprec = $forecasts[$i+1][_c][location][_c][precipitation][_a][maxvalue];
if ($useMM == 0){
    $prec = mmToin($prec);
    $mprec = mmToin($mprec);
}
$temps.='['.$jstime.',"'.$forecasts[$i][_c][location][_c][temperature][_a][value].'"],';
$baros.='['.$jstime.',"'.$forecasts[$i][_c][location][_c][pressure][_a][value].'"],';
$winds.='['.$jstime.','.$forecasts[$i][_c][location][_c][windSpeed][_a][mps].'],';
if($mprec > 0){
$rains.='['.$jstime.','.$prec.'],';
$mrains.='['.$jstime.','.$mprec.'],';
$precs[] = $mprec;
}
if($e%2!=1){
$everysec = true;
}
$e++;
} elseif(($diff == 3||$a == 0) && isset($forecasts[$i+2][_c][location][_c][precipitation][_a][value])){
$pr = 1;
if($nordic == false){$rbar = "8500000";
$prec = $forecasts[$i+$pr][_c][location][_c][precipitation][_a][minvalue];
$mprec = $forecasts[$i+$pr][_c][location][_c][precipitation][_a][maxvalue];
if ($useMM == 0){
    $prec = mmToin($prec);
    $mprec = mmToin($mprec);
}
$temps.='['.$jstime.',"'.$forecasts[$i][_c][location][_c][temperature][_a][value].'"],';
$baros.='['.$jstime.',"'.$forecasts[$i][_c][location][_c][pressure][_a][value].'"],';
$winds.='['.$jstime.','.$forecasts[$i][_c][location][_c][windSpeed][_a][mps].'],';
if($prec > 0){
$rains.='['.$jstime.','.$prec.'],';
$mrains.='['.$jstime.','.$mprec.'],';
$precs[] = $mprec;
}
}
}else{
$pr = 1;
}

if($everysec == false){
$yrfr[$a]['dir'] = $forecasts[$i][_c][location][_c][windDirection][_a][deg];
$yrfr[$a]['dirname'] = $forecasts[$i][_c][location][_c][windDirection][_a][name];
$yrfr[$a]['spd'] = $forecasts[$i][_c][location][_c][windSpeed][_a][mps];
$yrfr[$a]['spdname'] = $forecasts[$i][_c][location][_c][windSpeed][_a][name];
$yrfr[$a]['temp'] = $forecasts[$i][_c][location][_c][temperature][_a][value];
$yrfr[$a]['baro'] = $forecasts[$i][_c][location][_c][pressure][_a][value];
$yrfr[$a]['hum'] = $forecasts[$i][_c][location][_c][humidity][_a][value];
$yrfr[$a]['cloud'] = $forecasts[$i][_c][location][_c][cloudiness][_a][percent];
$yrfr[$a]['fog'] = $forecasts[$i][_c][location][_c][fog][_a][percent];
$yrfr[$a]['i'] = $i;
$icon = $forecasts[$i+$pr][_c][location][_c][symbol][_a][number];
$yrfr[$a]['precip'] = $forecasts[$i+$pr][_c][location][_c][precipitation][_a][value];
$yrfr[$a]['valid'] = strtotime($validfr);
$yrfr[$a]['validr'] = $validfr;
$validto = $forecasts[$i][_a][to];
$yrfr[$a]['validto'] = strtotime($validto);
$yrfr[$a]['validtor'] = $validto;
$fpday = checkday(strtotime($validfr));
if($fpday <> ''){$daychanges[] = (strtotime($validfr)+$offset)*1000;}
$sunstuff = '';
$sunstuff = yrsunstuff($lat,$lon,$icon,$yrfr[$a]['valid'],($offset/3600));
list($dayornight,$sunri,$sunse,$sunr,$suns,$icon) = $sunstuff;
$yrfr[$a]['icon'] = $icon;
$yrfr[$a]['sunri'] = $sunri;
$yrfr[$a]['sunse'] = $sunse;
$yrfr[$a]['debug'] = '<br/>|'.$lat.'|'.$lon.'|'.$dayornight.'|'.$icon.'|'.date('dmY H:i',$yrfr[$a]['valid']).'|';
$a++;
}
$last= $i;
} // EOF NEW
} // EOF LOOP

//get max precip for graph axis
if(count($precs)>0){
    $precmax = max($precs);
}else{
    $precmax = $precs;
}
if($precmax < 10) {
    $precmax = ($precmax*1.1);
}
elseif ($precmax > 10){
    $precmax = round($precmax*1.1);
}

//get pressure values for graph
if((count($baros)>0) && ($useHPA ==0)){
    $baromin = 29;
    $baromax = 33;
}else{
    $baromin = 960;
    $baromax = 1040;
    }
for($i=1;$i<count($daychanges);$i++) {
if($i == count($daychanges)-1) {
$ddays.= '{xaxis: { from: '.$daychanges[$i].', to: '.((strtotime($validto)+$offset)*1000).' }, color: "rgba(255, 255, 255, 0.2)" }';
} else {
$ddays.= '{xaxis: { from: '.$daychanges[$i].', to: '.$daychanges[$i+1].' }, color: "rgba(255, 255, 255, 0.2)" },';
}
$i++;
}
//webcam stuff
$dkcams = file_get_contents('http://api.webcams.travel/rest?method=wct.webcams.list_nearby&devid=16aa981f7a2bc7410759a4996c6608a6&lat='.$lat.'&lng='.$lon.'&per_page=25&page=1&format=php');
$data = unserialize($dkcams);
$howmanycams = count($data[webcams][webcam]);
$a = 0;
for($i=0;$i<$howmanycams;$i++){
$caurl = utf8_decode($data[webcams][webcam][$i][thumbnail_url]);
$caurl = str_replace("thumbnail","toenail",$caurl);

$ch = curl_init($caurl);
curl_setopt($ch, CURLOPT_NOBODY, true);
curl_exec($ch);
$retcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
// $retcode > 400 -> not found, $retcode = 200, found.
curl_close($ch);
if($retcode == 200){
$cams[$a][url] = $caurl;
$cams[$a][name] = $data[webcams][webcam][$i][title];
$a++;
}
}

$howmanycams = count($cams);
if($howmanycams > 0 && $howmanycams <= 3){
$cam = '<h4>'.NEARBYCAMS.'</h4>
<div class="aisbox" style="margin:15px 8px 15px 4px;padding:0 0 0 15px; border: 1px solid #cccccc; background: #f6f6f6;" class="ui-corner-all">
<div><table style="width:730px;margin:20px auto;"><tr>';
for($i=0;$i<$howmanycams;$i++){
$cam.='<td style="padding: 0 10px 0 10px;"><img src="'.$cams[$i][url].'" alt="" /><br/>'.utf8_decode($cams[$i][name]).'</td>'."\n";
}
$cam.='</tr></table></div>
</div>';
if ($params->get('camlink') == 1){
$cam .=CAMSBY.' <a href="http://www.webcams.travel" target="_new">Webcams Travel <span style="display:inline-block;" class="miscsprites extlink_gif"></span> </a><br/><br/>';
}
}
if($howmanycams > 3){
$cam .= '
<h4>'.NEARBYCAMS.'</h4>
<div class="aisbox" style="margin:15px 8px 15px 4px;padding:0 0 0 15px; border: 1px solid #cccccc; background: #f6f6f6;" class="ui-corner-all">
<ul id="mycarousel" class="jcarousel-skin-ie7"><li></li></ul>
</div>';
if ($params->get('camlink') == 1){
$cam .=CAMSBY.' <a href="http://www.webcams.travel" target="_new">Webcams Travel <span style="display:inline-block;" class="miscsprites extlink_gif"></span> </a><br/><br/>';
}
}

// ----------------------------functions -----------------------------------

function checkhum($val){
if($val == 0){return;}
else{return $val.'%';}
}

function checkcloud($val,$cval){
if($cval == 0){return;}
else{return $val.'%';}
}

function fixlat($raw){
if($raw < 0) { return str_replace("-","",$raw).'&deg; S';}
else{return $raw.'&deg; N';}
}
function fixlon($raw){
if($raw < 0) { return str_replace("-","",$raw).'&deg; W';}
else{return $raw.'&deg; E';}
}

function fixsun($sunri,$sunse){
$m = date('n');
if($sunri == "--" && ($m < 4 || $m > 9)){
return "Kaamosaika";
}elseif($sunri == "--" && $m > 4 && $m < 9){
return "Keskiyön aurinko";
}else{
return '<span style="display:inline-block;position:relative;top:4px;" class="miscsprites sun_up"></span><span>&nbsp;'.$sunri.'&nbsp;&nbsp;&nbsp;</span>
<span style="display:inline-block;position:relative;top:4px;" class="miscsprites sun_down"></span>&nbsp;<span>'.$sunse.'</span>';
}
}

function checkday($val){
global $lastday,$days;
$days = array(SUN,MON,TUE,WED,THU,FRI,SAT);
$datestyle = DATE;
$curr = date('z', time());
$va  = date('z', $val);
$vv  = date('w', $val);

$day = '';
if($va == $lastday){return $day;}
if($curr == $va) {
$day = TODAY;
} else if(($va-$curr) == 1 || $va == 0) {
$day = TOMORROW;
} else {
$day = $days[$vv].' '.date($datestyle,$val);
}
$lastday = $va;
return $day;
}

function fixtemp($val) {
$val = str_replace("-0","0",$val);
if($val<0){return str_replace("-","n",$val);}
else{return $val;}
}

function fixprecip($val){
if(($val > 0) &&($useMM == 1 )) {
return "$val mm";
} elseif (($val > 0) &&($useMM == 0 )){
return "$val in";
}else {
return "&nbsp;";
}
}

function MStoMPH ($ms, $prec=0) {
    $prec = (integer)$prec;
    $mph = (float)(2.236936292 * $ms);
    return round($mph, $prec);
}

function mmToin ($mm) {
  $in = $mm * .0394;
  return sprintf("%01.2f",$in);
}

function MStoKMH ($ms, $prec=0) {
    $prec = (integer)$prec;
    $kmh = (float)(3.6 * $ms);
    return round($kmh, $prec);
}

function HPAtoIN ($baro) {
    $ibaro = 0.0295333727 * $baro;
    return sprintf("%01.2f",$ibaro);
}

function CtoF ($cTemp, $prec=0) {
    $prec = (integer)$prec;
    $fTemp = (float)(1.8 * $cTemp) + 32;
    return round($fTemp, $prec);
}

function parse_daytime($raw) {
if($raw == 1) { $dttxt = NIGHT; }
if($raw == 2) { $dttxt = MORNING; }
if($raw == 3) { $dttxt = DAY; }
if($raw == 4) { $dttxt = EVENING; }
return $dttxt;
}

function wspeed($spd) {
$spd = round($spd);
if($spd == 0) { $spdtxt = CALM; }
if(($spd > 0) && ($spd < 1.4)) { $spdtxt = WWLIGHT; }
if(($spd > 1.4) && ($spd < 3.5)) { $spdtxt = WLIGHT; }
if(($spd >= 3.5) && ($spd < 5.5)) { $spdtxt = WBLIGHT; }
if(($spd >= 5.5) && ($spd < 8)) { $spdtxt = WMLIGHT; }
if(($spd >= 8) && ($spd < 13.9)) { $spdtxt = WMODERATE; }
if(($spd >= 13.9) && ($spd < 20.8)) { $spdtxt = WHARD; }
if($spd >= 20.8) { $spdtxt = WSTORM; }

return $spdtxt;
}

function parse_time($raw) {

$yr = substr($raw,0,4);
$mt = substr($raw,5,2);
$da = substr($raw,8,2);
$hr = substr($raw,11,2);
$mi = substr($raw,14,2);

$tm = mktime($hr,$mi,00,$mt,$da,$yr);
return $tm;
}

function parseToXML($htmlStr)
{
$xmlStr=str_replace('<','&lt;',$htmlStr);
$xmlStr=str_replace('>','&gt;',$xmlStr);
$xmlStr=str_replace('"','&quot;',$xmlStr);
$xmlStr=str_replace("'",'&#39;',$xmlStr);
$xmlStr=str_replace("&",'&amp;',$xmlStr);
return $xmlStr;
}

function parseTohtml($htmlStr)
{
$xmlStr=str_replace('<','&lt;',$htmlStr);
return $xmlStr;
}

function yrsunstuff($lat,$lon,$raw,$time,$offset){
/*$dl = date("I");
if ($dl == 1) {
$offset = "+2"; $toffset = 0;
} else {
$offset = "+1"; $toffset = 0;
}*/
$zenith=90+33/60;
$sunri = date_sunrise($time, SUNFUNCS_RET_STRING, $lat, $lon, $zenith, $offset);
$sunse = date_sunset($time, SUNFUNCS_RET_STRING, $lat, $lon, $zenith, $offset);
$sunrise_epoch = date_sunrise($time, SUNFUNCS_RET_TIMESTAMP, $lat, $lon, $zenith, $offset);
$sunset_epoch  = date_sunset($time, SUNFUNCS_RET_TIMESTAMP, $lat, $lon, $zenith, $offset);

if ($time >= $sunset_epoch or $time <= $sunrise_epoch) {
$dayornight = 'n';
} else {
$dayornight = '';
}
$micons = array('1', '2', '3', '5', '6', '7', '8');
if($dayornight == 'n' && in_array($raw,$micons)){
$raw = $raw.'n';
}

$sunr = strtotime($sunri);
$suns = strtotime($sunse);
$m = date('m');
if(($m > 4 && $m < 9) && ($sunri == '')) { $sunri = '--'; }
if(($m > 4 && $m < 9) && ($sunse == '')) { $sunse = '--'; }
if(($m > 9 && $m < 4) && ($sunse == '')) { $sunse = '--'; }
if(($m > 9 && $m < 4) && ($sunri == '')) { $sunri = '--'; }
if(($m > 4 && $m < 9) && ($sunri == '--')) { $raw = str_replace('n', '', $raw);$dayornight = ''; }
if(($m > 9 && $m < 4) && ($sunse == '--')) { $raw = str_replace('', 'n', $raw);$dayornight = 'n'; }

$ret = array($dayornight,$sunri,$sunse,$sunr,$suns,$raw);
return $ret;
}

// XML to Array
function xml2ary(&$string) {
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parse_into_struct($parser, $string, $vals, $index);
    xml_parser_free($parser);

    $mnary=array();
    $ary=&$mnary;
    foreach ($vals as $r) {
        $t=$r['tag'];
        if ($r['type']=='open') {
            if (isset($ary[$t])) {
                if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
                $cv=&$ary[$t][count($ary[$t])-1];
            } else $cv=&$ary[$t];
            if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
            $cv['_c']=array();
            $cv['_c']['_p']=&$ary;
            $ary=&$cv['_c'];

        } elseif ($r['type']=='complete') {
            if (isset($ary[$t])) { // same as open
                if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
                $cv=&$ary[$t][count($ary[$t])-1];
            } else $cv=&$ary[$t];
            if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
            $cv['_v']=(isset($r['value']) ? $r['value'] : '');

        } elseif ($r['type']=='close') {
            $ary=&$ary['_p'];
        }
    }

    _del_p($mnary);
    return $mnary;
}

// _Internal: Remove recursion in result array
function _del_p(&$ary) {
    foreach ($ary as $k=>$v) {
        if ($k==='_p') unset($ary[$k]);
        elseif (is_array($ary[$k])) _del_p($ary[$k]);
    }
}

// Array to XML
function ary2xml($cary, $d=0, $forcetag='') {
    $res=array();
    foreach ($cary as $tag=>$r) {
        if (isset($r[0])) {
            $res[]=ary2xml($r, $d, $tag);
        } else {
            if ($forcetag) $tag=$forcetag;
            $sp=str_repeat("\t", $d);
            $res[]="$sp<$tag";
            if (isset($r['_a'])) {foreach ($r['_a'] as $at=>$av) $res[]=" $at=\"$av\"";}
            $res[]=">".((isset($r['_c'])) ? "\n" : '');
            if (isset($r['_c'])) $res[]=ary2xml($r['_c'], $d+1);
            elseif (isset($r['_v'])) $res[]=$r['_v'];
            $res[]=(isset($r['_c']) ? $sp : '')."</$tag>\n";
        }

    }
    return implode('', $res);
}

// Insert element into array
function ins2ary(&$ary, $element, $pos) {
    $ar1=array_slice($ary, 0, $pos); $ar1[]=$element;
    $ary=array_merge($ar1, array_slice($ary, $pos));
}


// ----------------------------------------------------------

function fixsynsno($val) {
if($val == "0"){$val = '';}
if($val == "0 km"){$val = '';}
return $val;
}

function charset($word) {
$word = str_replace('æ', '&aelig;', $word);
$word = str_replace('ø', '&oslash;', $word);
$word = str_replace('å', '&aring;', $word);
$word = str_replace('ä', '&auml;', $word);
$word = str_replace('ö', '&ouml;', $word);
$word = str_replace('Å', '&Aring;', $word);
$word = str_replace('Ä', '&Auml;', $word);
$word = str_replace('Ö', '&Ouml;', $word);
$word = str_replace('Ø', '&Oslash;', $word);
$word = str_replace('À', '&Agrave;', $word);
$word = str_replace('à', '&agrave;', $word);
$word = str_replace('Â', '&Acirc;', $word);
$word = str_replace('â', '&acirc;', $word);
$word = str_replace('Æ', '&AElig;', $word);
$word = str_replace('Ç', '&Ccedil;', $word);
$word = str_replace('ç', '&ccedil;', $word);
$word = str_replace('È', '&Egrave;', $word);
$word = str_replace('è', '&egrave;', $word);
$word = str_replace('É', '&Eacute;', $word);
$word = str_replace('é', '&eacute;', $word);
$word = str_replace('Ê', '&Ecirc;', $word);
$word = str_replace('ê', '&ecirc;', $word);
$word = str_replace('Ë', '&Euml;', $word);
$word = str_replace('ë', '&euml;', $word);
$word = str_replace('Î', '&Icirc;', $word);
$word = str_replace('î', '&icirc;', $word);
$word = str_replace('Ï', '&Iuml;', $word);
$word = str_replace('ï', '&iuml;', $word);
$word = str_replace('Ô', '&Ocirc;', $word);
$word = str_replace('ô', '&ocirc;', $word);
$word = str_replace('', '&OElig;', $word);
$word = str_replace('', '&oelig;', $word);
$word = str_replace('Ù', '&Ugrave;', $word);
$word = str_replace('ù', '&ugrave;', $word);
$word = str_replace('Û', '&Ucirc;', $word);
$word = str_replace('û', '&ucirc;', $word);
$word = str_replace('Ü', '&Uuml;', $word);
$word = str_replace('ü', '&uuml;', $word);
$word = str_replace('«', '&laquo;', $word);
$word = str_replace('»', '&raquo;', $word);
$word = str_replace('', '&euro;', $word);
return $word;
}

function aksort(&$array,$valrev=false,$keyrev=false) {
  if ($valrev) { arsort($array); } else { asort($array); }
    $vals = array_count_values($array);
    $i = 0;
    foreach ($vals AS $val=>$num) {
        $first = array_splice($array,0,$i);
        $tmp = array_splice($array,0,$num);
        if ($keyrev) { krsort($tmp); } else { ksort($tmp); }
        $array = array_merge($first,$tmp,$array);
        unset($tmp);
        $i = $num;
    }
}

function removeline($name) {
$clen = strlen($name);
if ($clen > 14) {
$name = strstr($name, ',');
$name = str_replace(',', '', $name);
}
return $name;
}

function tempcolor($temp) {
if($temp <= 0) {
$tcolor = $params->get('row1');
} else {
$tcolor = $params->get('row2');
}
return $tcolor;
}

//get page url
function curPageURL() {
 $pageURL = 'http';
 if ($_SERVER["HTTPS"] == "on") {$pageURL .= "s";}
 $pageURL .= "://";
 if ($_SERVER["SERVER_PORT"] != "80") {
  $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
 } else {
  $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
 }
 $pageURL = substr($pageURL, 0, strpos($pageURL, '?'));
 return $pageURL;
}
$pagename = curPageURL();
//add scripts and css if needed
$howmany = count($yrfr);
$yrhead = '
<!--
if(!!!document.createElement(\'canvas\').getContext) {
document.write(\'<script src="http://cdn.nordicweather.net/excanvas.min.js"></scr\' + \'ipt>\');
}
//-->
<!--
jQuery(document).ready(function(){';
if (($params->get('cookie') == 1) &&($fixedloc == 0)){
$yrhead .= 'jQuery("#frcfav").click(function() {
jQuery.cookie("yrfav-fi", "'.$frcid.'", {expires: 365});
});';
}


//start geonames
$yrhead .= 'jQuery("#yr-country option[value='.$cod.']").attr("selected", "selected");
jQuery(".uibutton").button();

jQuery(function() {
jQuery("#yr-city").autocomplete({
   source: function( request, response ) {
     jQuery.ajax({
      url: "http://ws.geonames.org/searchJSON",
      dataType: "jsonp",
      data: {
        featureClass: "P",
        style: "full",
        maxRows: 20,
        name_startsWith: request.term,
        country: jQuery("#yr-country :selected").val(),
        username: "'.$geonameusr.'"
      },
      success: function( data ) {
        response( jQuery.map( data.geonames, function( item ) {
          return {
          label: item.name + (item.adminName1 ? ", " + item.adminName1 : ""),
          value: item.name,
          str: item.lat+"|"+item.lng+"|"+item.timezone.timeZoneId+"|"+encodeURIComponent(item.name)+"|"+encodeURIComponent(item.countryName)+"|"+encodeURIComponent(item.countryCode)
          }
        }));
      }
     });
    },
  minLength: 2,
  select: function( event, ui ) {
      window.location = "'.$pagename.'?|"+ui.item.str;
            },
      open: function() {
                jQuery( this ).removeClass( "ui-corner-all" ).addClass( "ui-corner-top" );
            },
      close: function() {
                jQuery( this ).removeClass( "ui-corner-top" ).addClass( "ui-corner-all" );
            }

});

});
';

if ($params->get('showgraph') == 1){
if($howmany>0){
$yrhead.= '
var temps = ['.substr($temps,0,-1).'];
var winds = ['.substr($winds,0,-1).'];
var rains = ['.substr($rains,0,-1).'];
var mrains = ['.substr($mrains,0,-1).'];
var baros = ['.substr($baros,0,-1).'];

var previousPoint = null;
jQuery("#TOTCHART").bind("plothover", owntool);
jQuery.plot(jQuery("#TOTCHART"),
        [{data:baros, lines: { show: true, fill: false, lineWidth: 2 },
        legend: {show: true},
        color: "#9ACD32",
        shadowSize: 0,yaxis:3,label:"'.PRESSUR.'"},
        {data:temps, lines: { show: true, fill: false, lineWidth: 2 },
        legend: {show: true},
        color: "#FF6D6D",
        threshold: { below: 0, color: "#87CEFA" },
        shadowSize: 0,
        label:"'.TEMPERA.'"},
        {data:mrains,
        legend: {show: false},
        stack: true,
        bars: { show: true,
        fill: true, opacity: 0.25,
        align: "right",barWidth: '.$rbar.',lineWidth:0 },
        color: "#4572A7",yaxis:2,},
        {data:rains,
        lines: { show: false,fill: true}, points:{ show: false },
        legend: {show: true},
        bars: { show: true,
        fill: true,
        align: "right",barWidth: '.$rbar.',lineWidth:0 },
        color: "#4572A7",
        yaxis:2,label:"'.PRECIPA.'"}
        ],
        {yaxes: [{minTickSize:1,tickDecimals:0,autoscaleMargin: 0.15},{min:0,max:'.$precmax.',alignTicksWithAxis: 1},
        {position: "right",min:'.$baromin.',max:'.$baromax.',alignTicksWithAxis: 1,tickLength: 0}],
        xaxes: [{ mode: "time",timeformat: "%H:%M",  tickSize: [6, "hour"] }
        ],
        grid: {tickColor: "#ddd", color:"#424242",  borderWidth: 1, borderColor: "#88BCCE",
        backgroundColor: { colors: ["#ddd", "#f2f2f2"] },hoverable: true, autoHighlight: true,
        markings: ['.$ddays.']},
        legend:{container: "#legenddiv", noColumns: 4}
        });

// FLOT TOOLS
function owntool(event, pos, item) {
        jQuery("#x").text(pos.x.toFixed(2));
        jQuery("#y").text(pos.y.toFixed(2));
        if (item) {
            var unit = "";
            if (previousPoint != item.datapoint) {
                previousPoint = item.datapoint;
                jQuery("#tooltip").remove();
                var x = item.datapoint[0].toFixed(3);
                var y = item.datapoint[1].toFixed(1);
                var hy = new Date(x*1);
                var ho = hy.getUTCHours();
                var mi = hy.getUTCMinutes();
                if(mi<10){mi = "0"+mi;}
                if(item.series.label == "'.TEMPERA.'") { var unit = "'.$tUnit.'"; }
                if(item.series.label == null) { item.series.label = "'.PRECIPA.'";var unit = " '.$tUnit.'"; }
                if(item.series.label == "'.DEW.'") { var unit = "&deg;C"; }
                if(item.series.label == "'.RAINSHO.'") { var unit = " '.$dUnit.'"; }
                if(item.series.label == "'.PRECIPA.'") { var unit = " '.$dUnit.'"; }
                if(item.series.label == "'.SOLAR.'") { var unit = " w/m&sup2;"; y = item.datapoint[1].toFixed(0);}
                if(item.series.label == "'.THUNDER.'") { var unit = "%"; y = item.datapoint[1].toFixed(0);}
                if(item.series.label == "'.SNOW.'") { var unit = " cm"; y = item.datapoint[1].toFixed(0);}
                if(item.series.label == "'.WINDA.'") { var unit = " m/s"; y = item.datapoint[1].toFixed(0);}
                if(item.series.label == "'.PRESSUR.'") { var unit = " '.$pUnit.'"; y = item.datapoint[1].toFixed(1);}
                showTooltip(item.pageX, item.pageY,
                "<b>"+item.series.label+"</b><br/>"+ ho + ":"+mi+"<br/><b>"+y+unit+"</b>");
            }
        }else{
            jQuery("#tooltip").remove();
            previousPoint = null;
            }
}

function showTooltip(x, y, contents) {
        jQuery("<div id=\'tooltip\'>" + contents + "</div>").css({position: "absolute",display: "none",
        top: y + 12,left: x + 12,opacity: 0.90}).appendTo("body").fadeIn(200);
}
';
}
}
$yrhead.= '
});
//-->
';
if ($params->get('showcams') == 1){
$camscript='
<!-- jCarousel library -->
<!--
    var mycarousel_itemList = [
';

for($i=0;$i<$howmanycams;$i++) {
 $title= addslashes(utf8_decode($cams[$i][name]));
 $title=charset($title);
 if($i<>($howmanycams-1)){
 $camscript .= "{ url: '".$cams[$i][url]."', title: '".$title."' },\n";
 } else {
 $camscript.= "{ url: '".$cams[$i][url]."', title: '".$title."' }\n";
 }
 }

$camscript .= '
    ];

    /* circular loop functions */
    function mycarousel_itemVisibleInCallback(carousel, item, i, state, evt) {
        // The index() method calculates the index from a
        // given index who is out of the actual item range.
        var idx = carousel.index(i, mycarousel_itemList.length);
        carousel.add(i, mycarousel_getItemHTML(mycarousel_itemList[idx - 1]));
    };

    function mycarousel_itemVisibleOutCallback(carousel, item, i, state, evt) {
        carousel.remove(i);
    };

    /* auto advance functions */
    function mycarousel_initCallback(carousel) {
        // Disable autoscrolling if the user clicks the prev or next button.
        carousel.buttonNext.bind(\'click\', function() {
            carousel.startAuto(0);
        });
        carousel.buttonPrev.bind(\'click\', function() {
            carousel.startAuto(0);
        });
        // Pause autoscrolling if the user moves with the cursor over the clip.
        carousel.clip.hover(function() {
           carousel.stopAuto();
        }, function() {
           carousel.startAuto();
        });
    };

    /**
    * Item html creation helper.
    */

    function mycarousel_getItemHTML(item) {
        var url_m = item.url.replace(/toenail/g, \'webcam\');
        var html = \'<div class="carousel_box"><img class="img_stateless" src="\' + item.url + \'" border="0" style="height:120px;width:160px;"/><div style="test-align:center">\' + item.title + \'</div></div>\';
        return html;
    };


    jQuery(document).ready(function() {
        jQuery(\'#mycarousel\').jcarousel({
            wrap: \'circular\',
            itemVisibleInCallback: { onBeforeAnimation: mycarousel_itemVisibleInCallback },
            itemVisibleOutCallback: { onAfterAnimation: mycarousel_itemVisibleOutCallback },
            auto: 7,
            initCallback: mycarousel_initCallback
        });

        jQuery(\'#showMultiSearch\').click(function() {
            $(\'#basicSearchBox\').hide();
            $(\'#multiSearchBox\').fadeIn(\'slow\');
            $(\'#ctl00_Main_tbBasicSearch\').val("");
        });

        jQuery(\'#showBasicSearch\').click(function() {
            $(\'#multiSearchBox\').hide();
            $(\'#basicSearchBox\').fadeIn(\'slow\');
            $(\'#ctl00_Main_tbMultiSearch\').val("");
        });
    });
//-->
';
}
if (($fixedloc == 0) && ($params->get('html5loc') == 1)){
$geoscript = '
jQuery(document).ready(function () {
    // wire up button click
    jQuery("#go").click(function () {
        // test for presence of geolocation
        if (navigator && navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(geo_success, geo_error);
        } else {
            error("Geolocation is not supported.");
        }
    });
});

function geo_success(position) {
    printLatLon(position.coords.latitude, position.coords.longitude);
}

// The PositionError object returned contains the following attributes:
// code: a numeric response code
// PERMISSION_DENIED = 1
// POSITION_UNAVAILABLE = 2
// TIMEOUT = 3
// message: Primarily for debugging. It is recommended not to show this error
// to users.
function geo_error(err) {
    if (err.code == 1) {
        error("The user denied the request for location information.")
    } else if (err.code == 2) {
        error("Your location information is unavailable.")
    } else if (err.code == 3) {
        error("The request to get your location timed out.")
    } else {
        error("An unknown error occurred while requesting your location.")
    }
}

// output lat and long
function printLatLon(lat, lon) {
    // now get the name of the place from reverse geocoding from
     //google maps API
    geocoder = new google.maps.Geocoder();
    var latlng = new google.maps.LatLng(lat,lon);
     geocoder.geocode({"latLng": latlng}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
             var addressArray = results[0].address_components;
           for(var i=0,len=addressArray.length;i<len;i++){
                  var addressComps  = addressArray[i], types = addressArray[i].types , city, state, country, zone;
               if (types.indexOf("locality") != -1){
                   city = addressComps.long_name;
               }
               if (types.indexOf("administrative_area_level_1") != -1){
                   state = addressComps.short_name;
               }
               if (types.indexOf("country") != -1){
                   country = addressComps.short_name;
               }
               zone = jstz.determine();
           }
         // alert("Lat: " + lat + "  Lon: " + lon + " Zone " + zone.name() + "Country " + country + " state " + state + " city " + city );
          window.location = "'.$pagename.'?|" + lat + "|" +lon + "|" + zone.name() + "|" + city + "|" + state + "|" + country;
      } else {
          alert("Geocoder failed due to: " + status);
      }
    });
}

function error(msg) {
    alert(msg);
}
';
}
if (($fixedloc == 0) && ($loctype == 0) | ($loctype == 1)){
$googlescript = '
function codeAddress()
  {
  geocoder = new google.maps.Geocoder();
    var address = document.getElementById("yr-address").value;
    geocoder.geocode({ "address": address}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        document.getElementById("yr-address").value = "";
       // alert (+address+"<br>"+results[0].geometry.location);
       lat = results[0].geometry.location.lat();
       lon = results[0].geometry.location.lng();
       var addressArray = results[0].address_components;
           for(var i=0,len=addressArray.length;i<len;i++){
                  var addressComps  = addressArray[i], types = addressArray[i].types , city, state, country, zone;
               if (types.indexOf("locality") != -1){
                   city = addressComps.long_name;
               }
               if (types.indexOf("administrative_area_level_1") != -1){
                   state = addressComps.short_name;
               }
               if (types.indexOf("country") != -1){
                   country = addressComps.short_name;
               }
               zone = jstz.determine();
               }
      // document.getElementById("list").innerHTML += "<hr>"+address+"<br>"+city+"<br>"+results[0].geometry.location.lat() + results[0].geometry.location.lng();
          window.location = "'.$pagename.'?|" + lat + "|" +lon + "|" + zone.name() + "|" + city + "|" + state + "|" + country;
      } else {
        alert("Geocode was not successful for the following reason: " + status);
      }
    });
  }
';
}
$doc = &JFactory::getDocument();
if ($params->get('jqcss') == 1){
$doc->addStyleSheet('modules/mod_yrno2/css/jquery.ui.own.css');
}
if ($params->get('css') == 1){
$doc->addStyleSheet('modules/mod_yrno2/css/yr.css');
}
if ($params->get('jquery') == 1){
	echo '<script src="/modules/mod_yrno2/js/jquery.1.6.4.min.js" type="text/javascript"></script>';
	echo '<script src="/modules/mod_yrno2/js/jquery.noconflict.js" type="text/javascript"></script>';
}
if ($params->get('jqueryui') == 1){
	echo '<script src="/modules/mod_yrno2/js/jquery.ui.1.9.min.js?2.01" type="text/javascript"></script>';
}
if ($params->get('showgraph') == 1){
	echo '<script src="/modules/mod_yrno2/js/jquery.flot.js" type="text/javascript"></script>';
}
if ($params->get('showcams') == 1){
	echo '<script src="/modules/mod_yrno2/js/jquery.jcarousel.min.js" type="text/javascript"></script>';
}
if (($loctype == 0) | ($loctype == 1) | ($params->get('html5loc') == 1)){
	echo '<script src="https://www.google.com/jsapi" type="text/javascript"></script>';
	echo '<script src="http://maps.googleapis.com/maps/api/js?sensor=false" type="text/javascript"></script>';
	echo '<script src="/modules/mod_yrno2/js/jstz.min.js" type="text/javascript"></script>';
$doc->addScriptDeclaration($geoscript);
$doc->addScriptDeclaration($googlescript);
}

echo '<script>'.$yrhead.'</script>';

if ($params->get('showcams') == 1){
$doc->addScriptDeclaration($camscript);
}
//end scripts
?>