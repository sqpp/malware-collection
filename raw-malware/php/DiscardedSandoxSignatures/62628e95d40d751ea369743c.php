<?php 

    // commenting out this line because it seems to be causing issue for some.
    //defined('C5_EXECUTE') or die(_("Access Denied."));

    $raw_post_data = file_get_contents('php://input');
    $raw_post_array = explode('&', $raw_post_data);
    $myPost = array();
    foreach ($raw_post_array as $keyval) {
      $keyval = explode ('=', $keyval);
      if (count($keyval) == 2)
         $myPost[$keyval[0]] = urldecode($keyval[1]);
    }
    // read the post from PayPal system and add 'cmd'
    $req = 'cmd=_notify-validate';
    if(function_exists('get_magic_quotes_gpc')) {
       $get_magic_quotes_exists = true;
    } 
    foreach ($myPost as $key => $value) {        
       if($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) { 
            $value = urlencode(stripslashes($value)); 
       } else {
            $value = urlencode($value);
       }
       $req .= "&$key=$value";
    }

    if ($_GET['sandboxMode'] == 1) {
        $curl_url = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    } else {
        $curl_url = 'https://www.paypal.com/cgi-bin/webscr';
    }
    $ch = curl_init($curl_url);
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $req);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('User-Agent: XXXXXXXXXXXXXXXX', 'Connection: Close'));

    // In wamp like environments that do not come bundled with root authority certificates,
    // please download 'cacert.pem' from "http://curl.haxx.se/docs/caextract.html" and set the directory path 
    // of the certificate as shown below.
    // curl_setopt($ch, CURLOPT_CAINFO, dirname(__FILE__) . '/cacert.pem');
    if( !($res = curl_exec($ch)) ) {
        // error_log("Got " . curl_error($ch) . " when processing IPN data");
        curl_close($ch);
        exit;
    }
    curl_close($ch);

    if (strcmp ($res, "VERIFIED") == 0) {
        // assign posted variables to local variables
        $item_name = $_POST['item_name'];
        $business = $_POST['business'];
        $item_number = $_POST['item_number'];
        $payment_status = $_POST['payment_status'];
        $mc_gross = $_POST['mc_gross'];
        $payment_currency = $_POST['mc_currency'];
        $txn_id = $_POST['txn_id'];
        $receiver_email = $_POST['receiver_email'];
        $receiver_id = $_POST['receiver_id'];
        $quantity = $_POST['quantity'];
        $num_cart_items = $_POST['num_cart_items'];
        $payment_date = $_POST['payment_date'];
        $first_name = $_POST['first_name'];
        $last_name = $_POST['last_name'];
        $payment_type = $_POST['payment_type'];
        $payment_gross = $_POST['payment_gross'];
        $payment_fee = $_POST['payment_fee'];
        $settle_amount = $_POST['settle_amount'];
        $memo = $_POST['memo'];
        $payer_email = $_POST['payer_email'];
        $payer_phone = $_POST['contact_phone'];
        $txn_type = $_POST['txn_type'];
        $payer_status = $_POST['payer_status'];
        $address_street = $_POST['address_street'];
        $address_city = $_POST['address_city'];
        $address_state = $_POST['address_state'];
        $address_zip = $_POST['address_zip'];
        $address_country = $_POST['address_country'];
        $address_status = $_POST['address_status'];
        $item_number = $_POST['item_number'];
        $tax = $_POST['tax'];
        $option_name1 = $_POST['option_name1'];
        $option_selection1 = $_POST['option_selection1'];
        $option_name2 = $_POST['option_name2'];
        $option_selection2 = $_POST['option_selection2'];
        $for_auction = $_POST['for_auction'];
        $invoice = $_POST['invoice'];
        $custom = $_POST['custom'];
        $notify_version = $_POST['notify_version'];
        $verify_sign = $_POST['verify_sign'];
        $payer_business_name = $_POST['payer_business_name'];
        $payer_id =$_POST['payer_id'];
        $mc_currency = $_POST['mc_currency'];
        $mc_fee = $_POST['mc_fee'];
        $exchange_rate = $_POST['exchange_rate'];
        $settle_currency  = $_POST['settle_currency'];
        $parent_txn_id  = $_POST['parent_txn_id'];
        $pending_reason = $_POST['pending_reason'];
        $reason_code = $_POST['reason_code'];

        // subscription specific vars
        $subscr_id = $_POST['subscr_id'];
        $subscr_date = $_POST['subscr_date'];
        $subscr_effective  = $_POST['subscr_effective'];
        $period1 = $_POST['period1'];
        $period2 = $_POST['period2'];
        $period3 = $_POST['period3'];
        $amount1 = $_POST['amount1'];
        $amount2 = $_POST['amount2'];
        $amount3 = $_POST['amount3'];
        $mc_amount1 = $_POST['mc_amount1'];
        $mc_amount2 = $_POST['mc_amount2'];
        $mc_amount3 = $_POST['mc_amount3'];
        $recurring = $_POST['recurring'];
        $reattempt = $_POST['reattempt'];
        $retry_at = $_POST['retry_at'];
        $recur_times = $_POST['recur_times'];
        $username = $_POST['username'];
        $password = $_POST['password'];

        //auction specific vars

        $for_auction = $_POST['for_auction'];
        $auction_closing_date  = $_POST['auction_closing_date'];
        $auction_multi_item  = $_POST['auction_multi_item'];
        $auction_buyer_id  = $_POST['auction_buyer_id'];
        
        $db = Loader::db();
        $mh = Loader::helper('mail');

        // just a special case for a certain bug
	if ($receiver_email == 'info@leyburntourdefrancecaravanpark.com') {
            $receiver_email = 'info@leyburnpopupcaravanparks.com';
	}
        
        // see if receiver email address is in there...
        $qwery = "SELECT paypalAccount FROM btFormWithPaypalPayment WHERE paypalAccount = '" . mysql_real_escape_string(trim($receiver_email)) . "' LIMIT 1";
        $qwery_res = $db->Execute($qwery);
        $nam = $qwery_res->RecordCount();
        // If the payment receiver is someone other than the account defined in the block, then we should not allow this registration
        // for simplicity's sake, this is only checking whether the $receiver_email is in ANY of the blocks the client has created. that should be enough to minimize fraud
        if ($nam == 0) {
            // this is probably an attempt at fraud (appearing to have purchased something, but bad guy really sent money to his own account)
            // log fraud attempt
            $existingData = file_get_contents('../ipnlog.php');
            $myFile = '../ipnlog.php';
            $fh = fopen($myFile, 'w') or die("can't open file");
            $stringData = "<?php   /*\n-----------------------------------\n".date("c")."\nPayPal IPN Attempt Blocked\nAttempt was blocked because it appeared to be fraudulent (it came from " . $receiver_email . ").  If you know that this blocking is by mistake, please contact the creator of the concrete5 add-on called: Form With PayPal Payment.\n-------------------------------------\n\n\n";
            $stringData .= $existingData; 
            fwrite($fh, $stringData);
            fclose($fh);
            die ();
        }
        //check if transaction ID has been processed before
        if ($txn_type == 'subscr_signup') {
            $txn_or_subscr_id = $subscr_id;
            $transaction_type = "Subscription Signup";
        } else if ($txn_type == 'subscr_payment') {
            die(); // ignore these
        } else {
            // in this case, $txn_type should be 'web_accept'
            $txn_or_subscr_id = $txn_id;
            $transaction_type = "Single Payment";
        }
        $checkquery = "select transaction_id from btFormWithPaypalPaymentIPN where transaction_id='".$txn_or_subscr_id."'";
        $checkquery_res = $db->Execute($checkquery);
        $nm = $checkquery_res->RecordCount();
        if ($nm == 0) {
            // transaction ID hasn't been processed yet (so go ahead and process)
            $struery = "INSERT INTO btFormWithPaypalPaymentIPN (asID,amount,currency,quantity,first_name,last_name,memo,payment_status,transaction_type,transaction_id,payment_date) VALUES ('".mysql_real_escape_string($option_selection1)."','".mysql_real_escape_string($mc_gross)."','".mysql_real_escape_string($mc_currency)."','".mysql_real_escape_string($quantity)."','".mysql_real_escape_string($first_name)."','".mysql_real_escape_string($last_name)."','".mysql_real_escape_string($memo)."','".mysql_real_escape_string($payment_status)."','".mysql_real_escape_string($transaction_type)."','".mysql_real_escape_string($txn_or_subscr_id)."','".mysql_real_escape_string($payment_date)."')";
            $struery_res = $db->Execute($struery);

            $qy = "SELECT * FROM btFormWithPaypalPayment WHERE bID = '" . mysql_real_escape_string($option_selection2) . "' LIMIT 1";
            $qy_res = $db->Execute($qy);
            $fresu = $qy_res->fields;

            $form_responses = '';
            $qr = array();

            $questions_query = "SELECT question, msqID FROM btFormWithPaypalPaymentQuestions WHERE bID = '" . mysql_real_escape_string($option_selection2) . "'";
            $questions_result = $db->Execute($questions_query);
            while ($questions = $questions_result->FetchRow()) {
                $qr[$questions['msqID']] = $questions['question'];
            }

            $responses_query = "SELECT answer, answerLong, msqID FROM btFormWithPaypalPaymentAnswers WHERE asID = '" . mysql_real_escape_string($option_selection1) . "'";
            $responses_result = $db->Execute($responses_query);
            while ($responses = $responses_result->FetchRow()) {
                if ($responses['answer'] != '' || $responses['answerLong'] != '') {
                    $form_responses .= $qr[$responses['msqID']] . ": " . $responses['answer'] . $responses['answerLong'] . "\n";
                }
            }

            $payment_value_str = "";
            if ($txn_type == 'subscr_signup') {
                $period_arr = explode(' ', $period3);
                $period_mag = (int)$period_arr[0];
                $period_str = "";
                if ($period_mag == 1) {
                    $period_str = str_replace(
                        array(
                            'D',
                            'W',
                            'M',
                            'Y',
                        ),
                        array(
                            'day',
                            'week',
                            'month',
                            'year',
                        ),
                        trim($period_arr[1])
                    );
                } else {
                    $period_denom = str_replace(
                        array(
                            'D',
                            'W',
                            'M',
                            'Y',
                        ),
                        array(
                            'days',
                            'weeks',
                            'months',
                            'years',
                        ),
                        trim($period_arr[1])
                    );
                    $period_str = $period_arr[0] . ' ' . $period_denom;
                }
                $payment_value_str = $mc_amount3 . ' ' . $mc_currency . ' every ' . $period_str;
            } else {
                $payment_value_str = $mc_gross . ' ' . $mc_currency;
            }
            
            // send an email to payer?
            if ($fresu['confirmationEmail'] == 1) {
                // replace keywords for dynamic data (I covered a few variations of each keyword for usability purposes)
                $message = str_replace(
                    array(
                        '[Cardholder Name]',
                        '[cardholder name]',
                        '[CARDHOLDER NAME]',
                        '[Answers]',
                        '[answers]',
                        '[ANSWERS]',
                        '[Amount]',
                        '[amount]',
                        '[AMOUNT]',
                        '[Currency]', // for legacy purposes
                        '[currency]', // for legacy purposes
                        '[CURRENCY]', // for legacy purposes
                    ),
                    array(
                        $first_name.' '.$last_name,
                        $first_name.' '.$last_name,
                        $first_name.' '.$last_name,
                        $form_responses,
                        $form_responses,
                        $form_responses,
                        $payment_value_str,
                        $payment_value_str,
                        $payment_value_str,
                        '',
                        '',
                        '',
                    ),
                    $fresu['confirmationEmailBody']
                );
                $message = str_replace(array('\r', '\n'), array("\r", "\n"), $message);
                $mh->setSubject($fresu['confirmationEmailSubject']);
                $mh->setBody($message);
                $mh->to($payer_email);
                $mh->from($fresu['confirmationEmailFromAddress']);
                $mh->sendMail();
            }

            // do we need to send an email to the c5 admin?
            if ($fresu['notifyMeOnSubmission'] == 1) {					
                $message = "There has been a submission and payment on your Concrete5 form: \"" . $fresu['surveyName'] . "\".\n\nThe details are below:\n\nCardholder/Payer Name: ".$first_name." ".$last_name."\nAmount: ".$payment_value_str."\n".$form_responses."\n\nFor more details on this submission, go to the \"Forms With PayPal Results\" link on your Concrete5 dashboard under Reports.";
                $mh->setSubject("Form Submission and Payment");
                $mh->setBody($message);
                $mh->to($fresu['recipientEmail']);
                if (! empty($fresu['confirmationEmailFromAddress'])) {
                    // this from address has a better chance of working
                    $notify_from = $fresu['confirmationEmailFromAddress'];
                } else {
                    if (! empty($_SERVER['HTTP_HOST']) && $_SERVER['HTTP_HOST'] != 'localhost') {
                        $notify_from = "Forms.With.PayPal.Payment@" . preg_replace('/^www\./','', $_SERVER['SERVER_NAME']);
                    } else {
                        $notify_from = "Forms.With.PayPal.Payment@no-reply.com";
                    }
                }                
                $mh->from($notify_from);
                $mh->sendMail();
            }

            // log verified ipn
            $existingData = file_get_contents('../ipnlog.php');
            $myFile = '../ipnlog.php';
            $fh = fopen($myFile, 'w') or die("can't open file");
            $stringData = "<?php   /*\n-----------------------------------\n".date("c")."\nVERIFIED IPN\n$res\n $req\n $struery\n  -------------------------------------\n\n\n";
            $stringData .= $existingData; 
            fwrite($fh, $stringData);
            fclose($fh);
        } else {
            // log duplicate transaction
            $existingData = file_get_contents('../ipnlog.php');
            $myFile = '../ipnlog.php';
            $fh = fopen($myFile, 'w') or die("can't open file");
            $stringData = "<?php   /*\n-----------------------------------\n".date("c")."\nVERIFIED DUPLICATED TRANSACTION\n$res\n $req \n $struery\n -------------------------------------\n\n\n";
            $stringData .= $existingData; 
            fwrite($fh, $stringData);
            fclose($fh);
        }

    } else if (strcmp ($res, "INVALID") == 0) {
        // log for manual investigation
        // log invalid ipn
        $existingData = file_get_contents('../ipnlog.php');
        $myFile = '../ipnlog.php';
        $fh = fopen($myFile, 'w') or die("can't open file");
        $stringData = "<?php   /*\n-----------------------------------\n".date("c")."\nINVALID IPN\n$res\n $req\n-------------------------------------\n\n\n";
        $stringData .= $existingData; 
        fwrite($fh, $stringData);
        fclose($fh);
    }